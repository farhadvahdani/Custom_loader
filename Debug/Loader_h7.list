
Loader_h7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000494  24000004  24000004  00010004  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .ARM          00000008  24000498  24000498  00010498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .init_array   00000004  240004a0  240004a0  000104a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  240004a4  240004a4  000104a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000074  240004a8  240004a8  000104a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000011e4  2400051c  2400051c  0001051c  2**2
                  ALLOC
  6 .text         000182c0  24001700  24001700  00011700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  7 .Dev_info     000000c8  240199c0  240199c0  000399c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .rodata       00000060  24019a88  24019a88  00029a88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 ._user_heap_stack 00000600  24019ae8  24019ae8  00029ae8  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  00039a88  2**0
                  CONTENTS, READONLY
 11 .comment      00000043  00000000  00000000  00039ab6  2**0
                  CONTENTS, READONLY
 12 .debug_line   0001c4db  00000000  00000000  00039af9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 00000134  00000000  00000000  00055fd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   000142e4  00000000  00000000  00056108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003509  00000000  00000000  0006a3ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000011d8  00000000  00000000  0006d8f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0015635d  00000000  00000000  0006ead0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003893e  00000000  00000000  001c4e2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000d3c  00000000  00000000  001fd76b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004bd0  00000000  00000000  001fe4a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

24001700 <__do_global_dtors_aux>:
24001700:	b510      	push	{r4, lr}
24001702:	4c05      	ldr	r4, [pc, #20]	; (24001718 <__do_global_dtors_aux+0x18>)
24001704:	7823      	ldrb	r3, [r4, #0]
24001706:	b933      	cbnz	r3, 24001716 <__do_global_dtors_aux+0x16>
24001708:	4b04      	ldr	r3, [pc, #16]	; (2400171c <__do_global_dtors_aux+0x1c>)
2400170a:	b113      	cbz	r3, 24001712 <__do_global_dtors_aux+0x12>
2400170c:	4804      	ldr	r0, [pc, #16]	; (24001720 <__do_global_dtors_aux+0x20>)
2400170e:	f3af 8000 	nop.w
24001712:	2301      	movs	r3, #1
24001714:	7023      	strb	r3, [r4, #0]
24001716:	bd10      	pop	{r4, pc}
24001718:	2400051c 	.word	0x2400051c
2400171c:	00000000 	.word	0x00000000
24001720:	240199a4 	.word	0x240199a4

24001724 <frame_dummy>:
24001724:	b508      	push	{r3, lr}
24001726:	4b03      	ldr	r3, [pc, #12]	; (24001734 <frame_dummy+0x10>)
24001728:	b11b      	cbz	r3, 24001732 <frame_dummy+0xe>
2400172a:	4903      	ldr	r1, [pc, #12]	; (24001738 <frame_dummy+0x14>)
2400172c:	4803      	ldr	r0, [pc, #12]	; (2400173c <frame_dummy+0x18>)
2400172e:	f3af 8000 	nop.w
24001732:	bd08      	pop	{r3, pc}
24001734:	00000000 	.word	0x00000000
24001738:	24000520 	.word	0x24000520
2400173c:	240199a4 	.word	0x240199a4

24001740 <_stack_init>:
24001740:	f5a3 3a80 	sub.w	sl, r3, #65536	; 0x10000
24001744:	4770      	bx	lr
24001746:	bf00      	nop

24001748 <_mainCRTStartup>:
24001748:	4b17      	ldr	r3, [pc, #92]	; (240017a8 <_mainCRTStartup+0x60>)
2400174a:	2b00      	cmp	r3, #0
2400174c:	bf08      	it	eq
2400174e:	4b13      	ldreq	r3, [pc, #76]	; (2400179c <_mainCRTStartup+0x54>)
24001750:	469d      	mov	sp, r3
24001752:	f7ff fff5 	bl	24001740 <_stack_init>
24001756:	2100      	movs	r1, #0
24001758:	468b      	mov	fp, r1
2400175a:	460f      	mov	r7, r1
2400175c:	4813      	ldr	r0, [pc, #76]	; (240017ac <_mainCRTStartup+0x64>)
2400175e:	4a14      	ldr	r2, [pc, #80]	; (240017b0 <_mainCRTStartup+0x68>)
24001760:	1a12      	subs	r2, r2, r0
24001762:	f017 fe7a 	bl	2401945a <memset>
24001766:	4b0e      	ldr	r3, [pc, #56]	; (240017a0 <_mainCRTStartup+0x58>)
24001768:	2b00      	cmp	r3, #0
2400176a:	d000      	beq.n	2400176e <_mainCRTStartup+0x26>
2400176c:	4798      	blx	r3
2400176e:	4b0d      	ldr	r3, [pc, #52]	; (240017a4 <_mainCRTStartup+0x5c>)
24001770:	2b00      	cmp	r3, #0
24001772:	d000      	beq.n	24001776 <_mainCRTStartup+0x2e>
24001774:	4798      	blx	r3
24001776:	2000      	movs	r0, #0
24001778:	2100      	movs	r1, #0
2400177a:	0004      	movs	r4, r0
2400177c:	000d      	movs	r5, r1
2400177e:	480d      	ldr	r0, [pc, #52]	; (240017b4 <_mainCRTStartup+0x6c>)
24001780:	2800      	cmp	r0, #0
24001782:	d002      	beq.n	2400178a <_mainCRTStartup+0x42>
24001784:	480c      	ldr	r0, [pc, #48]	; (240017b8 <_mainCRTStartup+0x70>)
24001786:	f3af 8000 	nop.w
2400178a:	f017 ff11 	bl	240195b0 <__libc_init_array>
2400178e:	0020      	movs	r0, r4
24001790:	0029      	movs	r1, r5
24001792:	f000 faa1 	bl	24001cd8 <main>
24001796:	f017 fcaf 	bl	240190f8 <exit>
2400179a:	bf00      	nop
2400179c:	00080000 	.word	0x00080000
	...
240017ac:	2400051c 	.word	0x2400051c
240017b0:	24001700 	.word	0x24001700
	...
240017bc:	240004a8 	.word	0x240004a8
240017c0:	240004a8 	.word	0x240004a8
240017c4:	2400051c 	.word	0x2400051c
240017c8:	2400051c 	.word	0x2400051c
240017cc:	24001700 	.word	0x24001700

240017d0 <Init>:
 * @param  None
 * @retval  LOADER_OK = 1   : Operation succeeded
 * @retval  LOADER_FAIL = 0 : Operation failed
 */
int
Init(void) {
240017d0:	b580      	push	{r7, lr}
240017d2:	b086      	sub	sp, #24
240017d4:	af00      	add	r7, sp, #0

    *(uint32_t*)0xE000EDF0 = 0xA05F0000; //enable interrupts in debug
240017d6:	4b26      	ldr	r3, [pc, #152]	; (24001870 <Init+0xa0>)
240017d8:	4a26      	ldr	r2, [pc, #152]	; (24001874 <Init+0xa4>)
240017da:	601a      	str	r2, [r3, #0]


    SystemInit();
240017dc:	f001 f944 	bl	24002a68 <SystemInit>
     * change VTOR setting for other devices
     * SCB->VTOR = 0x20000000 | 0x200;
     *
     * */

    SCB->VTOR = 0x24000000 | 0x200;
240017e0:	4b25      	ldr	r3, [pc, #148]	; (24001878 <Init+0xa8>)
240017e2:	4a26      	ldr	r2, [pc, #152]	; (2400187c <Init+0xac>)
240017e4:	609a      	str	r2, [r3, #8]
240017e6:	2300      	movs	r3, #0
240017e8:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
240017ea:	693b      	ldr	r3, [r7, #16]
240017ec:	f383 8810 	msr	PRIMASK, r3
}
240017f0:	bf00      	nop

    __set_PRIMASK(0); //enable interrupts

    HAL_Init();
240017f2:	f001 fb65 	bl	24002ec0 <HAL_Init>

    SystemClock_Config();
240017f6:	f000 fae1 	bl	24001dbc <SystemClock_Config>

    MX_GPIO_Init();
240017fa:	f000 fa43 	bl	24001c84 <MX_GPIO_Init>

    __HAL_RCC_QSPI_FORCE_RESET();  //completely reset peripheral
240017fe:	4b20      	ldr	r3, [pc, #128]	; (24001880 <Init+0xb0>)
24001800:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
24001802:	4a1f      	ldr	r2, [pc, #124]	; (24001880 <Init+0xb0>)
24001804:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
24001808:	67d3      	str	r3, [r2, #124]	; 0x7c
    __HAL_RCC_QSPI_RELEASE_RESET();
2400180a:	4b1d      	ldr	r3, [pc, #116]	; (24001880 <Init+0xb0>)
2400180c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
2400180e:	4a1c      	ldr	r2, [pc, #112]	; (24001880 <Init+0xb0>)
24001810:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
24001814:	67d3      	str	r3, [r2, #124]	; 0x7c

    if (CSP_QUADSPI_Init() != HAL_OK) {
24001816:	f000 fc7f 	bl	24002118 <CSP_QUADSPI_Init>
2400181a:	4603      	mov	r3, r0
2400181c:	2b00      	cmp	r3, #0
2400181e:	d007      	beq.n	24001830 <Init+0x60>
24001820:	2301      	movs	r3, #1
24001822:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
24001824:	68fb      	ldr	r3, [r7, #12]
24001826:	f383 8810 	msr	PRIMASK, r3
}
2400182a:	bf00      	nop
        __set_PRIMASK(1); //disable interrupts
        return LOADER_FAIL;
2400182c:	2300      	movs	r3, #0
2400182e:	e01a      	b.n	24001866 <Init+0x96>
    }


    if (CSP_QSPI_EnableMemoryMappedMode() != HAL_OK) {
24001830:	f000 ff04 	bl	2400263c <CSP_QSPI_EnableMemoryMappedMode>
24001834:	4603      	mov	r3, r0
24001836:	2b00      	cmp	r3, #0
24001838:	d007      	beq.n	2400184a <Init+0x7a>
2400183a:	2301      	movs	r3, #1
2400183c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
2400183e:	68bb      	ldr	r3, [r7, #8]
24001840:	f383 8810 	msr	PRIMASK, r3
}
24001844:	bf00      	nop
        __set_PRIMASK(1); //disable interrupts
        return LOADER_FAIL;
24001846:	2300      	movs	r3, #0
24001848:	e00d      	b.n	24001866 <Init+0x96>
    }

    /*Trigger read access before HAL_QSPI_Abort() otherwise abort functionality gets stuck*/
    uint32_t a = *(uint32_t*) 0x90000000;
2400184a:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
2400184e:	681b      	ldr	r3, [r3, #0]
24001850:	617b      	str	r3, [r7, #20]
    a++;
24001852:	697b      	ldr	r3, [r7, #20]
24001854:	3301      	adds	r3, #1
24001856:	617b      	str	r3, [r7, #20]
24001858:	2301      	movs	r3, #1
2400185a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
2400185c:	687b      	ldr	r3, [r7, #4]
2400185e:	f383 8810 	msr	PRIMASK, r3
}
24001862:	bf00      	nop

    __set_PRIMASK(1); //disable interrupts
    return LOADER_OK;
24001864:	2301      	movs	r3, #1
}
24001866:	4618      	mov	r0, r3
24001868:	3718      	adds	r7, #24
2400186a:	46bd      	mov	sp, r7
2400186c:	bd80      	pop	{r7, pc}
2400186e:	bf00      	nop
24001870:	e000edf0 	.word	0xe000edf0
24001874:	a05f0000 	.word	0xa05f0000
24001878:	e000ed00 	.word	0xe000ed00
2400187c:	24000200 	.word	0x24000200
24001880:	58024400 	.word	0x58024400

24001884 <Write>:
 * @param   buffer : pointer to data buffer
 * @retval  LOADER_OK = 1       : Operation succeeded
 * @retval  LOADER_FAIL = 0 : Operation failed
 */
int
Write(uint32_t Address, uint32_t Size, uint8_t* buffer) {
24001884:	b580      	push	{r7, lr}
24001886:	b088      	sub	sp, #32
24001888:	af00      	add	r7, sp, #0
2400188a:	60f8      	str	r0, [r7, #12]
2400188c:	60b9      	str	r1, [r7, #8]
2400188e:	607a      	str	r2, [r7, #4]
24001890:	2300      	movs	r3, #0
24001892:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
24001894:	69fb      	ldr	r3, [r7, #28]
24001896:	f383 8810 	msr	PRIMASK, r3
}
2400189a:	bf00      	nop

    __set_PRIMASK(0); //enable interrupts

    if (HAL_QSPI_Abort(&hqspi) != HAL_OK) {
2400189c:	4815      	ldr	r0, [pc, #84]	; (240018f4 <Write+0x70>)
2400189e:	f012 fc92 	bl	240141c6 <HAL_QSPI_Abort>
240018a2:	4603      	mov	r3, r0
240018a4:	2b00      	cmp	r3, #0
240018a6:	d007      	beq.n	240018b8 <Write+0x34>
240018a8:	2301      	movs	r3, #1
240018aa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
240018ac:	69bb      	ldr	r3, [r7, #24]
240018ae:	f383 8810 	msr	PRIMASK, r3
}
240018b2:	bf00      	nop
        __set_PRIMASK(1); //disable interrupts
        return LOADER_FAIL;
240018b4:	2300      	movs	r3, #0
240018b6:	e019      	b.n	240018ec <Write+0x68>
    }


    if (CSP_QSPI_WriteMemory((uint8_t*) buffer, (Address & (0x0fffffff)), Size) != HAL_OK) {
240018b8:	68fb      	ldr	r3, [r7, #12]
240018ba:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
240018be:	68ba      	ldr	r2, [r7, #8]
240018c0:	4619      	mov	r1, r3
240018c2:	6878      	ldr	r0, [r7, #4]
240018c4:	f000 fe36 	bl	24002534 <CSP_QSPI_WriteMemory>
240018c8:	4603      	mov	r3, r0
240018ca:	2b00      	cmp	r3, #0
240018cc:	d007      	beq.n	240018de <Write+0x5a>
240018ce:	2301      	movs	r3, #1
240018d0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
240018d2:	697b      	ldr	r3, [r7, #20]
240018d4:	f383 8810 	msr	PRIMASK, r3
}
240018d8:	bf00      	nop
        __set_PRIMASK(1); //disable interrupts
        return LOADER_FAIL;
240018da:	2300      	movs	r3, #0
240018dc:	e006      	b.n	240018ec <Write+0x68>
240018de:	2301      	movs	r3, #1
240018e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
240018e2:	693b      	ldr	r3, [r7, #16]
240018e4:	f383 8810 	msr	PRIMASK, r3
}
240018e8:	bf00      	nop
    }

    __set_PRIMASK(1); //disable interrupts
    return LOADER_OK;
240018ea:	2301      	movs	r3, #1
}
240018ec:	4618      	mov	r0, r3
240018ee:	3720      	adds	r7, #32
240018f0:	46bd      	mov	sp, r7
240018f2:	bd80      	pop	{r7, pc}
240018f4:	2400153c 	.word	0x2400153c

240018f8 <SectorErase>:
 * @param   EraseEndAddress   :  erase end address
 * @retval  LOADER_OK = 1       : Operation succeeded
 * @retval  LOADER_FAIL = 0 : Operation failed
 */
int
SectorErase(uint32_t EraseStartAddress, uint32_t EraseEndAddress) {
240018f8:	b580      	push	{r7, lr}
240018fa:	b086      	sub	sp, #24
240018fc:	af00      	add	r7, sp, #0
240018fe:	6078      	str	r0, [r7, #4]
24001900:	6039      	str	r1, [r7, #0]
24001902:	2300      	movs	r3, #0
24001904:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
24001906:	697b      	ldr	r3, [r7, #20]
24001908:	f383 8810 	msr	PRIMASK, r3
}
2400190c:	bf00      	nop

    __set_PRIMASK(0); //enable interrupts

    if (HAL_QSPI_Abort(&hqspi) != HAL_OK) {
2400190e:	4814      	ldr	r0, [pc, #80]	; (24001960 <SectorErase+0x68>)
24001910:	f012 fc59 	bl	240141c6 <HAL_QSPI_Abort>
24001914:	4603      	mov	r3, r0
24001916:	2b00      	cmp	r3, #0
24001918:	d007      	beq.n	2400192a <SectorErase+0x32>
2400191a:	2301      	movs	r3, #1
2400191c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
2400191e:	693b      	ldr	r3, [r7, #16]
24001920:	f383 8810 	msr	PRIMASK, r3
}
24001924:	bf00      	nop
        __set_PRIMASK(1); //disable interrupts
        return LOADER_FAIL;
24001926:	2300      	movs	r3, #0
24001928:	e015      	b.n	24001956 <SectorErase+0x5e>
    }


    if (CSP_QSPI_EraseSector(EraseStartAddress, EraseEndAddress) != HAL_OK) {
2400192a:	6839      	ldr	r1, [r7, #0]
2400192c:	6878      	ldr	r0, [r7, #4]
2400192e:	f000 fdaf 	bl	24002490 <CSP_QSPI_EraseSector>
24001932:	4603      	mov	r3, r0
24001934:	2b00      	cmp	r3, #0
24001936:	d007      	beq.n	24001948 <SectorErase+0x50>
24001938:	2301      	movs	r3, #1
2400193a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
2400193c:	68fb      	ldr	r3, [r7, #12]
2400193e:	f383 8810 	msr	PRIMASK, r3
}
24001942:	bf00      	nop
        __set_PRIMASK(1); //disable interrupts
        return LOADER_FAIL;
24001944:	2300      	movs	r3, #0
24001946:	e006      	b.n	24001956 <SectorErase+0x5e>
24001948:	2301      	movs	r3, #1
2400194a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
2400194c:	68bb      	ldr	r3, [r7, #8]
2400194e:	f383 8810 	msr	PRIMASK, r3
}
24001952:	bf00      	nop
    }

    __set_PRIMASK(1); //disable interrupts
    return LOADER_OK;
24001954:	2301      	movs	r3, #1
}
24001956:	4618      	mov	r0, r3
24001958:	3718      	adds	r7, #24
2400195a:	46bd      	mov	sp, r7
2400195c:	bd80      	pop	{r7, pc}
2400195e:	bf00      	nop
24001960:	2400153c 	.word	0x2400153c

24001964 <MassErase>:
 * outputs   :
 *     none
 * Note: Optional for all types of device
 */
int
MassErase(void) {
24001964:	b580      	push	{r7, lr}
24001966:	b084      	sub	sp, #16
24001968:	af00      	add	r7, sp, #0
2400196a:	2300      	movs	r3, #0
2400196c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
2400196e:	68fb      	ldr	r3, [r7, #12]
24001970:	f383 8810 	msr	PRIMASK, r3
}
24001974:	bf00      	nop

    __set_PRIMASK(0); //enable interrupts

    if (HAL_QSPI_Abort(&hqspi) != HAL_OK) {
24001976:	4813      	ldr	r0, [pc, #76]	; (240019c4 <MassErase+0x60>)
24001978:	f012 fc25 	bl	240141c6 <HAL_QSPI_Abort>
2400197c:	4603      	mov	r3, r0
2400197e:	2b00      	cmp	r3, #0
24001980:	d007      	beq.n	24001992 <MassErase+0x2e>
24001982:	2301      	movs	r3, #1
24001984:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
24001986:	68bb      	ldr	r3, [r7, #8]
24001988:	f383 8810 	msr	PRIMASK, r3
}
2400198c:	bf00      	nop
        __set_PRIMASK(1); //disable interrupts
        return LOADER_FAIL;
2400198e:	2300      	movs	r3, #0
24001990:	e013      	b.n	240019ba <MassErase+0x56>
    }


    if (CSP_QSPI_Erase_Chip() != HAL_OK) {
24001992:	f000 fbf7 	bl	24002184 <CSP_QSPI_Erase_Chip>
24001996:	4603      	mov	r3, r0
24001998:	2b00      	cmp	r3, #0
2400199a:	d007      	beq.n	240019ac <MassErase+0x48>
2400199c:	2301      	movs	r3, #1
2400199e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
240019a0:	687b      	ldr	r3, [r7, #4]
240019a2:	f383 8810 	msr	PRIMASK, r3
}
240019a6:	bf00      	nop
        __set_PRIMASK(1); //disable interrupts
        return LOADER_FAIL;
240019a8:	2300      	movs	r3, #0
240019aa:	e006      	b.n	240019ba <MassErase+0x56>
240019ac:	2301      	movs	r3, #1
240019ae:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
240019b0:	683b      	ldr	r3, [r7, #0]
240019b2:	f383 8810 	msr	PRIMASK, r3
}
240019b6:	bf00      	nop
    }

    __set_PRIMASK(1); //disable interrupts
    return LOADER_OK;
240019b8:	2301      	movs	r3, #1
}
240019ba:	4618      	mov	r0, r3
240019bc:	3710      	adds	r7, #16
240019be:	46bd      	mov	sp, r7
240019c0:	bd80      	pop	{r7, pc}
240019c2:	bf00      	nop
240019c4:	2400153c 	.word	0x2400153c

240019c8 <CheckSum>:
 * outputs   :
 *     R0             : Checksum value
 * Note: Optional for all types of device
 */
uint32_t
CheckSum(uint32_t StartAddress, uint32_t Size, uint32_t InitVal) {
240019c8:	b480      	push	{r7}
240019ca:	b089      	sub	sp, #36	; 0x24
240019cc:	af00      	add	r7, sp, #0
240019ce:	60f8      	str	r0, [r7, #12]
240019d0:	60b9      	str	r1, [r7, #8]
240019d2:	607a      	str	r2, [r7, #4]
    uint8_t missalignementAddress = StartAddress % 4;
240019d4:	68fb      	ldr	r3, [r7, #12]
240019d6:	b2db      	uxtb	r3, r3
240019d8:	f003 0303 	and.w	r3, r3, #3
240019dc:	77fb      	strb	r3, [r7, #31]
    uint8_t missalignementSize = Size;
240019de:	68bb      	ldr	r3, [r7, #8]
240019e0:	77bb      	strb	r3, [r7, #30]
    int cnt;
    uint32_t Val;

    StartAddress -= StartAddress % 4;
240019e2:	68fb      	ldr	r3, [r7, #12]
240019e4:	f023 0303 	bic.w	r3, r3, #3
240019e8:	60fb      	str	r3, [r7, #12]
    Size += (Size % 4 == 0) ? 0 : 4 - (Size % 4);
240019ea:	68bb      	ldr	r3, [r7, #8]
240019ec:	f003 0303 	and.w	r3, r3, #3
240019f0:	2b00      	cmp	r3, #0
240019f2:	d005      	beq.n	24001a00 <CheckSum+0x38>
240019f4:	68bb      	ldr	r3, [r7, #8]
240019f6:	f003 0303 	and.w	r3, r3, #3
240019fa:	f1c3 0304 	rsb	r3, r3, #4
240019fe:	e000      	b.n	24001a02 <CheckSum+0x3a>
24001a00:	2300      	movs	r3, #0
24001a02:	68ba      	ldr	r2, [r7, #8]
24001a04:	4413      	add	r3, r2
24001a06:	60bb      	str	r3, [r7, #8]

    for (cnt = 0; cnt < Size; cnt += 4) {
24001a08:	2300      	movs	r3, #0
24001a0a:	61bb      	str	r3, [r7, #24]
24001a0c:	e0b3      	b.n	24001b76 <CheckSum+0x1ae>
        Val = *(uint32_t*) StartAddress;
24001a0e:	68fb      	ldr	r3, [r7, #12]
24001a10:	681b      	ldr	r3, [r3, #0]
24001a12:	617b      	str	r3, [r7, #20]
        if (missalignementAddress) {
24001a14:	7ffb      	ldrb	r3, [r7, #31]
24001a16:	2b00      	cmp	r3, #0
24001a18:	d040      	beq.n	24001a9c <CheckSum+0xd4>
            switch (missalignementAddress) {
24001a1a:	7ffb      	ldrb	r3, [r7, #31]
24001a1c:	2b03      	cmp	r3, #3
24001a1e:	d032      	beq.n	24001a86 <CheckSum+0xbe>
24001a20:	2b03      	cmp	r3, #3
24001a22:	f300 80a2 	bgt.w	24001b6a <CheckSum+0x1a2>
24001a26:	2b01      	cmp	r3, #1
24001a28:	d002      	beq.n	24001a30 <CheckSum+0x68>
24001a2a:	2b02      	cmp	r3, #2
24001a2c:	d019      	beq.n	24001a62 <CheckSum+0x9a>
24001a2e:	e09c      	b.n	24001b6a <CheckSum+0x1a2>
                case 1:
                    InitVal += (uint8_t) (Val >> 8 & 0xff);
24001a30:	697b      	ldr	r3, [r7, #20]
24001a32:	0a1b      	lsrs	r3, r3, #8
24001a34:	b2db      	uxtb	r3, r3
24001a36:	461a      	mov	r2, r3
24001a38:	687b      	ldr	r3, [r7, #4]
24001a3a:	4413      	add	r3, r2
24001a3c:	607b      	str	r3, [r7, #4]
                    InitVal += (uint8_t) (Val >> 16 & 0xff);
24001a3e:	697b      	ldr	r3, [r7, #20]
24001a40:	0c1b      	lsrs	r3, r3, #16
24001a42:	b2db      	uxtb	r3, r3
24001a44:	461a      	mov	r2, r3
24001a46:	687b      	ldr	r3, [r7, #4]
24001a48:	4413      	add	r3, r2
24001a4a:	607b      	str	r3, [r7, #4]
                    InitVal += (uint8_t) (Val >> 24 & 0xff);
24001a4c:	697b      	ldr	r3, [r7, #20]
24001a4e:	0e1b      	lsrs	r3, r3, #24
24001a50:	b2db      	uxtb	r3, r3
24001a52:	461a      	mov	r2, r3
24001a54:	687b      	ldr	r3, [r7, #4]
24001a56:	4413      	add	r3, r2
24001a58:	607b      	str	r3, [r7, #4]
                    missalignementAddress -= 1;
24001a5a:	7ffb      	ldrb	r3, [r7, #31]
24001a5c:	3b01      	subs	r3, #1
24001a5e:	77fb      	strb	r3, [r7, #31]
                    break;
24001a60:	e083      	b.n	24001b6a <CheckSum+0x1a2>
                case 2:
                    InitVal += (uint8_t) (Val >> 16 & 0xff);
24001a62:	697b      	ldr	r3, [r7, #20]
24001a64:	0c1b      	lsrs	r3, r3, #16
24001a66:	b2db      	uxtb	r3, r3
24001a68:	461a      	mov	r2, r3
24001a6a:	687b      	ldr	r3, [r7, #4]
24001a6c:	4413      	add	r3, r2
24001a6e:	607b      	str	r3, [r7, #4]
                    InitVal += (uint8_t) (Val >> 24 & 0xff);
24001a70:	697b      	ldr	r3, [r7, #20]
24001a72:	0e1b      	lsrs	r3, r3, #24
24001a74:	b2db      	uxtb	r3, r3
24001a76:	461a      	mov	r2, r3
24001a78:	687b      	ldr	r3, [r7, #4]
24001a7a:	4413      	add	r3, r2
24001a7c:	607b      	str	r3, [r7, #4]
                    missalignementAddress -= 2;
24001a7e:	7ffb      	ldrb	r3, [r7, #31]
24001a80:	3b02      	subs	r3, #2
24001a82:	77fb      	strb	r3, [r7, #31]
                    break;
24001a84:	e071      	b.n	24001b6a <CheckSum+0x1a2>
                case 3:
                    InitVal += (uint8_t) (Val >> 24 & 0xff);
24001a86:	697b      	ldr	r3, [r7, #20]
24001a88:	0e1b      	lsrs	r3, r3, #24
24001a8a:	b2db      	uxtb	r3, r3
24001a8c:	461a      	mov	r2, r3
24001a8e:	687b      	ldr	r3, [r7, #4]
24001a90:	4413      	add	r3, r2
24001a92:	607b      	str	r3, [r7, #4]
                    missalignementAddress -= 3;
24001a94:	7ffb      	ldrb	r3, [r7, #31]
24001a96:	3b03      	subs	r3, #3
24001a98:	77fb      	strb	r3, [r7, #31]
                    break;
24001a9a:	e066      	b.n	24001b6a <CheckSum+0x1a2>
            }
        } else if ((Size - missalignementSize) % 4 && (Size - cnt) <= 4) {
24001a9c:	7fbb      	ldrb	r3, [r7, #30]
24001a9e:	68ba      	ldr	r2, [r7, #8]
24001aa0:	1ad3      	subs	r3, r2, r3
24001aa2:	f003 0303 	and.w	r3, r3, #3
24001aa6:	2b00      	cmp	r3, #0
24001aa8:	d044      	beq.n	24001b34 <CheckSum+0x16c>
24001aaa:	69bb      	ldr	r3, [r7, #24]
24001aac:	68ba      	ldr	r2, [r7, #8]
24001aae:	1ad3      	subs	r3, r2, r3
24001ab0:	2b04      	cmp	r3, #4
24001ab2:	d83f      	bhi.n	24001b34 <CheckSum+0x16c>
            switch (Size - missalignementSize) {
24001ab4:	7fbb      	ldrb	r3, [r7, #30]
24001ab6:	68ba      	ldr	r2, [r7, #8]
24001ab8:	1ad3      	subs	r3, r2, r3
24001aba:	2b03      	cmp	r3, #3
24001abc:	d02f      	beq.n	24001b1e <CheckSum+0x156>
24001abe:	2b03      	cmp	r3, #3
24001ac0:	d853      	bhi.n	24001b6a <CheckSum+0x1a2>
24001ac2:	2b01      	cmp	r3, #1
24001ac4:	d002      	beq.n	24001acc <CheckSum+0x104>
24001ac6:	2b02      	cmp	r3, #2
24001ac8:	d018      	beq.n	24001afc <CheckSum+0x134>
24001aca:	e04e      	b.n	24001b6a <CheckSum+0x1a2>
                case 1:
                    InitVal += (uint8_t) Val;
24001acc:	697b      	ldr	r3, [r7, #20]
24001ace:	b2db      	uxtb	r3, r3
24001ad0:	461a      	mov	r2, r3
24001ad2:	687b      	ldr	r3, [r7, #4]
24001ad4:	4413      	add	r3, r2
24001ad6:	607b      	str	r3, [r7, #4]
                    InitVal += (uint8_t) (Val >> 8 & 0xff);
24001ad8:	697b      	ldr	r3, [r7, #20]
24001ada:	0a1b      	lsrs	r3, r3, #8
24001adc:	b2db      	uxtb	r3, r3
24001ade:	461a      	mov	r2, r3
24001ae0:	687b      	ldr	r3, [r7, #4]
24001ae2:	4413      	add	r3, r2
24001ae4:	607b      	str	r3, [r7, #4]
                    InitVal += (uint8_t) (Val >> 16 & 0xff);
24001ae6:	697b      	ldr	r3, [r7, #20]
24001ae8:	0c1b      	lsrs	r3, r3, #16
24001aea:	b2db      	uxtb	r3, r3
24001aec:	461a      	mov	r2, r3
24001aee:	687b      	ldr	r3, [r7, #4]
24001af0:	4413      	add	r3, r2
24001af2:	607b      	str	r3, [r7, #4]
                    missalignementSize -= 1;
24001af4:	7fbb      	ldrb	r3, [r7, #30]
24001af6:	3b01      	subs	r3, #1
24001af8:	77bb      	strb	r3, [r7, #30]
                    break;
24001afa:	e01a      	b.n	24001b32 <CheckSum+0x16a>
                case 2:
                    InitVal += (uint8_t) Val;
24001afc:	697b      	ldr	r3, [r7, #20]
24001afe:	b2db      	uxtb	r3, r3
24001b00:	461a      	mov	r2, r3
24001b02:	687b      	ldr	r3, [r7, #4]
24001b04:	4413      	add	r3, r2
24001b06:	607b      	str	r3, [r7, #4]
                    InitVal += (uint8_t) (Val >> 8 & 0xff);
24001b08:	697b      	ldr	r3, [r7, #20]
24001b0a:	0a1b      	lsrs	r3, r3, #8
24001b0c:	b2db      	uxtb	r3, r3
24001b0e:	461a      	mov	r2, r3
24001b10:	687b      	ldr	r3, [r7, #4]
24001b12:	4413      	add	r3, r2
24001b14:	607b      	str	r3, [r7, #4]
                    missalignementSize -= 2;
24001b16:	7fbb      	ldrb	r3, [r7, #30]
24001b18:	3b02      	subs	r3, #2
24001b1a:	77bb      	strb	r3, [r7, #30]
                    break;
24001b1c:	e009      	b.n	24001b32 <CheckSum+0x16a>
                case 3:
                    InitVal += (uint8_t) Val;
24001b1e:	697b      	ldr	r3, [r7, #20]
24001b20:	b2db      	uxtb	r3, r3
24001b22:	461a      	mov	r2, r3
24001b24:	687b      	ldr	r3, [r7, #4]
24001b26:	4413      	add	r3, r2
24001b28:	607b      	str	r3, [r7, #4]
                    missalignementSize -= 3;
24001b2a:	7fbb      	ldrb	r3, [r7, #30]
24001b2c:	3b03      	subs	r3, #3
24001b2e:	77bb      	strb	r3, [r7, #30]
                    break;
24001b30:	bf00      	nop
            switch (Size - missalignementSize) {
24001b32:	e01a      	b.n	24001b6a <CheckSum+0x1a2>
            }
        } else {
            InitVal += (uint8_t) Val;
24001b34:	697b      	ldr	r3, [r7, #20]
24001b36:	b2db      	uxtb	r3, r3
24001b38:	461a      	mov	r2, r3
24001b3a:	687b      	ldr	r3, [r7, #4]
24001b3c:	4413      	add	r3, r2
24001b3e:	607b      	str	r3, [r7, #4]
            InitVal += (uint8_t) (Val >> 8 & 0xff);
24001b40:	697b      	ldr	r3, [r7, #20]
24001b42:	0a1b      	lsrs	r3, r3, #8
24001b44:	b2db      	uxtb	r3, r3
24001b46:	461a      	mov	r2, r3
24001b48:	687b      	ldr	r3, [r7, #4]
24001b4a:	4413      	add	r3, r2
24001b4c:	607b      	str	r3, [r7, #4]
            InitVal += (uint8_t) (Val >> 16 & 0xff);
24001b4e:	697b      	ldr	r3, [r7, #20]
24001b50:	0c1b      	lsrs	r3, r3, #16
24001b52:	b2db      	uxtb	r3, r3
24001b54:	461a      	mov	r2, r3
24001b56:	687b      	ldr	r3, [r7, #4]
24001b58:	4413      	add	r3, r2
24001b5a:	607b      	str	r3, [r7, #4]
            InitVal += (uint8_t) (Val >> 24 & 0xff);
24001b5c:	697b      	ldr	r3, [r7, #20]
24001b5e:	0e1b      	lsrs	r3, r3, #24
24001b60:	b2db      	uxtb	r3, r3
24001b62:	461a      	mov	r2, r3
24001b64:	687b      	ldr	r3, [r7, #4]
24001b66:	4413      	add	r3, r2
24001b68:	607b      	str	r3, [r7, #4]
        }
        StartAddress += 4;
24001b6a:	68fb      	ldr	r3, [r7, #12]
24001b6c:	3304      	adds	r3, #4
24001b6e:	60fb      	str	r3, [r7, #12]
    for (cnt = 0; cnt < Size; cnt += 4) {
24001b70:	69bb      	ldr	r3, [r7, #24]
24001b72:	3304      	adds	r3, #4
24001b74:	61bb      	str	r3, [r7, #24]
24001b76:	69bb      	ldr	r3, [r7, #24]
24001b78:	68ba      	ldr	r2, [r7, #8]
24001b7a:	429a      	cmp	r2, r3
24001b7c:	f63f af47 	bhi.w	24001a0e <CheckSum+0x46>
    }

    return (InitVal);
24001b80:	687b      	ldr	r3, [r7, #4]
}
24001b82:	4618      	mov	r0, r3
24001b84:	3724      	adds	r7, #36	; 0x24
24001b86:	46bd      	mov	sp, r7
24001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
24001b8c:	4770      	bx	lr

24001b8e <Verify>:
 *     R0             : Operation failed (address of failure)
 *     R1             : Checksum value
 * Note: Optional for all types of device
 */
uint64_t
Verify(uint32_t MemoryAddr, uint32_t RAMBufferAddr, uint32_t Size, uint32_t missalignement) {
24001b8e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
24001b92:	b08c      	sub	sp, #48	; 0x30
24001b94:	af00      	add	r7, sp, #0
24001b96:	60f8      	str	r0, [r7, #12]
24001b98:	60b9      	str	r1, [r7, #8]
24001b9a:	607a      	str	r2, [r7, #4]
24001b9c:	603b      	str	r3, [r7, #0]
24001b9e:	2300      	movs	r3, #0
24001ba0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
24001ba2:	69fb      	ldr	r3, [r7, #28]
24001ba4:	f383 8810 	msr	PRIMASK, r3
}
24001ba8:	bf00      	nop

    __set_PRIMASK(0); //enable interrupts
    uint32_t VerifiedData = 0, InitVal = 0;
24001baa:	2300      	movs	r3, #0
24001bac:	62fb      	str	r3, [r7, #44]	; 0x2c
24001bae:	2300      	movs	r3, #0
24001bb0:	62bb      	str	r3, [r7, #40]	; 0x28
    uint64_t checksum;
    Size *= 4;
24001bb2:	687b      	ldr	r3, [r7, #4]
24001bb4:	009b      	lsls	r3, r3, #2
24001bb6:	607b      	str	r3, [r7, #4]

    if (CSP_QSPI_EnableMemoryMappedMode() != HAL_OK) {
24001bb8:	f000 fd40 	bl	2400263c <CSP_QSPI_EnableMemoryMappedMode>
24001bbc:	4603      	mov	r3, r0
24001bbe:	2b00      	cmp	r3, #0
24001bc0:	d00a      	beq.n	24001bd8 <Verify+0x4a>
24001bc2:	2301      	movs	r3, #1
24001bc4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
24001bc6:	69bb      	ldr	r3, [r7, #24]
24001bc8:	f383 8810 	msr	PRIMASK, r3
}
24001bcc:	bf00      	nop
        __set_PRIMASK(1); //disable interrupts
        return LOADER_FAIL;
24001bce:	f04f 0400 	mov.w	r4, #0
24001bd2:	f04f 0500 	mov.w	r5, #0
24001bd6:	e04d      	b.n	24001c74 <Verify+0xe6>
    }

    checksum = CheckSum((uint32_t) MemoryAddr + (missalignement & 0xf),
24001bd8:	683b      	ldr	r3, [r7, #0]
24001bda:	f003 020f 	and.w	r2, r3, #15
24001bde:	68fb      	ldr	r3, [r7, #12]
24001be0:	18d0      	adds	r0, r2, r3
                        Size - ((missalignement >> 16) & 0xF), InitVal);
24001be2:	683b      	ldr	r3, [r7, #0]
24001be4:	0c1b      	lsrs	r3, r3, #16
24001be6:	f003 030f 	and.w	r3, r3, #15
    checksum = CheckSum((uint32_t) MemoryAddr + (missalignement & 0xf),
24001bea:	687a      	ldr	r2, [r7, #4]
24001bec:	1ad3      	subs	r3, r2, r3
24001bee:	6aba      	ldr	r2, [r7, #40]	; 0x28
24001bf0:	4619      	mov	r1, r3
24001bf2:	f7ff fee9 	bl	240019c8 <CheckSum>
24001bf6:	4603      	mov	r3, r0
24001bf8:	2200      	movs	r2, #0
24001bfa:	469a      	mov	sl, r3
24001bfc:	4693      	mov	fp, r2
24001bfe:	e9c7 ab08 	strd	sl, fp, [r7, #32]
    while (Size > VerifiedData) {
24001c02:	e025      	b.n	24001c50 <Verify+0xc2>
        if (*(uint8_t*) MemoryAddr++
24001c04:	68fb      	ldr	r3, [r7, #12]
24001c06:	1c5a      	adds	r2, r3, #1
24001c08:	60fa      	str	r2, [r7, #12]
24001c0a:	781a      	ldrb	r2, [r3, #0]
            != *((uint8_t*) RAMBufferAddr + VerifiedData)) {
24001c0c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
24001c0e:	68bb      	ldr	r3, [r7, #8]
24001c10:	440b      	add	r3, r1
24001c12:	781b      	ldrb	r3, [r3, #0]
        if (*(uint8_t*) MemoryAddr++
24001c14:	429a      	cmp	r2, r3
24001c16:	d018      	beq.n	24001c4a <Verify+0xbc>
24001c18:	2301      	movs	r3, #1
24001c1a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
24001c1c:	697b      	ldr	r3, [r7, #20]
24001c1e:	f383 8810 	msr	PRIMASK, r3
}
24001c22:	bf00      	nop
            __set_PRIMASK(1); //disable interrupts
            return ((checksum << 32) + (MemoryAddr + VerifiedData));
24001c24:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
24001c28:	f04f 0200 	mov.w	r2, #0
24001c2c:	f04f 0300 	mov.w	r3, #0
24001c30:	0003      	movs	r3, r0
24001c32:	2200      	movs	r2, #0
24001c34:	68f8      	ldr	r0, [r7, #12]
24001c36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
24001c38:	4401      	add	r1, r0
24001c3a:	2000      	movs	r0, #0
24001c3c:	4688      	mov	r8, r1
24001c3e:	4681      	mov	r9, r0
24001c40:	eb12 0408 	adds.w	r4, r2, r8
24001c44:	eb43 0509 	adc.w	r5, r3, r9
24001c48:	e014      	b.n	24001c74 <Verify+0xe6>
        }
        VerifiedData++;
24001c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
24001c4c:	3301      	adds	r3, #1
24001c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (Size > VerifiedData) {
24001c50:	687a      	ldr	r2, [r7, #4]
24001c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
24001c54:	429a      	cmp	r2, r3
24001c56:	d8d5      	bhi.n	24001c04 <Verify+0x76>
24001c58:	2301      	movs	r3, #1
24001c5a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
24001c5c:	693b      	ldr	r3, [r7, #16]
24001c5e:	f383 8810 	msr	PRIMASK, r3
}
24001c62:	bf00      	nop
    }

    __set_PRIMASK(1); //disable interrupts
    return (checksum << 32);
24001c64:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
24001c68:	f04f 0400 	mov.w	r4, #0
24001c6c:	f04f 0500 	mov.w	r5, #0
24001c70:	0015      	movs	r5, r2
24001c72:	2400      	movs	r4, #0
}
24001c74:	4622      	mov	r2, r4
24001c76:	462b      	mov	r3, r5
24001c78:	4610      	mov	r0, r2
24001c7a:	4619      	mov	r1, r3
24001c7c:	3730      	adds	r7, #48	; 0x30
24001c7e:	46bd      	mov	sp, r7
24001c80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

24001c84 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
24001c84:	b480      	push	{r7}
24001c86:	b083      	sub	sp, #12
24001c88:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
24001c8a:	4b12      	ldr	r3, [pc, #72]	; (24001cd4 <MX_GPIO_Init+0x50>)
24001c8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24001c90:	4a10      	ldr	r2, [pc, #64]	; (24001cd4 <MX_GPIO_Init+0x50>)
24001c92:	f043 0320 	orr.w	r3, r3, #32
24001c96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
24001c9a:	4b0e      	ldr	r3, [pc, #56]	; (24001cd4 <MX_GPIO_Init+0x50>)
24001c9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24001ca0:	f003 0320 	and.w	r3, r3, #32
24001ca4:	607b      	str	r3, [r7, #4]
24001ca6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
24001ca8:	4b0a      	ldr	r3, [pc, #40]	; (24001cd4 <MX_GPIO_Init+0x50>)
24001caa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24001cae:	4a09      	ldr	r2, [pc, #36]	; (24001cd4 <MX_GPIO_Init+0x50>)
24001cb0:	f043 0302 	orr.w	r3, r3, #2
24001cb4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
24001cb8:	4b06      	ldr	r3, [pc, #24]	; (24001cd4 <MX_GPIO_Init+0x50>)
24001cba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24001cbe:	f003 0302 	and.w	r3, r3, #2
24001cc2:	603b      	str	r3, [r7, #0]
24001cc4:	683b      	ldr	r3, [r7, #0]

}
24001cc6:	bf00      	nop
24001cc8:	370c      	adds	r7, #12
24001cca:	46bd      	mov	sp, r7
24001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
24001cd0:	4770      	bx	lr
24001cd2:	bf00      	nop
24001cd4:	58024400 	.word	0x58024400

24001cd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
24001cd8:	b580      	push	{r7, lr}
24001cda:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
24001cdc:	f001 f8f0 	bl	24002ec0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
24001ce0:	f000 f86c 	bl	24001dbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
24001ce4:	f7ff ffce 	bl	24001c84 <MX_GPIO_Init>
  MX_QUADSPI_Init();
24001ce8:	f000 f91e 	bl	24001f28 <MX_QUADSPI_Init>
  /* USER CODE BEGIN 2 */
  CSP_QUADSPI_Init();
24001cec:	f000 fa14 	bl	24002118 <CSP_QUADSPI_Init>

  for (var = 0; var < MEMORY_SECTOR_SIZE; var++) {
24001cf0:	4b30      	ldr	r3, [pc, #192]	; (24001db4 <main+0xdc>)
24001cf2:	2200      	movs	r2, #0
24001cf4:	601a      	str	r2, [r3, #0]
24001cf6:	e00b      	b.n	24001d10 <main+0x38>
      buffer_test[var] = (var & 0xff);
24001cf8:	4b2e      	ldr	r3, [pc, #184]	; (24001db4 <main+0xdc>)
24001cfa:	681a      	ldr	r2, [r3, #0]
24001cfc:	4b2d      	ldr	r3, [pc, #180]	; (24001db4 <main+0xdc>)
24001cfe:	681b      	ldr	r3, [r3, #0]
24001d00:	b2d1      	uxtb	r1, r2
24001d02:	4a2d      	ldr	r2, [pc, #180]	; (24001db8 <main+0xe0>)
24001d04:	54d1      	strb	r1, [r2, r3]
  for (var = 0; var < MEMORY_SECTOR_SIZE; var++) {
24001d06:	4b2b      	ldr	r3, [pc, #172]	; (24001db4 <main+0xdc>)
24001d08:	681b      	ldr	r3, [r3, #0]
24001d0a:	3301      	adds	r3, #1
24001d0c:	4a29      	ldr	r2, [pc, #164]	; (24001db4 <main+0xdc>)
24001d0e:	6013      	str	r3, [r2, #0]
24001d10:	4b28      	ldr	r3, [pc, #160]	; (24001db4 <main+0xdc>)
24001d12:	681b      	ldr	r3, [r3, #0]
24001d14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
24001d18:	d3ee      	bcc.n	24001cf8 <main+0x20>
  }

  for (var = 0; var < SECTORS_COUNT; var++) {
24001d1a:	4b26      	ldr	r3, [pc, #152]	; (24001db4 <main+0xdc>)
24001d1c:	2200      	movs	r2, #0
24001d1e:	601a      	str	r2, [r3, #0]
24001d20:	e021      	b.n	24001d66 <main+0x8e>

      if (CSP_QSPI_EraseSector(var * MEMORY_SECTOR_SIZE,
24001d22:	4b24      	ldr	r3, [pc, #144]	; (24001db4 <main+0xdc>)
24001d24:	681b      	ldr	r3, [r3, #0]
24001d26:	031a      	lsls	r2, r3, #12
                               (var + 1) * MEMORY_SECTOR_SIZE - 1) != HAL_OK) {
24001d28:	4b22      	ldr	r3, [pc, #136]	; (24001db4 <main+0xdc>)
24001d2a:	681b      	ldr	r3, [r3, #0]
24001d2c:	3301      	adds	r3, #1
24001d2e:	031b      	lsls	r3, r3, #12
      if (CSP_QSPI_EraseSector(var * MEMORY_SECTOR_SIZE,
24001d30:	3b01      	subs	r3, #1
24001d32:	4619      	mov	r1, r3
24001d34:	4610      	mov	r0, r2
24001d36:	f000 fbab 	bl	24002490 <CSP_QSPI_EraseSector>
24001d3a:	4603      	mov	r3, r0
24001d3c:	2b00      	cmp	r3, #0
24001d3e:	d000      	beq.n	24001d42 <main+0x6a>

          while (1);  //breakpoint - error detected
24001d40:	e7fe      	b.n	24001d40 <main+0x68>
      }

      if (CSP_QSPI_WriteMemory(buffer_test, var * MEMORY_SECTOR_SIZE, sizeof(buffer_test)) != HAL_OK) {
24001d42:	4b1c      	ldr	r3, [pc, #112]	; (24001db4 <main+0xdc>)
24001d44:	681b      	ldr	r3, [r3, #0]
24001d46:	031b      	lsls	r3, r3, #12
24001d48:	f44f 5280 	mov.w	r2, #4096	; 0x1000
24001d4c:	4619      	mov	r1, r3
24001d4e:	481a      	ldr	r0, [pc, #104]	; (24001db8 <main+0xe0>)
24001d50:	f000 fbf0 	bl	24002534 <CSP_QSPI_WriteMemory>
24001d54:	4603      	mov	r3, r0
24001d56:	2b00      	cmp	r3, #0
24001d58:	d000      	beq.n	24001d5c <main+0x84>

          while (1);  //breakpoint - error detected
24001d5a:	e7fe      	b.n	24001d5a <main+0x82>
  for (var = 0; var < SECTORS_COUNT; var++) {
24001d5c:	4b15      	ldr	r3, [pc, #84]	; (24001db4 <main+0xdc>)
24001d5e:	681b      	ldr	r3, [r3, #0]
24001d60:	3301      	adds	r3, #1
24001d62:	4a14      	ldr	r2, [pc, #80]	; (24001db4 <main+0xdc>)
24001d64:	6013      	str	r3, [r2, #0]
24001d66:	4b13      	ldr	r3, [pc, #76]	; (24001db4 <main+0xdc>)
24001d68:	681b      	ldr	r3, [r3, #0]
24001d6a:	2b63      	cmp	r3, #99	; 0x63
24001d6c:	d9d9      	bls.n	24001d22 <main+0x4a>
      }

  }

  if (CSP_QSPI_EnableMemoryMappedMode() != HAL_OK) {
24001d6e:	f000 fc65 	bl	2400263c <CSP_QSPI_EnableMemoryMappedMode>
24001d72:	4603      	mov	r3, r0
24001d74:	2b00      	cmp	r3, #0
24001d76:	d000      	beq.n	24001d7a <main+0xa2>

      while (1); //breakpoint - error detected
24001d78:	e7fe      	b.n	24001d78 <main+0xa0>
  }

  for (var = 0; var < SECTORS_COUNT; var++) {
24001d7a:	4b0e      	ldr	r3, [pc, #56]	; (24001db4 <main+0xdc>)
24001d7c:	2200      	movs	r2, #0
24001d7e:	601a      	str	r2, [r3, #0]
24001d80:	e013      	b.n	24001daa <main+0xd2>
      if (memcmp(buffer_test,
                 (uint8_t*) (0x90000000 + var * MEMORY_SECTOR_SIZE),
24001d82:	4b0c      	ldr	r3, [pc, #48]	; (24001db4 <main+0xdc>)
24001d84:	681b      	ldr	r3, [r3, #0]
24001d86:	f503 2310 	add.w	r3, r3, #589824	; 0x90000
24001d8a:	031b      	lsls	r3, r3, #12
      if (memcmp(buffer_test,
24001d8c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
24001d90:	4619      	mov	r1, r3
24001d92:	4809      	ldr	r0, [pc, #36]	; (24001db8 <main+0xe0>)
24001d94:	f017 fb51 	bl	2401943a <memcmp>
24001d98:	4603      	mov	r3, r0
24001d9a:	2b00      	cmp	r3, #0
24001d9c:	d000      	beq.n	24001da0 <main+0xc8>
                 MEMORY_SECTOR_SIZE) != HAL_OK) {
          while (1);  //breakpoint - error detected - otherwise QSPI works properly
24001d9e:	e7fe      	b.n	24001d9e <main+0xc6>
  for (var = 0; var < SECTORS_COUNT; var++) {
24001da0:	4b04      	ldr	r3, [pc, #16]	; (24001db4 <main+0xdc>)
24001da2:	681b      	ldr	r3, [r3, #0]
24001da4:	3301      	adds	r3, #1
24001da6:	4a03      	ldr	r2, [pc, #12]	; (24001db4 <main+0xdc>)
24001da8:	6013      	str	r3, [r2, #0]
24001daa:	4b02      	ldr	r3, [pc, #8]	; (24001db4 <main+0xdc>)
24001dac:	681b      	ldr	r3, [r3, #0]
24001dae:	2b63      	cmp	r3, #99	; 0x63
24001db0:	d9e7      	bls.n	24001d82 <main+0xaa>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
24001db2:	e7fe      	b.n	24001db2 <main+0xda>
24001db4:	24001538 	.word	0x24001538
24001db8:	24000538 	.word	0x24000538

24001dbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
24001dbc:	b580      	push	{r7, lr}
24001dbe:	b09e      	sub	sp, #120	; 0x78
24001dc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
24001dc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
24001dc6:	224c      	movs	r2, #76	; 0x4c
24001dc8:	2100      	movs	r1, #0
24001dca:	4618      	mov	r0, r3
24001dcc:	f017 fb45 	bl	2401945a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
24001dd0:	f107 030c 	add.w	r3, r7, #12
24001dd4:	2220      	movs	r2, #32
24001dd6:	2100      	movs	r1, #0
24001dd8:	4618      	mov	r0, r3
24001dda:	f017 fb3e 	bl	2401945a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
24001dde:	2002      	movs	r0, #2
24001de0:	f010 fbf4 	bl	240125cc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
24001de4:	2300      	movs	r3, #0
24001de6:	60bb      	str	r3, [r7, #8]
24001de8:	4b49      	ldr	r3, [pc, #292]	; (24001f10 <SystemClock_Config+0x154>)
24001dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24001dec:	4a48      	ldr	r2, [pc, #288]	; (24001f10 <SystemClock_Config+0x154>)
24001dee:	f023 0301 	bic.w	r3, r3, #1
24001df2:	62d3      	str	r3, [r2, #44]	; 0x2c
24001df4:	4b46      	ldr	r3, [pc, #280]	; (24001f10 <SystemClock_Config+0x154>)
24001df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24001df8:	f003 0301 	and.w	r3, r3, #1
24001dfc:	60bb      	str	r3, [r7, #8]
24001dfe:	4b45      	ldr	r3, [pc, #276]	; (24001f14 <SystemClock_Config+0x158>)
24001e00:	699b      	ldr	r3, [r3, #24]
24001e02:	4a44      	ldr	r2, [pc, #272]	; (24001f14 <SystemClock_Config+0x158>)
24001e04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
24001e08:	6193      	str	r3, [r2, #24]
24001e0a:	4b42      	ldr	r3, [pc, #264]	; (24001f14 <SystemClock_Config+0x158>)
24001e0c:	699b      	ldr	r3, [r3, #24]
24001e0e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
24001e12:	60bb      	str	r3, [r7, #8]
24001e14:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
24001e16:	bf00      	nop
24001e18:	4b3e      	ldr	r3, [pc, #248]	; (24001f14 <SystemClock_Config+0x158>)
24001e1a:	699b      	ldr	r3, [r3, #24]
24001e1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
24001e20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
24001e24:	d1f8      	bne.n	24001e18 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
24001e26:	4b3c      	ldr	r3, [pc, #240]	; (24001f18 <SystemClock_Config+0x15c>)
24001e28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
24001e2c:	4a3a      	ldr	r2, [pc, #232]	; (24001f18 <SystemClock_Config+0x15c>)
24001e2e:	f043 0302 	orr.w	r3, r3, #2
24001e32:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
24001e36:	4b38      	ldr	r3, [pc, #224]	; (24001f18 <SystemClock_Config+0x15c>)
24001e38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
24001e3c:	f003 0302 	and.w	r3, r3, #2
24001e40:	607b      	str	r3, [r7, #4]
24001e42:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
24001e44:	2300      	movs	r3, #0
24001e46:	603b      	str	r3, [r7, #0]
24001e48:	4b32      	ldr	r3, [pc, #200]	; (24001f14 <SystemClock_Config+0x158>)
24001e4a:	699b      	ldr	r3, [r3, #24]
24001e4c:	4a31      	ldr	r2, [pc, #196]	; (24001f14 <SystemClock_Config+0x158>)
24001e4e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
24001e52:	6193      	str	r3, [r2, #24]
24001e54:	4b2f      	ldr	r3, [pc, #188]	; (24001f14 <SystemClock_Config+0x158>)
24001e56:	699b      	ldr	r3, [r3, #24]
24001e58:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
24001e5c:	603b      	str	r3, [r7, #0]
24001e5e:	4b2c      	ldr	r3, [pc, #176]	; (24001f10 <SystemClock_Config+0x154>)
24001e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24001e62:	4a2b      	ldr	r2, [pc, #172]	; (24001f10 <SystemClock_Config+0x154>)
24001e64:	f043 0301 	orr.w	r3, r3, #1
24001e68:	62d3      	str	r3, [r2, #44]	; 0x2c
24001e6a:	4b29      	ldr	r3, [pc, #164]	; (24001f10 <SystemClock_Config+0x154>)
24001e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24001e6e:	f003 0301 	and.w	r3, r3, #1
24001e72:	603b      	str	r3, [r7, #0]
24001e74:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
24001e76:	bf00      	nop
24001e78:	4b26      	ldr	r3, [pc, #152]	; (24001f14 <SystemClock_Config+0x158>)
24001e7a:	699b      	ldr	r3, [r3, #24]
24001e7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
24001e80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
24001e84:	d1f8      	bne.n	24001e78 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
24001e86:	2302      	movs	r3, #2
24001e88:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
24001e8a:	2301      	movs	r3, #1
24001e8c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
24001e8e:	2340      	movs	r3, #64	; 0x40
24001e90:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
24001e92:	2302      	movs	r3, #2
24001e94:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
24001e96:	2300      	movs	r3, #0
24001e98:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
24001e9a:	2304      	movs	r3, #4
24001e9c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 60;
24001e9e:	233c      	movs	r3, #60	; 0x3c
24001ea0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
24001ea2:	2302      	movs	r3, #2
24001ea4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
24001ea6:	2302      	movs	r3, #2
24001ea8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
24001eaa:	2302      	movs	r3, #2
24001eac:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
24001eae:	230c      	movs	r3, #12
24001eb0:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
24001eb2:	2300      	movs	r3, #0
24001eb4:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
24001eb6:	2300      	movs	r3, #0
24001eb8:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
24001eba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
24001ebe:	4618      	mov	r0, r3
24001ec0:	f012 fe58 	bl	24014b74 <HAL_RCC_OscConfig>
24001ec4:	4603      	mov	r3, r0
24001ec6:	2b00      	cmp	r3, #0
24001ec8:	d001      	beq.n	24001ece <SystemClock_Config+0x112>
  {
    Error_Handler();
24001eca:	f000 f827 	bl	24001f1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
24001ece:	233f      	movs	r3, #63	; 0x3f
24001ed0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
24001ed2:	2303      	movs	r3, #3
24001ed4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
24001ed6:	2300      	movs	r3, #0
24001ed8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
24001eda:	2308      	movs	r3, #8
24001edc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
24001ede:	2340      	movs	r3, #64	; 0x40
24001ee0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
24001ee2:	2340      	movs	r3, #64	; 0x40
24001ee4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
24001ee6:	f44f 6380 	mov.w	r3, #1024	; 0x400
24001eea:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
24001eec:	2340      	movs	r3, #64	; 0x40
24001eee:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
24001ef0:	f107 030c 	add.w	r3, r7, #12
24001ef4:	2104      	movs	r1, #4
24001ef6:	4618      	mov	r0, r3
24001ef8:	f013 fa96 	bl	24015428 <HAL_RCC_ClockConfig>
24001efc:	4603      	mov	r3, r0
24001efe:	2b00      	cmp	r3, #0
24001f00:	d001      	beq.n	24001f06 <SystemClock_Config+0x14a>
  {
    Error_Handler();
24001f02:	f000 f80b 	bl	24001f1c <Error_Handler>
  }
}
24001f06:	bf00      	nop
24001f08:	3778      	adds	r7, #120	; 0x78
24001f0a:	46bd      	mov	sp, r7
24001f0c:	bd80      	pop	{r7, pc}
24001f0e:	bf00      	nop
24001f10:	58000400 	.word	0x58000400
24001f14:	58024800 	.word	0x58024800
24001f18:	58024400 	.word	0x58024400

24001f1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
24001f1c:	b480      	push	{r7}
24001f1e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
24001f20:	b672      	cpsid	i
}
24001f22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
24001f24:	e7fe      	b.n	24001f24 <Error_Handler+0x8>
	...

24001f28 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
24001f28:	b580      	push	{r7, lr}
24001f2a:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
24001f2c:	4b12      	ldr	r3, [pc, #72]	; (24001f78 <MX_QUADSPI_Init+0x50>)
24001f2e:	4a13      	ldr	r2, [pc, #76]	; (24001f7c <MX_QUADSPI_Init+0x54>)
24001f30:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 4;
24001f32:	4b11      	ldr	r3, [pc, #68]	; (24001f78 <MX_QUADSPI_Init+0x50>)
24001f34:	2204      	movs	r2, #4
24001f36:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
24001f38:	4b0f      	ldr	r3, [pc, #60]	; (24001f78 <MX_QUADSPI_Init+0x50>)
24001f3a:	2201      	movs	r2, #1
24001f3c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
24001f3e:	4b0e      	ldr	r3, [pc, #56]	; (24001f78 <MX_QUADSPI_Init+0x50>)
24001f40:	2210      	movs	r2, #16
24001f42:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
24001f44:	4b0c      	ldr	r3, [pc, #48]	; (24001f78 <MX_QUADSPI_Init+0x50>)
24001f46:	2218      	movs	r2, #24
24001f48:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
24001f4a:	4b0b      	ldr	r3, [pc, #44]	; (24001f78 <MX_QUADSPI_Init+0x50>)
24001f4c:	2200      	movs	r2, #0
24001f4e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
24001f50:	4b09      	ldr	r3, [pc, #36]	; (24001f78 <MX_QUADSPI_Init+0x50>)
24001f52:	2200      	movs	r2, #0
24001f54:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
24001f56:	4b08      	ldr	r3, [pc, #32]	; (24001f78 <MX_QUADSPI_Init+0x50>)
24001f58:	2200      	movs	r2, #0
24001f5a:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
24001f5c:	4b06      	ldr	r3, [pc, #24]	; (24001f78 <MX_QUADSPI_Init+0x50>)
24001f5e:	2200      	movs	r2, #0
24001f60:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
24001f62:	4805      	ldr	r0, [pc, #20]	; (24001f78 <MX_QUADSPI_Init+0x50>)
24001f64:	f011 f868 	bl	24013038 <HAL_QSPI_Init>
24001f68:	4603      	mov	r3, r0
24001f6a:	2b00      	cmp	r3, #0
24001f6c:	d001      	beq.n	24001f72 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
24001f6e:	f7ff ffd5 	bl	24001f1c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
24001f72:	bf00      	nop
24001f74:	bd80      	pop	{r7, pc}
24001f76:	bf00      	nop
24001f78:	2400153c 	.word	0x2400153c
24001f7c:	52005000 	.word	0x52005000

24001f80 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
24001f80:	b580      	push	{r7, lr}
24001f82:	b0bc      	sub	sp, #240	; 0xf0
24001f84:	af00      	add	r7, sp, #0
24001f86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
24001f88:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
24001f8c:	2200      	movs	r2, #0
24001f8e:	601a      	str	r2, [r3, #0]
24001f90:	605a      	str	r2, [r3, #4]
24001f92:	609a      	str	r2, [r3, #8]
24001f94:	60da      	str	r2, [r3, #12]
24001f96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
24001f98:	f107 0318 	add.w	r3, r7, #24
24001f9c:	22c0      	movs	r2, #192	; 0xc0
24001f9e:	2100      	movs	r1, #0
24001fa0:	4618      	mov	r0, r3
24001fa2:	f017 fa5a 	bl	2401945a <memset>
  if(qspiHandle->Instance==QUADSPI)
24001fa6:	687b      	ldr	r3, [r7, #4]
24001fa8:	681b      	ldr	r3, [r3, #0]
24001faa:	4a43      	ldr	r2, [pc, #268]	; (240020b8 <HAL_QSPI_MspInit+0x138>)
24001fac:	4293      	cmp	r3, r2
24001fae:	d17f      	bne.n	240020b0 <HAL_QSPI_MspInit+0x130>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
24001fb0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
24001fb4:	f04f 0300 	mov.w	r3, #0
24001fb8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
24001fbc:	2300      	movs	r3, #0
24001fbe:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24001fc0:	f107 0318 	add.w	r3, r7, #24
24001fc4:	4618      	mov	r0, r3
24001fc6:	f013 ff91 	bl	24015eec <HAL_RCCEx_PeriphCLKConfig>
24001fca:	4603      	mov	r3, r0
24001fcc:	2b00      	cmp	r3, #0
24001fce:	d001      	beq.n	24001fd4 <HAL_QSPI_MspInit+0x54>
    {
      Error_Handler();
24001fd0:	f7ff ffa4 	bl	24001f1c <Error_Handler>
    }

    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
24001fd4:	4b39      	ldr	r3, [pc, #228]	; (240020bc <HAL_QSPI_MspInit+0x13c>)
24001fd6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
24001fda:	4a38      	ldr	r2, [pc, #224]	; (240020bc <HAL_QSPI_MspInit+0x13c>)
24001fdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
24001fe0:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
24001fe4:	4b35      	ldr	r3, [pc, #212]	; (240020bc <HAL_QSPI_MspInit+0x13c>)
24001fe6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
24001fea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
24001fee:	617b      	str	r3, [r7, #20]
24001ff0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOF_CLK_ENABLE();
24001ff2:	4b32      	ldr	r3, [pc, #200]	; (240020bc <HAL_QSPI_MspInit+0x13c>)
24001ff4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24001ff8:	4a30      	ldr	r2, [pc, #192]	; (240020bc <HAL_QSPI_MspInit+0x13c>)
24001ffa:	f043 0320 	orr.w	r3, r3, #32
24001ffe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
24002002:	4b2e      	ldr	r3, [pc, #184]	; (240020bc <HAL_QSPI_MspInit+0x13c>)
24002004:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24002008:	f003 0320 	and.w	r3, r3, #32
2400200c:	613b      	str	r3, [r7, #16]
2400200e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
24002010:	4b2a      	ldr	r3, [pc, #168]	; (240020bc <HAL_QSPI_MspInit+0x13c>)
24002012:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24002016:	4a29      	ldr	r2, [pc, #164]	; (240020bc <HAL_QSPI_MspInit+0x13c>)
24002018:	f043 0302 	orr.w	r3, r3, #2
2400201c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
24002020:	4b26      	ldr	r3, [pc, #152]	; (240020bc <HAL_QSPI_MspInit+0x13c>)
24002022:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24002026:	f003 0302 	and.w	r3, r3, #2
2400202a:	60fb      	str	r3, [r7, #12]
2400202c:	68fb      	ldr	r3, [r7, #12]
    PF8     ------> QUADSPI_BK1_IO0
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PB10     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
2400202e:	23c0      	movs	r3, #192	; 0xc0
24002030:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24002034:	2302      	movs	r3, #2
24002036:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
2400203a:	2300      	movs	r3, #0
2400203c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
24002040:	2303      	movs	r3, #3
24002042:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
24002046:	2309      	movs	r3, #9
24002048:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
2400204c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
24002050:	4619      	mov	r1, r3
24002052:	481b      	ldr	r0, [pc, #108]	; (240020c0 <HAL_QSPI_MspInit+0x140>)
24002054:	f008 fdde 	bl	2400ac14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
24002058:	f44f 7340 	mov.w	r3, #768	; 0x300
2400205c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24002060:	2302      	movs	r3, #2
24002062:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24002066:	2300      	movs	r3, #0
24002068:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
2400206c:	2303      	movs	r3, #3
2400206e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
24002072:	230a      	movs	r3, #10
24002074:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
24002078:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
2400207c:	4619      	mov	r1, r3
2400207e:	4810      	ldr	r0, [pc, #64]	; (240020c0 <HAL_QSPI_MspInit+0x140>)
24002080:	f008 fdc8 	bl	2400ac14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10;
24002084:	f240 4304 	movw	r3, #1028	; 0x404
24002088:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
2400208c:	2302      	movs	r3, #2
2400208e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24002092:	2300      	movs	r3, #0
24002094:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
24002098:	2303      	movs	r3, #3
2400209a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
2400209e:	2309      	movs	r3, #9
240020a0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
240020a4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
240020a8:	4619      	mov	r1, r3
240020aa:	4806      	ldr	r0, [pc, #24]	; (240020c4 <HAL_QSPI_MspInit+0x144>)
240020ac:	f008 fdb2 	bl	2400ac14 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
240020b0:	bf00      	nop
240020b2:	37f0      	adds	r7, #240	; 0xf0
240020b4:	46bd      	mov	sp, r7
240020b6:	bd80      	pop	{r7, pc}
240020b8:	52005000 	.word	0x52005000
240020bc:	58024400 	.word	0x58024400
240020c0:	58021400 	.word	0x58021400
240020c4:	58020400 	.word	0x58020400

240020c8 <HAL_QSPI_MspDeInit>:

void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* qspiHandle)
{
240020c8:	b580      	push	{r7, lr}
240020ca:	b082      	sub	sp, #8
240020cc:	af00      	add	r7, sp, #0
240020ce:	6078      	str	r0, [r7, #4]

  if(qspiHandle->Instance==QUADSPI)
240020d0:	687b      	ldr	r3, [r7, #4]
240020d2:	681b      	ldr	r3, [r3, #0]
240020d4:	4a0c      	ldr	r2, [pc, #48]	; (24002108 <HAL_QSPI_MspDeInit+0x40>)
240020d6:	4293      	cmp	r3, r2
240020d8:	d111      	bne.n	240020fe <HAL_QSPI_MspDeInit+0x36>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
240020da:	4b0c      	ldr	r3, [pc, #48]	; (2400210c <HAL_QSPI_MspDeInit+0x44>)
240020dc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
240020e0:	4a0a      	ldr	r2, [pc, #40]	; (2400210c <HAL_QSPI_MspDeInit+0x44>)
240020e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
240020e6:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
    PF8     ------> QUADSPI_BK1_IO0
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PB10     ------> QUADSPI_BK1_NCS
    */
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);
240020ea:	f44f 7170 	mov.w	r1, #960	; 0x3c0
240020ee:	4808      	ldr	r0, [pc, #32]	; (24002110 <HAL_QSPI_MspDeInit+0x48>)
240020f0:	f008 ff40 	bl	2400af74 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_2|GPIO_PIN_10);
240020f4:	f240 4104 	movw	r1, #1028	; 0x404
240020f8:	4806      	ldr	r0, [pc, #24]	; (24002114 <HAL_QSPI_MspDeInit+0x4c>)
240020fa:	f008 ff3b 	bl	2400af74 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }
}
240020fe:	bf00      	nop
24002100:	3708      	adds	r7, #8
24002102:	46bd      	mov	sp, r7
24002104:	bd80      	pop	{r7, pc}
24002106:	bf00      	nop
24002108:	52005000 	.word	0x52005000
2400210c:	58024400 	.word	0x58024400
24002110:	58021400 	.word	0x58021400
24002114:	58020400 	.word	0x58020400

24002118 <CSP_QUADSPI_Init>:

/* USER CODE BEGIN 1 */

/* QUADSPI init function */
uint8_t CSP_QUADSPI_Init(void) {
24002118:	b580      	push	{r7, lr}
2400211a:	af00      	add	r7, sp, #0
    //prepare QSPI peripheral for ST-Link Utility operations
	hqspi.Instance = QUADSPI;
2400211c:	4b17      	ldr	r3, [pc, #92]	; (2400217c <CSP_QUADSPI_Init+0x64>)
2400211e:	4a18      	ldr	r2, [pc, #96]	; (24002180 <CSP_QUADSPI_Init+0x68>)
24002120:	601a      	str	r2, [r3, #0]
    if (HAL_QSPI_DeInit(&hqspi) != HAL_OK) {
24002122:	4816      	ldr	r0, [pc, #88]	; (2400217c <CSP_QUADSPI_Init+0x64>)
24002124:	f010 fffc 	bl	24013120 <HAL_QSPI_DeInit>
24002128:	4603      	mov	r3, r0
2400212a:	2b00      	cmp	r3, #0
2400212c:	d001      	beq.n	24002132 <CSP_QUADSPI_Init+0x1a>
        return HAL_ERROR;
2400212e:	2301      	movs	r3, #1
24002130:	e021      	b.n	24002176 <CSP_QUADSPI_Init+0x5e>
    }

    MX_QUADSPI_Init();
24002132:	f7ff fef9 	bl	24001f28 <MX_QUADSPI_Init>

    if (QSPI_ResetChip() != HAL_OK) {
24002136:	f000 fab5 	bl	240026a4 <QSPI_ResetChip>
2400213a:	4603      	mov	r3, r0
2400213c:	2b00      	cmp	r3, #0
2400213e:	d001      	beq.n	24002144 <CSP_QUADSPI_Init+0x2c>
        return HAL_ERROR;
24002140:	2301      	movs	r3, #1
24002142:	e018      	b.n	24002176 <CSP_QUADSPI_Init+0x5e>
    }

    HAL_Delay(1);
24002144:	2001      	movs	r0, #1
24002146:	f000 fff9 	bl	2400313c <HAL_Delay>

    if (QSPI_AutoPollingMemReady() != HAL_OK) {
2400214a:	f000 f857 	bl	240021fc <QSPI_AutoPollingMemReady>
2400214e:	4603      	mov	r3, r0
24002150:	2b00      	cmp	r3, #0
24002152:	d001      	beq.n	24002158 <CSP_QUADSPI_Init+0x40>
        return HAL_ERROR;
24002154:	2301      	movs	r3, #1
24002156:	e00e      	b.n	24002176 <CSP_QUADSPI_Init+0x5e>
    }

    if (QSPI_WriteEnable() != HAL_OK) {
24002158:	f000 f888 	bl	2400226c <QSPI_WriteEnable>
2400215c:	4603      	mov	r3, r0
2400215e:	2b00      	cmp	r3, #0
24002160:	d001      	beq.n	24002166 <CSP_QUADSPI_Init+0x4e>

        return HAL_ERROR;
24002162:	2301      	movs	r3, #1
24002164:	e007      	b.n	24002176 <CSP_QUADSPI_Init+0x5e>
    }

    if (QSPI_Configuration() != HAL_OK) {
24002166:	f000 f8cb 	bl	24002300 <QSPI_Configuration>
2400216a:	4603      	mov	r3, r0
2400216c:	2b00      	cmp	r3, #0
2400216e:	d001      	beq.n	24002174 <CSP_QUADSPI_Init+0x5c>
        return HAL_ERROR;
24002170:	2301      	movs	r3, #1
24002172:	e000      	b.n	24002176 <CSP_QUADSPI_Init+0x5e>
    }

    return HAL_OK;
24002174:	2300      	movs	r3, #0
}
24002176:	4618      	mov	r0, r3
24002178:	bd80      	pop	{r7, pc}
2400217a:	bf00      	nop
2400217c:	2400153c 	.word	0x2400153c
24002180:	52005000 	.word	0x52005000

24002184 <CSP_QSPI_Erase_Chip>:


uint8_t CSP_QSPI_Erase_Chip(void) {
24002184:	b580      	push	{r7, lr}
24002186:	b08e      	sub	sp, #56	; 0x38
24002188:	af00      	add	r7, sp, #0
    QSPI_CommandTypeDef sCommand;


    if (QSPI_WriteEnable() != HAL_OK) {
2400218a:	f000 f86f 	bl	2400226c <QSPI_WriteEnable>
2400218e:	4603      	mov	r3, r0
24002190:	2b00      	cmp	r3, #0
24002192:	d001      	beq.n	24002198 <CSP_QSPI_Erase_Chip+0x14>
        return HAL_ERROR;
24002194:	2301      	movs	r3, #1
24002196:	e02b      	b.n	240021f0 <CSP_QSPI_Erase_Chip+0x6c>
    }


    /* Erasing Sequence --------------------------------- */
    sCommand.Instruction = CHIP_ERASE_CMD;
24002198:	2360      	movs	r3, #96	; 0x60
2400219a:	603b      	str	r3, [r7, #0]
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
2400219c:	f44f 7380 	mov.w	r3, #256	; 0x100
240021a0:	61bb      	str	r3, [r7, #24]
    sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
240021a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
240021a6:	60fb      	str	r3, [r7, #12]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
240021a8:	2300      	movs	r3, #0
240021aa:	623b      	str	r3, [r7, #32]
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
240021ac:	2300      	movs	r3, #0
240021ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
240021b0:	2300      	movs	r3, #0
240021b2:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
240021b4:	2300      	movs	r3, #0
240021b6:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
240021b8:	2300      	movs	r3, #0
240021ba:	61fb      	str	r3, [r7, #28]
    sCommand.Address = 0;
240021bc:	2300      	movs	r3, #0
240021be:	607b      	str	r3, [r7, #4]
    sCommand.DataMode = QSPI_DATA_NONE;
240021c0:	2300      	movs	r3, #0
240021c2:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.DummyCycles = 0;
240021c4:	2300      	movs	r3, #0
240021c6:	617b      	str	r3, [r7, #20]


    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
240021c8:	463b      	mov	r3, r7
240021ca:	f241 3288 	movw	r2, #5000	; 0x1388
240021ce:	4619      	mov	r1, r3
240021d0:	4809      	ldr	r0, [pc, #36]	; (240021f8 <CSP_QSPI_Erase_Chip+0x74>)
240021d2:	f011 f993 	bl	240134fc <HAL_QSPI_Command>
240021d6:	4603      	mov	r3, r0
240021d8:	2b00      	cmp	r3, #0
240021da:	d001      	beq.n	240021e0 <CSP_QSPI_Erase_Chip+0x5c>
        != HAL_OK) {
        return HAL_ERROR;
240021dc:	2301      	movs	r3, #1
240021de:	e007      	b.n	240021f0 <CSP_QSPI_Erase_Chip+0x6c>
    }

    if (QSPI_AutoPollingMemReady() != HAL_OK) {
240021e0:	f000 f80c 	bl	240021fc <QSPI_AutoPollingMemReady>
240021e4:	4603      	mov	r3, r0
240021e6:	2b00      	cmp	r3, #0
240021e8:	d001      	beq.n	240021ee <CSP_QSPI_Erase_Chip+0x6a>
        return HAL_ERROR;
240021ea:	2301      	movs	r3, #1
240021ec:	e000      	b.n	240021f0 <CSP_QSPI_Erase_Chip+0x6c>
    }

    return HAL_OK;
240021ee:	2300      	movs	r3, #0
}
240021f0:	4618      	mov	r0, r3
240021f2:	3738      	adds	r7, #56	; 0x38
240021f4:	46bd      	mov	sp, r7
240021f6:	bd80      	pop	{r7, pc}
240021f8:	2400153c 	.word	0x2400153c

240021fc <QSPI_AutoPollingMemReady>:

uint8_t QSPI_AutoPollingMemReady(void) {
240021fc:	b580      	push	{r7, lr}
240021fe:	b094      	sub	sp, #80	; 0x50
24002200:	af00      	add	r7, sp, #0

    QSPI_CommandTypeDef sCommand;
    QSPI_AutoPollingTypeDef sConfig;

    /* Configure automatic polling mode to wait for memory ready ------ */
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
24002202:	f44f 7380 	mov.w	r3, #256	; 0x100
24002206:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.Instruction = READ_STATUS_REG_CMD;
24002208:	2305      	movs	r3, #5
2400220a:	61bb      	str	r3, [r7, #24]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
2400220c:	2300      	movs	r3, #0
2400220e:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
24002210:	2300      	movs	r3, #0
24002212:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.DataMode = QSPI_DATA_1_LINE;
24002214:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
24002218:	63fb      	str	r3, [r7, #60]	; 0x3c
    sCommand.DummyCycles = 0;
2400221a:	2300      	movs	r3, #0
2400221c:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
2400221e:	2300      	movs	r3, #0
24002220:	647b      	str	r3, [r7, #68]	; 0x44
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
24002222:	2300      	movs	r3, #0
24002224:	64bb      	str	r3, [r7, #72]	; 0x48
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
24002226:	2300      	movs	r3, #0
24002228:	64fb      	str	r3, [r7, #76]	; 0x4c

    sConfig.Match = 0x00;
2400222a:	2300      	movs	r3, #0
2400222c:	603b      	str	r3, [r7, #0]
    sConfig.Mask = 0x01;
2400222e:	2301      	movs	r3, #1
24002230:	607b      	str	r3, [r7, #4]
    sConfig.MatchMode = QSPI_MATCH_MODE_AND;
24002232:	2300      	movs	r3, #0
24002234:	613b      	str	r3, [r7, #16]
    sConfig.StatusBytesSize = 1;
24002236:	2301      	movs	r3, #1
24002238:	60fb      	str	r3, [r7, #12]
    sConfig.Interval = 0x10;
2400223a:	2310      	movs	r3, #16
2400223c:	60bb      	str	r3, [r7, #8]
    sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
2400223e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
24002242:	617b      	str	r3, [r7, #20]

    if (HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig,
24002244:	463a      	mov	r2, r7
24002246:	f107 0118 	add.w	r1, r7, #24
2400224a:	f241 3388 	movw	r3, #5000	; 0x1388
2400224e:	4806      	ldr	r0, [pc, #24]	; (24002268 <QSPI_AutoPollingMemReady+0x6c>)
24002250:	f011 fdfe 	bl	24013e50 <HAL_QSPI_AutoPolling>
24002254:	4603      	mov	r3, r0
24002256:	2b00      	cmp	r3, #0
24002258:	d001      	beq.n	2400225e <QSPI_AutoPollingMemReady+0x62>
                             HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
        return HAL_ERROR;
2400225a:	2301      	movs	r3, #1
2400225c:	e000      	b.n	24002260 <QSPI_AutoPollingMemReady+0x64>
    }

    return HAL_OK;
2400225e:	2300      	movs	r3, #0
}
24002260:	4618      	mov	r0, r3
24002262:	3750      	adds	r7, #80	; 0x50
24002264:	46bd      	mov	sp, r7
24002266:	bd80      	pop	{r7, pc}
24002268:	2400153c 	.word	0x2400153c

2400226c <QSPI_WriteEnable>:

static uint8_t QSPI_WriteEnable(void) {
2400226c:	b580      	push	{r7, lr}
2400226e:	b094      	sub	sp, #80	; 0x50
24002270:	af00      	add	r7, sp, #0
    QSPI_CommandTypeDef sCommand;
    QSPI_AutoPollingTypeDef sConfig;

    /* Enable write operations ------------------------------------------ */
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
24002272:	f44f 7380 	mov.w	r3, #256	; 0x100
24002276:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.Instruction = WRITE_ENABLE_CMD;
24002278:	2306      	movs	r3, #6
2400227a:	61bb      	str	r3, [r7, #24]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
2400227c:	2300      	movs	r3, #0
2400227e:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
24002280:	2300      	movs	r3, #0
24002282:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.DataMode = QSPI_DATA_NONE;
24002284:	2300      	movs	r3, #0
24002286:	63fb      	str	r3, [r7, #60]	; 0x3c
    sCommand.DummyCycles = 0;
24002288:	2300      	movs	r3, #0
2400228a:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
2400228c:	2300      	movs	r3, #0
2400228e:	647b      	str	r3, [r7, #68]	; 0x44
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
24002290:	2300      	movs	r3, #0
24002292:	64bb      	str	r3, [r7, #72]	; 0x48
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
24002294:	2300      	movs	r3, #0
24002296:	64fb      	str	r3, [r7, #76]	; 0x4c

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
24002298:	f107 0318 	add.w	r3, r7, #24
2400229c:	f241 3288 	movw	r2, #5000	; 0x1388
240022a0:	4619      	mov	r1, r3
240022a2:	4816      	ldr	r0, [pc, #88]	; (240022fc <QSPI_WriteEnable+0x90>)
240022a4:	f011 f92a 	bl	240134fc <HAL_QSPI_Command>
240022a8:	4603      	mov	r3, r0
240022aa:	2b00      	cmp	r3, #0
240022ac:	d001      	beq.n	240022b2 <QSPI_WriteEnable+0x46>
        != HAL_OK) {
        return HAL_ERROR;
240022ae:	2301      	movs	r3, #1
240022b0:	e01f      	b.n	240022f2 <QSPI_WriteEnable+0x86>
    }

    /* Configure automatic polling mode to wait for write enabling ---- */
    sConfig.Match = 0x02;
240022b2:	2302      	movs	r3, #2
240022b4:	603b      	str	r3, [r7, #0]
    sConfig.Mask = 0x02;
240022b6:	2302      	movs	r3, #2
240022b8:	607b      	str	r3, [r7, #4]
    sConfig.MatchMode = QSPI_MATCH_MODE_AND;
240022ba:	2300      	movs	r3, #0
240022bc:	613b      	str	r3, [r7, #16]
    sConfig.StatusBytesSize = 1;
240022be:	2301      	movs	r3, #1
240022c0:	60fb      	str	r3, [r7, #12]
    sConfig.Interval = 0x10;
240022c2:	2310      	movs	r3, #16
240022c4:	60bb      	str	r3, [r7, #8]
    sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
240022c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
240022ca:	617b      	str	r3, [r7, #20]

    sCommand.Instruction = READ_STATUS_REG_CMD;
240022cc:	2305      	movs	r3, #5
240022ce:	61bb      	str	r3, [r7, #24]
    sCommand.DataMode = QSPI_DATA_1_LINE;
240022d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
240022d4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig,
240022d6:	463a      	mov	r2, r7
240022d8:	f107 0118 	add.w	r1, r7, #24
240022dc:	f241 3388 	movw	r3, #5000	; 0x1388
240022e0:	4806      	ldr	r0, [pc, #24]	; (240022fc <QSPI_WriteEnable+0x90>)
240022e2:	f011 fdb5 	bl	24013e50 <HAL_QSPI_AutoPolling>
240022e6:	4603      	mov	r3, r0
240022e8:	2b00      	cmp	r3, #0
240022ea:	d001      	beq.n	240022f0 <QSPI_WriteEnable+0x84>
                             HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
        return HAL_ERROR;
240022ec:	2301      	movs	r3, #1
240022ee:	e000      	b.n	240022f2 <QSPI_WriteEnable+0x86>
    }

    return HAL_OK;
240022f0:	2300      	movs	r3, #0
}
240022f2:	4618      	mov	r0, r3
240022f4:	3750      	adds	r7, #80	; 0x50
240022f6:	46bd      	mov	sp, r7
240022f8:	bd80      	pop	{r7, pc}
240022fa:	bf00      	nop
240022fc:	2400153c 	.word	0x2400153c

24002300 <QSPI_Configuration>:
/*Enable quad mode and set dummy cycles count*/
uint8_t QSPI_Configuration(void)
{
24002300:	b580      	push	{r7, lr}
24002302:	b090      	sub	sp, #64	; 0x40
24002304:	af00      	add	r7, sp, #0
    QSPI_CommandTypeDef sCommand;
    uint8_t status_reg[2];
//	uint8_t status_reg[3]={0};
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
24002306:	f44f 7380 	mov.w	r3, #256	; 0x100
2400230a:	623b      	str	r3, [r7, #32]
	sCommand.Instruction = READ_STATUS_REG_CMD;
2400230c:	2305      	movs	r3, #5
2400230e:	60bb      	str	r3, [r7, #8]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
24002310:	2300      	movs	r3, #0
24002312:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
24002314:	2300      	movs	r3, #0
24002316:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DataMode = QSPI_DATA_1_LINE;
24002318:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400231c:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DummyCycles = 0;
2400231e:	2300      	movs	r3, #0
24002320:	61fb      	str	r3, [r7, #28]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
24002322:	2300      	movs	r3, #0
24002324:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
24002326:	2300      	movs	r3, #0
24002328:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
2400232a:	2300      	movs	r3, #0
2400232c:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.NbData = 1;
2400232e:	2301      	movs	r3, #1
24002330:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
24002332:	f107 0308 	add.w	r3, r7, #8
24002336:	f241 3288 	movw	r2, #5000	; 0x1388
2400233a:	4619      	mov	r1, r3
2400233c:	4853      	ldr	r0, [pc, #332]	; (2400248c <QSPI_Configuration+0x18c>)
2400233e:	f011 f8dd 	bl	240134fc <HAL_QSPI_Command>
	HAL_Delay(10);
24002342:	200a      	movs	r0, #10
24002344:	f000 fefa 	bl	2400313c <HAL_Delay>
	HAL_QSPI_Receive(&hqspi, &status_reg[0],HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
24002348:	1d3b      	adds	r3, r7, #4
2400234a:	f241 3288 	movw	r2, #5000	; 0x1388
2400234e:	4619      	mov	r1, r3
24002350:	484e      	ldr	r0, [pc, #312]	; (2400248c <QSPI_Configuration+0x18c>)
24002352:	f011 fa29 	bl	240137a8 <HAL_QSPI_Receive>
	HAL_Delay(10);
24002356:	200a      	movs	r0, #10
24002358:	f000 fef0 	bl	2400313c <HAL_Delay>

	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
2400235c:	f44f 7380 	mov.w	r3, #256	; 0x100
24002360:	623b      	str	r3, [r7, #32]
	sCommand.Instruction = 0x35;
24002362:	2335      	movs	r3, #53	; 0x35
24002364:	60bb      	str	r3, [r7, #8]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
24002366:	2300      	movs	r3, #0
24002368:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
2400236a:	2300      	movs	r3, #0
2400236c:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DataMode = QSPI_DATA_1_LINE;
2400236e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
24002372:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DummyCycles = 0;
24002374:	2300      	movs	r3, #0
24002376:	61fb      	str	r3, [r7, #28]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
24002378:	2300      	movs	r3, #0
2400237a:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
2400237c:	2300      	movs	r3, #0
2400237e:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
24002380:	2300      	movs	r3, #0
24002382:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.NbData = 1;
24002384:	2301      	movs	r3, #1
24002386:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
24002388:	f107 0308 	add.w	r3, r7, #8
2400238c:	f241 3288 	movw	r2, #5000	; 0x1388
24002390:	4619      	mov	r1, r3
24002392:	483e      	ldr	r0, [pc, #248]	; (2400248c <QSPI_Configuration+0x18c>)
24002394:	f011 f8b2 	bl	240134fc <HAL_QSPI_Command>
	HAL_Delay(10);
24002398:	200a      	movs	r0, #10
2400239a:	f000 fecf 	bl	2400313c <HAL_Delay>
	HAL_QSPI_Receive(&hqspi, &status_reg[1],HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
2400239e:	1d3b      	adds	r3, r7, #4
240023a0:	3301      	adds	r3, #1
240023a2:	f241 3288 	movw	r2, #5000	; 0x1388
240023a6:	4619      	mov	r1, r3
240023a8:	4838      	ldr	r0, [pc, #224]	; (2400248c <QSPI_Configuration+0x18c>)
240023aa:	f011 f9fd 	bl	240137a8 <HAL_QSPI_Receive>
	HAL_Delay(10);
240023ae:	200a      	movs	r0, #10
240023b0:	f000 fec4 	bl	2400313c <HAL_Delay>

	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
240023b4:	f44f 7380 	mov.w	r3, #256	; 0x100
240023b8:	623b      	str	r3, [r7, #32]
	sCommand.Instruction = 0x15;
240023ba:	2315      	movs	r3, #21
240023bc:	60bb      	str	r3, [r7, #8]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
240023be:	2300      	movs	r3, #0
240023c0:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
240023c2:	2300      	movs	r3, #0
240023c4:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DataMode = QSPI_DATA_1_LINE;
240023c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
240023ca:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DummyCycles = 0;
240023cc:	2300      	movs	r3, #0
240023ce:	61fb      	str	r3, [r7, #28]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
240023d0:	2300      	movs	r3, #0
240023d2:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
240023d4:	2300      	movs	r3, #0
240023d6:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
240023d8:	2300      	movs	r3, #0
240023da:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.NbData = 1;
240023dc:	2301      	movs	r3, #1
240023de:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
240023e0:	f107 0308 	add.w	r3, r7, #8
240023e4:	f241 3288 	movw	r2, #5000	; 0x1388
240023e8:	4619      	mov	r1, r3
240023ea:	4828      	ldr	r0, [pc, #160]	; (2400248c <QSPI_Configuration+0x18c>)
240023ec:	f011 f886 	bl	240134fc <HAL_QSPI_Command>
	HAL_Delay(10);
240023f0:	200a      	movs	r0, #10
240023f2:	f000 fea3 	bl	2400313c <HAL_Delay>
	HAL_QSPI_Receive(&hqspi, &status_reg[2],HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
240023f6:	1d3b      	adds	r3, r7, #4
240023f8:	3302      	adds	r3, #2
240023fa:	f241 3288 	movw	r2, #5000	; 0x1388
240023fe:	4619      	mov	r1, r3
24002400:	4822      	ldr	r0, [pc, #136]	; (2400248c <QSPI_Configuration+0x18c>)
24002402:	f011 f9d1 	bl	240137a8 <HAL_QSPI_Receive>
	HAL_Delay(10);
24002406:	200a      	movs	r0, #10
24002408:	f000 fe98 	bl	2400313c <HAL_Delay>

	/*modify buffer to enable quad mode*/
	status_reg[1] |= 0x04;
2400240c:	797b      	ldrb	r3, [r7, #5]
2400240e:	f043 0304 	orr.w	r3, r3, #4
24002412:	b2db      	uxtb	r3, r3
24002414:	717b      	strb	r3, [r7, #5]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
24002416:	f44f 7380 	mov.w	r3, #256	; 0x100
2400241a:	623b      	str	r3, [r7, #32]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
2400241c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
24002420:	617b      	str	r3, [r7, #20]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
24002422:	2300      	movs	r3, #0
24002424:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
24002426:	2300      	movs	r3, #0
24002428:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
2400242a:	2300      	movs	r3, #0
2400242c:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
2400242e:	2300      	movs	r3, #0
24002430:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.Instruction = 0x31;
24002432:	2331      	movs	r3, #49	; 0x31
24002434:	60bb      	str	r3, [r7, #8]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
24002436:	2300      	movs	r3, #0
24002438:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DataMode = QSPI_DATA_1_LINE;
2400243a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400243e:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DummyCycles = 0;
24002440:	2300      	movs	r3, #0
24002442:	61fb      	str	r3, [r7, #28]
	sCommand.NbData = 1;
24002444:	2301      	movs	r3, #1
24002446:	633b      	str	r3, [r7, #48]	; 0x30

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
24002448:	f107 0308 	add.w	r3, r7, #8
2400244c:	f241 3288 	movw	r2, #5000	; 0x1388
24002450:	4619      	mov	r1, r3
24002452:	480e      	ldr	r0, [pc, #56]	; (2400248c <QSPI_Configuration+0x18c>)
24002454:	f011 f852 	bl	240134fc <HAL_QSPI_Command>
24002458:	4603      	mov	r3, r0
2400245a:	2b00      	cmp	r3, #0
2400245c:	d001      	beq.n	24002462 <QSPI_Configuration+0x162>
			!= HAL_OK) {
		return HAL_ERROR;
2400245e:	2301      	movs	r3, #1
24002460:	e00f      	b.n	24002482 <QSPI_Configuration+0x182>
	}

	if (HAL_QSPI_Transmit(&hqspi, &status_reg[1],HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
24002462:	1d3b      	adds	r3, r7, #4
24002464:	3301      	adds	r3, #1
24002466:	f241 3288 	movw	r2, #5000	; 0x1388
2400246a:	4619      	mov	r1, r3
2400246c:	4807      	ldr	r0, [pc, #28]	; (2400248c <QSPI_Configuration+0x18c>)
2400246e:	f011 f909 	bl	24013684 <HAL_QSPI_Transmit>
24002472:	4603      	mov	r3, r0
24002474:	2b00      	cmp	r3, #0
24002476:	d003      	beq.n	24002480 <QSPI_Configuration+0x180>
		Error_Handler();
24002478:	f7ff fd50 	bl	24001f1c <Error_Handler>
		return HAL_ERROR;
2400247c:	2301      	movs	r3, #1
2400247e:	e000      	b.n	24002482 <QSPI_Configuration+0x182>
	}

	return HAL_OK;
24002480:	2300      	movs	r3, #0
}
24002482:	4618      	mov	r0, r3
24002484:	3740      	adds	r7, #64	; 0x40
24002486:	46bd      	mov	sp, r7
24002488:	bd80      	pop	{r7, pc}
2400248a:	bf00      	nop
2400248c:	2400153c 	.word	0x2400153c

24002490 <CSP_QSPI_EraseSector>:
//        return HAL_ERROR;
//    }
//    return HAL_OK;
//}

uint8_t CSP_QSPI_EraseSector(uint32_t EraseStartAddress, uint32_t EraseEndAddress) {
24002490:	b580      	push	{r7, lr}
24002492:	b090      	sub	sp, #64	; 0x40
24002494:	af00      	add	r7, sp, #0
24002496:	6078      	str	r0, [r7, #4]
24002498:	6039      	str	r1, [r7, #0]

    QSPI_CommandTypeDef sCommand;

    EraseStartAddress = EraseStartAddress
2400249a:	687a      	ldr	r2, [r7, #4]
2400249c:	4b23      	ldr	r3, [pc, #140]	; (2400252c <CSP_QSPI_EraseSector+0x9c>)
2400249e:	4013      	ands	r3, r2
240024a0:	607b      	str	r3, [r7, #4]
                        - EraseStartAddress % MEMORY_SECTOR_SIZE;

    /* Erasing Sequence -------------------------------------------------- */
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
240024a2:	f44f 7380 	mov.w	r3, #256	; 0x100
240024a6:	623b      	str	r3, [r7, #32]
    sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
240024a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
240024ac:	617b      	str	r3, [r7, #20]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
240024ae:	2300      	movs	r3, #0
240024b0:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
240024b2:	2300      	movs	r3, #0
240024b4:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
240024b6:	2300      	movs	r3, #0
240024b8:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
240024ba:	2300      	movs	r3, #0
240024bc:	63fb      	str	r3, [r7, #60]	; 0x3c
    sCommand.Instruction = SECTOR_ERASE_CMD;
240024be:	2320      	movs	r3, #32
240024c0:	60bb      	str	r3, [r7, #8]
    sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
240024c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
240024c6:	627b      	str	r3, [r7, #36]	; 0x24

    sCommand.DataMode = QSPI_DATA_NONE;
240024c8:	2300      	movs	r3, #0
240024ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.DummyCycles = 0;
240024cc:	2300      	movs	r3, #0
240024ce:	61fb      	str	r3, [r7, #28]

    while (EraseEndAddress >= EraseStartAddress) {
240024d0:	e022      	b.n	24002518 <CSP_QSPI_EraseSector+0x88>
        sCommand.Address = (EraseStartAddress & 0x0FFFFFFF);
240024d2:	687b      	ldr	r3, [r7, #4]
240024d4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
240024d8:	60fb      	str	r3, [r7, #12]

        if (QSPI_WriteEnable() != HAL_OK) {
240024da:	f7ff fec7 	bl	2400226c <QSPI_WriteEnable>
240024de:	4603      	mov	r3, r0
240024e0:	2b00      	cmp	r3, #0
240024e2:	d001      	beq.n	240024e8 <CSP_QSPI_EraseSector+0x58>
            return HAL_ERROR;
240024e4:	2301      	movs	r3, #1
240024e6:	e01c      	b.n	24002522 <CSP_QSPI_EraseSector+0x92>
        }

        if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
240024e8:	f107 0308 	add.w	r3, r7, #8
240024ec:	f241 3288 	movw	r2, #5000	; 0x1388
240024f0:	4619      	mov	r1, r3
240024f2:	480f      	ldr	r0, [pc, #60]	; (24002530 <CSP_QSPI_EraseSector+0xa0>)
240024f4:	f011 f802 	bl	240134fc <HAL_QSPI_Command>
240024f8:	4603      	mov	r3, r0
240024fa:	2b00      	cmp	r3, #0
240024fc:	d001      	beq.n	24002502 <CSP_QSPI_EraseSector+0x72>
            != HAL_OK) {
            return HAL_ERROR;
240024fe:	2301      	movs	r3, #1
24002500:	e00f      	b.n	24002522 <CSP_QSPI_EraseSector+0x92>
        }
        EraseStartAddress += MEMORY_SECTOR_SIZE;
24002502:	687b      	ldr	r3, [r7, #4]
24002504:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
24002508:	607b      	str	r3, [r7, #4]

        if (QSPI_AutoPollingMemReady() != HAL_OK) {
2400250a:	f7ff fe77 	bl	240021fc <QSPI_AutoPollingMemReady>
2400250e:	4603      	mov	r3, r0
24002510:	2b00      	cmp	r3, #0
24002512:	d001      	beq.n	24002518 <CSP_QSPI_EraseSector+0x88>
            return HAL_ERROR;
24002514:	2301      	movs	r3, #1
24002516:	e004      	b.n	24002522 <CSP_QSPI_EraseSector+0x92>
    while (EraseEndAddress >= EraseStartAddress) {
24002518:	683a      	ldr	r2, [r7, #0]
2400251a:	687b      	ldr	r3, [r7, #4]
2400251c:	429a      	cmp	r2, r3
2400251e:	d2d8      	bcs.n	240024d2 <CSP_QSPI_EraseSector+0x42>
        }
    }

    return HAL_OK;
24002520:	2300      	movs	r3, #0
}
24002522:	4618      	mov	r0, r3
24002524:	3740      	adds	r7, #64	; 0x40
24002526:	46bd      	mov	sp, r7
24002528:	bd80      	pop	{r7, pc}
2400252a:	bf00      	nop
2400252c:	fffff000 	.word	0xfffff000
24002530:	2400153c 	.word	0x2400153c

24002534 <CSP_QSPI_WriteMemory>:

uint8_t CSP_QSPI_WriteMemory(uint8_t* buffer, uint32_t address, uint32_t buffer_size) {
24002534:	b580      	push	{r7, lr}
24002536:	b096      	sub	sp, #88	; 0x58
24002538:	af00      	add	r7, sp, #0
2400253a:	60f8      	str	r0, [r7, #12]
2400253c:	60b9      	str	r1, [r7, #8]
2400253e:	607a      	str	r2, [r7, #4]

    QSPI_CommandTypeDef sCommand;
    uint32_t end_addr, current_size, current_addr;

    /* Calculation of the size between the write address and the end of the page */
    current_addr = 0;
24002540:	2300      	movs	r3, #0
24002542:	653b      	str	r3, [r7, #80]	; 0x50
    //
//    while (current_addr <= address) {
//        current_addr += MEMORY_PAGE_SIZE;
//    }
//    current_size = current_addr - address;
    current_size = MEMORY_PAGE_SIZE - (address % MEMORY_PAGE_SIZE);
24002544:	68bb      	ldr	r3, [r7, #8]
24002546:	b2db      	uxtb	r3, r3
24002548:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
2400254c:	657b      	str	r3, [r7, #84]	; 0x54
    /* Check if the size of the data is less than the remaining place in the page */
    if (current_size > buffer_size) {
2400254e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
24002550:	687b      	ldr	r3, [r7, #4]
24002552:	429a      	cmp	r2, r3
24002554:	d901      	bls.n	2400255a <CSP_QSPI_WriteMemory+0x26>
        current_size = buffer_size;
24002556:	687b      	ldr	r3, [r7, #4]
24002558:	657b      	str	r3, [r7, #84]	; 0x54
    }

    /* Initialize the adress variables */
    current_addr = address;
2400255a:	68bb      	ldr	r3, [r7, #8]
2400255c:	653b      	str	r3, [r7, #80]	; 0x50
    end_addr = address + buffer_size;
2400255e:	68ba      	ldr	r2, [r7, #8]
24002560:	687b      	ldr	r3, [r7, #4]
24002562:	4413      	add	r3, r2
24002564:	64fb      	str	r3, [r7, #76]	; 0x4c

    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
24002566:	f44f 7380 	mov.w	r3, #256	; 0x100
2400256a:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
2400256c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
24002570:	623b      	str	r3, [r7, #32]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
24002572:	2300      	movs	r3, #0
24002574:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
24002576:	2300      	movs	r3, #0
24002578:	643b      	str	r3, [r7, #64]	; 0x40
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
2400257a:	2300      	movs	r3, #0
2400257c:	647b      	str	r3, [r7, #68]	; 0x44
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
2400257e:	2300      	movs	r3, #0
24002580:	64bb      	str	r3, [r7, #72]	; 0x48
    sCommand.Instruction = QUAD_IN_FAST_PROG_CMD;
24002582:	2332      	movs	r3, #50	; 0x32
24002584:	617b      	str	r3, [r7, #20]
    sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
24002586:	f44f 6380 	mov.w	r3, #1024	; 0x400
2400258a:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.DataMode = QSPI_DATA_4_LINES;
2400258c:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
24002590:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.NbData = buffer_size;
24002592:	687b      	ldr	r3, [r7, #4]
24002594:	63fb      	str	r3, [r7, #60]	; 0x3c
    sCommand.Address = address;
24002596:	68bb      	ldr	r3, [r7, #8]
24002598:	61bb      	str	r3, [r7, #24]
    sCommand.DummyCycles = 0;
2400259a:	2300      	movs	r3, #0
2400259c:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Perform the write page by page */
    do {
        sCommand.Address = current_addr;
2400259e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
240025a0:	61bb      	str	r3, [r7, #24]
        sCommand.NbData = current_size;
240025a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
240025a4:	63fb      	str	r3, [r7, #60]	; 0x3c

        if (current_size == 0) {
240025a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
240025a8:	2b00      	cmp	r3, #0
240025aa:	d101      	bne.n	240025b0 <CSP_QSPI_WriteMemory+0x7c>
            return HAL_OK;
240025ac:	2300      	movs	r3, #0
240025ae:	e03f      	b.n	24002630 <CSP_QSPI_WriteMemory+0xfc>
        }

        /* Enable write operations */
        if (QSPI_WriteEnable() != HAL_OK) {
240025b0:	f7ff fe5c 	bl	2400226c <QSPI_WriteEnable>
240025b4:	4603      	mov	r3, r0
240025b6:	2b00      	cmp	r3, #0
240025b8:	d001      	beq.n	240025be <CSP_QSPI_WriteMemory+0x8a>
            return HAL_ERROR;
240025ba:	2301      	movs	r3, #1
240025bc:	e038      	b.n	24002630 <CSP_QSPI_WriteMemory+0xfc>
        }

        /* Configure the command */
        if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
240025be:	f107 0314 	add.w	r3, r7, #20
240025c2:	f241 3288 	movw	r2, #5000	; 0x1388
240025c6:	4619      	mov	r1, r3
240025c8:	481b      	ldr	r0, [pc, #108]	; (24002638 <CSP_QSPI_WriteMemory+0x104>)
240025ca:	f010 ff97 	bl	240134fc <HAL_QSPI_Command>
240025ce:	4603      	mov	r3, r0
240025d0:	2b00      	cmp	r3, #0
240025d2:	d001      	beq.n	240025d8 <CSP_QSPI_WriteMemory+0xa4>
            != HAL_OK) {

            return HAL_ERROR;
240025d4:	2301      	movs	r3, #1
240025d6:	e02b      	b.n	24002630 <CSP_QSPI_WriteMemory+0xfc>
        }

        /* Transmission of the data */
        if (HAL_QSPI_Transmit(&hqspi, buffer, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
240025d8:	f241 3288 	movw	r2, #5000	; 0x1388
240025dc:	68f9      	ldr	r1, [r7, #12]
240025de:	4816      	ldr	r0, [pc, #88]	; (24002638 <CSP_QSPI_WriteMemory+0x104>)
240025e0:	f011 f850 	bl	24013684 <HAL_QSPI_Transmit>
240025e4:	4603      	mov	r3, r0
240025e6:	2b00      	cmp	r3, #0
240025e8:	d001      	beq.n	240025ee <CSP_QSPI_WriteMemory+0xba>

            return HAL_ERROR;
240025ea:	2301      	movs	r3, #1
240025ec:	e020      	b.n	24002630 <CSP_QSPI_WriteMemory+0xfc>
        }

        /* Configure automatic polling mode to wait for end of program */
        if (QSPI_AutoPollingMemReady() != HAL_OK) {
240025ee:	f7ff fe05 	bl	240021fc <QSPI_AutoPollingMemReady>
240025f2:	4603      	mov	r3, r0
240025f4:	2b00      	cmp	r3, #0
240025f6:	d001      	beq.n	240025fc <CSP_QSPI_WriteMemory+0xc8>
            return HAL_ERROR;
240025f8:	2301      	movs	r3, #1
240025fa:	e019      	b.n	24002630 <CSP_QSPI_WriteMemory+0xfc>
        }

        /* Update the address and size variables for next page programming */
        current_addr += current_size;
240025fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
240025fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
24002600:	4413      	add	r3, r2
24002602:	653b      	str	r3, [r7, #80]	; 0x50
        buffer += current_size;
24002604:	68fa      	ldr	r2, [r7, #12]
24002606:	6d7b      	ldr	r3, [r7, #84]	; 0x54
24002608:	4413      	add	r3, r2
2400260a:	60fb      	str	r3, [r7, #12]
        current_size =
            ((current_addr + MEMORY_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : MEMORY_PAGE_SIZE;
2400260c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
2400260e:	f503 7380 	add.w	r3, r3, #256	; 0x100
24002612:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
24002614:	429a      	cmp	r2, r3
24002616:	d203      	bcs.n	24002620 <CSP_QSPI_WriteMemory+0xec>
24002618:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
2400261a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
2400261c:	1ad3      	subs	r3, r2, r3
2400261e:	e001      	b.n	24002624 <CSP_QSPI_WriteMemory+0xf0>
24002620:	f44f 7380 	mov.w	r3, #256	; 0x100
        current_size =
24002624:	657b      	str	r3, [r7, #84]	; 0x54
    } while (current_addr <= end_addr);
24002626:	6d3a      	ldr	r2, [r7, #80]	; 0x50
24002628:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
2400262a:	429a      	cmp	r2, r3
2400262c:	d9b7      	bls.n	2400259e <CSP_QSPI_WriteMemory+0x6a>

    return HAL_OK;
2400262e:	2300      	movs	r3, #0

}
24002630:	4618      	mov	r0, r3
24002632:	3758      	adds	r7, #88	; 0x58
24002634:	46bd      	mov	sp, r7
24002636:	bd80      	pop	{r7, pc}
24002638:	2400153c 	.word	0x2400153c

2400263c <CSP_QSPI_EnableMemoryMappedMode>:


uint8_t CSP_QSPI_EnableMemoryMappedMode(void) {
2400263c:	b580      	push	{r7, lr}
2400263e:	b090      	sub	sp, #64	; 0x40
24002640:	af00      	add	r7, sp, #0
    QSPI_CommandTypeDef sCommand;
    QSPI_MemoryMappedTypeDef sMemMappedCfg;

    /* Enable Memory-Mapped mode-------------------------------------------------- */

    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
24002642:	f44f 7380 	mov.w	r3, #256	; 0x100
24002646:	623b      	str	r3, [r7, #32]
    sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
24002648:	f44f 5300 	mov.w	r3, #8192	; 0x2000
2400264c:	617b      	str	r3, [r7, #20]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
2400264e:	2300      	movs	r3, #0
24002650:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
24002652:	2300      	movs	r3, #0
24002654:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
24002656:	2300      	movs	r3, #0
24002658:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
2400265a:	2300      	movs	r3, #0
2400265c:	63fb      	str	r3, [r7, #60]	; 0x3c
    sCommand.AddressMode = QSPI_ADDRESS_4_LINES;
2400265e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
24002662:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.DataMode = QSPI_DATA_4_LINES;
24002664:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
24002668:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.NbData = 0;
2400266a:	2300      	movs	r3, #0
2400266c:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.Address = 0;
2400266e:	2300      	movs	r3, #0
24002670:	60fb      	str	r3, [r7, #12]
    sCommand.Instruction = QUAD_OUT_FAST_READ_CMD;
24002672:	23eb      	movs	r3, #235	; 0xeb
24002674:	60bb      	str	r3, [r7, #8]
    sCommand.DummyCycles = 6;//DUMMY_CLOCK_CYCLES_READ_QUAD;
24002676:	2306      	movs	r3, #6
24002678:	61fb      	str	r3, [r7, #28]

    sMemMappedCfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
2400267a:	2300      	movs	r3, #0
2400267c:	607b      	str	r3, [r7, #4]

    if (HAL_QSPI_MemoryMapped(&hqspi, &sCommand, &sMemMappedCfg) != HAL_OK) {
2400267e:	463a      	mov	r2, r7
24002680:	f107 0308 	add.w	r3, r7, #8
24002684:	4619      	mov	r1, r3
24002686:	4806      	ldr	r0, [pc, #24]	; (240026a0 <CSP_QSPI_EnableMemoryMappedMode+0x64>)
24002688:	f011 fcd1 	bl	2401402e <HAL_QSPI_MemoryMapped>
2400268c:	4603      	mov	r3, r0
2400268e:	2b00      	cmp	r3, #0
24002690:	d001      	beq.n	24002696 <CSP_QSPI_EnableMemoryMappedMode+0x5a>
        return HAL_ERROR;
24002692:	2301      	movs	r3, #1
24002694:	e000      	b.n	24002698 <CSP_QSPI_EnableMemoryMappedMode+0x5c>
    }
    return HAL_OK;
24002696:	2300      	movs	r3, #0
}
24002698:	4618      	mov	r0, r3
2400269a:	3740      	adds	r7, #64	; 0x40
2400269c:	46bd      	mov	sp, r7
2400269e:	bd80      	pop	{r7, pc}
240026a0:	2400153c 	.word	0x2400153c

240026a4 <QSPI_ResetChip>:

uint8_t QSPI_ResetChip() {
240026a4:	b580      	push	{r7, lr}
240026a6:	b090      	sub	sp, #64	; 0x40
240026a8:	af00      	add	r7, sp, #0
    QSPI_CommandTypeDef sCommand;
    uint32_t temp = 0;
240026aa:	2300      	movs	r3, #0
240026ac:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* Erasing Sequence -------------------------------------------------- */
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
240026ae:	f44f 7380 	mov.w	r3, #256	; 0x100
240026b2:	61fb      	str	r3, [r7, #28]
    sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
240026b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
240026b8:	613b      	str	r3, [r7, #16]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
240026ba:	2300      	movs	r3, #0
240026bc:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
240026be:	2300      	movs	r3, #0
240026c0:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
240026c2:	2300      	movs	r3, #0
240026c4:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
240026c6:	2300      	movs	r3, #0
240026c8:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.Instruction = RESET_ENABLE_CMD;
240026ca:	2366      	movs	r3, #102	; 0x66
240026cc:	607b      	str	r3, [r7, #4]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
240026ce:	2300      	movs	r3, #0
240026d0:	623b      	str	r3, [r7, #32]
    sCommand.Address = 0;
240026d2:	2300      	movs	r3, #0
240026d4:	60bb      	str	r3, [r7, #8]
    sCommand.DataMode = QSPI_DATA_NONE;
240026d6:	2300      	movs	r3, #0
240026d8:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.DummyCycles = 0;
240026da:	2300      	movs	r3, #0
240026dc:	61bb      	str	r3, [r7, #24]

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
240026de:	1d3b      	adds	r3, r7, #4
240026e0:	f241 3288 	movw	r2, #5000	; 0x1388
240026e4:	4619      	mov	r1, r3
240026e6:	481d      	ldr	r0, [pc, #116]	; (2400275c <QSPI_ResetChip+0xb8>)
240026e8:	f010 ff08 	bl	240134fc <HAL_QSPI_Command>
240026ec:	4603      	mov	r3, r0
240026ee:	2b00      	cmp	r3, #0
240026f0:	d001      	beq.n	240026f6 <QSPI_ResetChip+0x52>
        != HAL_OK) {
        return HAL_ERROR;
240026f2:	2301      	movs	r3, #1
240026f4:	e02e      	b.n	24002754 <QSPI_ResetChip+0xb0>
    }
    for (temp = 0; temp < 0x2f; temp++) {
240026f6:	2300      	movs	r3, #0
240026f8:	63fb      	str	r3, [r7, #60]	; 0x3c
240026fa:	e003      	b.n	24002704 <QSPI_ResetChip+0x60>
        __NOP();
240026fc:	bf00      	nop
    for (temp = 0; temp < 0x2f; temp++) {
240026fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
24002700:	3301      	adds	r3, #1
24002702:	63fb      	str	r3, [r7, #60]	; 0x3c
24002704:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
24002706:	2b2e      	cmp	r3, #46	; 0x2e
24002708:	d9f8      	bls.n	240026fc <QSPI_ResetChip+0x58>
    }

    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
2400270a:	f44f 7380 	mov.w	r3, #256	; 0x100
2400270e:	61fb      	str	r3, [r7, #28]
    sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
24002710:	f44f 5300 	mov.w	r3, #8192	; 0x2000
24002714:	613b      	str	r3, [r7, #16]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
24002716:	2300      	movs	r3, #0
24002718:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
2400271a:	2300      	movs	r3, #0
2400271c:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
2400271e:	2300      	movs	r3, #0
24002720:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
24002722:	2300      	movs	r3, #0
24002724:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.Instruction = RESET_EXECUTE_CMD;
24002726:	2399      	movs	r3, #153	; 0x99
24002728:	607b      	str	r3, [r7, #4]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
2400272a:	2300      	movs	r3, #0
2400272c:	623b      	str	r3, [r7, #32]
    sCommand.Address = 0;
2400272e:	2300      	movs	r3, #0
24002730:	60bb      	str	r3, [r7, #8]
    sCommand.DataMode = QSPI_DATA_NONE;
24002732:	2300      	movs	r3, #0
24002734:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.DummyCycles = 0;
24002736:	2300      	movs	r3, #0
24002738:	61bb      	str	r3, [r7, #24]

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
2400273a:	1d3b      	adds	r3, r7, #4
2400273c:	f241 3288 	movw	r2, #5000	; 0x1388
24002740:	4619      	mov	r1, r3
24002742:	4806      	ldr	r0, [pc, #24]	; (2400275c <QSPI_ResetChip+0xb8>)
24002744:	f010 feda 	bl	240134fc <HAL_QSPI_Command>
24002748:	4603      	mov	r3, r0
2400274a:	2b00      	cmp	r3, #0
2400274c:	d001      	beq.n	24002752 <QSPI_ResetChip+0xae>
        != HAL_OK) {
        return HAL_ERROR;
2400274e:	2301      	movs	r3, #1
24002750:	e000      	b.n	24002754 <QSPI_ResetChip+0xb0>
    }
    return HAL_OK;
24002752:	2300      	movs	r3, #0
}
24002754:	4618      	mov	r0, r3
24002756:	3740      	adds	r7, #64	; 0x40
24002758:	46bd      	mov	sp, r7
2400275a:	bd80      	pop	{r7, pc}
2400275c:	2400153c 	.word	0x2400153c

24002760 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
24002760:	b480      	push	{r7}
24002762:	b083      	sub	sp, #12
24002764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
24002766:	4b0a      	ldr	r3, [pc, #40]	; (24002790 <HAL_MspInit+0x30>)
24002768:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
2400276c:	4a08      	ldr	r2, [pc, #32]	; (24002790 <HAL_MspInit+0x30>)
2400276e:	f043 0302 	orr.w	r3, r3, #2
24002772:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
24002776:	4b06      	ldr	r3, [pc, #24]	; (24002790 <HAL_MspInit+0x30>)
24002778:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
2400277c:	f003 0302 	and.w	r3, r3, #2
24002780:	607b      	str	r3, [r7, #4]
24002782:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
24002784:	bf00      	nop
24002786:	370c      	adds	r7, #12
24002788:	46bd      	mov	sp, r7
2400278a:	f85d 7b04 	ldr.w	r7, [sp], #4
2400278e:	4770      	bx	lr
24002790:	58024400 	.word	0x58024400

24002794 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
24002794:	b480      	push	{r7}
24002796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
24002798:	e7fe      	b.n	24002798 <NMI_Handler+0x4>

2400279a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
2400279a:	b480      	push	{r7}
2400279c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
2400279e:	e7fe      	b.n	2400279e <HardFault_Handler+0x4>

240027a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
240027a0:	b480      	push	{r7}
240027a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
240027a4:	e7fe      	b.n	240027a4 <MemManage_Handler+0x4>

240027a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
240027a6:	b480      	push	{r7}
240027a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
240027aa:	e7fe      	b.n	240027aa <BusFault_Handler+0x4>

240027ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
240027ac:	b480      	push	{r7}
240027ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
240027b0:	e7fe      	b.n	240027b0 <UsageFault_Handler+0x4>

240027b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
240027b2:	b480      	push	{r7}
240027b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
240027b6:	bf00      	nop
240027b8:	46bd      	mov	sp, r7
240027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
240027be:	4770      	bx	lr

240027c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
240027c0:	b480      	push	{r7}
240027c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
240027c4:	bf00      	nop
240027c6:	46bd      	mov	sp, r7
240027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
240027cc:	4770      	bx	lr

240027ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
240027ce:	b480      	push	{r7}
240027d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
240027d2:	bf00      	nop
240027d4:	46bd      	mov	sp, r7
240027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
240027da:	4770      	bx	lr

240027dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
240027dc:	b580      	push	{r7, lr}
240027de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
240027e0:	f000 fc4c 	bl	2400307c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
240027e4:	bf00      	nop
240027e6:	bd80      	pop	{r7, pc}

240027e8 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
240027e8:	b480      	push	{r7}
240027ea:	af00      	add	r7, sp, #0
}
240027ec:	bf00      	nop
240027ee:	46bd      	mov	sp, r7
240027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
240027f4:	4770      	bx	lr

240027f6 <_getpid>:

int _getpid(void)
{
240027f6:	b480      	push	{r7}
240027f8:	af00      	add	r7, sp, #0
  return 1;
240027fa:	2301      	movs	r3, #1
}
240027fc:	4618      	mov	r0, r3
240027fe:	46bd      	mov	sp, r7
24002800:	f85d 7b04 	ldr.w	r7, [sp], #4
24002804:	4770      	bx	lr

24002806 <_kill>:

int _kill(int pid, int sig)
{
24002806:	b580      	push	{r7, lr}
24002808:	b082      	sub	sp, #8
2400280a:	af00      	add	r7, sp, #0
2400280c:	6078      	str	r0, [r7, #4]
2400280e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
24002810:	f016 fec8 	bl	240195a4 <__errno>
24002814:	4603      	mov	r3, r0
24002816:	2216      	movs	r2, #22
24002818:	601a      	str	r2, [r3, #0]
  return -1;
2400281a:	f04f 33ff 	mov.w	r3, #4294967295
}
2400281e:	4618      	mov	r0, r3
24002820:	3708      	adds	r7, #8
24002822:	46bd      	mov	sp, r7
24002824:	bd80      	pop	{r7, pc}

24002826 <_exit>:

void _exit (int status)
{
24002826:	b580      	push	{r7, lr}
24002828:	b082      	sub	sp, #8
2400282a:	af00      	add	r7, sp, #0
2400282c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
2400282e:	f04f 31ff 	mov.w	r1, #4294967295
24002832:	6878      	ldr	r0, [r7, #4]
24002834:	f7ff ffe7 	bl	24002806 <_kill>
  while (1) {}    /* Make sure we hang here */
24002838:	e7fe      	b.n	24002838 <_exit+0x12>

2400283a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
2400283a:	b580      	push	{r7, lr}
2400283c:	b086      	sub	sp, #24
2400283e:	af00      	add	r7, sp, #0
24002840:	60f8      	str	r0, [r7, #12]
24002842:	60b9      	str	r1, [r7, #8]
24002844:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
24002846:	2300      	movs	r3, #0
24002848:	617b      	str	r3, [r7, #20]
2400284a:	e00a      	b.n	24002862 <_read+0x28>
  {
    *ptr++ = __io_getchar();
2400284c:	f3af 8000 	nop.w
24002850:	4601      	mov	r1, r0
24002852:	68bb      	ldr	r3, [r7, #8]
24002854:	1c5a      	adds	r2, r3, #1
24002856:	60ba      	str	r2, [r7, #8]
24002858:	b2ca      	uxtb	r2, r1
2400285a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
2400285c:	697b      	ldr	r3, [r7, #20]
2400285e:	3301      	adds	r3, #1
24002860:	617b      	str	r3, [r7, #20]
24002862:	697a      	ldr	r2, [r7, #20]
24002864:	687b      	ldr	r3, [r7, #4]
24002866:	429a      	cmp	r2, r3
24002868:	dbf0      	blt.n	2400284c <_read+0x12>
  }

  return len;
2400286a:	687b      	ldr	r3, [r7, #4]
}
2400286c:	4618      	mov	r0, r3
2400286e:	3718      	adds	r7, #24
24002870:	46bd      	mov	sp, r7
24002872:	bd80      	pop	{r7, pc}

24002874 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
24002874:	b580      	push	{r7, lr}
24002876:	b086      	sub	sp, #24
24002878:	af00      	add	r7, sp, #0
2400287a:	60f8      	str	r0, [r7, #12]
2400287c:	60b9      	str	r1, [r7, #8]
2400287e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
24002880:	2300      	movs	r3, #0
24002882:	617b      	str	r3, [r7, #20]
24002884:	e009      	b.n	2400289a <_write+0x26>
  {
    __io_putchar(*ptr++);
24002886:	68bb      	ldr	r3, [r7, #8]
24002888:	1c5a      	adds	r2, r3, #1
2400288a:	60ba      	str	r2, [r7, #8]
2400288c:	781b      	ldrb	r3, [r3, #0]
2400288e:	4618      	mov	r0, r3
24002890:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
24002894:	697b      	ldr	r3, [r7, #20]
24002896:	3301      	adds	r3, #1
24002898:	617b      	str	r3, [r7, #20]
2400289a:	697a      	ldr	r2, [r7, #20]
2400289c:	687b      	ldr	r3, [r7, #4]
2400289e:	429a      	cmp	r2, r3
240028a0:	dbf1      	blt.n	24002886 <_write+0x12>
  }
  return len;
240028a2:	687b      	ldr	r3, [r7, #4]
}
240028a4:	4618      	mov	r0, r3
240028a6:	3718      	adds	r7, #24
240028a8:	46bd      	mov	sp, r7
240028aa:	bd80      	pop	{r7, pc}

240028ac <_close>:

int _close(int file)
{
240028ac:	b480      	push	{r7}
240028ae:	b083      	sub	sp, #12
240028b0:	af00      	add	r7, sp, #0
240028b2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
240028b4:	f04f 33ff 	mov.w	r3, #4294967295
}
240028b8:	4618      	mov	r0, r3
240028ba:	370c      	adds	r7, #12
240028bc:	46bd      	mov	sp, r7
240028be:	f85d 7b04 	ldr.w	r7, [sp], #4
240028c2:	4770      	bx	lr

240028c4 <_fstat>:


int _fstat(int file, struct stat *st)
{
240028c4:	b480      	push	{r7}
240028c6:	b083      	sub	sp, #12
240028c8:	af00      	add	r7, sp, #0
240028ca:	6078      	str	r0, [r7, #4]
240028cc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
240028ce:	683b      	ldr	r3, [r7, #0]
240028d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
240028d4:	605a      	str	r2, [r3, #4]
  return 0;
240028d6:	2300      	movs	r3, #0
}
240028d8:	4618      	mov	r0, r3
240028da:	370c      	adds	r7, #12
240028dc:	46bd      	mov	sp, r7
240028de:	f85d 7b04 	ldr.w	r7, [sp], #4
240028e2:	4770      	bx	lr

240028e4 <_isatty>:

int _isatty(int file)
{
240028e4:	b480      	push	{r7}
240028e6:	b083      	sub	sp, #12
240028e8:	af00      	add	r7, sp, #0
240028ea:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
240028ec:	2301      	movs	r3, #1
}
240028ee:	4618      	mov	r0, r3
240028f0:	370c      	adds	r7, #12
240028f2:	46bd      	mov	sp, r7
240028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
240028f8:	4770      	bx	lr

240028fa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
240028fa:	b480      	push	{r7}
240028fc:	b085      	sub	sp, #20
240028fe:	af00      	add	r7, sp, #0
24002900:	60f8      	str	r0, [r7, #12]
24002902:	60b9      	str	r1, [r7, #8]
24002904:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
24002906:	2300      	movs	r3, #0
}
24002908:	4618      	mov	r0, r3
2400290a:	3714      	adds	r7, #20
2400290c:	46bd      	mov	sp, r7
2400290e:	f85d 7b04 	ldr.w	r7, [sp], #4
24002912:	4770      	bx	lr

24002914 <_open>:

int _open(char *path, int flags, ...)
{
24002914:	b40e      	push	{r1, r2, r3}
24002916:	b480      	push	{r7}
24002918:	b082      	sub	sp, #8
2400291a:	af00      	add	r7, sp, #0
2400291c:	6078      	str	r0, [r7, #4]
  (void)path;
  (void)flags;
  /* Pretend like we always fail */
  return -1;
2400291e:	f04f 33ff 	mov.w	r3, #4294967295
}
24002922:	4618      	mov	r0, r3
24002924:	3708      	adds	r7, #8
24002926:	46bd      	mov	sp, r7
24002928:	f85d 7b04 	ldr.w	r7, [sp], #4
2400292c:	b003      	add	sp, #12
2400292e:	4770      	bx	lr

24002930 <_wait>:

int _wait(int *status)
{
24002930:	b580      	push	{r7, lr}
24002932:	b082      	sub	sp, #8
24002934:	af00      	add	r7, sp, #0
24002936:	6078      	str	r0, [r7, #4]
  (void)status;
  errno = ECHILD;
24002938:	f016 fe34 	bl	240195a4 <__errno>
2400293c:	4603      	mov	r3, r0
2400293e:	220a      	movs	r2, #10
24002940:	601a      	str	r2, [r3, #0]
  return -1;
24002942:	f04f 33ff 	mov.w	r3, #4294967295
}
24002946:	4618      	mov	r0, r3
24002948:	3708      	adds	r7, #8
2400294a:	46bd      	mov	sp, r7
2400294c:	bd80      	pop	{r7, pc}

2400294e <_unlink>:

int _unlink(char *name)
{
2400294e:	b580      	push	{r7, lr}
24002950:	b082      	sub	sp, #8
24002952:	af00      	add	r7, sp, #0
24002954:	6078      	str	r0, [r7, #4]
  (void)name;
  errno = ENOENT;
24002956:	f016 fe25 	bl	240195a4 <__errno>
2400295a:	4603      	mov	r3, r0
2400295c:	2202      	movs	r2, #2
2400295e:	601a      	str	r2, [r3, #0]
  return -1;
24002960:	f04f 33ff 	mov.w	r3, #4294967295
}
24002964:	4618      	mov	r0, r3
24002966:	3708      	adds	r7, #8
24002968:	46bd      	mov	sp, r7
2400296a:	bd80      	pop	{r7, pc}

2400296c <_times>:

int _times(struct tms *buf)
{
2400296c:	b480      	push	{r7}
2400296e:	b083      	sub	sp, #12
24002970:	af00      	add	r7, sp, #0
24002972:	6078      	str	r0, [r7, #4]
  (void)buf;
  return -1;
24002974:	f04f 33ff 	mov.w	r3, #4294967295
}
24002978:	4618      	mov	r0, r3
2400297a:	370c      	adds	r7, #12
2400297c:	46bd      	mov	sp, r7
2400297e:	f85d 7b04 	ldr.w	r7, [sp], #4
24002982:	4770      	bx	lr

24002984 <_stat>:

int _stat(char *file, struct stat *st)
{
24002984:	b480      	push	{r7}
24002986:	b083      	sub	sp, #12
24002988:	af00      	add	r7, sp, #0
2400298a:	6078      	str	r0, [r7, #4]
2400298c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
2400298e:	683b      	ldr	r3, [r7, #0]
24002990:	f44f 5200 	mov.w	r2, #8192	; 0x2000
24002994:	605a      	str	r2, [r3, #4]
  return 0;
24002996:	2300      	movs	r3, #0
}
24002998:	4618      	mov	r0, r3
2400299a:	370c      	adds	r7, #12
2400299c:	46bd      	mov	sp, r7
2400299e:	f85d 7b04 	ldr.w	r7, [sp], #4
240029a2:	4770      	bx	lr

240029a4 <_link>:

int _link(char *old, char *new)
{
240029a4:	b580      	push	{r7, lr}
240029a6:	b082      	sub	sp, #8
240029a8:	af00      	add	r7, sp, #0
240029aa:	6078      	str	r0, [r7, #4]
240029ac:	6039      	str	r1, [r7, #0]
  (void)old;
  (void)new;
  errno = EMLINK;
240029ae:	f016 fdf9 	bl	240195a4 <__errno>
240029b2:	4603      	mov	r3, r0
240029b4:	221f      	movs	r2, #31
240029b6:	601a      	str	r2, [r3, #0]
  return -1;
240029b8:	f04f 33ff 	mov.w	r3, #4294967295
}
240029bc:	4618      	mov	r0, r3
240029be:	3708      	adds	r7, #8
240029c0:	46bd      	mov	sp, r7
240029c2:	bd80      	pop	{r7, pc}

240029c4 <_fork>:

int _fork(void)
{
240029c4:	b580      	push	{r7, lr}
240029c6:	af00      	add	r7, sp, #0
  errno = EAGAIN;
240029c8:	f016 fdec 	bl	240195a4 <__errno>
240029cc:	4603      	mov	r3, r0
240029ce:	220b      	movs	r2, #11
240029d0:	601a      	str	r2, [r3, #0]
  return -1;
240029d2:	f04f 33ff 	mov.w	r3, #4294967295
}
240029d6:	4618      	mov	r0, r3
240029d8:	bd80      	pop	{r7, pc}

240029da <_execve>:

int _execve(char *name, char **argv, char **env)
{
240029da:	b580      	push	{r7, lr}
240029dc:	b084      	sub	sp, #16
240029de:	af00      	add	r7, sp, #0
240029e0:	60f8      	str	r0, [r7, #12]
240029e2:	60b9      	str	r1, [r7, #8]
240029e4:	607a      	str	r2, [r7, #4]
  (void)name;
  (void)argv;
  (void)env;
  errno = ENOMEM;
240029e6:	f016 fddd 	bl	240195a4 <__errno>
240029ea:	4603      	mov	r3, r0
240029ec:	220c      	movs	r2, #12
240029ee:	601a      	str	r2, [r3, #0]
  return -1;
240029f0:	f04f 33ff 	mov.w	r3, #4294967295
}
240029f4:	4618      	mov	r0, r3
240029f6:	3710      	adds	r7, #16
240029f8:	46bd      	mov	sp, r7
240029fa:	bd80      	pop	{r7, pc}

240029fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
240029fc:	b580      	push	{r7, lr}
240029fe:	b086      	sub	sp, #24
24002a00:	af00      	add	r7, sp, #0
24002a02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
24002a04:	4a14      	ldr	r2, [pc, #80]	; (24002a58 <_sbrk+0x5c>)
24002a06:	4b15      	ldr	r3, [pc, #84]	; (24002a5c <_sbrk+0x60>)
24002a08:	1ad3      	subs	r3, r2, r3
24002a0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
24002a0c:	697b      	ldr	r3, [r7, #20]
24002a0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
24002a10:	4b13      	ldr	r3, [pc, #76]	; (24002a60 <_sbrk+0x64>)
24002a12:	681b      	ldr	r3, [r3, #0]
24002a14:	2b00      	cmp	r3, #0
24002a16:	d102      	bne.n	24002a1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
24002a18:	4b11      	ldr	r3, [pc, #68]	; (24002a60 <_sbrk+0x64>)
24002a1a:	4a12      	ldr	r2, [pc, #72]	; (24002a64 <_sbrk+0x68>)
24002a1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
24002a1e:	4b10      	ldr	r3, [pc, #64]	; (24002a60 <_sbrk+0x64>)
24002a20:	681a      	ldr	r2, [r3, #0]
24002a22:	687b      	ldr	r3, [r7, #4]
24002a24:	4413      	add	r3, r2
24002a26:	693a      	ldr	r2, [r7, #16]
24002a28:	429a      	cmp	r2, r3
24002a2a:	d207      	bcs.n	24002a3c <_sbrk+0x40>
  {
    errno = ENOMEM;
24002a2c:	f016 fdba 	bl	240195a4 <__errno>
24002a30:	4603      	mov	r3, r0
24002a32:	220c      	movs	r2, #12
24002a34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
24002a36:	f04f 33ff 	mov.w	r3, #4294967295
24002a3a:	e009      	b.n	24002a50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
24002a3c:	4b08      	ldr	r3, [pc, #32]	; (24002a60 <_sbrk+0x64>)
24002a3e:	681b      	ldr	r3, [r3, #0]
24002a40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
24002a42:	4b07      	ldr	r3, [pc, #28]	; (24002a60 <_sbrk+0x64>)
24002a44:	681a      	ldr	r2, [r3, #0]
24002a46:	687b      	ldr	r3, [r7, #4]
24002a48:	4413      	add	r3, r2
24002a4a:	4a05      	ldr	r2, [pc, #20]	; (24002a60 <_sbrk+0x64>)
24002a4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
24002a4e:	68fb      	ldr	r3, [r7, #12]
}
24002a50:	4618      	mov	r0, r3
24002a52:	3718      	adds	r7, #24
24002a54:	46bd      	mov	sp, r7
24002a56:	bd80      	pop	{r7, pc}
24002a58:	24080004 	.word	0x24080004
24002a5c:	00000400 	.word	0x00000400
24002a60:	2400158c 	.word	0x2400158c
24002a64:	24019ae8 	.word	0x24019ae8

24002a68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
24002a68:	b480      	push	{r7}
24002a6a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
24002a6c:	4b37      	ldr	r3, [pc, #220]	; (24002b4c <SystemInit+0xe4>)
24002a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
24002a72:	4a36      	ldr	r2, [pc, #216]	; (24002b4c <SystemInit+0xe4>)
24002a74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
24002a78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
24002a7c:	4b34      	ldr	r3, [pc, #208]	; (24002b50 <SystemInit+0xe8>)
24002a7e:	681b      	ldr	r3, [r3, #0]
24002a80:	f003 030f 	and.w	r3, r3, #15
24002a84:	2b06      	cmp	r3, #6
24002a86:	d807      	bhi.n	24002a98 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
24002a88:	4b31      	ldr	r3, [pc, #196]	; (24002b50 <SystemInit+0xe8>)
24002a8a:	681b      	ldr	r3, [r3, #0]
24002a8c:	f023 030f 	bic.w	r3, r3, #15
24002a90:	4a2f      	ldr	r2, [pc, #188]	; (24002b50 <SystemInit+0xe8>)
24002a92:	f043 0307 	orr.w	r3, r3, #7
24002a96:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
24002a98:	4b2e      	ldr	r3, [pc, #184]	; (24002b54 <SystemInit+0xec>)
24002a9a:	681b      	ldr	r3, [r3, #0]
24002a9c:	4a2d      	ldr	r2, [pc, #180]	; (24002b54 <SystemInit+0xec>)
24002a9e:	f043 0301 	orr.w	r3, r3, #1
24002aa2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
24002aa4:	4b2b      	ldr	r3, [pc, #172]	; (24002b54 <SystemInit+0xec>)
24002aa6:	2200      	movs	r2, #0
24002aa8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
24002aaa:	4b2a      	ldr	r3, [pc, #168]	; (24002b54 <SystemInit+0xec>)
24002aac:	681a      	ldr	r2, [r3, #0]
24002aae:	4929      	ldr	r1, [pc, #164]	; (24002b54 <SystemInit+0xec>)
24002ab0:	4b29      	ldr	r3, [pc, #164]	; (24002b58 <SystemInit+0xf0>)
24002ab2:	4013      	ands	r3, r2
24002ab4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
24002ab6:	4b26      	ldr	r3, [pc, #152]	; (24002b50 <SystemInit+0xe8>)
24002ab8:	681b      	ldr	r3, [r3, #0]
24002aba:	f003 0308 	and.w	r3, r3, #8
24002abe:	2b00      	cmp	r3, #0
24002ac0:	d007      	beq.n	24002ad2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
24002ac2:	4b23      	ldr	r3, [pc, #140]	; (24002b50 <SystemInit+0xe8>)
24002ac4:	681b      	ldr	r3, [r3, #0]
24002ac6:	f023 030f 	bic.w	r3, r3, #15
24002aca:	4a21      	ldr	r2, [pc, #132]	; (24002b50 <SystemInit+0xe8>)
24002acc:	f043 0307 	orr.w	r3, r3, #7
24002ad0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
24002ad2:	4b20      	ldr	r3, [pc, #128]	; (24002b54 <SystemInit+0xec>)
24002ad4:	2200      	movs	r2, #0
24002ad6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
24002ad8:	4b1e      	ldr	r3, [pc, #120]	; (24002b54 <SystemInit+0xec>)
24002ada:	2200      	movs	r2, #0
24002adc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
24002ade:	4b1d      	ldr	r3, [pc, #116]	; (24002b54 <SystemInit+0xec>)
24002ae0:	2200      	movs	r2, #0
24002ae2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
24002ae4:	4b1b      	ldr	r3, [pc, #108]	; (24002b54 <SystemInit+0xec>)
24002ae6:	4a1d      	ldr	r2, [pc, #116]	; (24002b5c <SystemInit+0xf4>)
24002ae8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
24002aea:	4b1a      	ldr	r3, [pc, #104]	; (24002b54 <SystemInit+0xec>)
24002aec:	4a1c      	ldr	r2, [pc, #112]	; (24002b60 <SystemInit+0xf8>)
24002aee:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
24002af0:	4b18      	ldr	r3, [pc, #96]	; (24002b54 <SystemInit+0xec>)
24002af2:	4a1c      	ldr	r2, [pc, #112]	; (24002b64 <SystemInit+0xfc>)
24002af4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
24002af6:	4b17      	ldr	r3, [pc, #92]	; (24002b54 <SystemInit+0xec>)
24002af8:	2200      	movs	r2, #0
24002afa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
24002afc:	4b15      	ldr	r3, [pc, #84]	; (24002b54 <SystemInit+0xec>)
24002afe:	4a19      	ldr	r2, [pc, #100]	; (24002b64 <SystemInit+0xfc>)
24002b00:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
24002b02:	4b14      	ldr	r3, [pc, #80]	; (24002b54 <SystemInit+0xec>)
24002b04:	2200      	movs	r2, #0
24002b06:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
24002b08:	4b12      	ldr	r3, [pc, #72]	; (24002b54 <SystemInit+0xec>)
24002b0a:	4a16      	ldr	r2, [pc, #88]	; (24002b64 <SystemInit+0xfc>)
24002b0c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
24002b0e:	4b11      	ldr	r3, [pc, #68]	; (24002b54 <SystemInit+0xec>)
24002b10:	2200      	movs	r2, #0
24002b12:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
24002b14:	4b0f      	ldr	r3, [pc, #60]	; (24002b54 <SystemInit+0xec>)
24002b16:	681b      	ldr	r3, [r3, #0]
24002b18:	4a0e      	ldr	r2, [pc, #56]	; (24002b54 <SystemInit+0xec>)
24002b1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
24002b1e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
24002b20:	4b0c      	ldr	r3, [pc, #48]	; (24002b54 <SystemInit+0xec>)
24002b22:	2200      	movs	r2, #0
24002b24:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
24002b26:	4b10      	ldr	r3, [pc, #64]	; (24002b68 <SystemInit+0x100>)
24002b28:	681a      	ldr	r2, [r3, #0]
24002b2a:	4b10      	ldr	r3, [pc, #64]	; (24002b6c <SystemInit+0x104>)
24002b2c:	4013      	ands	r3, r2
24002b2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24002b32:	d202      	bcs.n	24002b3a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
24002b34:	4b0e      	ldr	r3, [pc, #56]	; (24002b70 <SystemInit+0x108>)
24002b36:	2201      	movs	r2, #1
24002b38:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
24002b3a:	4b0e      	ldr	r3, [pc, #56]	; (24002b74 <SystemInit+0x10c>)
24002b3c:	f243 02d2 	movw	r2, #12498	; 0x30d2
24002b40:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
24002b42:	bf00      	nop
24002b44:	46bd      	mov	sp, r7
24002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
24002b4a:	4770      	bx	lr
24002b4c:	e000ed00 	.word	0xe000ed00
24002b50:	52002000 	.word	0x52002000
24002b54:	58024400 	.word	0x58024400
24002b58:	eaf6ed7f 	.word	0xeaf6ed7f
24002b5c:	02020200 	.word	0x02020200
24002b60:	01ff0000 	.word	0x01ff0000
24002b64:	01010280 	.word	0x01010280
24002b68:	5c001000 	.word	0x5c001000
24002b6c:	ffff0000 	.word	0xffff0000
24002b70:	51008108 	.word	0x51008108
24002b74:	52004000 	.word	0x52004000

24002b78 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
24002b78:	b480      	push	{r7}
24002b7a:	b08b      	sub	sp, #44	; 0x2c
24002b7c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;


  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
24002b7e:	4bb1      	ldr	r3, [pc, #708]	; (24002e44 <SystemCoreClockUpdate+0x2cc>)
24002b80:	691b      	ldr	r3, [r3, #16]
24002b82:	f003 0338 	and.w	r3, r3, #56	; 0x38
24002b86:	2b18      	cmp	r3, #24
24002b88:	f200 812e 	bhi.w	24002de8 <SystemCoreClockUpdate+0x270>
24002b8c:	a201      	add	r2, pc, #4	; (adr r2, 24002b94 <SystemCoreClockUpdate+0x1c>)
24002b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
24002b92:	bf00      	nop
24002b94:	24002bf9 	.word	0x24002bf9
24002b98:	24002de9 	.word	0x24002de9
24002b9c:	24002de9 	.word	0x24002de9
24002ba0:	24002de9 	.word	0x24002de9
24002ba4:	24002de9 	.word	0x24002de9
24002ba8:	24002de9 	.word	0x24002de9
24002bac:	24002de9 	.word	0x24002de9
24002bb0:	24002de9 	.word	0x24002de9
24002bb4:	24002c0d 	.word	0x24002c0d
24002bb8:	24002de9 	.word	0x24002de9
24002bbc:	24002de9 	.word	0x24002de9
24002bc0:	24002de9 	.word	0x24002de9
24002bc4:	24002de9 	.word	0x24002de9
24002bc8:	24002de9 	.word	0x24002de9
24002bcc:	24002de9 	.word	0x24002de9
24002bd0:	24002de9 	.word	0x24002de9
24002bd4:	24002c13 	.word	0x24002c13
24002bd8:	24002de9 	.word	0x24002de9
24002bdc:	24002de9 	.word	0x24002de9
24002be0:	24002de9 	.word	0x24002de9
24002be4:	24002de9 	.word	0x24002de9
24002be8:	24002de9 	.word	0x24002de9
24002bec:	24002de9 	.word	0x24002de9
24002bf0:	24002de9 	.word	0x24002de9
24002bf4:	24002c19 	.word	0x24002c19
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    common_system_clock = (uint32_t) (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV)>> 3));
24002bf8:	4b92      	ldr	r3, [pc, #584]	; (24002e44 <SystemCoreClockUpdate+0x2cc>)
24002bfa:	681b      	ldr	r3, [r3, #0]
24002bfc:	08db      	lsrs	r3, r3, #3
24002bfe:	f003 0303 	and.w	r3, r3, #3
24002c02:	4a91      	ldr	r2, [pc, #580]	; (24002e48 <SystemCoreClockUpdate+0x2d0>)
24002c04:	fa22 f303 	lsr.w	r3, r2, r3
24002c08:	627b      	str	r3, [r7, #36]	; 0x24
    break;
24002c0a:	e0f7      	b.n	24002dfc <SystemCoreClockUpdate+0x284>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    common_system_clock = CSI_VALUE;
24002c0c:	4b8f      	ldr	r3, [pc, #572]	; (24002e4c <SystemCoreClockUpdate+0x2d4>)
24002c0e:	627b      	str	r3, [r7, #36]	; 0x24
    break;
24002c10:	e0f4      	b.n	24002dfc <SystemCoreClockUpdate+0x284>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    common_system_clock = HSE_VALUE;
24002c12:	4b8f      	ldr	r3, [pc, #572]	; (24002e50 <SystemCoreClockUpdate+0x2d8>)
24002c14:	627b      	str	r3, [r7, #36]	; 0x24
    break;
24002c16:	e0f1      	b.n	24002dfc <SystemCoreClockUpdate+0x284>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24002c18:	4b8a      	ldr	r3, [pc, #552]	; (24002e44 <SystemCoreClockUpdate+0x2cc>)
24002c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24002c1c:	f003 0303 	and.w	r3, r3, #3
24002c20:	61fb      	str	r3, [r7, #28]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
24002c22:	4b88      	ldr	r3, [pc, #544]	; (24002e44 <SystemCoreClockUpdate+0x2cc>)
24002c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24002c26:	091b      	lsrs	r3, r3, #4
24002c28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24002c2c:	61bb      	str	r3, [r7, #24]
    pllfracen = ((RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
24002c2e:	4b85      	ldr	r3, [pc, #532]	; (24002e44 <SystemCoreClockUpdate+0x2cc>)
24002c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24002c32:	f003 0301 	and.w	r3, r3, #1
24002c36:	617b      	str	r3, [r7, #20]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
24002c38:	4b82      	ldr	r3, [pc, #520]	; (24002e44 <SystemCoreClockUpdate+0x2cc>)
24002c3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24002c3c:	08db      	lsrs	r3, r3, #3
24002c3e:	f3c3 030c 	ubfx	r3, r3, #0, #13
24002c42:	697a      	ldr	r2, [r7, #20]
24002c44:	fb02 f303 	mul.w	r3, r2, r3
24002c48:	ee07 3a90 	vmov	s15, r3
24002c4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
24002c50:	edc7 7a04 	vstr	s15, [r7, #16]

    if (pllm != 0U)
24002c54:	69bb      	ldr	r3, [r7, #24]
24002c56:	2b00      	cmp	r3, #0
24002c58:	f000 80c3 	beq.w	24002de2 <SystemCoreClockUpdate+0x26a>
24002c5c:	69fb      	ldr	r3, [r7, #28]
24002c5e:	2b02      	cmp	r3, #2
24002c60:	d059      	beq.n	24002d16 <SystemCoreClockUpdate+0x19e>
24002c62:	69fb      	ldr	r3, [r7, #28]
24002c64:	2b02      	cmp	r3, #2
24002c66:	d878      	bhi.n	24002d5a <SystemCoreClockUpdate+0x1e2>
24002c68:	69fb      	ldr	r3, [r7, #28]
24002c6a:	2b00      	cmp	r3, #0
24002c6c:	d003      	beq.n	24002c76 <SystemCoreClockUpdate+0xfe>
24002c6e:	69fb      	ldr	r3, [r7, #28]
24002c70:	2b01      	cmp	r3, #1
24002c72:	d02e      	beq.n	24002cd2 <SystemCoreClockUpdate+0x15a>
24002c74:	e071      	b.n	24002d5a <SystemCoreClockUpdate+0x1e2>
    {
      switch (pllsource)
      {
        case RCC_PLLCKSELR_PLLSRC_HSI:  /* HSI used as PLL clock source */

        hsivalue = (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV)>> 3)) ;
24002c76:	4b73      	ldr	r3, [pc, #460]	; (24002e44 <SystemCoreClockUpdate+0x2cc>)
24002c78:	681b      	ldr	r3, [r3, #0]
24002c7a:	08db      	lsrs	r3, r3, #3
24002c7c:	f003 0303 	and.w	r3, r3, #3
24002c80:	4a71      	ldr	r2, [pc, #452]	; (24002e48 <SystemCoreClockUpdate+0x2d0>)
24002c82:	fa22 f303 	lsr.w	r3, r2, r3
24002c86:	60fb      	str	r3, [r7, #12]
        pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
24002c88:	68fb      	ldr	r3, [r7, #12]
24002c8a:	ee07 3a90 	vmov	s15, r3
24002c8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
24002c92:	69bb      	ldr	r3, [r7, #24]
24002c94:	ee07 3a90 	vmov	s15, r3
24002c98:	eef8 7a67 	vcvt.f32.u32	s15, s15
24002c9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24002ca0:	4b68      	ldr	r3, [pc, #416]	; (24002e44 <SystemCoreClockUpdate+0x2cc>)
24002ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24002ca4:	f3c3 0308 	ubfx	r3, r3, #0, #9
24002ca8:	ee07 3a90 	vmov	s15, r3
24002cac:	eef8 6a67 	vcvt.f32.u32	s13, s15
24002cb0:	ed97 6a04 	vldr	s12, [r7, #16]
24002cb4:	eddf 5a67 	vldr	s11, [pc, #412]	; 24002e54 <SystemCoreClockUpdate+0x2dc>
24002cb8:	eec6 7a25 	vdiv.f32	s15, s12, s11
24002cbc:	ee76 7aa7 	vadd.f32	s15, s13, s15
24002cc0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24002cc4:	ee77 7aa6 	vadd.f32	s15, s15, s13
24002cc8:	ee67 7a27 	vmul.f32	s15, s14, s15
24002ccc:	edc7 7a08 	vstr	s15, [r7, #32]

        break;
24002cd0:	e071      	b.n	24002db6 <SystemCoreClockUpdate+0x23e>

        case RCC_PLLCKSELR_PLLSRC_CSI:  /* CSI used as PLL clock source */
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
24002cd2:	69bb      	ldr	r3, [r7, #24]
24002cd4:	ee07 3a90 	vmov	s15, r3
24002cd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
24002cdc:	eddf 6a5e 	vldr	s13, [pc, #376]	; 24002e58 <SystemCoreClockUpdate+0x2e0>
24002ce0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24002ce4:	4b57      	ldr	r3, [pc, #348]	; (24002e44 <SystemCoreClockUpdate+0x2cc>)
24002ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24002ce8:	f3c3 0308 	ubfx	r3, r3, #0, #9
24002cec:	ee07 3a90 	vmov	s15, r3
24002cf0:	eef8 6a67 	vcvt.f32.u32	s13, s15
24002cf4:	ed97 6a04 	vldr	s12, [r7, #16]
24002cf8:	eddf 5a56 	vldr	s11, [pc, #344]	; 24002e54 <SystemCoreClockUpdate+0x2dc>
24002cfc:	eec6 7a25 	vdiv.f32	s15, s12, s11
24002d00:	ee76 7aa7 	vadd.f32	s15, s13, s15
24002d04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24002d08:	ee77 7aa6 	vadd.f32	s15, s15, s13
24002d0c:	ee67 7a27 	vmul.f32	s15, s14, s15
24002d10:	edc7 7a08 	vstr	s15, [r7, #32]
        break;
24002d14:	e04f      	b.n	24002db6 <SystemCoreClockUpdate+0x23e>

        case RCC_PLLCKSELR_PLLSRC_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
24002d16:	69bb      	ldr	r3, [r7, #24]
24002d18:	ee07 3a90 	vmov	s15, r3
24002d1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
24002d20:	eddf 6a4e 	vldr	s13, [pc, #312]	; 24002e5c <SystemCoreClockUpdate+0x2e4>
24002d24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24002d28:	4b46      	ldr	r3, [pc, #280]	; (24002e44 <SystemCoreClockUpdate+0x2cc>)
24002d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24002d2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
24002d30:	ee07 3a90 	vmov	s15, r3
24002d34:	eef8 6a67 	vcvt.f32.u32	s13, s15
24002d38:	ed97 6a04 	vldr	s12, [r7, #16]
24002d3c:	eddf 5a45 	vldr	s11, [pc, #276]	; 24002e54 <SystemCoreClockUpdate+0x2dc>
24002d40:	eec6 7a25 	vdiv.f32	s15, s12, s11
24002d44:	ee76 7aa7 	vadd.f32	s15, s13, s15
24002d48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24002d4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
24002d50:	ee67 7a27 	vmul.f32	s15, s14, s15
24002d54:	edc7 7a08 	vstr	s15, [r7, #32]
        break;
24002d58:	e02d      	b.n	24002db6 <SystemCoreClockUpdate+0x23e>

      default:
          hsivalue = (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV)>> 3)) ;
24002d5a:	4b3a      	ldr	r3, [pc, #232]	; (24002e44 <SystemCoreClockUpdate+0x2cc>)
24002d5c:	681b      	ldr	r3, [r3, #0]
24002d5e:	08db      	lsrs	r3, r3, #3
24002d60:	f003 0303 	and.w	r3, r3, #3
24002d64:	4a38      	ldr	r2, [pc, #224]	; (24002e48 <SystemCoreClockUpdate+0x2d0>)
24002d66:	fa22 f303 	lsr.w	r3, r2, r3
24002d6a:	60fb      	str	r3, [r7, #12]
          pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
24002d6c:	68fb      	ldr	r3, [r7, #12]
24002d6e:	ee07 3a90 	vmov	s15, r3
24002d72:	eef8 6a67 	vcvt.f32.u32	s13, s15
24002d76:	69bb      	ldr	r3, [r7, #24]
24002d78:	ee07 3a90 	vmov	s15, r3
24002d7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
24002d80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24002d84:	4b2f      	ldr	r3, [pc, #188]	; (24002e44 <SystemCoreClockUpdate+0x2cc>)
24002d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24002d88:	f3c3 0308 	ubfx	r3, r3, #0, #9
24002d8c:	ee07 3a90 	vmov	s15, r3
24002d90:	eef8 6a67 	vcvt.f32.u32	s13, s15
24002d94:	ed97 6a04 	vldr	s12, [r7, #16]
24002d98:	eddf 5a2e 	vldr	s11, [pc, #184]	; 24002e54 <SystemCoreClockUpdate+0x2dc>
24002d9c:	eec6 7a25 	vdiv.f32	s15, s12, s11
24002da0:	ee76 7aa7 	vadd.f32	s15, s13, s15
24002da4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24002da8:	ee77 7aa6 	vadd.f32	s15, s15, s13
24002dac:	ee67 7a27 	vmul.f32	s15, s14, s15
24002db0:	edc7 7a08 	vstr	s15, [r7, #32]
        break;
24002db4:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
24002db6:	4b23      	ldr	r3, [pc, #140]	; (24002e44 <SystemCoreClockUpdate+0x2cc>)
24002db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24002dba:	0a5b      	lsrs	r3, r3, #9
24002dbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
24002dc0:	3301      	adds	r3, #1
24002dc2:	60bb      	str	r3, [r7, #8]
      common_system_clock =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
24002dc4:	68bb      	ldr	r3, [r7, #8]
24002dc6:	ee07 3a90 	vmov	s15, r3
24002dca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
24002dce:	edd7 6a08 	vldr	s13, [r7, #32]
24002dd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
24002dd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24002dda:	ee17 3a90 	vmov	r3, s15
24002dde:	627b      	str	r3, [r7, #36]	; 0x24
    }
    else
    {
      common_system_clock = 0U;
    }
    break;
24002de0:	e00c      	b.n	24002dfc <SystemCoreClockUpdate+0x284>
      common_system_clock = 0U;
24002de2:	2300      	movs	r3, #0
24002de4:	627b      	str	r3, [r7, #36]	; 0x24
    break;
24002de6:	e009      	b.n	24002dfc <SystemCoreClockUpdate+0x284>

  default:
    common_system_clock = (uint32_t) (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV)>> 3));
24002de8:	4b16      	ldr	r3, [pc, #88]	; (24002e44 <SystemCoreClockUpdate+0x2cc>)
24002dea:	681b      	ldr	r3, [r3, #0]
24002dec:	08db      	lsrs	r3, r3, #3
24002dee:	f003 0303 	and.w	r3, r3, #3
24002df2:	4a15      	ldr	r2, [pc, #84]	; (24002e48 <SystemCoreClockUpdate+0x2d0>)
24002df4:	fa22 f303 	lsr.w	r3, r2, r3
24002df8:	627b      	str	r3, [r7, #36]	; 0x24
    break;
24002dfa:	bf00      	nop
  }

  /* Compute SystemClock frequency --------------------------------------------------*/
#if defined (RCC_D1CFGR_D1CPRE)
  tmp = D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos];
24002dfc:	4b11      	ldr	r3, [pc, #68]	; (24002e44 <SystemCoreClockUpdate+0x2cc>)
24002dfe:	699b      	ldr	r3, [r3, #24]
24002e00:	0a1b      	lsrs	r3, r3, #8
24002e02:	f003 030f 	and.w	r3, r3, #15
24002e06:	4a16      	ldr	r2, [pc, #88]	; (24002e60 <SystemCoreClockUpdate+0x2e8>)
24002e08:	5cd3      	ldrb	r3, [r2, r3]
24002e0a:	607b      	str	r3, [r7, #4]

  /* common_system_clock frequency : CM7 CPU frequency  */
  common_system_clock >>= tmp;
24002e0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
24002e0e:	687b      	ldr	r3, [r7, #4]
24002e10:	fa22 f303 	lsr.w	r3, r2, r3
24002e14:	627b      	str	r3, [r7, #36]	; 0x24

  /* SystemD2Clock frequency : CM4 CPU, AXI and AHBs Clock frequency  */
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24002e16:	4b0b      	ldr	r3, [pc, #44]	; (24002e44 <SystemCoreClockUpdate+0x2cc>)
24002e18:	699b      	ldr	r3, [r3, #24]
24002e1a:	f003 030f 	and.w	r3, r3, #15
24002e1e:	4a10      	ldr	r2, [pc, #64]	; (24002e60 <SystemCoreClockUpdate+0x2e8>)
24002e20:	5cd3      	ldrb	r3, [r2, r3]
24002e22:	f003 031f 	and.w	r3, r3, #31
24002e26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
24002e28:	fa22 f303 	lsr.w	r3, r2, r3
24002e2c:	4a0d      	ldr	r2, [pc, #52]	; (24002e64 <SystemCoreClockUpdate+0x2ec>)
24002e2e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
24002e30:	4a0d      	ldr	r2, [pc, #52]	; (24002e68 <SystemCoreClockUpdate+0x2f0>)
24002e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24002e34:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */
}
24002e36:	bf00      	nop
24002e38:	372c      	adds	r7, #44	; 0x2c
24002e3a:	46bd      	mov	sp, r7
24002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
24002e40:	4770      	bx	lr
24002e42:	bf00      	nop
24002e44:	58024400 	.word	0x58024400
24002e48:	03d09000 	.word	0x03d09000
24002e4c:	003d0900 	.word	0x003d0900
24002e50:	017d7840 	.word	0x017d7840
24002e54:	46000000 	.word	0x46000000
24002e58:	4a742400 	.word	0x4a742400
24002e5c:	4bbebc20 	.word	0x4bbebc20
24002e60:	24019ad0 	.word	0x24019ad0
24002e64:	240004b4 	.word	0x240004b4
24002e68:	240004b0 	.word	0x240004b0

24002e6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
24002e6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 24002ea4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
24002e70:	f7ff fdfa 	bl	24002a68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
24002e74:	480c      	ldr	r0, [pc, #48]	; (24002ea8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
24002e76:	490d      	ldr	r1, [pc, #52]	; (24002eac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
24002e78:	4a0d      	ldr	r2, [pc, #52]	; (24002eb0 <LoopFillZerobss+0x1a>)
  movs r3, #0
24002e7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
24002e7c:	e002      	b.n	24002e84 <LoopCopyDataInit>

24002e7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
24002e7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
24002e80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
24002e82:	3304      	adds	r3, #4

24002e84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
24002e84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
24002e86:	428c      	cmp	r4, r1
  bcc CopyDataInit
24002e88:	d3f9      	bcc.n	24002e7e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
24002e8a:	4a0a      	ldr	r2, [pc, #40]	; (24002eb4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
24002e8c:	4c0a      	ldr	r4, [pc, #40]	; (24002eb8 <LoopFillZerobss+0x22>)
  movs r3, #0
24002e8e:	2300      	movs	r3, #0
  b LoopFillZerobss
24002e90:	e001      	b.n	24002e96 <LoopFillZerobss>

24002e92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
24002e92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
24002e94:	3204      	adds	r2, #4

24002e96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
24002e96:	42a2      	cmp	r2, r4
  bcc FillZerobss
24002e98:	d3fb      	bcc.n	24002e92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
24002e9a:	f016 fb89 	bl	240195b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
24002e9e:	f7fe ff1b 	bl	24001cd8 <main>
  bx  lr
24002ea2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
24002ea4:	24080004 	.word	0x24080004
  ldr r0, =_sdata
24002ea8:	240004a8 	.word	0x240004a8
  ldr r1, =_edata
24002eac:	2400051c 	.word	0x2400051c
  ldr r2, =_sidata
24002eb0:	240004a8 	.word	0x240004a8
  ldr r2, =_sbss
24002eb4:	2400051c 	.word	0x2400051c
  ldr r4, =_ebss
24002eb8:	24001700 	.word	0x24001700

24002ebc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
24002ebc:	e7fe      	b.n	24002ebc <ADC3_IRQHandler>
	...

24002ec0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
24002ec0:	b580      	push	{r7, lr}
24002ec2:	b082      	sub	sp, #8
24002ec4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
24002ec6:	2003      	movs	r0, #3
24002ec8:	f000 fefc 	bl	24003cc4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
24002ecc:	f012 fcec 	bl	240158a8 <HAL_RCC_GetSysClockFreq>
24002ed0:	4602      	mov	r2, r0
24002ed2:	4b15      	ldr	r3, [pc, #84]	; (24002f28 <HAL_Init+0x68>)
24002ed4:	699b      	ldr	r3, [r3, #24]
24002ed6:	0a1b      	lsrs	r3, r3, #8
24002ed8:	f003 030f 	and.w	r3, r3, #15
24002edc:	4913      	ldr	r1, [pc, #76]	; (24002f2c <HAL_Init+0x6c>)
24002ede:	5ccb      	ldrb	r3, [r1, r3]
24002ee0:	f003 031f 	and.w	r3, r3, #31
24002ee4:	fa22 f303 	lsr.w	r3, r2, r3
24002ee8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24002eea:	4b0f      	ldr	r3, [pc, #60]	; (24002f28 <HAL_Init+0x68>)
24002eec:	699b      	ldr	r3, [r3, #24]
24002eee:	f003 030f 	and.w	r3, r3, #15
24002ef2:	4a0e      	ldr	r2, [pc, #56]	; (24002f2c <HAL_Init+0x6c>)
24002ef4:	5cd3      	ldrb	r3, [r2, r3]
24002ef6:	f003 031f 	and.w	r3, r3, #31
24002efa:	687a      	ldr	r2, [r7, #4]
24002efc:	fa22 f303 	lsr.w	r3, r2, r3
24002f00:	4a0b      	ldr	r2, [pc, #44]	; (24002f30 <HAL_Init+0x70>)
24002f02:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
24002f04:	4a0b      	ldr	r2, [pc, #44]	; (24002f34 <HAL_Init+0x74>)
24002f06:	687b      	ldr	r3, [r7, #4]
24002f08:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
24002f0a:	200f      	movs	r0, #15
24002f0c:	f000 f880 	bl	24003010 <HAL_InitTick>
24002f10:	4603      	mov	r3, r0
24002f12:	2b00      	cmp	r3, #0
24002f14:	d001      	beq.n	24002f1a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
24002f16:	2301      	movs	r3, #1
24002f18:	e002      	b.n	24002f20 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
24002f1a:	f7ff fc21 	bl	24002760 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
24002f1e:	2300      	movs	r3, #0
}
24002f20:	4618      	mov	r0, r3
24002f22:	3708      	adds	r7, #8
24002f24:	46bd      	mov	sp, r7
24002f26:	bd80      	pop	{r7, pc}
24002f28:	58024400 	.word	0x58024400
24002f2c:	24019ad0 	.word	0x24019ad0
24002f30:	240004b4 	.word	0x240004b4
24002f34:	240004b0 	.word	0x240004b0

24002f38 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
24002f38:	b580      	push	{r7, lr}
24002f3a:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_AHB3_FORCE_RESET();
24002f3c:	4b26      	ldr	r3, [pc, #152]	; (24002fd8 <HAL_DeInit+0xa0>)
24002f3e:	4a27      	ldr	r2, [pc, #156]	; (24002fdc <HAL_DeInit+0xa4>)
24002f40:	67da      	str	r2, [r3, #124]	; 0x7c
  __HAL_RCC_AHB3_RELEASE_RESET();
24002f42:	4b25      	ldr	r3, [pc, #148]	; (24002fd8 <HAL_DeInit+0xa0>)
24002f44:	2200      	movs	r2, #0
24002f46:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_RCC_AHB1_FORCE_RESET();
24002f48:	4b23      	ldr	r3, [pc, #140]	; (24002fd8 <HAL_DeInit+0xa0>)
24002f4a:	4a25      	ldr	r2, [pc, #148]	; (24002fe0 <HAL_DeInit+0xa8>)
24002f4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __HAL_RCC_AHB1_RELEASE_RESET();
24002f50:	4b21      	ldr	r3, [pc, #132]	; (24002fd8 <HAL_DeInit+0xa0>)
24002f52:	2200      	movs	r2, #0
24002f54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_RCC_AHB2_FORCE_RESET();
24002f58:	4b1f      	ldr	r3, [pc, #124]	; (24002fd8 <HAL_DeInit+0xa0>)
24002f5a:	f240 2271 	movw	r2, #625	; 0x271
24002f5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __HAL_RCC_AHB2_RELEASE_RESET();
24002f62:	4b1d      	ldr	r3, [pc, #116]	; (24002fd8 <HAL_DeInit+0xa0>)
24002f64:	2200      	movs	r2, #0
24002f66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_RCC_AHB4_FORCE_RESET();
24002f6a:	4b1b      	ldr	r3, [pc, #108]	; (24002fd8 <HAL_DeInit+0xa0>)
24002f6c:	4a1d      	ldr	r2, [pc, #116]	; (24002fe4 <HAL_DeInit+0xac>)
24002f6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 __HAL_RCC_AHB4_RELEASE_RESET();
24002f72:	4b19      	ldr	r3, [pc, #100]	; (24002fd8 <HAL_DeInit+0xa0>)
24002f74:	2200      	movs	r2, #0
24002f76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_RCC_APB3_FORCE_RESET();
24002f7a:	4b17      	ldr	r3, [pc, #92]	; (24002fd8 <HAL_DeInit+0xa0>)
24002f7c:	2218      	movs	r2, #24
24002f7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  __HAL_RCC_APB3_RELEASE_RESET();
24002f82:	4b15      	ldr	r3, [pc, #84]	; (24002fd8 <HAL_DeInit+0xa0>)
24002f84:	2200      	movs	r2, #0
24002f86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  __HAL_RCC_APB1L_FORCE_RESET();
24002f8a:	4b13      	ldr	r3, [pc, #76]	; (24002fd8 <HAL_DeInit+0xa0>)
24002f8c:	4a16      	ldr	r2, [pc, #88]	; (24002fe8 <HAL_DeInit+0xb0>)
24002f8e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  __HAL_RCC_APB1L_RELEASE_RESET();
24002f92:	4b11      	ldr	r3, [pc, #68]	; (24002fd8 <HAL_DeInit+0xa0>)
24002f94:	2200      	movs	r2, #0
24002f96:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  __HAL_RCC_APB1H_FORCE_RESET();
24002f9a:	4b0f      	ldr	r3, [pc, #60]	; (24002fd8 <HAL_DeInit+0xa0>)
24002f9c:	f44f 729b 	mov.w	r2, #310	; 0x136
24002fa0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __HAL_RCC_APB1H_RELEASE_RESET();
24002fa4:	4b0c      	ldr	r3, [pc, #48]	; (24002fd8 <HAL_DeInit+0xa0>)
24002fa6:	2200      	movs	r2, #0
24002fa8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

   __HAL_RCC_APB2_FORCE_RESET();
24002fac:	4b0a      	ldr	r3, [pc, #40]	; (24002fd8 <HAL_DeInit+0xa0>)
24002fae:	4a0f      	ldr	r2, [pc, #60]	; (24002fec <HAL_DeInit+0xb4>)
24002fb0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   __HAL_RCC_APB2_RELEASE_RESET();
24002fb4:	4b08      	ldr	r3, [pc, #32]	; (24002fd8 <HAL_DeInit+0xa0>)
24002fb6:	2200      	movs	r2, #0
24002fb8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  __HAL_RCC_APB4_FORCE_RESET();
24002fbc:	4b06      	ldr	r3, [pc, #24]	; (24002fd8 <HAL_DeInit+0xa0>)
24002fbe:	4a0c      	ldr	r2, [pc, #48]	; (24002ff0 <HAL_DeInit+0xb8>)
24002fc0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  __HAL_RCC_APB4_RELEASE_RESET();
24002fc4:	4b04      	ldr	r3, [pc, #16]	; (24002fd8 <HAL_DeInit+0xa0>)
24002fc6:	2200      	movs	r2, #0
24002fc8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* De-Init the low level hardware */
  HAL_MspDeInit();
24002fcc:	f000 f819 	bl	24003002 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
24002fd0:	2300      	movs	r3, #0
}
24002fd2:	4618      	mov	r0, r3
24002fd4:	bd80      	pop	{r7, pc}
24002fd6:	bf00      	nop
24002fd8:	58024400 	.word	0x58024400
24002fdc:	00015031 	.word	0x00015031
24002fe0:	0a00c023 	.word	0x0a00c023
24002fe4:	032807ff 	.word	0x032807ff
24002fe8:	e8ffc3ff 	.word	0xe8ffc3ff
24002fec:	31d73033 	.word	0x31d73033
24002ff0:	0020deaa 	.word	0x0020deaa
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
24002ff4:	b480      	push	{r7}
24002ff6:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
24002ff8:	bf00      	nop
24002ffa:	46bd      	mov	sp, r7
24002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
24003000:	4770      	bx	lr

24003002 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
24003002:	b480      	push	{r7}
24003004:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
24003006:	bf00      	nop
24003008:	46bd      	mov	sp, r7
2400300a:	f85d 7b04 	ldr.w	r7, [sp], #4
2400300e:	4770      	bx	lr

24003010 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
24003010:	b580      	push	{r7, lr}
24003012:	b082      	sub	sp, #8
24003014:	af00      	add	r7, sp, #0
24003016:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
24003018:	4b15      	ldr	r3, [pc, #84]	; (24003070 <HAL_InitTick+0x60>)
2400301a:	781b      	ldrb	r3, [r3, #0]
2400301c:	2b00      	cmp	r3, #0
2400301e:	d101      	bne.n	24003024 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
24003020:	2301      	movs	r3, #1
24003022:	e021      	b.n	24003068 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
24003024:	4b13      	ldr	r3, [pc, #76]	; (24003074 <HAL_InitTick+0x64>)
24003026:	681a      	ldr	r2, [r3, #0]
24003028:	4b11      	ldr	r3, [pc, #68]	; (24003070 <HAL_InitTick+0x60>)
2400302a:	781b      	ldrb	r3, [r3, #0]
2400302c:	4619      	mov	r1, r3
2400302e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
24003032:	fbb3 f3f1 	udiv	r3, r3, r1
24003036:	fbb2 f3f3 	udiv	r3, r2, r3
2400303a:	4618      	mov	r0, r3
2400303c:	f000 fe87 	bl	24003d4e <HAL_SYSTICK_Config>
24003040:	4603      	mov	r3, r0
24003042:	2b00      	cmp	r3, #0
24003044:	d001      	beq.n	2400304a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
24003046:	2301      	movs	r3, #1
24003048:	e00e      	b.n	24003068 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
2400304a:	687b      	ldr	r3, [r7, #4]
2400304c:	2b0f      	cmp	r3, #15
2400304e:	d80a      	bhi.n	24003066 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
24003050:	2200      	movs	r2, #0
24003052:	6879      	ldr	r1, [r7, #4]
24003054:	f04f 30ff 	mov.w	r0, #4294967295
24003058:	f000 fe3f 	bl	24003cda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
2400305c:	4a06      	ldr	r2, [pc, #24]	; (24003078 <HAL_InitTick+0x68>)
2400305e:	687b      	ldr	r3, [r7, #4]
24003060:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
24003062:	2300      	movs	r3, #0
24003064:	e000      	b.n	24003068 <HAL_InitTick+0x58>
    return HAL_ERROR;
24003066:	2301      	movs	r3, #1
}
24003068:	4618      	mov	r0, r3
2400306a:	3708      	adds	r7, #8
2400306c:	46bd      	mov	sp, r7
2400306e:	bd80      	pop	{r7, pc}
24003070:	240004bc 	.word	0x240004bc
24003074:	240004b0 	.word	0x240004b0
24003078:	240004b8 	.word	0x240004b8

2400307c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
2400307c:	b480      	push	{r7}
2400307e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
24003080:	4b06      	ldr	r3, [pc, #24]	; (2400309c <HAL_IncTick+0x20>)
24003082:	781b      	ldrb	r3, [r3, #0]
24003084:	461a      	mov	r2, r3
24003086:	4b06      	ldr	r3, [pc, #24]	; (240030a0 <HAL_IncTick+0x24>)
24003088:	681b      	ldr	r3, [r3, #0]
2400308a:	4413      	add	r3, r2
2400308c:	4a04      	ldr	r2, [pc, #16]	; (240030a0 <HAL_IncTick+0x24>)
2400308e:	6013      	str	r3, [r2, #0]
}
24003090:	bf00      	nop
24003092:	46bd      	mov	sp, r7
24003094:	f85d 7b04 	ldr.w	r7, [sp], #4
24003098:	4770      	bx	lr
2400309a:	bf00      	nop
2400309c:	240004bc 	.word	0x240004bc
240030a0:	24001590 	.word	0x24001590

240030a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
240030a4:	b480      	push	{r7}
240030a6:	af00      	add	r7, sp, #0
  return uwTick;
240030a8:	4b03      	ldr	r3, [pc, #12]	; (240030b8 <HAL_GetTick+0x14>)
240030aa:	681b      	ldr	r3, [r3, #0]
}
240030ac:	4618      	mov	r0, r3
240030ae:	46bd      	mov	sp, r7
240030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
240030b4:	4770      	bx	lr
240030b6:	bf00      	nop
240030b8:	24001590 	.word	0x24001590

240030bc <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
240030bc:	b480      	push	{r7}
240030be:	af00      	add	r7, sp, #0
  return uwTickPrio;
240030c0:	4b03      	ldr	r3, [pc, #12]	; (240030d0 <HAL_GetTickPrio+0x14>)
240030c2:	681b      	ldr	r3, [r3, #0]
}
240030c4:	4618      	mov	r0, r3
240030c6:	46bd      	mov	sp, r7
240030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
240030cc:	4770      	bx	lr
240030ce:	bf00      	nop
240030d0:	240004b8 	.word	0x240004b8

240030d4 <HAL_SetTickFreq>:
/**
  * @brief Set new tick Freq.
  * @retval Status
  */
HAL_StatusTypeDef HAL_SetTickFreq(HAL_TickFreqTypeDef Freq)
{
240030d4:	b580      	push	{r7, lr}
240030d6:	b084      	sub	sp, #16
240030d8:	af00      	add	r7, sp, #0
240030da:	4603      	mov	r3, r0
240030dc:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status  = HAL_OK;
240030de:	2300      	movs	r3, #0
240030e0:	73fb      	strb	r3, [r7, #15]
  HAL_TickFreqTypeDef prevTickFreq;

  assert_param(IS_TICKFREQ(Freq));

  if (uwTickFreq != Freq)
240030e2:	4b0e      	ldr	r3, [pc, #56]	; (2400311c <HAL_SetTickFreq+0x48>)
240030e4:	781b      	ldrb	r3, [r3, #0]
240030e6:	79fa      	ldrb	r2, [r7, #7]
240030e8:	429a      	cmp	r2, r3
240030ea:	d012      	beq.n	24003112 <HAL_SetTickFreq+0x3e>
  {

    /* Back up uwTickFreq frequency */
    prevTickFreq = uwTickFreq;
240030ec:	4b0b      	ldr	r3, [pc, #44]	; (2400311c <HAL_SetTickFreq+0x48>)
240030ee:	781b      	ldrb	r3, [r3, #0]
240030f0:	73bb      	strb	r3, [r7, #14]

    /* Update uwTickFreq global variable used by HAL_InitTick() */
    uwTickFreq = Freq;
240030f2:	4a0a      	ldr	r2, [pc, #40]	; (2400311c <HAL_SetTickFreq+0x48>)
240030f4:	79fb      	ldrb	r3, [r7, #7]
240030f6:	7013      	strb	r3, [r2, #0]

    /* Apply the new tick Freq  */
    status = HAL_InitTick(uwTickPrio);
240030f8:	4b09      	ldr	r3, [pc, #36]	; (24003120 <HAL_SetTickFreq+0x4c>)
240030fa:	681b      	ldr	r3, [r3, #0]
240030fc:	4618      	mov	r0, r3
240030fe:	f7ff ff87 	bl	24003010 <HAL_InitTick>
24003102:	4603      	mov	r3, r0
24003104:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK)
24003106:	7bfb      	ldrb	r3, [r7, #15]
24003108:	2b00      	cmp	r3, #0
2400310a:	d002      	beq.n	24003112 <HAL_SetTickFreq+0x3e>
    {
      /* Restore previous tick frequency */
      uwTickFreq = prevTickFreq;
2400310c:	4a03      	ldr	r2, [pc, #12]	; (2400311c <HAL_SetTickFreq+0x48>)
2400310e:	7bbb      	ldrb	r3, [r7, #14]
24003110:	7013      	strb	r3, [r2, #0]
    }
  }

  return status;
24003112:	7bfb      	ldrb	r3, [r7, #15]
}
24003114:	4618      	mov	r0, r3
24003116:	3710      	adds	r7, #16
24003118:	46bd      	mov	sp, r7
2400311a:	bd80      	pop	{r7, pc}
2400311c:	240004bc 	.word	0x240004bc
24003120:	240004b8 	.word	0x240004b8

24003124 <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
24003124:	b480      	push	{r7}
24003126:	af00      	add	r7, sp, #0
  return uwTickFreq;
24003128:	4b03      	ldr	r3, [pc, #12]	; (24003138 <HAL_GetTickFreq+0x14>)
2400312a:	781b      	ldrb	r3, [r3, #0]
}
2400312c:	4618      	mov	r0, r3
2400312e:	46bd      	mov	sp, r7
24003130:	f85d 7b04 	ldr.w	r7, [sp], #4
24003134:	4770      	bx	lr
24003136:	bf00      	nop
24003138:	240004bc 	.word	0x240004bc

2400313c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
2400313c:	b580      	push	{r7, lr}
2400313e:	b084      	sub	sp, #16
24003140:	af00      	add	r7, sp, #0
24003142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
24003144:	f7ff ffae 	bl	240030a4 <HAL_GetTick>
24003148:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
2400314a:	687b      	ldr	r3, [r7, #4]
2400314c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
2400314e:	68fb      	ldr	r3, [r7, #12]
24003150:	f1b3 3fff 	cmp.w	r3, #4294967295
24003154:	d005      	beq.n	24003162 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
24003156:	4b0a      	ldr	r3, [pc, #40]	; (24003180 <HAL_Delay+0x44>)
24003158:	781b      	ldrb	r3, [r3, #0]
2400315a:	461a      	mov	r2, r3
2400315c:	68fb      	ldr	r3, [r7, #12]
2400315e:	4413      	add	r3, r2
24003160:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
24003162:	bf00      	nop
24003164:	f7ff ff9e 	bl	240030a4 <HAL_GetTick>
24003168:	4602      	mov	r2, r0
2400316a:	68bb      	ldr	r3, [r7, #8]
2400316c:	1ad3      	subs	r3, r2, r3
2400316e:	68fa      	ldr	r2, [r7, #12]
24003170:	429a      	cmp	r2, r3
24003172:	d8f7      	bhi.n	24003164 <HAL_Delay+0x28>
  {
  }
}
24003174:	bf00      	nop
24003176:	bf00      	nop
24003178:	3710      	adds	r7, #16
2400317a:	46bd      	mov	sp, r7
2400317c:	bd80      	pop	{r7, pc}
2400317e:	bf00      	nop
24003180:	240004bc 	.word	0x240004bc

24003184 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
24003184:	b480      	push	{r7}
24003186:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
24003188:	4b05      	ldr	r3, [pc, #20]	; (240031a0 <HAL_SuspendTick+0x1c>)
2400318a:	681b      	ldr	r3, [r3, #0]
2400318c:	4a04      	ldr	r2, [pc, #16]	; (240031a0 <HAL_SuspendTick+0x1c>)
2400318e:	f023 0302 	bic.w	r3, r3, #2
24003192:	6013      	str	r3, [r2, #0]
}
24003194:	bf00      	nop
24003196:	46bd      	mov	sp, r7
24003198:	f85d 7b04 	ldr.w	r7, [sp], #4
2400319c:	4770      	bx	lr
2400319e:	bf00      	nop
240031a0:	e000e010 	.word	0xe000e010

240031a4 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
240031a4:	b480      	push	{r7}
240031a6:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
240031a8:	4b05      	ldr	r3, [pc, #20]	; (240031c0 <HAL_ResumeTick+0x1c>)
240031aa:	681b      	ldr	r3, [r3, #0]
240031ac:	4a04      	ldr	r2, [pc, #16]	; (240031c0 <HAL_ResumeTick+0x1c>)
240031ae:	f043 0302 	orr.w	r3, r3, #2
240031b2:	6013      	str	r3, [r2, #0]
}
240031b4:	bf00      	nop
240031b6:	46bd      	mov	sp, r7
240031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
240031bc:	4770      	bx	lr
240031be:	bf00      	nop
240031c0:	e000e010 	.word	0xe000e010

240031c4 <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
240031c4:	b480      	push	{r7}
240031c6:	af00      	add	r7, sp, #0
 return __STM32H7xx_HAL_VERSION;
240031c8:	4b02      	ldr	r3, [pc, #8]	; (240031d4 <HAL_GetHalVersion+0x10>)
}
240031ca:	4618      	mov	r0, r3
240031cc:	46bd      	mov	sp, r7
240031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
240031d2:	4770      	bx	lr
240031d4:	010b0100 	.word	0x010b0100

240031d8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
240031d8:	b480      	push	{r7}
240031da:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
240031dc:	4b03      	ldr	r3, [pc, #12]	; (240031ec <HAL_GetREVID+0x14>)
240031de:	681b      	ldr	r3, [r3, #0]
240031e0:	0c1b      	lsrs	r3, r3, #16
}
240031e2:	4618      	mov	r0, r3
240031e4:	46bd      	mov	sp, r7
240031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
240031ea:	4770      	bx	lr
240031ec:	5c001000 	.word	0x5c001000

240031f0 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
240031f0:	b480      	push	{r7}
240031f2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
240031f4:	4b04      	ldr	r3, [pc, #16]	; (24003208 <HAL_GetDEVID+0x18>)
240031f6:	681b      	ldr	r3, [r3, #0]
240031f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
240031fc:	4618      	mov	r0, r3
240031fe:	46bd      	mov	sp, r7
24003200:	f85d 7b04 	ldr.w	r7, [sp], #4
24003204:	4770      	bx	lr
24003206:	bf00      	nop
24003208:	5c001000 	.word	0x5c001000

2400320c <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
2400320c:	b480      	push	{r7}
2400320e:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
24003210:	4b03      	ldr	r3, [pc, #12]	; (24003220 <HAL_GetUIDw0+0x14>)
24003212:	681b      	ldr	r3, [r3, #0]
}
24003214:	4618      	mov	r0, r3
24003216:	46bd      	mov	sp, r7
24003218:	f85d 7b04 	ldr.w	r7, [sp], #4
2400321c:	4770      	bx	lr
2400321e:	bf00      	nop
24003220:	1ff1e800 	.word	0x1ff1e800

24003224 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
24003224:	b480      	push	{r7}
24003226:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
24003228:	4b03      	ldr	r3, [pc, #12]	; (24003238 <HAL_GetUIDw1+0x14>)
2400322a:	681b      	ldr	r3, [r3, #0]
}
2400322c:	4618      	mov	r0, r3
2400322e:	46bd      	mov	sp, r7
24003230:	f85d 7b04 	ldr.w	r7, [sp], #4
24003234:	4770      	bx	lr
24003236:	bf00      	nop
24003238:	1ff1e804 	.word	0x1ff1e804

2400323c <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
2400323c:	b480      	push	{r7}
2400323e:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
24003240:	4b03      	ldr	r3, [pc, #12]	; (24003250 <HAL_GetUIDw2+0x14>)
24003242:	681b      	ldr	r3, [r3, #0]
}
24003244:	4618      	mov	r0, r3
24003246:	46bd      	mov	sp, r7
24003248:	f85d 7b04 	ldr.w	r7, [sp], #4
2400324c:	4770      	bx	lr
2400324e:	bf00      	nop
24003250:	1ff1e808 	.word	0x1ff1e808

24003254 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE3: VREF_OUT4 around 1.5 V.
  *                                                This requires VDDA equal to or higher than 1.8 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
24003254:	b480      	push	{r7}
24003256:	b083      	sub	sp, #12
24003258:	af00      	add	r7, sp, #0
2400325a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
2400325c:	4b06      	ldr	r3, [pc, #24]	; (24003278 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
2400325e:	681b      	ldr	r3, [r3, #0]
24003260:	f023 0270 	bic.w	r2, r3, #112	; 0x70
24003264:	4904      	ldr	r1, [pc, #16]	; (24003278 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
24003266:	687b      	ldr	r3, [r7, #4]
24003268:	4313      	orrs	r3, r2
2400326a:	600b      	str	r3, [r1, #0]
}
2400326c:	bf00      	nop
2400326e:	370c      	adds	r7, #12
24003270:	46bd      	mov	sp, r7
24003272:	f85d 7b04 	ldr.w	r7, [sp], #4
24003276:	4770      	bx	lr
24003278:	58003c00 	.word	0x58003c00

2400327c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
2400327c:	b480      	push	{r7}
2400327e:	b083      	sub	sp, #12
24003280:	af00      	add	r7, sp, #0
24003282:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
24003284:	4b06      	ldr	r3, [pc, #24]	; (240032a0 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
24003286:	681b      	ldr	r3, [r3, #0]
24003288:	f023 0202 	bic.w	r2, r3, #2
2400328c:	4904      	ldr	r1, [pc, #16]	; (240032a0 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
2400328e:	687b      	ldr	r3, [r7, #4]
24003290:	4313      	orrs	r3, r2
24003292:	600b      	str	r3, [r1, #0]
}
24003294:	bf00      	nop
24003296:	370c      	adds	r7, #12
24003298:	46bd      	mov	sp, r7
2400329a:	f85d 7b04 	ldr.w	r7, [sp], #4
2400329e:	4770      	bx	lr
240032a0:	58003c00 	.word	0x58003c00

240032a4 <HAL_SYSCFG_VREFBUF_TrimmingConfig>:
/**
  * @brief  Tune the Internal Voltage Reference buffer (VREFBUF).
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_TrimmingConfig(uint32_t TrimmingValue)
{
240032a4:	b480      	push	{r7}
240032a6:	b083      	sub	sp, #12
240032a8:	af00      	add	r7, sp, #0
240032aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_TRIMMING(TrimmingValue));

  MODIFY_REG(VREFBUF->CCR, VREFBUF_CCR_TRIM, TrimmingValue);
240032ac:	4b06      	ldr	r3, [pc, #24]	; (240032c8 <HAL_SYSCFG_VREFBUF_TrimmingConfig+0x24>)
240032ae:	685b      	ldr	r3, [r3, #4]
240032b0:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
240032b4:	4904      	ldr	r1, [pc, #16]	; (240032c8 <HAL_SYSCFG_VREFBUF_TrimmingConfig+0x24>)
240032b6:	687b      	ldr	r3, [r7, #4]
240032b8:	4313      	orrs	r3, r2
240032ba:	604b      	str	r3, [r1, #4]
}
240032bc:	bf00      	nop
240032be:	370c      	adds	r7, #12
240032c0:	46bd      	mov	sp, r7
240032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
240032c6:	4770      	bx	lr
240032c8:	58003c00 	.word	0x58003c00

240032cc <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
240032cc:	b580      	push	{r7, lr}
240032ce:	b082      	sub	sp, #8
240032d0:	af00      	add	r7, sp, #0
  uint32_t  tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
240032d2:	4b0f      	ldr	r3, [pc, #60]	; (24003310 <HAL_SYSCFG_EnableVREFBUF+0x44>)
240032d4:	681b      	ldr	r3, [r3, #0]
240032d6:	4a0e      	ldr	r2, [pc, #56]	; (24003310 <HAL_SYSCFG_EnableVREFBUF+0x44>)
240032d8:	f043 0301 	orr.w	r3, r3, #1
240032dc:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
240032de:	f7ff fee1 	bl	240030a4 <HAL_GetTick>
240032e2:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
240032e4:	e008      	b.n	240032f8 <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
240032e6:	f7ff fedd 	bl	240030a4 <HAL_GetTick>
240032ea:	4602      	mov	r2, r0
240032ec:	687b      	ldr	r3, [r7, #4]
240032ee:	1ad3      	subs	r3, r2, r3
240032f0:	2b0a      	cmp	r3, #10
240032f2:	d901      	bls.n	240032f8 <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
240032f4:	2303      	movs	r3, #3
240032f6:	e006      	b.n	24003306 <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
240032f8:	4b05      	ldr	r3, [pc, #20]	; (24003310 <HAL_SYSCFG_EnableVREFBUF+0x44>)
240032fa:	681b      	ldr	r3, [r3, #0]
240032fc:	f003 0308 	and.w	r3, r3, #8
24003300:	2b00      	cmp	r3, #0
24003302:	d0f0      	beq.n	240032e6 <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
24003304:	2300      	movs	r3, #0
}
24003306:	4618      	mov	r0, r3
24003308:	3708      	adds	r7, #8
2400330a:	46bd      	mov	sp, r7
2400330c:	bd80      	pop	{r7, pc}
2400330e:	bf00      	nop
24003310:	58003c00 	.word	0x58003c00

24003314 <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
24003314:	b480      	push	{r7}
24003316:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
24003318:	4b05      	ldr	r3, [pc, #20]	; (24003330 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
2400331a:	681b      	ldr	r3, [r3, #0]
2400331c:	4a04      	ldr	r2, [pc, #16]	; (24003330 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
2400331e:	f023 0301 	bic.w	r3, r3, #1
24003322:	6013      	str	r3, [r2, #0]
}
24003324:	bf00      	nop
24003326:	46bd      	mov	sp, r7
24003328:	f85d 7b04 	ldr.w	r7, [sp], #4
2400332c:	4770      	bx	lr
2400332e:	bf00      	nop
24003330:	58003c00 	.word	0x58003c00

24003334 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
24003334:	b480      	push	{r7}
24003336:	b083      	sub	sp, #12
24003338:	af00      	add	r7, sp, #0
2400333a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
2400333c:	4b06      	ldr	r3, [pc, #24]	; (24003358 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
2400333e:	685b      	ldr	r3, [r3, #4]
24003340:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
24003344:	4904      	ldr	r1, [pc, #16]	; (24003358 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
24003346:	687b      	ldr	r3, [r7, #4]
24003348:	4313      	orrs	r3, r2
2400334a:	604b      	str	r3, [r1, #4]
}
2400334c:	bf00      	nop
2400334e:	370c      	adds	r7, #12
24003350:	46bd      	mov	sp, r7
24003352:	f85d 7b04 	ldr.w	r7, [sp], #4
24003356:	4770      	bx	lr
24003358:	58000400 	.word	0x58000400

2400335c <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
2400335c:	b480      	push	{r7}
2400335e:	b083      	sub	sp, #12
24003360:	af00      	add	r7, sp, #0
24003362:	6078      	str	r0, [r7, #4]
24003364:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
24003366:	4b07      	ldr	r3, [pc, #28]	; (24003384 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
24003368:	685a      	ldr	r2, [r3, #4]
2400336a:	687b      	ldr	r3, [r7, #4]
2400336c:	43db      	mvns	r3, r3
2400336e:	401a      	ands	r2, r3
24003370:	4904      	ldr	r1, [pc, #16]	; (24003384 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
24003372:	683b      	ldr	r3, [r7, #0]
24003374:	4313      	orrs	r3, r2
24003376:	604b      	str	r3, [r1, #4]
}
24003378:	bf00      	nop
2400337a:	370c      	adds	r7, #12
2400337c:	46bd      	mov	sp, r7
2400337e:	f85d 7b04 	ldr.w	r7, [sp], #4
24003382:	4770      	bx	lr
24003384:	58000400 	.word	0x58000400

24003388 <HAL_SYSCFG_EnableBOOST>:
  *         when the supply voltage is below 2.7 V: in this case, the analog switch
  *         performance is the same on the full voltage range
  * @retval None
  */
void HAL_SYSCFG_EnableBOOST(void)
{
24003388:	b480      	push	{r7}
2400338a:	af00      	add	r7, sp, #0
 SET_BIT(SYSCFG->PMCR, SYSCFG_PMCR_BOOSTEN) ;
2400338c:	4b05      	ldr	r3, [pc, #20]	; (240033a4 <HAL_SYSCFG_EnableBOOST+0x1c>)
2400338e:	685b      	ldr	r3, [r3, #4]
24003390:	4a04      	ldr	r2, [pc, #16]	; (240033a4 <HAL_SYSCFG_EnableBOOST+0x1c>)
24003392:	f443 7380 	orr.w	r3, r3, #256	; 0x100
24003396:	6053      	str	r3, [r2, #4]
}
24003398:	bf00      	nop
2400339a:	46bd      	mov	sp, r7
2400339c:	f85d 7b04 	ldr.w	r7, [sp], #4
240033a0:	4770      	bx	lr
240033a2:	bf00      	nop
240033a4:	58000400 	.word	0x58000400

240033a8 <HAL_SYSCFG_DisableBOOST>:
  *         when the supply voltage is below 2.7 V: in this case, the analog switch
  *         performance is the same on the full voltage range
  * @retval None
  */
void HAL_SYSCFG_DisableBOOST(void)
{
240033a8:	b480      	push	{r7}
240033aa:	af00      	add	r7, sp, #0
 CLEAR_BIT(SYSCFG->PMCR, SYSCFG_PMCR_BOOSTEN) ;
240033ac:	4b05      	ldr	r3, [pc, #20]	; (240033c4 <HAL_SYSCFG_DisableBOOST+0x1c>)
240033ae:	685b      	ldr	r3, [r3, #4]
240033b0:	4a04      	ldr	r2, [pc, #16]	; (240033c4 <HAL_SYSCFG_DisableBOOST+0x1c>)
240033b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
240033b6:	6053      	str	r3, [r2, #4]
}
240033b8:	bf00      	nop
240033ba:	46bd      	mov	sp, r7
240033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
240033c0:	4770      	bx	lr
240033c2:	bf00      	nop
240033c4:	58000400 	.word	0x58000400

240033c8 <HAL_SYSCFG_CM7BootAddConfig>:
  *   @arg SYSCFG_BOOT_ADDR1:  Select the boot address1
  * @param  BootAddress :Specifies the CM7 Boot Address to be loaded in Address0 or Address1
  * @retval None
  */
void HAL_SYSCFG_CM7BootAddConfig(uint32_t BootRegister, uint32_t BootAddress)
{
240033c8:	b480      	push	{r7}
240033ca:	b083      	sub	sp, #12
240033cc:	af00      	add	r7, sp, #0
240033ce:	6078      	str	r0, [r7, #4]
240033d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_SYSCFG_BOOT_REGISTER(BootRegister));
  assert_param(IS_SYSCFG_BOOT_ADDRESS(BootAddress));
  if ( BootRegister == SYSCFG_BOOT_ADDR0 )
240033d2:	687b      	ldr	r3, [r7, #4]
240033d4:	2b00      	cmp	r3, #0
240033d6:	d10b      	bne.n	240033f0 <HAL_SYSCFG_CM7BootAddConfig+0x28>
  {
    /* Configure CM7 BOOT ADD0 */
#if defined(DUAL_CORE)
    MODIFY_REG(SYSCFG->UR2, SYSCFG_UR2_BCM7_ADD0, ((BootAddress >> 16) << SYSCFG_UR2_BCM7_ADD0_Pos));
#else
    MODIFY_REG(SYSCFG->UR2, SYSCFG_UR2_BOOT_ADD0, ((BootAddress >> 16) << SYSCFG_UR2_BOOT_ADD0_Pos));
240033d8:	4b0e      	ldr	r3, [pc, #56]	; (24003414 <HAL_SYSCFG_CM7BootAddConfig+0x4c>)
240033da:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
240033de:	b29a      	uxth	r2, r3
240033e0:	683b      	ldr	r3, [r7, #0]
240033e2:	0c1b      	lsrs	r3, r3, #16
240033e4:	041b      	lsls	r3, r3, #16
240033e6:	490b      	ldr	r1, [pc, #44]	; (24003414 <HAL_SYSCFG_CM7BootAddConfig+0x4c>)
240033e8:	4313      	orrs	r3, r2
240033ea:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    MODIFY_REG(SYSCFG->UR3, SYSCFG_UR3_BCM7_ADD1, (BootAddress >> 16));
#else
    MODIFY_REG(SYSCFG->UR3, SYSCFG_UR3_BOOT_ADD1, (BootAddress >> 16));
#endif /*DUAL_CORE*/
  }
}
240033ee:	e00a      	b.n	24003406 <HAL_SYSCFG_CM7BootAddConfig+0x3e>
    MODIFY_REG(SYSCFG->UR3, SYSCFG_UR3_BOOT_ADD1, (BootAddress >> 16));
240033f0:	4b08      	ldr	r3, [pc, #32]	; (24003414 <HAL_SYSCFG_CM7BootAddConfig+0x4c>)
240033f2:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
240033f6:	4b08      	ldr	r3, [pc, #32]	; (24003418 <HAL_SYSCFG_CM7BootAddConfig+0x50>)
240033f8:	4013      	ands	r3, r2
240033fa:	683a      	ldr	r2, [r7, #0]
240033fc:	0c12      	lsrs	r2, r2, #16
240033fe:	4905      	ldr	r1, [pc, #20]	; (24003414 <HAL_SYSCFG_CM7BootAddConfig+0x4c>)
24003400:	4313      	orrs	r3, r2
24003402:	f8c1 330c 	str.w	r3, [r1, #780]	; 0x30c
}
24003406:	bf00      	nop
24003408:	370c      	adds	r7, #12
2400340a:	46bd      	mov	sp, r7
2400340c:	f85d 7b04 	ldr.w	r7, [sp], #4
24003410:	4770      	bx	lr
24003412:	bf00      	nop
24003414:	58000400 	.word	0x58000400
24003418:	ffff0000 	.word	0xffff0000

2400341c <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
2400341c:	b480      	push	{r7}
2400341e:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
24003420:	4b05      	ldr	r3, [pc, #20]	; (24003438 <HAL_EnableCompensationCell+0x1c>)
24003422:	6a1b      	ldr	r3, [r3, #32]
24003424:	4a04      	ldr	r2, [pc, #16]	; (24003438 <HAL_EnableCompensationCell+0x1c>)
24003426:	f043 0301 	orr.w	r3, r3, #1
2400342a:	6213      	str	r3, [r2, #32]
}
2400342c:	bf00      	nop
2400342e:	46bd      	mov	sp, r7
24003430:	f85d 7b04 	ldr.w	r7, [sp], #4
24003434:	4770      	bx	lr
24003436:	bf00      	nop
24003438:	58000400 	.word	0x58000400

2400343c <HAL_DisableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_DisableCompensationCell(void)
{
2400343c:	b480      	push	{r7}
2400343e:	af00      	add	r7, sp, #0
  CLEAR_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN);
24003440:	4b05      	ldr	r3, [pc, #20]	; (24003458 <HAL_DisableCompensationCell+0x1c>)
24003442:	6a1b      	ldr	r3, [r3, #32]
24003444:	4a04      	ldr	r2, [pc, #16]	; (24003458 <HAL_DisableCompensationCell+0x1c>)
24003446:	f023 0301 	bic.w	r3, r3, #1
2400344a:	6213      	str	r3, [r2, #32]
}
2400344c:	bf00      	nop
2400344e:	46bd      	mov	sp, r7
24003450:	f85d 7b04 	ldr.w	r7, [sp], #4
24003454:	4770      	bx	lr
24003456:	bf00      	nop
24003458:	58000400 	.word	0x58000400

2400345c <HAL_SYSCFG_EnableIOSpeedOptimize>:
  *         used only if the product supply voltage is below 2.5 V. Setting this bit when VDD is
  *         higher than 2.5 V might be destructive.
  * @retval None
  */
void HAL_SYSCFG_EnableIOSpeedOptimize(void)
{
2400345c:	b480      	push	{r7}
2400345e:	af00      	add	r7, sp, #0
#if defined(SYSCFG_CCCSR_HSLV)
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_HSLV);
24003460:	4b05      	ldr	r3, [pc, #20]	; (24003478 <HAL_SYSCFG_EnableIOSpeedOptimize+0x1c>)
24003462:	6a1b      	ldr	r3, [r3, #32]
24003464:	4a04      	ldr	r2, [pc, #16]	; (24003478 <HAL_SYSCFG_EnableIOSpeedOptimize+0x1c>)
24003466:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2400346a:	6213      	str	r3, [r2, #32]
#else
  SET_BIT(SYSCFG->CCCSR, (SYSCFG_CCCSR_HSLV0| SYSCFG_CCCSR_HSLV1 | SYSCFG_CCCSR_HSLV2  | SYSCFG_CCCSR_HSLV3));
#endif   /* SYSCFG_CCCSR_HSLV */
}
2400346c:	bf00      	nop
2400346e:	46bd      	mov	sp, r7
24003470:	f85d 7b04 	ldr.w	r7, [sp], #4
24003474:	4770      	bx	lr
24003476:	bf00      	nop
24003478:	58000400 	.word	0x58000400

2400347c <HAL_SYSCFG_DisableIOSpeedOptimize>:
  *         used only if the product supply voltage is below 2.5 V. Setting this bit when VDD is
  *         higher than 2.5 V might be destructive.
  * @retval None
  */
void HAL_SYSCFG_DisableIOSpeedOptimize(void)
{
2400347c:	b480      	push	{r7}
2400347e:	af00      	add	r7, sp, #0
#if defined(SYSCFG_CCCSR_HSLV)
  CLEAR_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_HSLV);
24003480:	4b05      	ldr	r3, [pc, #20]	; (24003498 <HAL_SYSCFG_DisableIOSpeedOptimize+0x1c>)
24003482:	6a1b      	ldr	r3, [r3, #32]
24003484:	4a04      	ldr	r2, [pc, #16]	; (24003498 <HAL_SYSCFG_DisableIOSpeedOptimize+0x1c>)
24003486:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
2400348a:	6213      	str	r3, [r2, #32]
#else
  CLEAR_BIT(SYSCFG->CCCSR, (SYSCFG_CCCSR_HSLV0| SYSCFG_CCCSR_HSLV1 | SYSCFG_CCCSR_HSLV2  | SYSCFG_CCCSR_HSLV3));
#endif   /* SYSCFG_CCCSR_HSLV */
}
2400348c:	bf00      	nop
2400348e:	46bd      	mov	sp, r7
24003490:	f85d 7b04 	ldr.w	r7, [sp], #4
24003494:	4770      	bx	lr
24003496:	bf00      	nop
24003498:	58000400 	.word	0x58000400

2400349c <HAL_SYSCFG_CompensationCodeSelect>:
  *   @arg SYSCFG_CELL_CODE : Select Code from the cell (available in the SYSCFG_CCVR)
  *   @arg SYSCFG_REGISTER_CODE: Select Code from the SYSCFG compensation cell code register (SYSCFG_CCCR)
  * @retval None
  */
void HAL_SYSCFG_CompensationCodeSelect(uint32_t SYSCFG_CompCode)
{
2400349c:	b480      	push	{r7}
2400349e:	b083      	sub	sp, #12
240034a0:	af00      	add	r7, sp, #0
240034a2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_CODE_SELECT(SYSCFG_CompCode));
  MODIFY_REG(SYSCFG->CCCSR, SYSCFG_CCCSR_CS, (uint32_t)(SYSCFG_CompCode));
240034a4:	4b06      	ldr	r3, [pc, #24]	; (240034c0 <HAL_SYSCFG_CompensationCodeSelect+0x24>)
240034a6:	6a1b      	ldr	r3, [r3, #32]
240034a8:	f023 0202 	bic.w	r2, r3, #2
240034ac:	4904      	ldr	r1, [pc, #16]	; (240034c0 <HAL_SYSCFG_CompensationCodeSelect+0x24>)
240034ae:	687b      	ldr	r3, [r7, #4]
240034b0:	4313      	orrs	r3, r2
240034b2:	620b      	str	r3, [r1, #32]
}
240034b4:	bf00      	nop
240034b6:	370c      	adds	r7, #12
240034b8:	46bd      	mov	sp, r7
240034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
240034be:	4770      	bx	lr
240034c0:	58000400 	.word	0x58000400

240034c4 <HAL_SYSCFG_CompensationCodeConfig>:
  *         This code is applied to the I/O compensation cell when the CS bit of the
  *          SYSCFG_CMPCR is set
  * @retval None
  */
void HAL_SYSCFG_CompensationCodeConfig(uint32_t SYSCFG_PMOSCode, uint32_t SYSCFG_NMOSCode )
{
240034c4:	b480      	push	{r7}
240034c6:	b083      	sub	sp, #12
240034c8:	af00      	add	r7, sp, #0
240034ca:	6078      	str	r0, [r7, #4]
240034cc:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_CODE_CONFIG(SYSCFG_PMOSCode));
  assert_param(IS_SYSCFG_CODE_CONFIG(SYSCFG_NMOSCode));
  MODIFY_REG(SYSCFG->CCCR, SYSCFG_CCCR_NCC|SYSCFG_CCCR_PCC, (((uint32_t)(SYSCFG_PMOSCode)<< 4)|(uint32_t)(SYSCFG_NMOSCode)) );
240034ce:	4b08      	ldr	r3, [pc, #32]	; (240034f0 <HAL_SYSCFG_CompensationCodeConfig+0x2c>)
240034d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
240034d2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
240034d6:	687b      	ldr	r3, [r7, #4]
240034d8:	0119      	lsls	r1, r3, #4
240034da:	683b      	ldr	r3, [r7, #0]
240034dc:	430b      	orrs	r3, r1
240034de:	4904      	ldr	r1, [pc, #16]	; (240034f0 <HAL_SYSCFG_CompensationCodeConfig+0x2c>)
240034e0:	4313      	orrs	r3, r2
240034e2:	628b      	str	r3, [r1, #40]	; 0x28
}
240034e4:	bf00      	nop
240034e6:	370c      	adds	r7, #12
240034e8:	46bd      	mov	sp, r7
240034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
240034ee:	4770      	bx	lr
240034f0:	58000400 	.word	0x58000400

240034f4 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during Domain1/CDomain SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
240034f4:	b480      	push	{r7}
240034f6:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEPD1);
240034f8:	4b05      	ldr	r3, [pc, #20]	; (24003510 <HAL_DBGMCU_EnableDBGSleepMode+0x1c>)
240034fa:	685b      	ldr	r3, [r3, #4]
240034fc:	4a04      	ldr	r2, [pc, #16]	; (24003510 <HAL_DBGMCU_EnableDBGSleepMode+0x1c>)
240034fe:	f043 0301 	orr.w	r3, r3, #1
24003502:	6053      	str	r3, [r2, #4]
}
24003504:	bf00      	nop
24003506:	46bd      	mov	sp, r7
24003508:	f85d 7b04 	ldr.w	r7, [sp], #4
2400350c:	4770      	bx	lr
2400350e:	bf00      	nop
24003510:	5c001000 	.word	0x5c001000

24003514 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the Debug Module during Domain1/CDomain SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
24003514:	b480      	push	{r7}
24003516:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEPD1);
24003518:	4b05      	ldr	r3, [pc, #20]	; (24003530 <HAL_DBGMCU_DisableDBGSleepMode+0x1c>)
2400351a:	685b      	ldr	r3, [r3, #4]
2400351c:	4a04      	ldr	r2, [pc, #16]	; (24003530 <HAL_DBGMCU_DisableDBGSleepMode+0x1c>)
2400351e:	f023 0301 	bic.w	r3, r3, #1
24003522:	6053      	str	r3, [r2, #4]
}
24003524:	bf00      	nop
24003526:	46bd      	mov	sp, r7
24003528:	f85d 7b04 	ldr.w	r7, [sp], #4
2400352c:	4770      	bx	lr
2400352e:	bf00      	nop
24003530:	5c001000 	.word	0x5c001000

24003534 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during Domain1/CDomain STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
24003534:	b480      	push	{r7}
24003536:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOPD1);
24003538:	4b05      	ldr	r3, [pc, #20]	; (24003550 <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
2400353a:	685b      	ldr	r3, [r3, #4]
2400353c:	4a04      	ldr	r2, [pc, #16]	; (24003550 <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
2400353e:	f043 0302 	orr.w	r3, r3, #2
24003542:	6053      	str	r3, [r2, #4]
}
24003544:	bf00      	nop
24003546:	46bd      	mov	sp, r7
24003548:	f85d 7b04 	ldr.w	r7, [sp], #4
2400354c:	4770      	bx	lr
2400354e:	bf00      	nop
24003550:	5c001000 	.word	0x5c001000

24003554 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the Debug Module during Domain1/CDomain STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
24003554:	b480      	push	{r7}
24003556:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOPD1);
24003558:	4b05      	ldr	r3, [pc, #20]	; (24003570 <HAL_DBGMCU_DisableDBGStopMode+0x1c>)
2400355a:	685b      	ldr	r3, [r3, #4]
2400355c:	4a04      	ldr	r2, [pc, #16]	; (24003570 <HAL_DBGMCU_DisableDBGStopMode+0x1c>)
2400355e:	f023 0302 	bic.w	r3, r3, #2
24003562:	6053      	str	r3, [r2, #4]
}
24003564:	bf00      	nop
24003566:	46bd      	mov	sp, r7
24003568:	f85d 7b04 	ldr.w	r7, [sp], #4
2400356c:	4770      	bx	lr
2400356e:	bf00      	nop
24003570:	5c001000 	.word	0x5c001000

24003574 <HAL_DBGMCU_EnableDBGStandbyMode>:
/**
  * @brief  Enable the Debug Module during Domain1/CDomain STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
24003574:	b480      	push	{r7}
24003576:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBYD1);
24003578:	4b05      	ldr	r3, [pc, #20]	; (24003590 <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
2400357a:	685b      	ldr	r3, [r3, #4]
2400357c:	4a04      	ldr	r2, [pc, #16]	; (24003590 <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
2400357e:	f043 0304 	orr.w	r3, r3, #4
24003582:	6053      	str	r3, [r2, #4]
}
24003584:	bf00      	nop
24003586:	46bd      	mov	sp, r7
24003588:	f85d 7b04 	ldr.w	r7, [sp], #4
2400358c:	4770      	bx	lr
2400358e:	bf00      	nop
24003590:	5c001000 	.word	0x5c001000

24003594 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the Debug Module during Domain1/CDomain STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
24003594:	b480      	push	{r7}
24003596:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBYD1);
24003598:	4b05      	ldr	r3, [pc, #20]	; (240035b0 <HAL_DBGMCU_DisableDBGStandbyMode+0x1c>)
2400359a:	685b      	ldr	r3, [r3, #4]
2400359c:	4a04      	ldr	r2, [pc, #16]	; (240035b0 <HAL_DBGMCU_DisableDBGStandbyMode+0x1c>)
2400359e:	f023 0304 	bic.w	r3, r3, #4
240035a2:	6053      	str	r3, [r2, #4]
}
240035a4:	bf00      	nop
240035a6:	46bd      	mov	sp, r7
240035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
240035ac:	4770      	bx	lr
240035ae:	bf00      	nop
240035b0:	5c001000 	.word	0x5c001000

240035b4 <HAL_SetFMCMemorySwappingConfig>:
  * @param  BankMapConfig: Defines the FMC Bank mapping configuration. This parameter can be
            FMC_SWAPBMAP_DISABLE, FMC_SWAPBMAP_SDRAM_SRAM, FMC_SWAPBMAP_SDRAMB2
  * @retval HAL state
  */
void HAL_SetFMCMemorySwappingConfig(uint32_t BankMapConfig)
{
240035b4:	b480      	push	{r7}
240035b6:	b083      	sub	sp, #12
240035b8:	af00      	add	r7, sp, #0
240035ba:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FMC_SWAPBMAP_MODE(BankMapConfig));
  MODIFY_REG(FMC_Bank1_R->BTCR[0], FMC_BCR1_BMAP, BankMapConfig);
240035bc:	4b06      	ldr	r3, [pc, #24]	; (240035d8 <HAL_SetFMCMemorySwappingConfig+0x24>)
240035be:	681b      	ldr	r3, [r3, #0]
240035c0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
240035c4:	4904      	ldr	r1, [pc, #16]	; (240035d8 <HAL_SetFMCMemorySwappingConfig+0x24>)
240035c6:	687b      	ldr	r3, [r7, #4]
240035c8:	4313      	orrs	r3, r2
240035ca:	600b      	str	r3, [r1, #0]
}
240035cc:	bf00      	nop
240035ce:	370c      	adds	r7, #12
240035d0:	46bd      	mov	sp, r7
240035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
240035d6:	4770      	bx	lr
240035d8:	52004000 	.word	0x52004000

240035dc <HAL_GetFMCMemorySwappingConfig>:
  * @brief  Get FMC Bank mapping mode.
  * @retval The FMC Bank mapping mode. This parameter can be
            FMC_SWAPBMAP_DISABLE, FMC_SWAPBMAP_SDRAM_SRAM, FMC_SWAPBMAP_SDRAMB2
*/
uint32_t HAL_GetFMCMemorySwappingConfig(void)
{
240035dc:	b480      	push	{r7}
240035de:	af00      	add	r7, sp, #0
  return READ_BIT(FMC_Bank1_R->BTCR[0], FMC_BCR1_BMAP);
240035e0:	4b04      	ldr	r3, [pc, #16]	; (240035f4 <HAL_GetFMCMemorySwappingConfig+0x18>)
240035e2:	681b      	ldr	r3, [r3, #0]
240035e4:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
}
240035e8:	4618      	mov	r0, r3
240035ea:	46bd      	mov	sp, r7
240035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
240035f0:	4770      	bx	lr
240035f2:	bf00      	nop
240035f4:	52004000 	.word	0x52004000

240035f8 <HAL_EXTI_EdgeConfig>:
  *   @arg EXTI_RISING_EDGE : Configurable line, with Rising edge trigger detection
  *   @arg EXTI_FALLING_EDGE: Configurable line, with Falling edge trigger detection
  * @retval None
  */
void HAL_EXTI_EdgeConfig(uint32_t EXTI_Line , uint32_t EXTI_Edge )
{
240035f8:	b480      	push	{r7}
240035fa:	b083      	sub	sp, #12
240035fc:	af00      	add	r7, sp, #0
240035fe:	6078      	str	r0, [r7, #4]
24003600:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_HAL_EXTI_CONFIG_LINE(EXTI_Line));
  assert_param(IS_EXTI_EDGE_LINE(EXTI_Edge));

  /* Clear Rising Falling edge configuration */
  CLEAR_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI->FTSR1)) + ((EXTI_Line >> 5 ) * 0x20UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
24003602:	687b      	ldr	r3, [r7, #4]
24003604:	095b      	lsrs	r3, r3, #5
24003606:	015a      	lsls	r2, r3, #5
24003608:	4b2e      	ldr	r3, [pc, #184]	; (240036c4 <HAL_EXTI_EdgeConfig+0xcc>)
2400360a:	4413      	add	r3, r2
2400360c:	6819      	ldr	r1, [r3, #0]
2400360e:	687b      	ldr	r3, [r7, #4]
24003610:	f003 031f 	and.w	r3, r3, #31
24003614:	2201      	movs	r2, #1
24003616:	fa02 f303 	lsl.w	r3, r2, r3
2400361a:	43da      	mvns	r2, r3
2400361c:	687b      	ldr	r3, [r7, #4]
2400361e:	095b      	lsrs	r3, r3, #5
24003620:	0158      	lsls	r0, r3, #5
24003622:	4b28      	ldr	r3, [pc, #160]	; (240036c4 <HAL_EXTI_EdgeConfig+0xcc>)
24003624:	4403      	add	r3, r0
24003626:	4618      	mov	r0, r3
24003628:	ea01 0302 	and.w	r3, r1, r2
2400362c:	6003      	str	r3, [r0, #0]
  CLEAR_BIT( *(__IO uint32_t *) (((uint32_t) &(EXTI->RTSR1)) + ((EXTI_Line >> 5 ) * 0x20UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
2400362e:	687b      	ldr	r3, [r7, #4]
24003630:	095b      	lsrs	r3, r3, #5
24003632:	f103 7330 	add.w	r3, r3, #46137344	; 0x2c00000
24003636:	015b      	lsls	r3, r3, #5
24003638:	681a      	ldr	r2, [r3, #0]
2400363a:	687b      	ldr	r3, [r7, #4]
2400363c:	f003 031f 	and.w	r3, r3, #31
24003640:	2101      	movs	r1, #1
24003642:	fa01 f303 	lsl.w	r3, r1, r3
24003646:	43db      	mvns	r3, r3
24003648:	6879      	ldr	r1, [r7, #4]
2400364a:	0949      	lsrs	r1, r1, #5
2400364c:	f101 7130 	add.w	r1, r1, #46137344	; 0x2c00000
24003650:	0149      	lsls	r1, r1, #5
24003652:	4013      	ands	r3, r2
24003654:	600b      	str	r3, [r1, #0]

  if( (EXTI_Edge & EXTI_RISING_EDGE) == EXTI_RISING_EDGE)
24003656:	683b      	ldr	r3, [r7, #0]
24003658:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
2400365c:	2b00      	cmp	r3, #0
2400365e:	d012      	beq.n	24003686 <HAL_EXTI_EdgeConfig+0x8e>
  {
   SET_BIT( *(__IO uint32_t *) (((uint32_t) &(EXTI->RTSR1)) + ((EXTI_Line >> 5 ) * 0x20UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
24003660:	687b      	ldr	r3, [r7, #4]
24003662:	095b      	lsrs	r3, r3, #5
24003664:	f103 7330 	add.w	r3, r3, #46137344	; 0x2c00000
24003668:	015b      	lsls	r3, r3, #5
2400366a:	681a      	ldr	r2, [r3, #0]
2400366c:	687b      	ldr	r3, [r7, #4]
2400366e:	f003 031f 	and.w	r3, r3, #31
24003672:	2101      	movs	r1, #1
24003674:	fa01 f303 	lsl.w	r3, r1, r3
24003678:	6879      	ldr	r1, [r7, #4]
2400367a:	0949      	lsrs	r1, r1, #5
2400367c:	f101 7130 	add.w	r1, r1, #46137344	; 0x2c00000
24003680:	0149      	lsls	r1, r1, #5
24003682:	4313      	orrs	r3, r2
24003684:	600b      	str	r3, [r1, #0]
  }
  if( (EXTI_Edge & EXTI_FALLING_EDGE) == EXTI_FALLING_EDGE)
24003686:	683b      	ldr	r3, [r7, #0]
24003688:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
2400368c:	2b00      	cmp	r3, #0
2400368e:	d013      	beq.n	240036b8 <HAL_EXTI_EdgeConfig+0xc0>
  {
   SET_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI->FTSR1)) + ((EXTI_Line >> 5 ) * 0x20UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
24003690:	687b      	ldr	r3, [r7, #4]
24003692:	095b      	lsrs	r3, r3, #5
24003694:	015a      	lsls	r2, r3, #5
24003696:	4b0b      	ldr	r3, [pc, #44]	; (240036c4 <HAL_EXTI_EdgeConfig+0xcc>)
24003698:	4413      	add	r3, r2
2400369a:	6819      	ldr	r1, [r3, #0]
2400369c:	687b      	ldr	r3, [r7, #4]
2400369e:	f003 031f 	and.w	r3, r3, #31
240036a2:	2201      	movs	r2, #1
240036a4:	409a      	lsls	r2, r3
240036a6:	687b      	ldr	r3, [r7, #4]
240036a8:	095b      	lsrs	r3, r3, #5
240036aa:	0158      	lsls	r0, r3, #5
240036ac:	4b05      	ldr	r3, [pc, #20]	; (240036c4 <HAL_EXTI_EdgeConfig+0xcc>)
240036ae:	4403      	add	r3, r0
240036b0:	4618      	mov	r0, r3
240036b2:	ea41 0302 	orr.w	r3, r1, r2
240036b6:	6003      	str	r3, [r0, #0]
  }
}
240036b8:	bf00      	nop
240036ba:	370c      	adds	r7, #12
240036bc:	46bd      	mov	sp, r7
240036be:	f85d 7b04 	ldr.w	r7, [sp], #4
240036c2:	4770      	bx	lr
240036c4:	58000004 	.word	0x58000004

240036c8 <HAL_EXTI_GenerateSWInterrupt>:
  * @param   EXTI_Line: Specifies the EXTI LINE, it can be one of the following values,
  *          (EXTI_LINE0..EXTI_LINE21),EXTI_LINE49,EXTI_LINE51,EXTI_LINE82,EXTI_LINE84,EXTI_LINE85 and EXTI_LINE86.
  * @retval None
  */
void HAL_EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
240036c8:	b480      	push	{r7}
240036ca:	b083      	sub	sp, #12
240036cc:	af00      	add	r7, sp, #0
240036ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HAL_EXTI_CONFIG_LINE(EXTI_Line));

  SET_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI->SWIER1)) + ((EXTI_Line >> 5 ) * 0x20UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
240036d0:	687b      	ldr	r3, [r7, #4]
240036d2:	095b      	lsrs	r3, r3, #5
240036d4:	015a      	lsls	r2, r3, #5
240036d6:	4b0b      	ldr	r3, [pc, #44]	; (24003704 <HAL_EXTI_GenerateSWInterrupt+0x3c>)
240036d8:	4413      	add	r3, r2
240036da:	6819      	ldr	r1, [r3, #0]
240036dc:	687b      	ldr	r3, [r7, #4]
240036de:	f003 031f 	and.w	r3, r3, #31
240036e2:	2201      	movs	r2, #1
240036e4:	409a      	lsls	r2, r3
240036e6:	687b      	ldr	r3, [r7, #4]
240036e8:	095b      	lsrs	r3, r3, #5
240036ea:	0158      	lsls	r0, r3, #5
240036ec:	4b05      	ldr	r3, [pc, #20]	; (24003704 <HAL_EXTI_GenerateSWInterrupt+0x3c>)
240036ee:	4403      	add	r3, r0
240036f0:	4618      	mov	r0, r3
240036f2:	ea41 0302 	orr.w	r3, r1, r2
240036f6:	6003      	str	r3, [r0, #0]
}
240036f8:	bf00      	nop
240036fa:	370c      	adds	r7, #12
240036fc:	46bd      	mov	sp, r7
240036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
24003702:	4770      	bx	lr
24003704:	58000008 	.word	0x58000008

24003708 <HAL_EXTI_D1_ClearFlag>:
  * @param   EXTI_Line: Specifies the EXTI LINE, it can be one of the following values,
  *         (EXTI_LINE0....EXTI_LINE87)excluding :line45, line81,line83 which are reserved
  * @retval None
  */
void HAL_EXTI_D1_ClearFlag(uint32_t EXTI_Line)
{
24003708:	b480      	push	{r7}
2400370a:	b083      	sub	sp, #12
2400370c:	af00      	add	r7, sp, #0
2400370e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
 assert_param(IS_EXTI_D1_LINE(EXTI_Line));
 WRITE_REG(*(__IO uint32_t *) (((uint32_t) &(EXTI_D1->PR1)) + ((EXTI_Line >> 5 ) * 0x10UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
24003710:	687b      	ldr	r3, [r7, #4]
24003712:	f003 021f 	and.w	r2, r3, #31
24003716:	687b      	ldr	r3, [r7, #4]
24003718:	095b      	lsrs	r3, r3, #5
2400371a:	0119      	lsls	r1, r3, #4
2400371c:	4b05      	ldr	r3, [pc, #20]	; (24003734 <HAL_EXTI_D1_ClearFlag+0x2c>)
2400371e:	440b      	add	r3, r1
24003720:	4619      	mov	r1, r3
24003722:	2301      	movs	r3, #1
24003724:	4093      	lsls	r3, r2
24003726:	600b      	str	r3, [r1, #0]

}
24003728:	bf00      	nop
2400372a:	370c      	adds	r7, #12
2400372c:	46bd      	mov	sp, r7
2400372e:	f85d 7b04 	ldr.w	r7, [sp], #4
24003732:	4770      	bx	lr
24003734:	58000088 	.word	0x58000088

24003738 <HAL_EXTI_D1_EventInputConfig>:
  * @param   EXTI_LineCmd controls (Enable/Disable) the EXTI line.

  * @retval None
  */
void HAL_EXTI_D1_EventInputConfig(uint32_t EXTI_Line , uint32_t EXTI_Mode,  uint32_t EXTI_LineCmd )
{
24003738:	b480      	push	{r7}
2400373a:	b085      	sub	sp, #20
2400373c:	af00      	add	r7, sp, #0
2400373e:	60f8      	str	r0, [r7, #12]
24003740:	60b9      	str	r1, [r7, #8]
24003742:	607a      	str	r2, [r7, #4]
  /* Check the parameter */
  assert_param(IS_EXTI_D1_LINE(EXTI_Line));
  assert_param(IS_EXTI_MODE_LINE(EXTI_Mode));

  if( (EXTI_Mode & EXTI_MODE_IT) == EXTI_MODE_IT)
24003744:	68bb      	ldr	r3, [r7, #8]
24003746:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
2400374a:	2b00      	cmp	r3, #0
2400374c:	d02d      	beq.n	240037aa <HAL_EXTI_D1_EventInputConfig+0x72>
  {
     if( EXTI_LineCmd == 0UL)
2400374e:	687b      	ldr	r3, [r7, #4]
24003750:	2b00      	cmp	r3, #0
24003752:	d116      	bne.n	24003782 <HAL_EXTI_D1_EventInputConfig+0x4a>
     {
       /* Clear EXTI line configuration */
        CLEAR_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI_D1->IMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)),(uint32_t)(1UL << (EXTI_Line & 0x1FUL)) );
24003754:	68fb      	ldr	r3, [r7, #12]
24003756:	095a      	lsrs	r2, r3, #5
24003758:	4b30      	ldr	r3, [pc, #192]	; (2400381c <HAL_EXTI_D1_EventInputConfig+0xe4>)
2400375a:	4413      	add	r3, r2
2400375c:	011b      	lsls	r3, r3, #4
2400375e:	6819      	ldr	r1, [r3, #0]
24003760:	68fb      	ldr	r3, [r7, #12]
24003762:	f003 031f 	and.w	r3, r3, #31
24003766:	2201      	movs	r2, #1
24003768:	fa02 f303 	lsl.w	r3, r2, r3
2400376c:	43da      	mvns	r2, r3
2400376e:	68fb      	ldr	r3, [r7, #12]
24003770:	0958      	lsrs	r0, r3, #5
24003772:	4b2a      	ldr	r3, [pc, #168]	; (2400381c <HAL_EXTI_D1_EventInputConfig+0xe4>)
24003774:	4403      	add	r3, r0
24003776:	011b      	lsls	r3, r3, #4
24003778:	4618      	mov	r0, r3
2400377a:	ea01 0302 	and.w	r3, r1, r2
2400377e:	6003      	str	r3, [r0, #0]
24003780:	e013      	b.n	240037aa <HAL_EXTI_D1_EventInputConfig+0x72>
     }
     else
     {
        SET_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI_D1->IMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
24003782:	68fb      	ldr	r3, [r7, #12]
24003784:	095a      	lsrs	r2, r3, #5
24003786:	4b25      	ldr	r3, [pc, #148]	; (2400381c <HAL_EXTI_D1_EventInputConfig+0xe4>)
24003788:	4413      	add	r3, r2
2400378a:	011b      	lsls	r3, r3, #4
2400378c:	6819      	ldr	r1, [r3, #0]
2400378e:	68fb      	ldr	r3, [r7, #12]
24003790:	f003 031f 	and.w	r3, r3, #31
24003794:	2201      	movs	r2, #1
24003796:	409a      	lsls	r2, r3
24003798:	68fb      	ldr	r3, [r7, #12]
2400379a:	0958      	lsrs	r0, r3, #5
2400379c:	4b1f      	ldr	r3, [pc, #124]	; (2400381c <HAL_EXTI_D1_EventInputConfig+0xe4>)
2400379e:	4403      	add	r3, r0
240037a0:	011b      	lsls	r3, r3, #4
240037a2:	4618      	mov	r0, r3
240037a4:	ea41 0302 	orr.w	r3, r1, r2
240037a8:	6003      	str	r3, [r0, #0]
     }
  }

  if( (EXTI_Mode & EXTI_MODE_EVT) == EXTI_MODE_EVT)
240037aa:	68bb      	ldr	r3, [r7, #8]
240037ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
240037b0:	2b00      	cmp	r3, #0
240037b2:	d02d      	beq.n	24003810 <HAL_EXTI_D1_EventInputConfig+0xd8>
  {
    if( EXTI_LineCmd == 0UL)
240037b4:	687b      	ldr	r3, [r7, #4]
240037b6:	2b00      	cmp	r3, #0
240037b8:	d116      	bne.n	240037e8 <HAL_EXTI_D1_EventInputConfig+0xb0>
    {
      /* Clear EXTI line configuration */
      CLEAR_BIT(  *(__IO uint32_t *) (((uint32_t) &(EXTI_D1->EMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
240037ba:	68fb      	ldr	r3, [r7, #12]
240037bc:	095b      	lsrs	r3, r3, #5
240037be:	011a      	lsls	r2, r3, #4
240037c0:	4b17      	ldr	r3, [pc, #92]	; (24003820 <HAL_EXTI_D1_EventInputConfig+0xe8>)
240037c2:	4413      	add	r3, r2
240037c4:	6819      	ldr	r1, [r3, #0]
240037c6:	68fb      	ldr	r3, [r7, #12]
240037c8:	f003 031f 	and.w	r3, r3, #31
240037cc:	2201      	movs	r2, #1
240037ce:	fa02 f303 	lsl.w	r3, r2, r3
240037d2:	43da      	mvns	r2, r3
240037d4:	68fb      	ldr	r3, [r7, #12]
240037d6:	095b      	lsrs	r3, r3, #5
240037d8:	0118      	lsls	r0, r3, #4
240037da:	4b11      	ldr	r3, [pc, #68]	; (24003820 <HAL_EXTI_D1_EventInputConfig+0xe8>)
240037dc:	4403      	add	r3, r0
240037de:	4618      	mov	r0, r3
240037e0:	ea01 0302 	and.w	r3, r1, r2
240037e4:	6003      	str	r3, [r0, #0]
    else
    {
      SET_BIT(  *(__IO uint32_t *) (((uint32_t) &(EXTI_D1->EMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
    }
  }
}
240037e6:	e013      	b.n	24003810 <HAL_EXTI_D1_EventInputConfig+0xd8>
      SET_BIT(  *(__IO uint32_t *) (((uint32_t) &(EXTI_D1->EMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
240037e8:	68fb      	ldr	r3, [r7, #12]
240037ea:	095b      	lsrs	r3, r3, #5
240037ec:	011a      	lsls	r2, r3, #4
240037ee:	4b0c      	ldr	r3, [pc, #48]	; (24003820 <HAL_EXTI_D1_EventInputConfig+0xe8>)
240037f0:	4413      	add	r3, r2
240037f2:	6819      	ldr	r1, [r3, #0]
240037f4:	68fb      	ldr	r3, [r7, #12]
240037f6:	f003 031f 	and.w	r3, r3, #31
240037fa:	2201      	movs	r2, #1
240037fc:	409a      	lsls	r2, r3
240037fe:	68fb      	ldr	r3, [r7, #12]
24003800:	095b      	lsrs	r3, r3, #5
24003802:	0118      	lsls	r0, r3, #4
24003804:	4b06      	ldr	r3, [pc, #24]	; (24003820 <HAL_EXTI_D1_EventInputConfig+0xe8>)
24003806:	4403      	add	r3, r0
24003808:	4618      	mov	r0, r3
2400380a:	ea41 0302 	orr.w	r3, r1, r2
2400380e:	6003      	str	r3, [r0, #0]
}
24003810:	bf00      	nop
24003812:	3714      	adds	r7, #20
24003814:	46bd      	mov	sp, r7
24003816:	f85d 7b04 	ldr.w	r7, [sp], #4
2400381a:	4770      	bx	lr
2400381c:	05800008 	.word	0x05800008
24003820:	58000084 	.word	0x58000084

24003824 <HAL_EXTI_D3_EventInputConfig>:
  *   @arg LPTIM4_OUT_CLEAR : LPTIM4 out selected as D3 domain pendclear source
  *   @arg LPTIM5_OUT_CLEAR : LPTIM5 out selected as D3 domain pendclear source
  * @retval None
  */
void HAL_EXTI_D3_EventInputConfig(uint32_t EXTI_Line, uint32_t EXTI_LineCmd , uint32_t EXTI_ClearSrc  )
{
24003824:	b480      	push	{r7}
24003826:	b087      	sub	sp, #28
24003828:	af00      	add	r7, sp, #0
2400382a:	60f8      	str	r0, [r7, #12]
2400382c:	60b9      	str	r1, [r7, #8]
2400382e:	607a      	str	r2, [r7, #4]

  /* Check the parameter */
  assert_param(IS_EXTI_D3_LINE(EXTI_Line));
  assert_param(IS_EXTI_D3_CLEAR(EXTI_ClearSrc));

  if( EXTI_LineCmd == 0UL)
24003830:	68bb      	ldr	r3, [r7, #8]
24003832:	2b00      	cmp	r3, #0
24003834:	d116      	bne.n	24003864 <HAL_EXTI_D3_EventInputConfig+0x40>
  {
    /* Clear EXTI line configuration */
    CLEAR_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI->D3PMR1)) + ((EXTI_Line >> 5 ) * 0x20UL)),(uint32_t)(1UL << (EXTI_Line & 0x1FUL)) );
24003836:	68fb      	ldr	r3, [r7, #12]
24003838:	095b      	lsrs	r3, r3, #5
2400383a:	015a      	lsls	r2, r3, #5
2400383c:	4b2a      	ldr	r3, [pc, #168]	; (240038e8 <HAL_EXTI_D3_EventInputConfig+0xc4>)
2400383e:	4413      	add	r3, r2
24003840:	6819      	ldr	r1, [r3, #0]
24003842:	68fb      	ldr	r3, [r7, #12]
24003844:	f003 031f 	and.w	r3, r3, #31
24003848:	2201      	movs	r2, #1
2400384a:	fa02 f303 	lsl.w	r3, r2, r3
2400384e:	43da      	mvns	r2, r3
24003850:	68fb      	ldr	r3, [r7, #12]
24003852:	095b      	lsrs	r3, r3, #5
24003854:	0158      	lsls	r0, r3, #5
24003856:	4b24      	ldr	r3, [pc, #144]	; (240038e8 <HAL_EXTI_D3_EventInputConfig+0xc4>)
24003858:	4403      	add	r3, r0
2400385a:	4618      	mov	r0, r3
2400385c:	ea01 0302 	and.w	r3, r1, r2
24003860:	6003      	str	r3, [r0, #0]
24003862:	e013      	b.n	2400388c <HAL_EXTI_D3_EventInputConfig+0x68>
  }
  else
  {
    SET_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI->D3PMR1)) +((EXTI_Line >> 5 ) * 0x20UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
24003864:	68fb      	ldr	r3, [r7, #12]
24003866:	095b      	lsrs	r3, r3, #5
24003868:	015a      	lsls	r2, r3, #5
2400386a:	4b1f      	ldr	r3, [pc, #124]	; (240038e8 <HAL_EXTI_D3_EventInputConfig+0xc4>)
2400386c:	4413      	add	r3, r2
2400386e:	6819      	ldr	r1, [r3, #0]
24003870:	68fb      	ldr	r3, [r7, #12]
24003872:	f003 031f 	and.w	r3, r3, #31
24003876:	2201      	movs	r2, #1
24003878:	409a      	lsls	r2, r3
2400387a:	68fb      	ldr	r3, [r7, #12]
2400387c:	095b      	lsrs	r3, r3, #5
2400387e:	0158      	lsls	r0, r3, #5
24003880:	4b19      	ldr	r3, [pc, #100]	; (240038e8 <HAL_EXTI_D3_EventInputConfig+0xc4>)
24003882:	4403      	add	r3, r0
24003884:	4618      	mov	r0, r3
24003886:	ea41 0302 	orr.w	r3, r1, r2
2400388a:	6003      	str	r3, [r0, #0]
  }

  if(((EXTI_Line>>4)%2UL) == 0UL)
2400388c:	68fb      	ldr	r3, [r7, #12]
2400388e:	f003 0310 	and.w	r3, r3, #16
24003892:	2b00      	cmp	r3, #0
24003894:	d106      	bne.n	240038a4 <HAL_EXTI_D3_EventInputConfig+0x80>
  {
    pRegv = (__IO uint32_t *) (((uint32_t) &(EXTI->D3PCR1L)) + ((EXTI_Line >> 5 ) * 0x20UL));
24003896:	68fb      	ldr	r3, [r7, #12]
24003898:	095b      	lsrs	r3, r3, #5
2400389a:	015a      	lsls	r2, r3, #5
2400389c:	4b13      	ldr	r3, [pc, #76]	; (240038ec <HAL_EXTI_D3_EventInputConfig+0xc8>)
2400389e:	4413      	add	r3, r2
240038a0:	617b      	str	r3, [r7, #20]
240038a2:	e005      	b.n	240038b0 <HAL_EXTI_D3_EventInputConfig+0x8c>
  }
  else
  {
    pRegv = (__IO uint32_t *) (((uint32_t) &(EXTI->D3PCR1H)) + ((EXTI_Line >> 5 ) * 0x20UL));
240038a4:	68fb      	ldr	r3, [r7, #12]
240038a6:	095b      	lsrs	r3, r3, #5
240038a8:	015a      	lsls	r2, r3, #5
240038aa:	4b11      	ldr	r3, [pc, #68]	; (240038f0 <HAL_EXTI_D3_EventInputConfig+0xcc>)
240038ac:	4413      	add	r3, r2
240038ae:	617b      	str	r3, [r7, #20]
  }
  MODIFY_REG(*pRegv, (uint32_t)(3UL << ((EXTI_Line*2UL) & 0x1FUL)), (uint32_t)(EXTI_ClearSrc << ((EXTI_Line*2UL) & 0x1FUL)));
240038b0:	697b      	ldr	r3, [r7, #20]
240038b2:	681a      	ldr	r2, [r3, #0]
240038b4:	68fb      	ldr	r3, [r7, #12]
240038b6:	005b      	lsls	r3, r3, #1
240038b8:	f003 031e 	and.w	r3, r3, #30
240038bc:	2103      	movs	r1, #3
240038be:	fa01 f303 	lsl.w	r3, r1, r3
240038c2:	43db      	mvns	r3, r3
240038c4:	401a      	ands	r2, r3
240038c6:	68fb      	ldr	r3, [r7, #12]
240038c8:	005b      	lsls	r3, r3, #1
240038ca:	f003 031e 	and.w	r3, r3, #30
240038ce:	6879      	ldr	r1, [r7, #4]
240038d0:	fa01 f303 	lsl.w	r3, r1, r3
240038d4:	431a      	orrs	r2, r3
240038d6:	697b      	ldr	r3, [r7, #20]
240038d8:	601a      	str	r2, [r3, #0]

}
240038da:	bf00      	nop
240038dc:	371c      	adds	r7, #28
240038de:	46bd      	mov	sp, r7
240038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
240038e4:	4770      	bx	lr
240038e6:	bf00      	nop
240038e8:	5800000c 	.word	0x5800000c
240038ec:	58000010 	.word	0x58000010
240038f0:	58000014 	.word	0x58000014

240038f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
240038f4:	b480      	push	{r7}
240038f6:	b085      	sub	sp, #20
240038f8:	af00      	add	r7, sp, #0
240038fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
240038fc:	687b      	ldr	r3, [r7, #4]
240038fe:	f003 0307 	and.w	r3, r3, #7
24003902:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
24003904:	4b0b      	ldr	r3, [pc, #44]	; (24003934 <__NVIC_SetPriorityGrouping+0x40>)
24003906:	68db      	ldr	r3, [r3, #12]
24003908:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
2400390a:	68ba      	ldr	r2, [r7, #8]
2400390c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
24003910:	4013      	ands	r3, r2
24003912:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
24003914:	68fb      	ldr	r3, [r7, #12]
24003916:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
24003918:	68bb      	ldr	r3, [r7, #8]
2400391a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
2400391c:	4b06      	ldr	r3, [pc, #24]	; (24003938 <__NVIC_SetPriorityGrouping+0x44>)
2400391e:	4313      	orrs	r3, r2
24003920:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
24003922:	4a04      	ldr	r2, [pc, #16]	; (24003934 <__NVIC_SetPriorityGrouping+0x40>)
24003924:	68bb      	ldr	r3, [r7, #8]
24003926:	60d3      	str	r3, [r2, #12]
}
24003928:	bf00      	nop
2400392a:	3714      	adds	r7, #20
2400392c:	46bd      	mov	sp, r7
2400392e:	f85d 7b04 	ldr.w	r7, [sp], #4
24003932:	4770      	bx	lr
24003934:	e000ed00 	.word	0xe000ed00
24003938:	05fa0000 	.word	0x05fa0000

2400393c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
2400393c:	b480      	push	{r7}
2400393e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
24003940:	4b04      	ldr	r3, [pc, #16]	; (24003954 <__NVIC_GetPriorityGrouping+0x18>)
24003942:	68db      	ldr	r3, [r3, #12]
24003944:	0a1b      	lsrs	r3, r3, #8
24003946:	f003 0307 	and.w	r3, r3, #7
}
2400394a:	4618      	mov	r0, r3
2400394c:	46bd      	mov	sp, r7
2400394e:	f85d 7b04 	ldr.w	r7, [sp], #4
24003952:	4770      	bx	lr
24003954:	e000ed00 	.word	0xe000ed00

24003958 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
24003958:	b480      	push	{r7}
2400395a:	b083      	sub	sp, #12
2400395c:	af00      	add	r7, sp, #0
2400395e:	4603      	mov	r3, r0
24003960:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
24003962:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24003966:	2b00      	cmp	r3, #0
24003968:	db0b      	blt.n	24003982 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
2400396a:	88fb      	ldrh	r3, [r7, #6]
2400396c:	f003 021f 	and.w	r2, r3, #31
24003970:	4907      	ldr	r1, [pc, #28]	; (24003990 <__NVIC_EnableIRQ+0x38>)
24003972:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24003976:	095b      	lsrs	r3, r3, #5
24003978:	2001      	movs	r0, #1
2400397a:	fa00 f202 	lsl.w	r2, r0, r2
2400397e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
24003982:	bf00      	nop
24003984:	370c      	adds	r7, #12
24003986:	46bd      	mov	sp, r7
24003988:	f85d 7b04 	ldr.w	r7, [sp], #4
2400398c:	4770      	bx	lr
2400398e:	bf00      	nop
24003990:	e000e100 	.word	0xe000e100

24003994 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
24003994:	b480      	push	{r7}
24003996:	b083      	sub	sp, #12
24003998:	af00      	add	r7, sp, #0
2400399a:	4603      	mov	r3, r0
2400399c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
2400399e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
240039a2:	2b00      	cmp	r3, #0
240039a4:	db12      	blt.n	240039cc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
240039a6:	88fb      	ldrh	r3, [r7, #6]
240039a8:	f003 021f 	and.w	r2, r3, #31
240039ac:	490a      	ldr	r1, [pc, #40]	; (240039d8 <__NVIC_DisableIRQ+0x44>)
240039ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
240039b2:	095b      	lsrs	r3, r3, #5
240039b4:	2001      	movs	r0, #1
240039b6:	fa00 f202 	lsl.w	r2, r0, r2
240039ba:	3320      	adds	r3, #32
240039bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
240039c0:	f3bf 8f4f 	dsb	sy
}
240039c4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
240039c6:	f3bf 8f6f 	isb	sy
}
240039ca:	bf00      	nop
    __DSB();
    __ISB();
  }
}
240039cc:	bf00      	nop
240039ce:	370c      	adds	r7, #12
240039d0:	46bd      	mov	sp, r7
240039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
240039d6:	4770      	bx	lr
240039d8:	e000e100 	.word	0xe000e100

240039dc <__NVIC_GetPendingIRQ>:
  \return             0  Interrupt status is not pending.
  \return             1  Interrupt status is pending.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
240039dc:	b480      	push	{r7}
240039de:	b083      	sub	sp, #12
240039e0:	af00      	add	r7, sp, #0
240039e2:	4603      	mov	r3, r0
240039e4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
240039e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
240039ea:	2b00      	cmp	r3, #0
240039ec:	db0e      	blt.n	24003a0c <__NVIC_GetPendingIRQ+0x30>
  {
    return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
240039ee:	4a0b      	ldr	r2, [pc, #44]	; (24003a1c <__NVIC_GetPendingIRQ+0x40>)
240039f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
240039f4:	095b      	lsrs	r3, r3, #5
240039f6:	3340      	adds	r3, #64	; 0x40
240039f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
240039fc:	88fb      	ldrh	r3, [r7, #6]
240039fe:	f003 031f 	and.w	r3, r3, #31
24003a02:	fa22 f303 	lsr.w	r3, r2, r3
24003a06:	f003 0301 	and.w	r3, r3, #1
24003a0a:	e000      	b.n	24003a0e <__NVIC_GetPendingIRQ+0x32>
  }
  else
  {
    return(0U);
24003a0c:	2300      	movs	r3, #0
  }
}
24003a0e:	4618      	mov	r0, r3
24003a10:	370c      	adds	r7, #12
24003a12:	46bd      	mov	sp, r7
24003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
24003a18:	4770      	bx	lr
24003a1a:	bf00      	nop
24003a1c:	e000e100 	.word	0xe000e100

24003a20 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
24003a20:	b480      	push	{r7}
24003a22:	b083      	sub	sp, #12
24003a24:	af00      	add	r7, sp, #0
24003a26:	4603      	mov	r3, r0
24003a28:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
24003a2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24003a2e:	2b00      	cmp	r3, #0
24003a30:	db0c      	blt.n	24003a4c <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
24003a32:	88fb      	ldrh	r3, [r7, #6]
24003a34:	f003 021f 	and.w	r2, r3, #31
24003a38:	4907      	ldr	r1, [pc, #28]	; (24003a58 <__NVIC_SetPendingIRQ+0x38>)
24003a3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24003a3e:	095b      	lsrs	r3, r3, #5
24003a40:	2001      	movs	r0, #1
24003a42:	fa00 f202 	lsl.w	r2, r0, r2
24003a46:	3340      	adds	r3, #64	; 0x40
24003a48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
24003a4c:	bf00      	nop
24003a4e:	370c      	adds	r7, #12
24003a50:	46bd      	mov	sp, r7
24003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
24003a56:	4770      	bx	lr
24003a58:	e000e100 	.word	0xe000e100

24003a5c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
24003a5c:	b480      	push	{r7}
24003a5e:	b083      	sub	sp, #12
24003a60:	af00      	add	r7, sp, #0
24003a62:	4603      	mov	r3, r0
24003a64:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
24003a66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24003a6a:	2b00      	cmp	r3, #0
24003a6c:	db0c      	blt.n	24003a88 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
24003a6e:	88fb      	ldrh	r3, [r7, #6]
24003a70:	f003 021f 	and.w	r2, r3, #31
24003a74:	4907      	ldr	r1, [pc, #28]	; (24003a94 <__NVIC_ClearPendingIRQ+0x38>)
24003a76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24003a7a:	095b      	lsrs	r3, r3, #5
24003a7c:	2001      	movs	r0, #1
24003a7e:	fa00 f202 	lsl.w	r2, r0, r2
24003a82:	3360      	adds	r3, #96	; 0x60
24003a84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
24003a88:	bf00      	nop
24003a8a:	370c      	adds	r7, #12
24003a8c:	46bd      	mov	sp, r7
24003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
24003a92:	4770      	bx	lr
24003a94:	e000e100 	.word	0xe000e100

24003a98 <__NVIC_GetActive>:
  \return             0  Interrupt status is not active.
  \return             1  Interrupt status is active.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetActive(IRQn_Type IRQn)
{
24003a98:	b480      	push	{r7}
24003a9a:	b083      	sub	sp, #12
24003a9c:	af00      	add	r7, sp, #0
24003a9e:	4603      	mov	r3, r0
24003aa0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
24003aa2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24003aa6:	2b00      	cmp	r3, #0
24003aa8:	db0e      	blt.n	24003ac8 <__NVIC_GetActive+0x30>
  {
    return((uint32_t)(((NVIC->IABR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
24003aaa:	4a0b      	ldr	r2, [pc, #44]	; (24003ad8 <__NVIC_GetActive+0x40>)
24003aac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24003ab0:	095b      	lsrs	r3, r3, #5
24003ab2:	3380      	adds	r3, #128	; 0x80
24003ab4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
24003ab8:	88fb      	ldrh	r3, [r7, #6]
24003aba:	f003 031f 	and.w	r3, r3, #31
24003abe:	fa22 f303 	lsr.w	r3, r2, r3
24003ac2:	f003 0301 	and.w	r3, r3, #1
24003ac6:	e000      	b.n	24003aca <__NVIC_GetActive+0x32>
  }
  else
  {
    return(0U);
24003ac8:	2300      	movs	r3, #0
  }
}
24003aca:	4618      	mov	r0, r3
24003acc:	370c      	adds	r7, #12
24003ace:	46bd      	mov	sp, r7
24003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
24003ad4:	4770      	bx	lr
24003ad6:	bf00      	nop
24003ad8:	e000e100 	.word	0xe000e100

24003adc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
24003adc:	b480      	push	{r7}
24003ade:	b083      	sub	sp, #12
24003ae0:	af00      	add	r7, sp, #0
24003ae2:	4603      	mov	r3, r0
24003ae4:	6039      	str	r1, [r7, #0]
24003ae6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
24003ae8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24003aec:	2b00      	cmp	r3, #0
24003aee:	db0a      	blt.n	24003b06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
24003af0:	683b      	ldr	r3, [r7, #0]
24003af2:	b2da      	uxtb	r2, r3
24003af4:	490c      	ldr	r1, [pc, #48]	; (24003b28 <__NVIC_SetPriority+0x4c>)
24003af6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24003afa:	0112      	lsls	r2, r2, #4
24003afc:	b2d2      	uxtb	r2, r2
24003afe:	440b      	add	r3, r1
24003b00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
24003b04:	e00a      	b.n	24003b1c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
24003b06:	683b      	ldr	r3, [r7, #0]
24003b08:	b2da      	uxtb	r2, r3
24003b0a:	4908      	ldr	r1, [pc, #32]	; (24003b2c <__NVIC_SetPriority+0x50>)
24003b0c:	88fb      	ldrh	r3, [r7, #6]
24003b0e:	f003 030f 	and.w	r3, r3, #15
24003b12:	3b04      	subs	r3, #4
24003b14:	0112      	lsls	r2, r2, #4
24003b16:	b2d2      	uxtb	r2, r2
24003b18:	440b      	add	r3, r1
24003b1a:	761a      	strb	r2, [r3, #24]
}
24003b1c:	bf00      	nop
24003b1e:	370c      	adds	r7, #12
24003b20:	46bd      	mov	sp, r7
24003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
24003b26:	4770      	bx	lr
24003b28:	e000e100 	.word	0xe000e100
24003b2c:	e000ed00 	.word	0xe000ed00

24003b30 <__NVIC_GetPriority>:
  \param [in]   IRQn  Interrupt number.
  \return             Interrupt Priority.
                      Value is aligned automatically to the implemented priority bits of the microcontroller.
 */
__STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
{
24003b30:	b480      	push	{r7}
24003b32:	b083      	sub	sp, #12
24003b34:	af00      	add	r7, sp, #0
24003b36:	4603      	mov	r3, r0
24003b38:	80fb      	strh	r3, [r7, #6]

  if ((int32_t)(IRQn) >= 0)
24003b3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24003b3e:	2b00      	cmp	r3, #0
24003b40:	db09      	blt.n	24003b56 <__NVIC_GetPriority+0x26>
  {
    return(((uint32_t)NVIC->IP[((uint32_t)IRQn)]                >> (8U - __NVIC_PRIO_BITS)));
24003b42:	4a0d      	ldr	r2, [pc, #52]	; (24003b78 <__NVIC_GetPriority+0x48>)
24003b44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24003b48:	4413      	add	r3, r2
24003b4a:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
24003b4e:	b2db      	uxtb	r3, r3
24003b50:	091b      	lsrs	r3, r3, #4
24003b52:	b2db      	uxtb	r3, r3
24003b54:	e009      	b.n	24003b6a <__NVIC_GetPriority+0x3a>
  }
  else
  {
    return(((uint32_t)SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
24003b56:	4a09      	ldr	r2, [pc, #36]	; (24003b7c <__NVIC_GetPriority+0x4c>)
24003b58:	88fb      	ldrh	r3, [r7, #6]
24003b5a:	f003 030f 	and.w	r3, r3, #15
24003b5e:	3b04      	subs	r3, #4
24003b60:	4413      	add	r3, r2
24003b62:	7e1b      	ldrb	r3, [r3, #24]
24003b64:	b2db      	uxtb	r3, r3
24003b66:	091b      	lsrs	r3, r3, #4
24003b68:	b2db      	uxtb	r3, r3
  }
}
24003b6a:	4618      	mov	r0, r3
24003b6c:	370c      	adds	r7, #12
24003b6e:	46bd      	mov	sp, r7
24003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
24003b74:	4770      	bx	lr
24003b76:	bf00      	nop
24003b78:	e000e100 	.word	0xe000e100
24003b7c:	e000ed00 	.word	0xe000ed00

24003b80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
24003b80:	b480      	push	{r7}
24003b82:	b089      	sub	sp, #36	; 0x24
24003b84:	af00      	add	r7, sp, #0
24003b86:	60f8      	str	r0, [r7, #12]
24003b88:	60b9      	str	r1, [r7, #8]
24003b8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
24003b8c:	68fb      	ldr	r3, [r7, #12]
24003b8e:	f003 0307 	and.w	r3, r3, #7
24003b92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
24003b94:	69fb      	ldr	r3, [r7, #28]
24003b96:	f1c3 0307 	rsb	r3, r3, #7
24003b9a:	2b04      	cmp	r3, #4
24003b9c:	bf28      	it	cs
24003b9e:	2304      	movcs	r3, #4
24003ba0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
24003ba2:	69fb      	ldr	r3, [r7, #28]
24003ba4:	3304      	adds	r3, #4
24003ba6:	2b06      	cmp	r3, #6
24003ba8:	d902      	bls.n	24003bb0 <NVIC_EncodePriority+0x30>
24003baa:	69fb      	ldr	r3, [r7, #28]
24003bac:	3b03      	subs	r3, #3
24003bae:	e000      	b.n	24003bb2 <NVIC_EncodePriority+0x32>
24003bb0:	2300      	movs	r3, #0
24003bb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
24003bb4:	f04f 32ff 	mov.w	r2, #4294967295
24003bb8:	69bb      	ldr	r3, [r7, #24]
24003bba:	fa02 f303 	lsl.w	r3, r2, r3
24003bbe:	43da      	mvns	r2, r3
24003bc0:	68bb      	ldr	r3, [r7, #8]
24003bc2:	401a      	ands	r2, r3
24003bc4:	697b      	ldr	r3, [r7, #20]
24003bc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
24003bc8:	f04f 31ff 	mov.w	r1, #4294967295
24003bcc:	697b      	ldr	r3, [r7, #20]
24003bce:	fa01 f303 	lsl.w	r3, r1, r3
24003bd2:	43d9      	mvns	r1, r3
24003bd4:	687b      	ldr	r3, [r7, #4]
24003bd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
24003bd8:	4313      	orrs	r3, r2
         );
}
24003bda:	4618      	mov	r0, r3
24003bdc:	3724      	adds	r7, #36	; 0x24
24003bde:	46bd      	mov	sp, r7
24003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
24003be4:	4770      	bx	lr

24003be6 <NVIC_DecodePriority>:
  \param [in]     PriorityGroup  Used priority group.
  \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
  \param [out]     pSubPriority  Subpriority value (starting from 0).
 */
__STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* const pPreemptPriority, uint32_t* const pSubPriority)
{
24003be6:	b480      	push	{r7}
24003be8:	b089      	sub	sp, #36	; 0x24
24003bea:	af00      	add	r7, sp, #0
24003bec:	60f8      	str	r0, [r7, #12]
24003bee:	60b9      	str	r1, [r7, #8]
24003bf0:	607a      	str	r2, [r7, #4]
24003bf2:	603b      	str	r3, [r7, #0]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
24003bf4:	68bb      	ldr	r3, [r7, #8]
24003bf6:	f003 0307 	and.w	r3, r3, #7
24003bfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
24003bfc:	69fb      	ldr	r3, [r7, #28]
24003bfe:	f1c3 0307 	rsb	r3, r3, #7
24003c02:	2b04      	cmp	r3, #4
24003c04:	bf28      	it	cs
24003c06:	2304      	movcs	r3, #4
24003c08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
24003c0a:	69fb      	ldr	r3, [r7, #28]
24003c0c:	3304      	adds	r3, #4
24003c0e:	2b06      	cmp	r3, #6
24003c10:	d902      	bls.n	24003c18 <NVIC_DecodePriority+0x32>
24003c12:	69fb      	ldr	r3, [r7, #28]
24003c14:	3b03      	subs	r3, #3
24003c16:	e000      	b.n	24003c1a <NVIC_DecodePriority+0x34>
24003c18:	2300      	movs	r3, #0
24003c1a:	617b      	str	r3, [r7, #20]

  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
24003c1c:	68fa      	ldr	r2, [r7, #12]
24003c1e:	697b      	ldr	r3, [r7, #20]
24003c20:	40da      	lsrs	r2, r3
24003c22:	f04f 31ff 	mov.w	r1, #4294967295
24003c26:	69bb      	ldr	r3, [r7, #24]
24003c28:	fa01 f303 	lsl.w	r3, r1, r3
24003c2c:	43db      	mvns	r3, r3
24003c2e:	401a      	ands	r2, r3
24003c30:	687b      	ldr	r3, [r7, #4]
24003c32:	601a      	str	r2, [r3, #0]
  *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL);
24003c34:	f04f 32ff 	mov.w	r2, #4294967295
24003c38:	697b      	ldr	r3, [r7, #20]
24003c3a:	fa02 f303 	lsl.w	r3, r2, r3
24003c3e:	43da      	mvns	r2, r3
24003c40:	68fb      	ldr	r3, [r7, #12]
24003c42:	401a      	ands	r2, r3
24003c44:	683b      	ldr	r3, [r7, #0]
24003c46:	601a      	str	r2, [r3, #0]
}
24003c48:	bf00      	nop
24003c4a:	3724      	adds	r7, #36	; 0x24
24003c4c:	46bd      	mov	sp, r7
24003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
24003c52:	4770      	bx	lr

24003c54 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
24003c54:	b480      	push	{r7}
24003c56:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
24003c58:	f3bf 8f4f 	dsb	sy
}
24003c5c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
24003c5e:	4b06      	ldr	r3, [pc, #24]	; (24003c78 <__NVIC_SystemReset+0x24>)
24003c60:	68db      	ldr	r3, [r3, #12]
24003c62:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
24003c66:	4904      	ldr	r1, [pc, #16]	; (24003c78 <__NVIC_SystemReset+0x24>)
24003c68:	4b04      	ldr	r3, [pc, #16]	; (24003c7c <__NVIC_SystemReset+0x28>)
24003c6a:	4313      	orrs	r3, r2
24003c6c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
24003c6e:	f3bf 8f4f 	dsb	sy
}
24003c72:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
24003c74:	bf00      	nop
24003c76:	e7fd      	b.n	24003c74 <__NVIC_SystemReset+0x20>
24003c78:	e000ed00 	.word	0xe000ed00
24003c7c:	05fa0004 	.word	0x05fa0004

24003c80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
24003c80:	b580      	push	{r7, lr}
24003c82:	b082      	sub	sp, #8
24003c84:	af00      	add	r7, sp, #0
24003c86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
24003c88:	687b      	ldr	r3, [r7, #4]
24003c8a:	3b01      	subs	r3, #1
24003c8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
24003c90:	d301      	bcc.n	24003c96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
24003c92:	2301      	movs	r3, #1
24003c94:	e00f      	b.n	24003cb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
24003c96:	4a0a      	ldr	r2, [pc, #40]	; (24003cc0 <SysTick_Config+0x40>)
24003c98:	687b      	ldr	r3, [r7, #4]
24003c9a:	3b01      	subs	r3, #1
24003c9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
24003c9e:	210f      	movs	r1, #15
24003ca0:	f04f 30ff 	mov.w	r0, #4294967295
24003ca4:	f7ff ff1a 	bl	24003adc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
24003ca8:	4b05      	ldr	r3, [pc, #20]	; (24003cc0 <SysTick_Config+0x40>)
24003caa:	2200      	movs	r2, #0
24003cac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
24003cae:	4b04      	ldr	r3, [pc, #16]	; (24003cc0 <SysTick_Config+0x40>)
24003cb0:	2207      	movs	r2, #7
24003cb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
24003cb4:	2300      	movs	r3, #0
}
24003cb6:	4618      	mov	r0, r3
24003cb8:	3708      	adds	r7, #8
24003cba:	46bd      	mov	sp, r7
24003cbc:	bd80      	pop	{r7, pc}
24003cbe:	bf00      	nop
24003cc0:	e000e010 	.word	0xe000e010

24003cc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
24003cc4:	b580      	push	{r7, lr}
24003cc6:	b082      	sub	sp, #8
24003cc8:	af00      	add	r7, sp, #0
24003cca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
24003ccc:	6878      	ldr	r0, [r7, #4]
24003cce:	f7ff fe11 	bl	240038f4 <__NVIC_SetPriorityGrouping>
}
24003cd2:	bf00      	nop
24003cd4:	3708      	adds	r7, #8
24003cd6:	46bd      	mov	sp, r7
24003cd8:	bd80      	pop	{r7, pc}

24003cda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
24003cda:	b580      	push	{r7, lr}
24003cdc:	b086      	sub	sp, #24
24003cde:	af00      	add	r7, sp, #0
24003ce0:	4603      	mov	r3, r0
24003ce2:	60b9      	str	r1, [r7, #8]
24003ce4:	607a      	str	r2, [r7, #4]
24003ce6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
24003ce8:	f7ff fe28 	bl	2400393c <__NVIC_GetPriorityGrouping>
24003cec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
24003cee:	687a      	ldr	r2, [r7, #4]
24003cf0:	68b9      	ldr	r1, [r7, #8]
24003cf2:	6978      	ldr	r0, [r7, #20]
24003cf4:	f7ff ff44 	bl	24003b80 <NVIC_EncodePriority>
24003cf8:	4602      	mov	r2, r0
24003cfa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
24003cfe:	4611      	mov	r1, r2
24003d00:	4618      	mov	r0, r3
24003d02:	f7ff feeb 	bl	24003adc <__NVIC_SetPriority>
}
24003d06:	bf00      	nop
24003d08:	3718      	adds	r7, #24
24003d0a:	46bd      	mov	sp, r7
24003d0c:	bd80      	pop	{r7, pc}

24003d0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
24003d0e:	b580      	push	{r7, lr}
24003d10:	b082      	sub	sp, #8
24003d12:	af00      	add	r7, sp, #0
24003d14:	4603      	mov	r3, r0
24003d16:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
24003d18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24003d1c:	4618      	mov	r0, r3
24003d1e:	f7ff fe1b 	bl	24003958 <__NVIC_EnableIRQ>
}
24003d22:	bf00      	nop
24003d24:	3708      	adds	r7, #8
24003d26:	46bd      	mov	sp, r7
24003d28:	bd80      	pop	{r7, pc}

24003d2a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
24003d2a:	b580      	push	{r7, lr}
24003d2c:	b082      	sub	sp, #8
24003d2e:	af00      	add	r7, sp, #0
24003d30:	4603      	mov	r3, r0
24003d32:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
24003d34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24003d38:	4618      	mov	r0, r3
24003d3a:	f7ff fe2b 	bl	24003994 <__NVIC_DisableIRQ>
}
24003d3e:	bf00      	nop
24003d40:	3708      	adds	r7, #8
24003d42:	46bd      	mov	sp, r7
24003d44:	bd80      	pop	{r7, pc}

24003d46 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
24003d46:	b580      	push	{r7, lr}
24003d48:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
24003d4a:	f7ff ff83 	bl	24003c54 <__NVIC_SystemReset>

24003d4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
24003d4e:	b580      	push	{r7, lr}
24003d50:	b082      	sub	sp, #8
24003d52:	af00      	add	r7, sp, #0
24003d54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
24003d56:	6878      	ldr	r0, [r7, #4]
24003d58:	f7ff ff92 	bl	24003c80 <SysTick_Config>
24003d5c:	4603      	mov	r3, r0
}
24003d5e:	4618      	mov	r0, r3
24003d60:	3708      	adds	r7, #8
24003d62:	46bd      	mov	sp, r7
24003d64:	bd80      	pop	{r7, pc}
	...

24003d68 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
24003d68:	b480      	push	{r7}
24003d6a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
24003d6c:	f3bf 8f5f 	dmb	sy
}
24003d70:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
24003d72:	4b07      	ldr	r3, [pc, #28]	; (24003d90 <HAL_MPU_Disable+0x28>)
24003d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24003d76:	4a06      	ldr	r2, [pc, #24]	; (24003d90 <HAL_MPU_Disable+0x28>)
24003d78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
24003d7c:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
24003d7e:	4b05      	ldr	r3, [pc, #20]	; (24003d94 <HAL_MPU_Disable+0x2c>)
24003d80:	2200      	movs	r2, #0
24003d82:	605a      	str	r2, [r3, #4]
}
24003d84:	bf00      	nop
24003d86:	46bd      	mov	sp, r7
24003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
24003d8c:	4770      	bx	lr
24003d8e:	bf00      	nop
24003d90:	e000ed00 	.word	0xe000ed00
24003d94:	e000ed90 	.word	0xe000ed90

24003d98 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
24003d98:	b480      	push	{r7}
24003d9a:	b083      	sub	sp, #12
24003d9c:	af00      	add	r7, sp, #0
24003d9e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
24003da0:	4a0b      	ldr	r2, [pc, #44]	; (24003dd0 <HAL_MPU_Enable+0x38>)
24003da2:	687b      	ldr	r3, [r7, #4]
24003da4:	f043 0301 	orr.w	r3, r3, #1
24003da8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
24003daa:	4b0a      	ldr	r3, [pc, #40]	; (24003dd4 <HAL_MPU_Enable+0x3c>)
24003dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24003dae:	4a09      	ldr	r2, [pc, #36]	; (24003dd4 <HAL_MPU_Enable+0x3c>)
24003db0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
24003db4:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
24003db6:	f3bf 8f4f 	dsb	sy
}
24003dba:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
24003dbc:	f3bf 8f6f 	isb	sy
}
24003dc0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
24003dc2:	bf00      	nop
24003dc4:	370c      	adds	r7, #12
24003dc6:	46bd      	mov	sp, r7
24003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
24003dcc:	4770      	bx	lr
24003dce:	bf00      	nop
24003dd0:	e000ed90 	.word	0xe000ed90
24003dd4:	e000ed00 	.word	0xe000ed00

24003dd8 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
24003dd8:	b480      	push	{r7}
24003dda:	b083      	sub	sp, #12
24003ddc:	af00      	add	r7, sp, #0
24003dde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
24003de0:	687b      	ldr	r3, [r7, #4]
24003de2:	785a      	ldrb	r2, [r3, #1]
24003de4:	4b1d      	ldr	r3, [pc, #116]	; (24003e5c <HAL_MPU_ConfigRegion+0x84>)
24003de6:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
24003de8:	687b      	ldr	r3, [r7, #4]
24003dea:	781b      	ldrb	r3, [r3, #0]
24003dec:	2b00      	cmp	r3, #0
24003dee:	d029      	beq.n	24003e44 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
24003df0:	4a1a      	ldr	r2, [pc, #104]	; (24003e5c <HAL_MPU_ConfigRegion+0x84>)
24003df2:	687b      	ldr	r3, [r7, #4]
24003df4:	685b      	ldr	r3, [r3, #4]
24003df6:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
24003df8:	687b      	ldr	r3, [r7, #4]
24003dfa:	7b1b      	ldrb	r3, [r3, #12]
24003dfc:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
24003dfe:	687b      	ldr	r3, [r7, #4]
24003e00:	7adb      	ldrb	r3, [r3, #11]
24003e02:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
24003e04:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
24003e06:	687b      	ldr	r3, [r7, #4]
24003e08:	7a9b      	ldrb	r3, [r3, #10]
24003e0a:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
24003e0c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
24003e0e:	687b      	ldr	r3, [r7, #4]
24003e10:	7b5b      	ldrb	r3, [r3, #13]
24003e12:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
24003e14:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
24003e16:	687b      	ldr	r3, [r7, #4]
24003e18:	7b9b      	ldrb	r3, [r3, #14]
24003e1a:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
24003e1c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
24003e1e:	687b      	ldr	r3, [r7, #4]
24003e20:	7bdb      	ldrb	r3, [r3, #15]
24003e22:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
24003e24:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
24003e26:	687b      	ldr	r3, [r7, #4]
24003e28:	7a5b      	ldrb	r3, [r3, #9]
24003e2a:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
24003e2c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
24003e2e:	687b      	ldr	r3, [r7, #4]
24003e30:	7a1b      	ldrb	r3, [r3, #8]
24003e32:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
24003e34:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
24003e36:	687a      	ldr	r2, [r7, #4]
24003e38:	7812      	ldrb	r2, [r2, #0]
24003e3a:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
24003e3c:	4a07      	ldr	r2, [pc, #28]	; (24003e5c <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
24003e3e:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
24003e40:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
24003e42:	e005      	b.n	24003e50 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
24003e44:	4b05      	ldr	r3, [pc, #20]	; (24003e5c <HAL_MPU_ConfigRegion+0x84>)
24003e46:	2200      	movs	r2, #0
24003e48:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
24003e4a:	4b04      	ldr	r3, [pc, #16]	; (24003e5c <HAL_MPU_ConfigRegion+0x84>)
24003e4c:	2200      	movs	r2, #0
24003e4e:	611a      	str	r2, [r3, #16]
}
24003e50:	bf00      	nop
24003e52:	370c      	adds	r7, #12
24003e54:	46bd      	mov	sp, r7
24003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
24003e5a:	4770      	bx	lr
24003e5c:	e000ed90 	.word	0xe000ed90

24003e60 <HAL_NVIC_GetPriorityGrouping>:
/**
  * @brief  Gets the priority grouping field from the NVIC Interrupt Controller.
  * @retval Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field)
  */
uint32_t HAL_NVIC_GetPriorityGrouping(void)
{
24003e60:	b580      	push	{r7, lr}
24003e62:	af00      	add	r7, sp, #0
  /* Get the PRIGROUP[10:8] field value */
  return NVIC_GetPriorityGrouping();
24003e64:	f7ff fd6a 	bl	2400393c <__NVIC_GetPriorityGrouping>
24003e68:	4603      	mov	r3, r0
}
24003e6a:	4618      	mov	r0, r3
24003e6c:	bd80      	pop	{r7, pc}

24003e6e <HAL_NVIC_GetPriority>:
  * @param  pPreemptPriority Pointer on the Preemptive priority value (starting from 0).
  * @param  pSubPriority Pointer on the Subpriority value (starting from 0).
  * @retval None
  */
void HAL_NVIC_GetPriority(IRQn_Type IRQn, uint32_t PriorityGroup, uint32_t *pPreemptPriority, uint32_t *pSubPriority)
{
24003e6e:	b580      	push	{r7, lr}
24003e70:	b084      	sub	sp, #16
24003e72:	af00      	add	r7, sp, #0
24003e74:	60b9      	str	r1, [r7, #8]
24003e76:	607a      	str	r2, [r7, #4]
24003e78:	603b      	str	r3, [r7, #0]
24003e7a:	4603      	mov	r3, r0
24003e7c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 /* Get priority for Cortex-M system or device specific interrupts */
  NVIC_DecodePriority(NVIC_GetPriority(IRQn), PriorityGroup, pPreemptPriority, pSubPriority);
24003e7e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
24003e82:	4618      	mov	r0, r3
24003e84:	f7ff fe54 	bl	24003b30 <__NVIC_GetPriority>
24003e88:	683b      	ldr	r3, [r7, #0]
24003e8a:	687a      	ldr	r2, [r7, #4]
24003e8c:	68b9      	ldr	r1, [r7, #8]
24003e8e:	f7ff feaa 	bl	24003be6 <NVIC_DecodePriority>
}
24003e92:	bf00      	nop
24003e94:	3710      	adds	r7, #16
24003e96:	46bd      	mov	sp, r7
24003e98:	bd80      	pop	{r7, pc}

24003e9a <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
24003e9a:	b580      	push	{r7, lr}
24003e9c:	b082      	sub	sp, #8
24003e9e:	af00      	add	r7, sp, #0
24003ea0:	4603      	mov	r3, r0
24003ea2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
24003ea4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24003ea8:	4618      	mov	r0, r3
24003eaa:	f7ff fdb9 	bl	24003a20 <__NVIC_SetPendingIRQ>
}
24003eae:	bf00      	nop
24003eb0:	3708      	adds	r7, #8
24003eb2:	46bd      	mov	sp, r7
24003eb4:	bd80      	pop	{r7, pc}

24003eb6 <HAL_NVIC_GetPendingIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval status  - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
24003eb6:	b580      	push	{r7, lr}
24003eb8:	b082      	sub	sp, #8
24003eba:	af00      	add	r7, sp, #0
24003ebc:	4603      	mov	r3, r0
24003ebe:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
24003ec0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24003ec4:	4618      	mov	r0, r3
24003ec6:	f7ff fd89 	bl	240039dc <__NVIC_GetPendingIRQ>
24003eca:	4603      	mov	r3, r0
}
24003ecc:	4618      	mov	r0, r3
24003ece:	3708      	adds	r7, #8
24003ed0:	46bd      	mov	sp, r7
24003ed2:	bd80      	pop	{r7, pc}

24003ed4 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
24003ed4:	b580      	push	{r7, lr}
24003ed6:	b082      	sub	sp, #8
24003ed8:	af00      	add	r7, sp, #0
24003eda:	4603      	mov	r3, r0
24003edc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
24003ede:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24003ee2:	4618      	mov	r0, r3
24003ee4:	f7ff fdba 	bl	24003a5c <__NVIC_ClearPendingIRQ>
}
24003ee8:	bf00      	nop
24003eea:	3708      	adds	r7, #8
24003eec:	46bd      	mov	sp, r7
24003eee:	bd80      	pop	{r7, pc}

24003ef0 <HAL_NVIC_GetActive>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval status  - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetActive(IRQn_Type IRQn)
{
24003ef0:	b580      	push	{r7, lr}
24003ef2:	b082      	sub	sp, #8
24003ef4:	af00      	add	r7, sp, #0
24003ef6:	4603      	mov	r3, r0
24003ef8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Return 1 if active else 0 */
  return NVIC_GetActive(IRQn);
24003efa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24003efe:	4618      	mov	r0, r3
24003f00:	f7ff fdca 	bl	24003a98 <__NVIC_GetActive>
24003f04:	4603      	mov	r3, r0
}
24003f06:	4618      	mov	r0, r3
24003f08:	3708      	adds	r7, #8
24003f0a:	46bd      	mov	sp, r7
24003f0c:	bd80      	pop	{r7, pc}
	...

24003f10 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
24003f10:	b480      	push	{r7}
24003f12:	b083      	sub	sp, #12
24003f14:	af00      	add	r7, sp, #0
24003f16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
24003f18:	687b      	ldr	r3, [r7, #4]
24003f1a:	2b04      	cmp	r3, #4
24003f1c:	d106      	bne.n	24003f2c <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
24003f1e:	4b09      	ldr	r3, [pc, #36]	; (24003f44 <HAL_SYSTICK_CLKSourceConfig+0x34>)
24003f20:	681b      	ldr	r3, [r3, #0]
24003f22:	4a08      	ldr	r2, [pc, #32]	; (24003f44 <HAL_SYSTICK_CLKSourceConfig+0x34>)
24003f24:	f043 0304 	orr.w	r3, r3, #4
24003f28:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
24003f2a:	e005      	b.n	24003f38 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
24003f2c:	4b05      	ldr	r3, [pc, #20]	; (24003f44 <HAL_SYSTICK_CLKSourceConfig+0x34>)
24003f2e:	681b      	ldr	r3, [r3, #0]
24003f30:	4a04      	ldr	r2, [pc, #16]	; (24003f44 <HAL_SYSTICK_CLKSourceConfig+0x34>)
24003f32:	f023 0304 	bic.w	r3, r3, #4
24003f36:	6013      	str	r3, [r2, #0]
}
24003f38:	bf00      	nop
24003f3a:	370c      	adds	r7, #12
24003f3c:	46bd      	mov	sp, r7
24003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
24003f42:	4770      	bx	lr
24003f44:	e000e010 	.word	0xe000e010

24003f48 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
24003f48:	b580      	push	{r7, lr}
24003f4a:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
24003f4c:	f000 f802 	bl	24003f54 <HAL_SYSTICK_Callback>
}
24003f50:	bf00      	nop
24003f52:	bd80      	pop	{r7, pc}

24003f54 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
24003f54:	b480      	push	{r7}
24003f56:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
24003f58:	bf00      	nop
24003f5a:	46bd      	mov	sp, r7
24003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
24003f60:	4770      	bx	lr

24003f62 <HAL_GetCurrentCPUID>:
/**
* @brief  Returns the current CPU ID.
* @retval CPU identifier
*/
uint32_t HAL_GetCurrentCPUID(void)
{
24003f62:	b480      	push	{r7}
24003f64:	af00      	add	r7, sp, #0
  return  CM7_CPUID;
24003f66:	2303      	movs	r3, #3
}
24003f68:	4618      	mov	r0, r3
24003f6a:	46bd      	mov	sp, r7
24003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
24003f70:	4770      	bx	lr
	...

24003f74 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
24003f74:	b580      	push	{r7, lr}
24003f76:	b086      	sub	sp, #24
24003f78:	af00      	add	r7, sp, #0
24003f7a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
24003f7c:	f7ff f892 	bl	240030a4 <HAL_GetTick>
24003f80:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
24003f82:	687b      	ldr	r3, [r7, #4]
24003f84:	2b00      	cmp	r3, #0
24003f86:	d101      	bne.n	24003f8c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
24003f88:	2301      	movs	r3, #1
24003f8a:	e316      	b.n	240045ba <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24003f8c:	687b      	ldr	r3, [r7, #4]
24003f8e:	681b      	ldr	r3, [r3, #0]
24003f90:	4a66      	ldr	r2, [pc, #408]	; (2400412c <HAL_DMA_Init+0x1b8>)
24003f92:	4293      	cmp	r3, r2
24003f94:	d04a      	beq.n	2400402c <HAL_DMA_Init+0xb8>
24003f96:	687b      	ldr	r3, [r7, #4]
24003f98:	681b      	ldr	r3, [r3, #0]
24003f9a:	4a65      	ldr	r2, [pc, #404]	; (24004130 <HAL_DMA_Init+0x1bc>)
24003f9c:	4293      	cmp	r3, r2
24003f9e:	d045      	beq.n	2400402c <HAL_DMA_Init+0xb8>
24003fa0:	687b      	ldr	r3, [r7, #4]
24003fa2:	681b      	ldr	r3, [r3, #0]
24003fa4:	4a63      	ldr	r2, [pc, #396]	; (24004134 <HAL_DMA_Init+0x1c0>)
24003fa6:	4293      	cmp	r3, r2
24003fa8:	d040      	beq.n	2400402c <HAL_DMA_Init+0xb8>
24003faa:	687b      	ldr	r3, [r7, #4]
24003fac:	681b      	ldr	r3, [r3, #0]
24003fae:	4a62      	ldr	r2, [pc, #392]	; (24004138 <HAL_DMA_Init+0x1c4>)
24003fb0:	4293      	cmp	r3, r2
24003fb2:	d03b      	beq.n	2400402c <HAL_DMA_Init+0xb8>
24003fb4:	687b      	ldr	r3, [r7, #4]
24003fb6:	681b      	ldr	r3, [r3, #0]
24003fb8:	4a60      	ldr	r2, [pc, #384]	; (2400413c <HAL_DMA_Init+0x1c8>)
24003fba:	4293      	cmp	r3, r2
24003fbc:	d036      	beq.n	2400402c <HAL_DMA_Init+0xb8>
24003fbe:	687b      	ldr	r3, [r7, #4]
24003fc0:	681b      	ldr	r3, [r3, #0]
24003fc2:	4a5f      	ldr	r2, [pc, #380]	; (24004140 <HAL_DMA_Init+0x1cc>)
24003fc4:	4293      	cmp	r3, r2
24003fc6:	d031      	beq.n	2400402c <HAL_DMA_Init+0xb8>
24003fc8:	687b      	ldr	r3, [r7, #4]
24003fca:	681b      	ldr	r3, [r3, #0]
24003fcc:	4a5d      	ldr	r2, [pc, #372]	; (24004144 <HAL_DMA_Init+0x1d0>)
24003fce:	4293      	cmp	r3, r2
24003fd0:	d02c      	beq.n	2400402c <HAL_DMA_Init+0xb8>
24003fd2:	687b      	ldr	r3, [r7, #4]
24003fd4:	681b      	ldr	r3, [r3, #0]
24003fd6:	4a5c      	ldr	r2, [pc, #368]	; (24004148 <HAL_DMA_Init+0x1d4>)
24003fd8:	4293      	cmp	r3, r2
24003fda:	d027      	beq.n	2400402c <HAL_DMA_Init+0xb8>
24003fdc:	687b      	ldr	r3, [r7, #4]
24003fde:	681b      	ldr	r3, [r3, #0]
24003fe0:	4a5a      	ldr	r2, [pc, #360]	; (2400414c <HAL_DMA_Init+0x1d8>)
24003fe2:	4293      	cmp	r3, r2
24003fe4:	d022      	beq.n	2400402c <HAL_DMA_Init+0xb8>
24003fe6:	687b      	ldr	r3, [r7, #4]
24003fe8:	681b      	ldr	r3, [r3, #0]
24003fea:	4a59      	ldr	r2, [pc, #356]	; (24004150 <HAL_DMA_Init+0x1dc>)
24003fec:	4293      	cmp	r3, r2
24003fee:	d01d      	beq.n	2400402c <HAL_DMA_Init+0xb8>
24003ff0:	687b      	ldr	r3, [r7, #4]
24003ff2:	681b      	ldr	r3, [r3, #0]
24003ff4:	4a57      	ldr	r2, [pc, #348]	; (24004154 <HAL_DMA_Init+0x1e0>)
24003ff6:	4293      	cmp	r3, r2
24003ff8:	d018      	beq.n	2400402c <HAL_DMA_Init+0xb8>
24003ffa:	687b      	ldr	r3, [r7, #4]
24003ffc:	681b      	ldr	r3, [r3, #0]
24003ffe:	4a56      	ldr	r2, [pc, #344]	; (24004158 <HAL_DMA_Init+0x1e4>)
24004000:	4293      	cmp	r3, r2
24004002:	d013      	beq.n	2400402c <HAL_DMA_Init+0xb8>
24004004:	687b      	ldr	r3, [r7, #4]
24004006:	681b      	ldr	r3, [r3, #0]
24004008:	4a54      	ldr	r2, [pc, #336]	; (2400415c <HAL_DMA_Init+0x1e8>)
2400400a:	4293      	cmp	r3, r2
2400400c:	d00e      	beq.n	2400402c <HAL_DMA_Init+0xb8>
2400400e:	687b      	ldr	r3, [r7, #4]
24004010:	681b      	ldr	r3, [r3, #0]
24004012:	4a53      	ldr	r2, [pc, #332]	; (24004160 <HAL_DMA_Init+0x1ec>)
24004014:	4293      	cmp	r3, r2
24004016:	d009      	beq.n	2400402c <HAL_DMA_Init+0xb8>
24004018:	687b      	ldr	r3, [r7, #4]
2400401a:	681b      	ldr	r3, [r3, #0]
2400401c:	4a51      	ldr	r2, [pc, #324]	; (24004164 <HAL_DMA_Init+0x1f0>)
2400401e:	4293      	cmp	r3, r2
24004020:	d004      	beq.n	2400402c <HAL_DMA_Init+0xb8>
24004022:	687b      	ldr	r3, [r7, #4]
24004024:	681b      	ldr	r3, [r3, #0]
24004026:	4a50      	ldr	r2, [pc, #320]	; (24004168 <HAL_DMA_Init+0x1f4>)
24004028:	4293      	cmp	r3, r2
2400402a:	d101      	bne.n	24004030 <HAL_DMA_Init+0xbc>
2400402c:	2301      	movs	r3, #1
2400402e:	e000      	b.n	24004032 <HAL_DMA_Init+0xbe>
24004030:	2300      	movs	r3, #0
24004032:	2b00      	cmp	r3, #0
24004034:	f000 813b 	beq.w	240042ae <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
24004038:	687b      	ldr	r3, [r7, #4]
2400403a:	2202      	movs	r2, #2
2400403c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
24004040:	687b      	ldr	r3, [r7, #4]
24004042:	2200      	movs	r2, #0
24004044:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
24004048:	687b      	ldr	r3, [r7, #4]
2400404a:	681b      	ldr	r3, [r3, #0]
2400404c:	4a37      	ldr	r2, [pc, #220]	; (2400412c <HAL_DMA_Init+0x1b8>)
2400404e:	4293      	cmp	r3, r2
24004050:	d04a      	beq.n	240040e8 <HAL_DMA_Init+0x174>
24004052:	687b      	ldr	r3, [r7, #4]
24004054:	681b      	ldr	r3, [r3, #0]
24004056:	4a36      	ldr	r2, [pc, #216]	; (24004130 <HAL_DMA_Init+0x1bc>)
24004058:	4293      	cmp	r3, r2
2400405a:	d045      	beq.n	240040e8 <HAL_DMA_Init+0x174>
2400405c:	687b      	ldr	r3, [r7, #4]
2400405e:	681b      	ldr	r3, [r3, #0]
24004060:	4a34      	ldr	r2, [pc, #208]	; (24004134 <HAL_DMA_Init+0x1c0>)
24004062:	4293      	cmp	r3, r2
24004064:	d040      	beq.n	240040e8 <HAL_DMA_Init+0x174>
24004066:	687b      	ldr	r3, [r7, #4]
24004068:	681b      	ldr	r3, [r3, #0]
2400406a:	4a33      	ldr	r2, [pc, #204]	; (24004138 <HAL_DMA_Init+0x1c4>)
2400406c:	4293      	cmp	r3, r2
2400406e:	d03b      	beq.n	240040e8 <HAL_DMA_Init+0x174>
24004070:	687b      	ldr	r3, [r7, #4]
24004072:	681b      	ldr	r3, [r3, #0]
24004074:	4a31      	ldr	r2, [pc, #196]	; (2400413c <HAL_DMA_Init+0x1c8>)
24004076:	4293      	cmp	r3, r2
24004078:	d036      	beq.n	240040e8 <HAL_DMA_Init+0x174>
2400407a:	687b      	ldr	r3, [r7, #4]
2400407c:	681b      	ldr	r3, [r3, #0]
2400407e:	4a30      	ldr	r2, [pc, #192]	; (24004140 <HAL_DMA_Init+0x1cc>)
24004080:	4293      	cmp	r3, r2
24004082:	d031      	beq.n	240040e8 <HAL_DMA_Init+0x174>
24004084:	687b      	ldr	r3, [r7, #4]
24004086:	681b      	ldr	r3, [r3, #0]
24004088:	4a2e      	ldr	r2, [pc, #184]	; (24004144 <HAL_DMA_Init+0x1d0>)
2400408a:	4293      	cmp	r3, r2
2400408c:	d02c      	beq.n	240040e8 <HAL_DMA_Init+0x174>
2400408e:	687b      	ldr	r3, [r7, #4]
24004090:	681b      	ldr	r3, [r3, #0]
24004092:	4a2d      	ldr	r2, [pc, #180]	; (24004148 <HAL_DMA_Init+0x1d4>)
24004094:	4293      	cmp	r3, r2
24004096:	d027      	beq.n	240040e8 <HAL_DMA_Init+0x174>
24004098:	687b      	ldr	r3, [r7, #4]
2400409a:	681b      	ldr	r3, [r3, #0]
2400409c:	4a2b      	ldr	r2, [pc, #172]	; (2400414c <HAL_DMA_Init+0x1d8>)
2400409e:	4293      	cmp	r3, r2
240040a0:	d022      	beq.n	240040e8 <HAL_DMA_Init+0x174>
240040a2:	687b      	ldr	r3, [r7, #4]
240040a4:	681b      	ldr	r3, [r3, #0]
240040a6:	4a2a      	ldr	r2, [pc, #168]	; (24004150 <HAL_DMA_Init+0x1dc>)
240040a8:	4293      	cmp	r3, r2
240040aa:	d01d      	beq.n	240040e8 <HAL_DMA_Init+0x174>
240040ac:	687b      	ldr	r3, [r7, #4]
240040ae:	681b      	ldr	r3, [r3, #0]
240040b0:	4a28      	ldr	r2, [pc, #160]	; (24004154 <HAL_DMA_Init+0x1e0>)
240040b2:	4293      	cmp	r3, r2
240040b4:	d018      	beq.n	240040e8 <HAL_DMA_Init+0x174>
240040b6:	687b      	ldr	r3, [r7, #4]
240040b8:	681b      	ldr	r3, [r3, #0]
240040ba:	4a27      	ldr	r2, [pc, #156]	; (24004158 <HAL_DMA_Init+0x1e4>)
240040bc:	4293      	cmp	r3, r2
240040be:	d013      	beq.n	240040e8 <HAL_DMA_Init+0x174>
240040c0:	687b      	ldr	r3, [r7, #4]
240040c2:	681b      	ldr	r3, [r3, #0]
240040c4:	4a25      	ldr	r2, [pc, #148]	; (2400415c <HAL_DMA_Init+0x1e8>)
240040c6:	4293      	cmp	r3, r2
240040c8:	d00e      	beq.n	240040e8 <HAL_DMA_Init+0x174>
240040ca:	687b      	ldr	r3, [r7, #4]
240040cc:	681b      	ldr	r3, [r3, #0]
240040ce:	4a24      	ldr	r2, [pc, #144]	; (24004160 <HAL_DMA_Init+0x1ec>)
240040d0:	4293      	cmp	r3, r2
240040d2:	d009      	beq.n	240040e8 <HAL_DMA_Init+0x174>
240040d4:	687b      	ldr	r3, [r7, #4]
240040d6:	681b      	ldr	r3, [r3, #0]
240040d8:	4a22      	ldr	r2, [pc, #136]	; (24004164 <HAL_DMA_Init+0x1f0>)
240040da:	4293      	cmp	r3, r2
240040dc:	d004      	beq.n	240040e8 <HAL_DMA_Init+0x174>
240040de:	687b      	ldr	r3, [r7, #4]
240040e0:	681b      	ldr	r3, [r3, #0]
240040e2:	4a21      	ldr	r2, [pc, #132]	; (24004168 <HAL_DMA_Init+0x1f4>)
240040e4:	4293      	cmp	r3, r2
240040e6:	d108      	bne.n	240040fa <HAL_DMA_Init+0x186>
240040e8:	687b      	ldr	r3, [r7, #4]
240040ea:	681b      	ldr	r3, [r3, #0]
240040ec:	681a      	ldr	r2, [r3, #0]
240040ee:	687b      	ldr	r3, [r7, #4]
240040f0:	681b      	ldr	r3, [r3, #0]
240040f2:	f022 0201 	bic.w	r2, r2, #1
240040f6:	601a      	str	r2, [r3, #0]
240040f8:	e007      	b.n	2400410a <HAL_DMA_Init+0x196>
240040fa:	687b      	ldr	r3, [r7, #4]
240040fc:	681b      	ldr	r3, [r3, #0]
240040fe:	681a      	ldr	r2, [r3, #0]
24004100:	687b      	ldr	r3, [r7, #4]
24004102:	681b      	ldr	r3, [r3, #0]
24004104:	f022 0201 	bic.w	r2, r2, #1
24004108:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
2400410a:	e02f      	b.n	2400416c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
2400410c:	f7fe ffca 	bl	240030a4 <HAL_GetTick>
24004110:	4602      	mov	r2, r0
24004112:	693b      	ldr	r3, [r7, #16]
24004114:	1ad3      	subs	r3, r2, r3
24004116:	2b05      	cmp	r3, #5
24004118:	d928      	bls.n	2400416c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
2400411a:	687b      	ldr	r3, [r7, #4]
2400411c:	2220      	movs	r2, #32
2400411e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
24004120:	687b      	ldr	r3, [r7, #4]
24004122:	2203      	movs	r2, #3
24004124:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
24004128:	2301      	movs	r3, #1
2400412a:	e246      	b.n	240045ba <HAL_DMA_Init+0x646>
2400412c:	40020010 	.word	0x40020010
24004130:	40020028 	.word	0x40020028
24004134:	40020040 	.word	0x40020040
24004138:	40020058 	.word	0x40020058
2400413c:	40020070 	.word	0x40020070
24004140:	40020088 	.word	0x40020088
24004144:	400200a0 	.word	0x400200a0
24004148:	400200b8 	.word	0x400200b8
2400414c:	40020410 	.word	0x40020410
24004150:	40020428 	.word	0x40020428
24004154:	40020440 	.word	0x40020440
24004158:	40020458 	.word	0x40020458
2400415c:	40020470 	.word	0x40020470
24004160:	40020488 	.word	0x40020488
24004164:	400204a0 	.word	0x400204a0
24004168:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
2400416c:	687b      	ldr	r3, [r7, #4]
2400416e:	681b      	ldr	r3, [r3, #0]
24004170:	681b      	ldr	r3, [r3, #0]
24004172:	f003 0301 	and.w	r3, r3, #1
24004176:	2b00      	cmp	r3, #0
24004178:	d1c8      	bne.n	2400410c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
2400417a:	687b      	ldr	r3, [r7, #4]
2400417c:	681b      	ldr	r3, [r3, #0]
2400417e:	681b      	ldr	r3, [r3, #0]
24004180:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
24004182:	697a      	ldr	r2, [r7, #20]
24004184:	4b83      	ldr	r3, [pc, #524]	; (24004394 <HAL_DMA_Init+0x420>)
24004186:	4013      	ands	r3, r2
24004188:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
2400418a:	687b      	ldr	r3, [r7, #4]
2400418c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
2400418e:	687b      	ldr	r3, [r7, #4]
24004190:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
24004192:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
24004194:	687b      	ldr	r3, [r7, #4]
24004196:	691b      	ldr	r3, [r3, #16]
24004198:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
2400419a:	687b      	ldr	r3, [r7, #4]
2400419c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
2400419e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
240041a0:	687b      	ldr	r3, [r7, #4]
240041a2:	699b      	ldr	r3, [r3, #24]
240041a4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
240041a6:	687b      	ldr	r3, [r7, #4]
240041a8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
240041aa:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
240041ac:	687b      	ldr	r3, [r7, #4]
240041ae:	6a1b      	ldr	r3, [r3, #32]
240041b0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
240041b2:	697a      	ldr	r2, [r7, #20]
240041b4:	4313      	orrs	r3, r2
240041b6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
240041b8:	687b      	ldr	r3, [r7, #4]
240041ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
240041bc:	2b04      	cmp	r3, #4
240041be:	d107      	bne.n	240041d0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
240041c0:	687b      	ldr	r3, [r7, #4]
240041c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
240041c4:	687b      	ldr	r3, [r7, #4]
240041c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
240041c8:	4313      	orrs	r3, r2
240041ca:	697a      	ldr	r2, [r7, #20]
240041cc:	4313      	orrs	r3, r2
240041ce:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
240041d0:	4b71      	ldr	r3, [pc, #452]	; (24004398 <HAL_DMA_Init+0x424>)
240041d2:	681a      	ldr	r2, [r3, #0]
240041d4:	4b71      	ldr	r3, [pc, #452]	; (2400439c <HAL_DMA_Init+0x428>)
240041d6:	4013      	ands	r3, r2
240041d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
240041dc:	d328      	bcc.n	24004230 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
240041de:	687b      	ldr	r3, [r7, #4]
240041e0:	685b      	ldr	r3, [r3, #4]
240041e2:	2b28      	cmp	r3, #40	; 0x28
240041e4:	d903      	bls.n	240041ee <HAL_DMA_Init+0x27a>
240041e6:	687b      	ldr	r3, [r7, #4]
240041e8:	685b      	ldr	r3, [r3, #4]
240041ea:	2b2e      	cmp	r3, #46	; 0x2e
240041ec:	d917      	bls.n	2400421e <HAL_DMA_Init+0x2aa>
240041ee:	687b      	ldr	r3, [r7, #4]
240041f0:	685b      	ldr	r3, [r3, #4]
240041f2:	2b3e      	cmp	r3, #62	; 0x3e
240041f4:	d903      	bls.n	240041fe <HAL_DMA_Init+0x28a>
240041f6:	687b      	ldr	r3, [r7, #4]
240041f8:	685b      	ldr	r3, [r3, #4]
240041fa:	2b42      	cmp	r3, #66	; 0x42
240041fc:	d90f      	bls.n	2400421e <HAL_DMA_Init+0x2aa>
240041fe:	687b      	ldr	r3, [r7, #4]
24004200:	685b      	ldr	r3, [r3, #4]
24004202:	2b46      	cmp	r3, #70	; 0x46
24004204:	d903      	bls.n	2400420e <HAL_DMA_Init+0x29a>
24004206:	687b      	ldr	r3, [r7, #4]
24004208:	685b      	ldr	r3, [r3, #4]
2400420a:	2b48      	cmp	r3, #72	; 0x48
2400420c:	d907      	bls.n	2400421e <HAL_DMA_Init+0x2aa>
2400420e:	687b      	ldr	r3, [r7, #4]
24004210:	685b      	ldr	r3, [r3, #4]
24004212:	2b4e      	cmp	r3, #78	; 0x4e
24004214:	d905      	bls.n	24004222 <HAL_DMA_Init+0x2ae>
24004216:	687b      	ldr	r3, [r7, #4]
24004218:	685b      	ldr	r3, [r3, #4]
2400421a:	2b52      	cmp	r3, #82	; 0x52
2400421c:	d801      	bhi.n	24004222 <HAL_DMA_Init+0x2ae>
2400421e:	2301      	movs	r3, #1
24004220:	e000      	b.n	24004224 <HAL_DMA_Init+0x2b0>
24004222:	2300      	movs	r3, #0
24004224:	2b00      	cmp	r3, #0
24004226:	d003      	beq.n	24004230 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
24004228:	697b      	ldr	r3, [r7, #20]
2400422a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
2400422e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
24004230:	687b      	ldr	r3, [r7, #4]
24004232:	681b      	ldr	r3, [r3, #0]
24004234:	697a      	ldr	r2, [r7, #20]
24004236:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
24004238:	687b      	ldr	r3, [r7, #4]
2400423a:	681b      	ldr	r3, [r3, #0]
2400423c:	695b      	ldr	r3, [r3, #20]
2400423e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
24004240:	697b      	ldr	r3, [r7, #20]
24004242:	f023 0307 	bic.w	r3, r3, #7
24004246:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
24004248:	687b      	ldr	r3, [r7, #4]
2400424a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400424c:	697a      	ldr	r2, [r7, #20]
2400424e:	4313      	orrs	r3, r2
24004250:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
24004252:	687b      	ldr	r3, [r7, #4]
24004254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24004256:	2b04      	cmp	r3, #4
24004258:	d117      	bne.n	2400428a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
2400425a:	687b      	ldr	r3, [r7, #4]
2400425c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2400425e:	697a      	ldr	r2, [r7, #20]
24004260:	4313      	orrs	r3, r2
24004262:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
24004264:	687b      	ldr	r3, [r7, #4]
24004266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24004268:	2b00      	cmp	r3, #0
2400426a:	d00e      	beq.n	2400428a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
2400426c:	6878      	ldr	r0, [r7, #4]
2400426e:	f003 fa95 	bl	2400779c <DMA_CheckFifoParam>
24004272:	4603      	mov	r3, r0
24004274:	2b00      	cmp	r3, #0
24004276:	d008      	beq.n	2400428a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
24004278:	687b      	ldr	r3, [r7, #4]
2400427a:	2240      	movs	r2, #64	; 0x40
2400427c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
2400427e:	687b      	ldr	r3, [r7, #4]
24004280:	2201      	movs	r2, #1
24004282:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
24004286:	2301      	movs	r3, #1
24004288:	e197      	b.n	240045ba <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
2400428a:	687b      	ldr	r3, [r7, #4]
2400428c:	681b      	ldr	r3, [r3, #0]
2400428e:	697a      	ldr	r2, [r7, #20]
24004290:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
24004292:	6878      	ldr	r0, [r7, #4]
24004294:	f003 f9d0 	bl	24007638 <DMA_CalcBaseAndBitshift>
24004298:	4603      	mov	r3, r0
2400429a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
2400429c:	687b      	ldr	r3, [r7, #4]
2400429e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
240042a0:	f003 031f 	and.w	r3, r3, #31
240042a4:	223f      	movs	r2, #63	; 0x3f
240042a6:	409a      	lsls	r2, r3
240042a8:	68bb      	ldr	r3, [r7, #8]
240042aa:	609a      	str	r2, [r3, #8]
240042ac:	e0cd      	b.n	2400444a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
240042ae:	687b      	ldr	r3, [r7, #4]
240042b0:	681b      	ldr	r3, [r3, #0]
240042b2:	4a3b      	ldr	r2, [pc, #236]	; (240043a0 <HAL_DMA_Init+0x42c>)
240042b4:	4293      	cmp	r3, r2
240042b6:	d022      	beq.n	240042fe <HAL_DMA_Init+0x38a>
240042b8:	687b      	ldr	r3, [r7, #4]
240042ba:	681b      	ldr	r3, [r3, #0]
240042bc:	4a39      	ldr	r2, [pc, #228]	; (240043a4 <HAL_DMA_Init+0x430>)
240042be:	4293      	cmp	r3, r2
240042c0:	d01d      	beq.n	240042fe <HAL_DMA_Init+0x38a>
240042c2:	687b      	ldr	r3, [r7, #4]
240042c4:	681b      	ldr	r3, [r3, #0]
240042c6:	4a38      	ldr	r2, [pc, #224]	; (240043a8 <HAL_DMA_Init+0x434>)
240042c8:	4293      	cmp	r3, r2
240042ca:	d018      	beq.n	240042fe <HAL_DMA_Init+0x38a>
240042cc:	687b      	ldr	r3, [r7, #4]
240042ce:	681b      	ldr	r3, [r3, #0]
240042d0:	4a36      	ldr	r2, [pc, #216]	; (240043ac <HAL_DMA_Init+0x438>)
240042d2:	4293      	cmp	r3, r2
240042d4:	d013      	beq.n	240042fe <HAL_DMA_Init+0x38a>
240042d6:	687b      	ldr	r3, [r7, #4]
240042d8:	681b      	ldr	r3, [r3, #0]
240042da:	4a35      	ldr	r2, [pc, #212]	; (240043b0 <HAL_DMA_Init+0x43c>)
240042dc:	4293      	cmp	r3, r2
240042de:	d00e      	beq.n	240042fe <HAL_DMA_Init+0x38a>
240042e0:	687b      	ldr	r3, [r7, #4]
240042e2:	681b      	ldr	r3, [r3, #0]
240042e4:	4a33      	ldr	r2, [pc, #204]	; (240043b4 <HAL_DMA_Init+0x440>)
240042e6:	4293      	cmp	r3, r2
240042e8:	d009      	beq.n	240042fe <HAL_DMA_Init+0x38a>
240042ea:	687b      	ldr	r3, [r7, #4]
240042ec:	681b      	ldr	r3, [r3, #0]
240042ee:	4a32      	ldr	r2, [pc, #200]	; (240043b8 <HAL_DMA_Init+0x444>)
240042f0:	4293      	cmp	r3, r2
240042f2:	d004      	beq.n	240042fe <HAL_DMA_Init+0x38a>
240042f4:	687b      	ldr	r3, [r7, #4]
240042f6:	681b      	ldr	r3, [r3, #0]
240042f8:	4a30      	ldr	r2, [pc, #192]	; (240043bc <HAL_DMA_Init+0x448>)
240042fa:	4293      	cmp	r3, r2
240042fc:	d101      	bne.n	24004302 <HAL_DMA_Init+0x38e>
240042fe:	2301      	movs	r3, #1
24004300:	e000      	b.n	24004304 <HAL_DMA_Init+0x390>
24004302:	2300      	movs	r3, #0
24004304:	2b00      	cmp	r3, #0
24004306:	f000 8097 	beq.w	24004438 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
2400430a:	687b      	ldr	r3, [r7, #4]
2400430c:	681b      	ldr	r3, [r3, #0]
2400430e:	4a24      	ldr	r2, [pc, #144]	; (240043a0 <HAL_DMA_Init+0x42c>)
24004310:	4293      	cmp	r3, r2
24004312:	d021      	beq.n	24004358 <HAL_DMA_Init+0x3e4>
24004314:	687b      	ldr	r3, [r7, #4]
24004316:	681b      	ldr	r3, [r3, #0]
24004318:	4a22      	ldr	r2, [pc, #136]	; (240043a4 <HAL_DMA_Init+0x430>)
2400431a:	4293      	cmp	r3, r2
2400431c:	d01c      	beq.n	24004358 <HAL_DMA_Init+0x3e4>
2400431e:	687b      	ldr	r3, [r7, #4]
24004320:	681b      	ldr	r3, [r3, #0]
24004322:	4a21      	ldr	r2, [pc, #132]	; (240043a8 <HAL_DMA_Init+0x434>)
24004324:	4293      	cmp	r3, r2
24004326:	d017      	beq.n	24004358 <HAL_DMA_Init+0x3e4>
24004328:	687b      	ldr	r3, [r7, #4]
2400432a:	681b      	ldr	r3, [r3, #0]
2400432c:	4a1f      	ldr	r2, [pc, #124]	; (240043ac <HAL_DMA_Init+0x438>)
2400432e:	4293      	cmp	r3, r2
24004330:	d012      	beq.n	24004358 <HAL_DMA_Init+0x3e4>
24004332:	687b      	ldr	r3, [r7, #4]
24004334:	681b      	ldr	r3, [r3, #0]
24004336:	4a1e      	ldr	r2, [pc, #120]	; (240043b0 <HAL_DMA_Init+0x43c>)
24004338:	4293      	cmp	r3, r2
2400433a:	d00d      	beq.n	24004358 <HAL_DMA_Init+0x3e4>
2400433c:	687b      	ldr	r3, [r7, #4]
2400433e:	681b      	ldr	r3, [r3, #0]
24004340:	4a1c      	ldr	r2, [pc, #112]	; (240043b4 <HAL_DMA_Init+0x440>)
24004342:	4293      	cmp	r3, r2
24004344:	d008      	beq.n	24004358 <HAL_DMA_Init+0x3e4>
24004346:	687b      	ldr	r3, [r7, #4]
24004348:	681b      	ldr	r3, [r3, #0]
2400434a:	4a1b      	ldr	r2, [pc, #108]	; (240043b8 <HAL_DMA_Init+0x444>)
2400434c:	4293      	cmp	r3, r2
2400434e:	d003      	beq.n	24004358 <HAL_DMA_Init+0x3e4>
24004350:	687b      	ldr	r3, [r7, #4]
24004352:	681b      	ldr	r3, [r3, #0]
24004354:	4a19      	ldr	r2, [pc, #100]	; (240043bc <HAL_DMA_Init+0x448>)
24004356:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
24004358:	687b      	ldr	r3, [r7, #4]
2400435a:	2202      	movs	r2, #2
2400435c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
24004360:	687b      	ldr	r3, [r7, #4]
24004362:	2200      	movs	r2, #0
24004364:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
24004368:	687b      	ldr	r3, [r7, #4]
2400436a:	681b      	ldr	r3, [r3, #0]
2400436c:	681b      	ldr	r3, [r3, #0]
2400436e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
24004370:	697a      	ldr	r2, [r7, #20]
24004372:	4b13      	ldr	r3, [pc, #76]	; (240043c0 <HAL_DMA_Init+0x44c>)
24004374:	4013      	ands	r3, r2
24004376:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
24004378:	687b      	ldr	r3, [r7, #4]
2400437a:	689b      	ldr	r3, [r3, #8]
2400437c:	2b40      	cmp	r3, #64	; 0x40
2400437e:	d021      	beq.n	240043c4 <HAL_DMA_Init+0x450>
24004380:	687b      	ldr	r3, [r7, #4]
24004382:	689b      	ldr	r3, [r3, #8]
24004384:	2b80      	cmp	r3, #128	; 0x80
24004386:	d102      	bne.n	2400438e <HAL_DMA_Init+0x41a>
24004388:	f44f 4380 	mov.w	r3, #16384	; 0x4000
2400438c:	e01b      	b.n	240043c6 <HAL_DMA_Init+0x452>
2400438e:	2300      	movs	r3, #0
24004390:	e019      	b.n	240043c6 <HAL_DMA_Init+0x452>
24004392:	bf00      	nop
24004394:	fe10803f 	.word	0xfe10803f
24004398:	5c001000 	.word	0x5c001000
2400439c:	ffff0000 	.word	0xffff0000
240043a0:	58025408 	.word	0x58025408
240043a4:	5802541c 	.word	0x5802541c
240043a8:	58025430 	.word	0x58025430
240043ac:	58025444 	.word	0x58025444
240043b0:	58025458 	.word	0x58025458
240043b4:	5802546c 	.word	0x5802546c
240043b8:	58025480 	.word	0x58025480
240043bc:	58025494 	.word	0x58025494
240043c0:	fffe000f 	.word	0xfffe000f
240043c4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
240043c6:	687a      	ldr	r2, [r7, #4]
240043c8:	68d2      	ldr	r2, [r2, #12]
240043ca:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
240043cc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
240043ce:	687b      	ldr	r3, [r7, #4]
240043d0:	691b      	ldr	r3, [r3, #16]
240043d2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
240043d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
240043d6:	687b      	ldr	r3, [r7, #4]
240043d8:	695b      	ldr	r3, [r3, #20]
240043da:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
240043dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
240043de:	687b      	ldr	r3, [r7, #4]
240043e0:	699b      	ldr	r3, [r3, #24]
240043e2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
240043e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
240043e6:	687b      	ldr	r3, [r7, #4]
240043e8:	69db      	ldr	r3, [r3, #28]
240043ea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
240043ec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
240043ee:	687b      	ldr	r3, [r7, #4]
240043f0:	6a1b      	ldr	r3, [r3, #32]
240043f2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
240043f4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
240043f6:	697a      	ldr	r2, [r7, #20]
240043f8:	4313      	orrs	r3, r2
240043fa:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
240043fc:	687b      	ldr	r3, [r7, #4]
240043fe:	681b      	ldr	r3, [r3, #0]
24004400:	697a      	ldr	r2, [r7, #20]
24004402:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
24004404:	687b      	ldr	r3, [r7, #4]
24004406:	681b      	ldr	r3, [r3, #0]
24004408:	461a      	mov	r2, r3
2400440a:	4b6e      	ldr	r3, [pc, #440]	; (240045c4 <HAL_DMA_Init+0x650>)
2400440c:	4413      	add	r3, r2
2400440e:	4a6e      	ldr	r2, [pc, #440]	; (240045c8 <HAL_DMA_Init+0x654>)
24004410:	fba2 2303 	umull	r2, r3, r2, r3
24004414:	091b      	lsrs	r3, r3, #4
24004416:	009a      	lsls	r2, r3, #2
24004418:	687b      	ldr	r3, [r7, #4]
2400441a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
2400441c:	6878      	ldr	r0, [r7, #4]
2400441e:	f003 f90b 	bl	24007638 <DMA_CalcBaseAndBitshift>
24004422:	4603      	mov	r3, r0
24004424:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
24004426:	687b      	ldr	r3, [r7, #4]
24004428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2400442a:	f003 031f 	and.w	r3, r3, #31
2400442e:	2201      	movs	r2, #1
24004430:	409a      	lsls	r2, r3
24004432:	68fb      	ldr	r3, [r7, #12]
24004434:	605a      	str	r2, [r3, #4]
24004436:	e008      	b.n	2400444a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
24004438:	687b      	ldr	r3, [r7, #4]
2400443a:	2240      	movs	r2, #64	; 0x40
2400443c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
2400443e:	687b      	ldr	r3, [r7, #4]
24004440:	2203      	movs	r2, #3
24004442:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
24004446:	2301      	movs	r3, #1
24004448:	e0b7      	b.n	240045ba <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
2400444a:	687b      	ldr	r3, [r7, #4]
2400444c:	681b      	ldr	r3, [r3, #0]
2400444e:	4a5f      	ldr	r2, [pc, #380]	; (240045cc <HAL_DMA_Init+0x658>)
24004450:	4293      	cmp	r3, r2
24004452:	d072      	beq.n	2400453a <HAL_DMA_Init+0x5c6>
24004454:	687b      	ldr	r3, [r7, #4]
24004456:	681b      	ldr	r3, [r3, #0]
24004458:	4a5d      	ldr	r2, [pc, #372]	; (240045d0 <HAL_DMA_Init+0x65c>)
2400445a:	4293      	cmp	r3, r2
2400445c:	d06d      	beq.n	2400453a <HAL_DMA_Init+0x5c6>
2400445e:	687b      	ldr	r3, [r7, #4]
24004460:	681b      	ldr	r3, [r3, #0]
24004462:	4a5c      	ldr	r2, [pc, #368]	; (240045d4 <HAL_DMA_Init+0x660>)
24004464:	4293      	cmp	r3, r2
24004466:	d068      	beq.n	2400453a <HAL_DMA_Init+0x5c6>
24004468:	687b      	ldr	r3, [r7, #4]
2400446a:	681b      	ldr	r3, [r3, #0]
2400446c:	4a5a      	ldr	r2, [pc, #360]	; (240045d8 <HAL_DMA_Init+0x664>)
2400446e:	4293      	cmp	r3, r2
24004470:	d063      	beq.n	2400453a <HAL_DMA_Init+0x5c6>
24004472:	687b      	ldr	r3, [r7, #4]
24004474:	681b      	ldr	r3, [r3, #0]
24004476:	4a59      	ldr	r2, [pc, #356]	; (240045dc <HAL_DMA_Init+0x668>)
24004478:	4293      	cmp	r3, r2
2400447a:	d05e      	beq.n	2400453a <HAL_DMA_Init+0x5c6>
2400447c:	687b      	ldr	r3, [r7, #4]
2400447e:	681b      	ldr	r3, [r3, #0]
24004480:	4a57      	ldr	r2, [pc, #348]	; (240045e0 <HAL_DMA_Init+0x66c>)
24004482:	4293      	cmp	r3, r2
24004484:	d059      	beq.n	2400453a <HAL_DMA_Init+0x5c6>
24004486:	687b      	ldr	r3, [r7, #4]
24004488:	681b      	ldr	r3, [r3, #0]
2400448a:	4a56      	ldr	r2, [pc, #344]	; (240045e4 <HAL_DMA_Init+0x670>)
2400448c:	4293      	cmp	r3, r2
2400448e:	d054      	beq.n	2400453a <HAL_DMA_Init+0x5c6>
24004490:	687b      	ldr	r3, [r7, #4]
24004492:	681b      	ldr	r3, [r3, #0]
24004494:	4a54      	ldr	r2, [pc, #336]	; (240045e8 <HAL_DMA_Init+0x674>)
24004496:	4293      	cmp	r3, r2
24004498:	d04f      	beq.n	2400453a <HAL_DMA_Init+0x5c6>
2400449a:	687b      	ldr	r3, [r7, #4]
2400449c:	681b      	ldr	r3, [r3, #0]
2400449e:	4a53      	ldr	r2, [pc, #332]	; (240045ec <HAL_DMA_Init+0x678>)
240044a0:	4293      	cmp	r3, r2
240044a2:	d04a      	beq.n	2400453a <HAL_DMA_Init+0x5c6>
240044a4:	687b      	ldr	r3, [r7, #4]
240044a6:	681b      	ldr	r3, [r3, #0]
240044a8:	4a51      	ldr	r2, [pc, #324]	; (240045f0 <HAL_DMA_Init+0x67c>)
240044aa:	4293      	cmp	r3, r2
240044ac:	d045      	beq.n	2400453a <HAL_DMA_Init+0x5c6>
240044ae:	687b      	ldr	r3, [r7, #4]
240044b0:	681b      	ldr	r3, [r3, #0]
240044b2:	4a50      	ldr	r2, [pc, #320]	; (240045f4 <HAL_DMA_Init+0x680>)
240044b4:	4293      	cmp	r3, r2
240044b6:	d040      	beq.n	2400453a <HAL_DMA_Init+0x5c6>
240044b8:	687b      	ldr	r3, [r7, #4]
240044ba:	681b      	ldr	r3, [r3, #0]
240044bc:	4a4e      	ldr	r2, [pc, #312]	; (240045f8 <HAL_DMA_Init+0x684>)
240044be:	4293      	cmp	r3, r2
240044c0:	d03b      	beq.n	2400453a <HAL_DMA_Init+0x5c6>
240044c2:	687b      	ldr	r3, [r7, #4]
240044c4:	681b      	ldr	r3, [r3, #0]
240044c6:	4a4d      	ldr	r2, [pc, #308]	; (240045fc <HAL_DMA_Init+0x688>)
240044c8:	4293      	cmp	r3, r2
240044ca:	d036      	beq.n	2400453a <HAL_DMA_Init+0x5c6>
240044cc:	687b      	ldr	r3, [r7, #4]
240044ce:	681b      	ldr	r3, [r3, #0]
240044d0:	4a4b      	ldr	r2, [pc, #300]	; (24004600 <HAL_DMA_Init+0x68c>)
240044d2:	4293      	cmp	r3, r2
240044d4:	d031      	beq.n	2400453a <HAL_DMA_Init+0x5c6>
240044d6:	687b      	ldr	r3, [r7, #4]
240044d8:	681b      	ldr	r3, [r3, #0]
240044da:	4a4a      	ldr	r2, [pc, #296]	; (24004604 <HAL_DMA_Init+0x690>)
240044dc:	4293      	cmp	r3, r2
240044de:	d02c      	beq.n	2400453a <HAL_DMA_Init+0x5c6>
240044e0:	687b      	ldr	r3, [r7, #4]
240044e2:	681b      	ldr	r3, [r3, #0]
240044e4:	4a48      	ldr	r2, [pc, #288]	; (24004608 <HAL_DMA_Init+0x694>)
240044e6:	4293      	cmp	r3, r2
240044e8:	d027      	beq.n	2400453a <HAL_DMA_Init+0x5c6>
240044ea:	687b      	ldr	r3, [r7, #4]
240044ec:	681b      	ldr	r3, [r3, #0]
240044ee:	4a47      	ldr	r2, [pc, #284]	; (2400460c <HAL_DMA_Init+0x698>)
240044f0:	4293      	cmp	r3, r2
240044f2:	d022      	beq.n	2400453a <HAL_DMA_Init+0x5c6>
240044f4:	687b      	ldr	r3, [r7, #4]
240044f6:	681b      	ldr	r3, [r3, #0]
240044f8:	4a45      	ldr	r2, [pc, #276]	; (24004610 <HAL_DMA_Init+0x69c>)
240044fa:	4293      	cmp	r3, r2
240044fc:	d01d      	beq.n	2400453a <HAL_DMA_Init+0x5c6>
240044fe:	687b      	ldr	r3, [r7, #4]
24004500:	681b      	ldr	r3, [r3, #0]
24004502:	4a44      	ldr	r2, [pc, #272]	; (24004614 <HAL_DMA_Init+0x6a0>)
24004504:	4293      	cmp	r3, r2
24004506:	d018      	beq.n	2400453a <HAL_DMA_Init+0x5c6>
24004508:	687b      	ldr	r3, [r7, #4]
2400450a:	681b      	ldr	r3, [r3, #0]
2400450c:	4a42      	ldr	r2, [pc, #264]	; (24004618 <HAL_DMA_Init+0x6a4>)
2400450e:	4293      	cmp	r3, r2
24004510:	d013      	beq.n	2400453a <HAL_DMA_Init+0x5c6>
24004512:	687b      	ldr	r3, [r7, #4]
24004514:	681b      	ldr	r3, [r3, #0]
24004516:	4a41      	ldr	r2, [pc, #260]	; (2400461c <HAL_DMA_Init+0x6a8>)
24004518:	4293      	cmp	r3, r2
2400451a:	d00e      	beq.n	2400453a <HAL_DMA_Init+0x5c6>
2400451c:	687b      	ldr	r3, [r7, #4]
2400451e:	681b      	ldr	r3, [r3, #0]
24004520:	4a3f      	ldr	r2, [pc, #252]	; (24004620 <HAL_DMA_Init+0x6ac>)
24004522:	4293      	cmp	r3, r2
24004524:	d009      	beq.n	2400453a <HAL_DMA_Init+0x5c6>
24004526:	687b      	ldr	r3, [r7, #4]
24004528:	681b      	ldr	r3, [r3, #0]
2400452a:	4a3e      	ldr	r2, [pc, #248]	; (24004624 <HAL_DMA_Init+0x6b0>)
2400452c:	4293      	cmp	r3, r2
2400452e:	d004      	beq.n	2400453a <HAL_DMA_Init+0x5c6>
24004530:	687b      	ldr	r3, [r7, #4]
24004532:	681b      	ldr	r3, [r3, #0]
24004534:	4a3c      	ldr	r2, [pc, #240]	; (24004628 <HAL_DMA_Init+0x6b4>)
24004536:	4293      	cmp	r3, r2
24004538:	d101      	bne.n	2400453e <HAL_DMA_Init+0x5ca>
2400453a:	2301      	movs	r3, #1
2400453c:	e000      	b.n	24004540 <HAL_DMA_Init+0x5cc>
2400453e:	2300      	movs	r3, #0
24004540:	2b00      	cmp	r3, #0
24004542:	d032      	beq.n	240045aa <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
24004544:	6878      	ldr	r0, [r7, #4]
24004546:	f003 f9a5 	bl	24007894 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
2400454a:	687b      	ldr	r3, [r7, #4]
2400454c:	689b      	ldr	r3, [r3, #8]
2400454e:	2b80      	cmp	r3, #128	; 0x80
24004550:	d102      	bne.n	24004558 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
24004552:	687b      	ldr	r3, [r7, #4]
24004554:	2200      	movs	r2, #0
24004556:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
24004558:	687b      	ldr	r3, [r7, #4]
2400455a:	685a      	ldr	r2, [r3, #4]
2400455c:	687b      	ldr	r3, [r7, #4]
2400455e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24004560:	b2d2      	uxtb	r2, r2
24004562:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
24004564:	687b      	ldr	r3, [r7, #4]
24004566:	6e5b      	ldr	r3, [r3, #100]	; 0x64
24004568:	687a      	ldr	r2, [r7, #4]
2400456a:	6e92      	ldr	r2, [r2, #104]	; 0x68
2400456c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
2400456e:	687b      	ldr	r3, [r7, #4]
24004570:	685b      	ldr	r3, [r3, #4]
24004572:	2b00      	cmp	r3, #0
24004574:	d010      	beq.n	24004598 <HAL_DMA_Init+0x624>
24004576:	687b      	ldr	r3, [r7, #4]
24004578:	685b      	ldr	r3, [r3, #4]
2400457a:	2b08      	cmp	r3, #8
2400457c:	d80c      	bhi.n	24004598 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
2400457e:	6878      	ldr	r0, [r7, #4]
24004580:	f003 fa22 	bl	240079c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
24004584:	687b      	ldr	r3, [r7, #4]
24004586:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24004588:	2200      	movs	r2, #0
2400458a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
2400458c:	687b      	ldr	r3, [r7, #4]
2400458e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24004590:	687a      	ldr	r2, [r7, #4]
24004592:	6f52      	ldr	r2, [r2, #116]	; 0x74
24004594:	605a      	str	r2, [r3, #4]
24004596:	e008      	b.n	240045aa <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
24004598:	687b      	ldr	r3, [r7, #4]
2400459a:	2200      	movs	r2, #0
2400459c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
2400459e:	687b      	ldr	r3, [r7, #4]
240045a0:	2200      	movs	r2, #0
240045a2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
240045a4:	687b      	ldr	r3, [r7, #4]
240045a6:	2200      	movs	r2, #0
240045a8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
240045aa:	687b      	ldr	r3, [r7, #4]
240045ac:	2200      	movs	r2, #0
240045ae:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
240045b0:	687b      	ldr	r3, [r7, #4]
240045b2:	2201      	movs	r2, #1
240045b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
240045b8:	2300      	movs	r3, #0
}
240045ba:	4618      	mov	r0, r3
240045bc:	3718      	adds	r7, #24
240045be:	46bd      	mov	sp, r7
240045c0:	bd80      	pop	{r7, pc}
240045c2:	bf00      	nop
240045c4:	a7fdabf8 	.word	0xa7fdabf8
240045c8:	cccccccd 	.word	0xcccccccd
240045cc:	40020010 	.word	0x40020010
240045d0:	40020028 	.word	0x40020028
240045d4:	40020040 	.word	0x40020040
240045d8:	40020058 	.word	0x40020058
240045dc:	40020070 	.word	0x40020070
240045e0:	40020088 	.word	0x40020088
240045e4:	400200a0 	.word	0x400200a0
240045e8:	400200b8 	.word	0x400200b8
240045ec:	40020410 	.word	0x40020410
240045f0:	40020428 	.word	0x40020428
240045f4:	40020440 	.word	0x40020440
240045f8:	40020458 	.word	0x40020458
240045fc:	40020470 	.word	0x40020470
24004600:	40020488 	.word	0x40020488
24004604:	400204a0 	.word	0x400204a0
24004608:	400204b8 	.word	0x400204b8
2400460c:	58025408 	.word	0x58025408
24004610:	5802541c 	.word	0x5802541c
24004614:	58025430 	.word	0x58025430
24004618:	58025444 	.word	0x58025444
2400461c:	58025458 	.word	0x58025458
24004620:	5802546c 	.word	0x5802546c
24004624:	58025480 	.word	0x58025480
24004628:	58025494 	.word	0x58025494

2400462c <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
2400462c:	b580      	push	{r7, lr}
2400462e:	b084      	sub	sp, #16
24004630:	af00      	add	r7, sp, #0
24004632:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
24004634:	687b      	ldr	r3, [r7, #4]
24004636:	2b00      	cmp	r3, #0
24004638:	d101      	bne.n	2400463e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
2400463a:	2301      	movs	r3, #1
2400463c:	e1a8      	b.n	24004990 <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
2400463e:	687b      	ldr	r3, [r7, #4]
24004640:	681b      	ldr	r3, [r3, #0]
24004642:	4a82      	ldr	r2, [pc, #520]	; (2400484c <HAL_DMA_DeInit+0x220>)
24004644:	4293      	cmp	r3, r2
24004646:	d04a      	beq.n	240046de <HAL_DMA_DeInit+0xb2>
24004648:	687b      	ldr	r3, [r7, #4]
2400464a:	681b      	ldr	r3, [r3, #0]
2400464c:	4a80      	ldr	r2, [pc, #512]	; (24004850 <HAL_DMA_DeInit+0x224>)
2400464e:	4293      	cmp	r3, r2
24004650:	d045      	beq.n	240046de <HAL_DMA_DeInit+0xb2>
24004652:	687b      	ldr	r3, [r7, #4]
24004654:	681b      	ldr	r3, [r3, #0]
24004656:	4a7f      	ldr	r2, [pc, #508]	; (24004854 <HAL_DMA_DeInit+0x228>)
24004658:	4293      	cmp	r3, r2
2400465a:	d040      	beq.n	240046de <HAL_DMA_DeInit+0xb2>
2400465c:	687b      	ldr	r3, [r7, #4]
2400465e:	681b      	ldr	r3, [r3, #0]
24004660:	4a7d      	ldr	r2, [pc, #500]	; (24004858 <HAL_DMA_DeInit+0x22c>)
24004662:	4293      	cmp	r3, r2
24004664:	d03b      	beq.n	240046de <HAL_DMA_DeInit+0xb2>
24004666:	687b      	ldr	r3, [r7, #4]
24004668:	681b      	ldr	r3, [r3, #0]
2400466a:	4a7c      	ldr	r2, [pc, #496]	; (2400485c <HAL_DMA_DeInit+0x230>)
2400466c:	4293      	cmp	r3, r2
2400466e:	d036      	beq.n	240046de <HAL_DMA_DeInit+0xb2>
24004670:	687b      	ldr	r3, [r7, #4]
24004672:	681b      	ldr	r3, [r3, #0]
24004674:	4a7a      	ldr	r2, [pc, #488]	; (24004860 <HAL_DMA_DeInit+0x234>)
24004676:	4293      	cmp	r3, r2
24004678:	d031      	beq.n	240046de <HAL_DMA_DeInit+0xb2>
2400467a:	687b      	ldr	r3, [r7, #4]
2400467c:	681b      	ldr	r3, [r3, #0]
2400467e:	4a79      	ldr	r2, [pc, #484]	; (24004864 <HAL_DMA_DeInit+0x238>)
24004680:	4293      	cmp	r3, r2
24004682:	d02c      	beq.n	240046de <HAL_DMA_DeInit+0xb2>
24004684:	687b      	ldr	r3, [r7, #4]
24004686:	681b      	ldr	r3, [r3, #0]
24004688:	4a77      	ldr	r2, [pc, #476]	; (24004868 <HAL_DMA_DeInit+0x23c>)
2400468a:	4293      	cmp	r3, r2
2400468c:	d027      	beq.n	240046de <HAL_DMA_DeInit+0xb2>
2400468e:	687b      	ldr	r3, [r7, #4]
24004690:	681b      	ldr	r3, [r3, #0]
24004692:	4a76      	ldr	r2, [pc, #472]	; (2400486c <HAL_DMA_DeInit+0x240>)
24004694:	4293      	cmp	r3, r2
24004696:	d022      	beq.n	240046de <HAL_DMA_DeInit+0xb2>
24004698:	687b      	ldr	r3, [r7, #4]
2400469a:	681b      	ldr	r3, [r3, #0]
2400469c:	4a74      	ldr	r2, [pc, #464]	; (24004870 <HAL_DMA_DeInit+0x244>)
2400469e:	4293      	cmp	r3, r2
240046a0:	d01d      	beq.n	240046de <HAL_DMA_DeInit+0xb2>
240046a2:	687b      	ldr	r3, [r7, #4]
240046a4:	681b      	ldr	r3, [r3, #0]
240046a6:	4a73      	ldr	r2, [pc, #460]	; (24004874 <HAL_DMA_DeInit+0x248>)
240046a8:	4293      	cmp	r3, r2
240046aa:	d018      	beq.n	240046de <HAL_DMA_DeInit+0xb2>
240046ac:	687b      	ldr	r3, [r7, #4]
240046ae:	681b      	ldr	r3, [r3, #0]
240046b0:	4a71      	ldr	r2, [pc, #452]	; (24004878 <HAL_DMA_DeInit+0x24c>)
240046b2:	4293      	cmp	r3, r2
240046b4:	d013      	beq.n	240046de <HAL_DMA_DeInit+0xb2>
240046b6:	687b      	ldr	r3, [r7, #4]
240046b8:	681b      	ldr	r3, [r3, #0]
240046ba:	4a70      	ldr	r2, [pc, #448]	; (2400487c <HAL_DMA_DeInit+0x250>)
240046bc:	4293      	cmp	r3, r2
240046be:	d00e      	beq.n	240046de <HAL_DMA_DeInit+0xb2>
240046c0:	687b      	ldr	r3, [r7, #4]
240046c2:	681b      	ldr	r3, [r3, #0]
240046c4:	4a6e      	ldr	r2, [pc, #440]	; (24004880 <HAL_DMA_DeInit+0x254>)
240046c6:	4293      	cmp	r3, r2
240046c8:	d009      	beq.n	240046de <HAL_DMA_DeInit+0xb2>
240046ca:	687b      	ldr	r3, [r7, #4]
240046cc:	681b      	ldr	r3, [r3, #0]
240046ce:	4a6d      	ldr	r2, [pc, #436]	; (24004884 <HAL_DMA_DeInit+0x258>)
240046d0:	4293      	cmp	r3, r2
240046d2:	d004      	beq.n	240046de <HAL_DMA_DeInit+0xb2>
240046d4:	687b      	ldr	r3, [r7, #4]
240046d6:	681b      	ldr	r3, [r3, #0]
240046d8:	4a6b      	ldr	r2, [pc, #428]	; (24004888 <HAL_DMA_DeInit+0x25c>)
240046da:	4293      	cmp	r3, r2
240046dc:	d108      	bne.n	240046f0 <HAL_DMA_DeInit+0xc4>
240046de:	687b      	ldr	r3, [r7, #4]
240046e0:	681b      	ldr	r3, [r3, #0]
240046e2:	681a      	ldr	r2, [r3, #0]
240046e4:	687b      	ldr	r3, [r7, #4]
240046e6:	681b      	ldr	r3, [r3, #0]
240046e8:	f022 0201 	bic.w	r2, r2, #1
240046ec:	601a      	str	r2, [r3, #0]
240046ee:	e007      	b.n	24004700 <HAL_DMA_DeInit+0xd4>
240046f0:	687b      	ldr	r3, [r7, #4]
240046f2:	681b      	ldr	r3, [r3, #0]
240046f4:	681a      	ldr	r2, [r3, #0]
240046f6:	687b      	ldr	r3, [r7, #4]
240046f8:	681b      	ldr	r3, [r3, #0]
240046fa:	f022 0201 	bic.w	r2, r2, #1
240046fe:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24004700:	687b      	ldr	r3, [r7, #4]
24004702:	681b      	ldr	r3, [r3, #0]
24004704:	4a51      	ldr	r2, [pc, #324]	; (2400484c <HAL_DMA_DeInit+0x220>)
24004706:	4293      	cmp	r3, r2
24004708:	d04a      	beq.n	240047a0 <HAL_DMA_DeInit+0x174>
2400470a:	687b      	ldr	r3, [r7, #4]
2400470c:	681b      	ldr	r3, [r3, #0]
2400470e:	4a50      	ldr	r2, [pc, #320]	; (24004850 <HAL_DMA_DeInit+0x224>)
24004710:	4293      	cmp	r3, r2
24004712:	d045      	beq.n	240047a0 <HAL_DMA_DeInit+0x174>
24004714:	687b      	ldr	r3, [r7, #4]
24004716:	681b      	ldr	r3, [r3, #0]
24004718:	4a4e      	ldr	r2, [pc, #312]	; (24004854 <HAL_DMA_DeInit+0x228>)
2400471a:	4293      	cmp	r3, r2
2400471c:	d040      	beq.n	240047a0 <HAL_DMA_DeInit+0x174>
2400471e:	687b      	ldr	r3, [r7, #4]
24004720:	681b      	ldr	r3, [r3, #0]
24004722:	4a4d      	ldr	r2, [pc, #308]	; (24004858 <HAL_DMA_DeInit+0x22c>)
24004724:	4293      	cmp	r3, r2
24004726:	d03b      	beq.n	240047a0 <HAL_DMA_DeInit+0x174>
24004728:	687b      	ldr	r3, [r7, #4]
2400472a:	681b      	ldr	r3, [r3, #0]
2400472c:	4a4b      	ldr	r2, [pc, #300]	; (2400485c <HAL_DMA_DeInit+0x230>)
2400472e:	4293      	cmp	r3, r2
24004730:	d036      	beq.n	240047a0 <HAL_DMA_DeInit+0x174>
24004732:	687b      	ldr	r3, [r7, #4]
24004734:	681b      	ldr	r3, [r3, #0]
24004736:	4a4a      	ldr	r2, [pc, #296]	; (24004860 <HAL_DMA_DeInit+0x234>)
24004738:	4293      	cmp	r3, r2
2400473a:	d031      	beq.n	240047a0 <HAL_DMA_DeInit+0x174>
2400473c:	687b      	ldr	r3, [r7, #4]
2400473e:	681b      	ldr	r3, [r3, #0]
24004740:	4a48      	ldr	r2, [pc, #288]	; (24004864 <HAL_DMA_DeInit+0x238>)
24004742:	4293      	cmp	r3, r2
24004744:	d02c      	beq.n	240047a0 <HAL_DMA_DeInit+0x174>
24004746:	687b      	ldr	r3, [r7, #4]
24004748:	681b      	ldr	r3, [r3, #0]
2400474a:	4a47      	ldr	r2, [pc, #284]	; (24004868 <HAL_DMA_DeInit+0x23c>)
2400474c:	4293      	cmp	r3, r2
2400474e:	d027      	beq.n	240047a0 <HAL_DMA_DeInit+0x174>
24004750:	687b      	ldr	r3, [r7, #4]
24004752:	681b      	ldr	r3, [r3, #0]
24004754:	4a45      	ldr	r2, [pc, #276]	; (2400486c <HAL_DMA_DeInit+0x240>)
24004756:	4293      	cmp	r3, r2
24004758:	d022      	beq.n	240047a0 <HAL_DMA_DeInit+0x174>
2400475a:	687b      	ldr	r3, [r7, #4]
2400475c:	681b      	ldr	r3, [r3, #0]
2400475e:	4a44      	ldr	r2, [pc, #272]	; (24004870 <HAL_DMA_DeInit+0x244>)
24004760:	4293      	cmp	r3, r2
24004762:	d01d      	beq.n	240047a0 <HAL_DMA_DeInit+0x174>
24004764:	687b      	ldr	r3, [r7, #4]
24004766:	681b      	ldr	r3, [r3, #0]
24004768:	4a42      	ldr	r2, [pc, #264]	; (24004874 <HAL_DMA_DeInit+0x248>)
2400476a:	4293      	cmp	r3, r2
2400476c:	d018      	beq.n	240047a0 <HAL_DMA_DeInit+0x174>
2400476e:	687b      	ldr	r3, [r7, #4]
24004770:	681b      	ldr	r3, [r3, #0]
24004772:	4a41      	ldr	r2, [pc, #260]	; (24004878 <HAL_DMA_DeInit+0x24c>)
24004774:	4293      	cmp	r3, r2
24004776:	d013      	beq.n	240047a0 <HAL_DMA_DeInit+0x174>
24004778:	687b      	ldr	r3, [r7, #4]
2400477a:	681b      	ldr	r3, [r3, #0]
2400477c:	4a3f      	ldr	r2, [pc, #252]	; (2400487c <HAL_DMA_DeInit+0x250>)
2400477e:	4293      	cmp	r3, r2
24004780:	d00e      	beq.n	240047a0 <HAL_DMA_DeInit+0x174>
24004782:	687b      	ldr	r3, [r7, #4]
24004784:	681b      	ldr	r3, [r3, #0]
24004786:	4a3e      	ldr	r2, [pc, #248]	; (24004880 <HAL_DMA_DeInit+0x254>)
24004788:	4293      	cmp	r3, r2
2400478a:	d009      	beq.n	240047a0 <HAL_DMA_DeInit+0x174>
2400478c:	687b      	ldr	r3, [r7, #4]
2400478e:	681b      	ldr	r3, [r3, #0]
24004790:	4a3c      	ldr	r2, [pc, #240]	; (24004884 <HAL_DMA_DeInit+0x258>)
24004792:	4293      	cmp	r3, r2
24004794:	d004      	beq.n	240047a0 <HAL_DMA_DeInit+0x174>
24004796:	687b      	ldr	r3, [r7, #4]
24004798:	681b      	ldr	r3, [r3, #0]
2400479a:	4a3b      	ldr	r2, [pc, #236]	; (24004888 <HAL_DMA_DeInit+0x25c>)
2400479c:	4293      	cmp	r3, r2
2400479e:	d101      	bne.n	240047a4 <HAL_DMA_DeInit+0x178>
240047a0:	2301      	movs	r3, #1
240047a2:	e000      	b.n	240047a6 <HAL_DMA_DeInit+0x17a>
240047a4:	2300      	movs	r3, #0
240047a6:	2b00      	cmp	r3, #0
240047a8:	d025      	beq.n	240047f6 <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
240047aa:	687b      	ldr	r3, [r7, #4]
240047ac:	681b      	ldr	r3, [r3, #0]
240047ae:	2200      	movs	r2, #0
240047b0:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
240047b2:	687b      	ldr	r3, [r7, #4]
240047b4:	681b      	ldr	r3, [r3, #0]
240047b6:	2200      	movs	r2, #0
240047b8:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
240047ba:	687b      	ldr	r3, [r7, #4]
240047bc:	681b      	ldr	r3, [r3, #0]
240047be:	2200      	movs	r2, #0
240047c0:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
240047c2:	687b      	ldr	r3, [r7, #4]
240047c4:	681b      	ldr	r3, [r3, #0]
240047c6:	2200      	movs	r2, #0
240047c8:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
240047ca:	687b      	ldr	r3, [r7, #4]
240047cc:	681b      	ldr	r3, [r3, #0]
240047ce:	2200      	movs	r2, #0
240047d0:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
240047d2:	687b      	ldr	r3, [r7, #4]
240047d4:	681b      	ldr	r3, [r3, #0]
240047d6:	2221      	movs	r2, #33	; 0x21
240047d8:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
240047da:	6878      	ldr	r0, [r7, #4]
240047dc:	f002 ff2c 	bl	24007638 <DMA_CalcBaseAndBitshift>
240047e0:	4603      	mov	r3, r0
240047e2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
240047e4:	687b      	ldr	r3, [r7, #4]
240047e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
240047e8:	f003 031f 	and.w	r3, r3, #31
240047ec:	223f      	movs	r2, #63	; 0x3f
240047ee:	409a      	lsls	r2, r3
240047f0:	68bb      	ldr	r3, [r7, #8]
240047f2:	609a      	str	r2, [r3, #8]
240047f4:	e081      	b.n	240048fa <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
240047f6:	687b      	ldr	r3, [r7, #4]
240047f8:	681b      	ldr	r3, [r3, #0]
240047fa:	4a24      	ldr	r2, [pc, #144]	; (2400488c <HAL_DMA_DeInit+0x260>)
240047fc:	4293      	cmp	r3, r2
240047fe:	d022      	beq.n	24004846 <HAL_DMA_DeInit+0x21a>
24004800:	687b      	ldr	r3, [r7, #4]
24004802:	681b      	ldr	r3, [r3, #0]
24004804:	4a22      	ldr	r2, [pc, #136]	; (24004890 <HAL_DMA_DeInit+0x264>)
24004806:	4293      	cmp	r3, r2
24004808:	d01d      	beq.n	24004846 <HAL_DMA_DeInit+0x21a>
2400480a:	687b      	ldr	r3, [r7, #4]
2400480c:	681b      	ldr	r3, [r3, #0]
2400480e:	4a21      	ldr	r2, [pc, #132]	; (24004894 <HAL_DMA_DeInit+0x268>)
24004810:	4293      	cmp	r3, r2
24004812:	d018      	beq.n	24004846 <HAL_DMA_DeInit+0x21a>
24004814:	687b      	ldr	r3, [r7, #4]
24004816:	681b      	ldr	r3, [r3, #0]
24004818:	4a1f      	ldr	r2, [pc, #124]	; (24004898 <HAL_DMA_DeInit+0x26c>)
2400481a:	4293      	cmp	r3, r2
2400481c:	d013      	beq.n	24004846 <HAL_DMA_DeInit+0x21a>
2400481e:	687b      	ldr	r3, [r7, #4]
24004820:	681b      	ldr	r3, [r3, #0]
24004822:	4a1e      	ldr	r2, [pc, #120]	; (2400489c <HAL_DMA_DeInit+0x270>)
24004824:	4293      	cmp	r3, r2
24004826:	d00e      	beq.n	24004846 <HAL_DMA_DeInit+0x21a>
24004828:	687b      	ldr	r3, [r7, #4]
2400482a:	681b      	ldr	r3, [r3, #0]
2400482c:	4a1c      	ldr	r2, [pc, #112]	; (240048a0 <HAL_DMA_DeInit+0x274>)
2400482e:	4293      	cmp	r3, r2
24004830:	d009      	beq.n	24004846 <HAL_DMA_DeInit+0x21a>
24004832:	687b      	ldr	r3, [r7, #4]
24004834:	681b      	ldr	r3, [r3, #0]
24004836:	4a1b      	ldr	r2, [pc, #108]	; (240048a4 <HAL_DMA_DeInit+0x278>)
24004838:	4293      	cmp	r3, r2
2400483a:	d004      	beq.n	24004846 <HAL_DMA_DeInit+0x21a>
2400483c:	687b      	ldr	r3, [r7, #4]
2400483e:	681b      	ldr	r3, [r3, #0]
24004840:	4a19      	ldr	r2, [pc, #100]	; (240048a8 <HAL_DMA_DeInit+0x27c>)
24004842:	4293      	cmp	r3, r2
24004844:	d132      	bne.n	240048ac <HAL_DMA_DeInit+0x280>
24004846:	2301      	movs	r3, #1
24004848:	e031      	b.n	240048ae <HAL_DMA_DeInit+0x282>
2400484a:	bf00      	nop
2400484c:	40020010 	.word	0x40020010
24004850:	40020028 	.word	0x40020028
24004854:	40020040 	.word	0x40020040
24004858:	40020058 	.word	0x40020058
2400485c:	40020070 	.word	0x40020070
24004860:	40020088 	.word	0x40020088
24004864:	400200a0 	.word	0x400200a0
24004868:	400200b8 	.word	0x400200b8
2400486c:	40020410 	.word	0x40020410
24004870:	40020428 	.word	0x40020428
24004874:	40020440 	.word	0x40020440
24004878:	40020458 	.word	0x40020458
2400487c:	40020470 	.word	0x40020470
24004880:	40020488 	.word	0x40020488
24004884:	400204a0 	.word	0x400204a0
24004888:	400204b8 	.word	0x400204b8
2400488c:	58025408 	.word	0x58025408
24004890:	5802541c 	.word	0x5802541c
24004894:	58025430 	.word	0x58025430
24004898:	58025444 	.word	0x58025444
2400489c:	58025458 	.word	0x58025458
240048a0:	5802546c 	.word	0x5802546c
240048a4:	58025480 	.word	0x58025480
240048a8:	58025494 	.word	0x58025494
240048ac:	2300      	movs	r3, #0
240048ae:	2b00      	cmp	r3, #0
240048b0:	d021      	beq.n	240048f6 <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
240048b2:	687b      	ldr	r3, [r7, #4]
240048b4:	681b      	ldr	r3, [r3, #0]
240048b6:	2200      	movs	r2, #0
240048b8:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
240048ba:	687b      	ldr	r3, [r7, #4]
240048bc:	681b      	ldr	r3, [r3, #0]
240048be:	2200      	movs	r2, #0
240048c0:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
240048c2:	687b      	ldr	r3, [r7, #4]
240048c4:	681b      	ldr	r3, [r3, #0]
240048c6:	2200      	movs	r2, #0
240048c8:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
240048ca:	687b      	ldr	r3, [r7, #4]
240048cc:	681b      	ldr	r3, [r3, #0]
240048ce:	2200      	movs	r2, #0
240048d0:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
240048d2:	687b      	ldr	r3, [r7, #4]
240048d4:	681b      	ldr	r3, [r3, #0]
240048d6:	2200      	movs	r2, #0
240048d8:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
240048da:	6878      	ldr	r0, [r7, #4]
240048dc:	f002 feac 	bl	24007638 <DMA_CalcBaseAndBitshift>
240048e0:	4603      	mov	r3, r0
240048e2:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
240048e4:	687b      	ldr	r3, [r7, #4]
240048e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
240048e8:	f003 031f 	and.w	r3, r3, #31
240048ec:	2201      	movs	r2, #1
240048ee:	409a      	lsls	r2, r3
240048f0:	68fb      	ldr	r3, [r7, #12]
240048f2:	605a      	str	r2, [r3, #4]
240048f4:	e001      	b.n	240048fa <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
240048f6:	2301      	movs	r3, #1
240048f8:	e04a      	b.n	24004990 <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
240048fa:	6878      	ldr	r0, [r7, #4]
240048fc:	f002 ffca 	bl	24007894 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
24004900:	687b      	ldr	r3, [r7, #4]
24004902:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24004904:	2b00      	cmp	r3, #0
24004906:	d008      	beq.n	2400491a <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
24004908:	687b      	ldr	r3, [r7, #4]
2400490a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
2400490c:	2200      	movs	r2, #0
2400490e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
24004910:	687b      	ldr	r3, [r7, #4]
24004912:	6e5b      	ldr	r3, [r3, #100]	; 0x64
24004914:	687a      	ldr	r2, [r7, #4]
24004916:	6e92      	ldr	r2, [r2, #104]	; 0x68
24004918:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
2400491a:	687b      	ldr	r3, [r7, #4]
2400491c:	685b      	ldr	r3, [r3, #4]
2400491e:	2b00      	cmp	r3, #0
24004920:	d00f      	beq.n	24004942 <HAL_DMA_DeInit+0x316>
24004922:	687b      	ldr	r3, [r7, #4]
24004924:	685b      	ldr	r3, [r3, #4]
24004926:	2b08      	cmp	r3, #8
24004928:	d80b      	bhi.n	24004942 <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
2400492a:	6878      	ldr	r0, [r7, #4]
2400492c:	f003 f84c 	bl	240079c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
24004930:	687b      	ldr	r3, [r7, #4]
24004932:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24004934:	2200      	movs	r2, #0
24004936:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
24004938:	687b      	ldr	r3, [r7, #4]
2400493a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2400493c:	687a      	ldr	r2, [r7, #4]
2400493e:	6f52      	ldr	r2, [r2, #116]	; 0x74
24004940:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
24004942:	687b      	ldr	r3, [r7, #4]
24004944:	2200      	movs	r2, #0
24004946:	66da      	str	r2, [r3, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
24004948:	687b      	ldr	r3, [r7, #4]
2400494a:	2200      	movs	r2, #0
2400494c:	671a      	str	r2, [r3, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
2400494e:	687b      	ldr	r3, [r7, #4]
24004950:	2200      	movs	r2, #0
24004952:	675a      	str	r2, [r3, #116]	; 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
24004954:	687b      	ldr	r3, [r7, #4]
24004956:	2200      	movs	r2, #0
24004958:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback   = NULL;
2400495a:	687b      	ldr	r3, [r7, #4]
2400495c:	2200      	movs	r2, #0
2400495e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback     = NULL;
24004960:	687b      	ldr	r3, [r7, #4]
24004962:	2200      	movs	r2, #0
24004964:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
24004966:	687b      	ldr	r3, [r7, #4]
24004968:	2200      	movs	r2, #0
2400496a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback      = NULL;
2400496c:	687b      	ldr	r3, [r7, #4]
2400496e:	2200      	movs	r2, #0
24004970:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback      = NULL;
24004972:	687b      	ldr	r3, [r7, #4]
24004974:	2200      	movs	r2, #0
24004976:	651a      	str	r2, [r3, #80]	; 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
24004978:	687b      	ldr	r3, [r7, #4]
2400497a:	2200      	movs	r2, #0
2400497c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
2400497e:	687b      	ldr	r3, [r7, #4]
24004980:	2200      	movs	r2, #0
24004982:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
24004986:	687b      	ldr	r3, [r7, #4]
24004988:	2200      	movs	r2, #0
2400498a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
2400498e:	2300      	movs	r3, #0
}
24004990:	4618      	mov	r0, r3
24004992:	3710      	adds	r7, #16
24004994:	46bd      	mov	sp, r7
24004996:	bd80      	pop	{r7, pc}

24004998 <HAL_DMA_Start>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
24004998:	b580      	push	{r7, lr}
2400499a:	b086      	sub	sp, #24
2400499c:	af00      	add	r7, sp, #0
2400499e:	60f8      	str	r0, [r7, #12]
240049a0:	60b9      	str	r1, [r7, #8]
240049a2:	607a      	str	r2, [r7, #4]
240049a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
240049a6:	2300      	movs	r3, #0
240049a8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
240049aa:	68fb      	ldr	r3, [r7, #12]
240049ac:	2b00      	cmp	r3, #0
240049ae:	d101      	bne.n	240049b4 <HAL_DMA_Start+0x1c>
  {
    return HAL_ERROR;
240049b0:	2301      	movs	r3, #1
240049b2:	e0ec      	b.n	24004b8e <HAL_DMA_Start+0x1f6>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
240049b4:	68fb      	ldr	r3, [r7, #12]
240049b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
240049ba:	2b01      	cmp	r3, #1
240049bc:	d101      	bne.n	240049c2 <HAL_DMA_Start+0x2a>
240049be:	2302      	movs	r3, #2
240049c0:	e0e5      	b.n	24004b8e <HAL_DMA_Start+0x1f6>
240049c2:	68fb      	ldr	r3, [r7, #12]
240049c4:	2201      	movs	r2, #1
240049c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
240049ca:	68fb      	ldr	r3, [r7, #12]
240049cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
240049d0:	b2db      	uxtb	r3, r3
240049d2:	2b01      	cmp	r3, #1
240049d4:	f040 80d0 	bne.w	24004b78 <HAL_DMA_Start+0x1e0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
240049d8:	68fb      	ldr	r3, [r7, #12]
240049da:	2202      	movs	r2, #2
240049dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
240049e0:	68fb      	ldr	r3, [r7, #12]
240049e2:	2200      	movs	r2, #0
240049e4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
240049e6:	68fb      	ldr	r3, [r7, #12]
240049e8:	681b      	ldr	r3, [r3, #0]
240049ea:	4a6b      	ldr	r2, [pc, #428]	; (24004b98 <HAL_DMA_Start+0x200>)
240049ec:	4293      	cmp	r3, r2
240049ee:	d04a      	beq.n	24004a86 <HAL_DMA_Start+0xee>
240049f0:	68fb      	ldr	r3, [r7, #12]
240049f2:	681b      	ldr	r3, [r3, #0]
240049f4:	4a69      	ldr	r2, [pc, #420]	; (24004b9c <HAL_DMA_Start+0x204>)
240049f6:	4293      	cmp	r3, r2
240049f8:	d045      	beq.n	24004a86 <HAL_DMA_Start+0xee>
240049fa:	68fb      	ldr	r3, [r7, #12]
240049fc:	681b      	ldr	r3, [r3, #0]
240049fe:	4a68      	ldr	r2, [pc, #416]	; (24004ba0 <HAL_DMA_Start+0x208>)
24004a00:	4293      	cmp	r3, r2
24004a02:	d040      	beq.n	24004a86 <HAL_DMA_Start+0xee>
24004a04:	68fb      	ldr	r3, [r7, #12]
24004a06:	681b      	ldr	r3, [r3, #0]
24004a08:	4a66      	ldr	r2, [pc, #408]	; (24004ba4 <HAL_DMA_Start+0x20c>)
24004a0a:	4293      	cmp	r3, r2
24004a0c:	d03b      	beq.n	24004a86 <HAL_DMA_Start+0xee>
24004a0e:	68fb      	ldr	r3, [r7, #12]
24004a10:	681b      	ldr	r3, [r3, #0]
24004a12:	4a65      	ldr	r2, [pc, #404]	; (24004ba8 <HAL_DMA_Start+0x210>)
24004a14:	4293      	cmp	r3, r2
24004a16:	d036      	beq.n	24004a86 <HAL_DMA_Start+0xee>
24004a18:	68fb      	ldr	r3, [r7, #12]
24004a1a:	681b      	ldr	r3, [r3, #0]
24004a1c:	4a63      	ldr	r2, [pc, #396]	; (24004bac <HAL_DMA_Start+0x214>)
24004a1e:	4293      	cmp	r3, r2
24004a20:	d031      	beq.n	24004a86 <HAL_DMA_Start+0xee>
24004a22:	68fb      	ldr	r3, [r7, #12]
24004a24:	681b      	ldr	r3, [r3, #0]
24004a26:	4a62      	ldr	r2, [pc, #392]	; (24004bb0 <HAL_DMA_Start+0x218>)
24004a28:	4293      	cmp	r3, r2
24004a2a:	d02c      	beq.n	24004a86 <HAL_DMA_Start+0xee>
24004a2c:	68fb      	ldr	r3, [r7, #12]
24004a2e:	681b      	ldr	r3, [r3, #0]
24004a30:	4a60      	ldr	r2, [pc, #384]	; (24004bb4 <HAL_DMA_Start+0x21c>)
24004a32:	4293      	cmp	r3, r2
24004a34:	d027      	beq.n	24004a86 <HAL_DMA_Start+0xee>
24004a36:	68fb      	ldr	r3, [r7, #12]
24004a38:	681b      	ldr	r3, [r3, #0]
24004a3a:	4a5f      	ldr	r2, [pc, #380]	; (24004bb8 <HAL_DMA_Start+0x220>)
24004a3c:	4293      	cmp	r3, r2
24004a3e:	d022      	beq.n	24004a86 <HAL_DMA_Start+0xee>
24004a40:	68fb      	ldr	r3, [r7, #12]
24004a42:	681b      	ldr	r3, [r3, #0]
24004a44:	4a5d      	ldr	r2, [pc, #372]	; (24004bbc <HAL_DMA_Start+0x224>)
24004a46:	4293      	cmp	r3, r2
24004a48:	d01d      	beq.n	24004a86 <HAL_DMA_Start+0xee>
24004a4a:	68fb      	ldr	r3, [r7, #12]
24004a4c:	681b      	ldr	r3, [r3, #0]
24004a4e:	4a5c      	ldr	r2, [pc, #368]	; (24004bc0 <HAL_DMA_Start+0x228>)
24004a50:	4293      	cmp	r3, r2
24004a52:	d018      	beq.n	24004a86 <HAL_DMA_Start+0xee>
24004a54:	68fb      	ldr	r3, [r7, #12]
24004a56:	681b      	ldr	r3, [r3, #0]
24004a58:	4a5a      	ldr	r2, [pc, #360]	; (24004bc4 <HAL_DMA_Start+0x22c>)
24004a5a:	4293      	cmp	r3, r2
24004a5c:	d013      	beq.n	24004a86 <HAL_DMA_Start+0xee>
24004a5e:	68fb      	ldr	r3, [r7, #12]
24004a60:	681b      	ldr	r3, [r3, #0]
24004a62:	4a59      	ldr	r2, [pc, #356]	; (24004bc8 <HAL_DMA_Start+0x230>)
24004a64:	4293      	cmp	r3, r2
24004a66:	d00e      	beq.n	24004a86 <HAL_DMA_Start+0xee>
24004a68:	68fb      	ldr	r3, [r7, #12]
24004a6a:	681b      	ldr	r3, [r3, #0]
24004a6c:	4a57      	ldr	r2, [pc, #348]	; (24004bcc <HAL_DMA_Start+0x234>)
24004a6e:	4293      	cmp	r3, r2
24004a70:	d009      	beq.n	24004a86 <HAL_DMA_Start+0xee>
24004a72:	68fb      	ldr	r3, [r7, #12]
24004a74:	681b      	ldr	r3, [r3, #0]
24004a76:	4a56      	ldr	r2, [pc, #344]	; (24004bd0 <HAL_DMA_Start+0x238>)
24004a78:	4293      	cmp	r3, r2
24004a7a:	d004      	beq.n	24004a86 <HAL_DMA_Start+0xee>
24004a7c:	68fb      	ldr	r3, [r7, #12]
24004a7e:	681b      	ldr	r3, [r3, #0]
24004a80:	4a54      	ldr	r2, [pc, #336]	; (24004bd4 <HAL_DMA_Start+0x23c>)
24004a82:	4293      	cmp	r3, r2
24004a84:	d108      	bne.n	24004a98 <HAL_DMA_Start+0x100>
24004a86:	68fb      	ldr	r3, [r7, #12]
24004a88:	681b      	ldr	r3, [r3, #0]
24004a8a:	681a      	ldr	r2, [r3, #0]
24004a8c:	68fb      	ldr	r3, [r7, #12]
24004a8e:	681b      	ldr	r3, [r3, #0]
24004a90:	f022 0201 	bic.w	r2, r2, #1
24004a94:	601a      	str	r2, [r3, #0]
24004a96:	e007      	b.n	24004aa8 <HAL_DMA_Start+0x110>
24004a98:	68fb      	ldr	r3, [r7, #12]
24004a9a:	681b      	ldr	r3, [r3, #0]
24004a9c:	681a      	ldr	r2, [r3, #0]
24004a9e:	68fb      	ldr	r3, [r7, #12]
24004aa0:	681b      	ldr	r3, [r3, #0]
24004aa2:	f022 0201 	bic.w	r2, r2, #1
24004aa6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
24004aa8:	683b      	ldr	r3, [r7, #0]
24004aaa:	687a      	ldr	r2, [r7, #4]
24004aac:	68b9      	ldr	r1, [r7, #8]
24004aae:	68f8      	ldr	r0, [r7, #12]
24004ab0:	f002 fc16 	bl	240072e0 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
24004ab4:	68fb      	ldr	r3, [r7, #12]
24004ab6:	681b      	ldr	r3, [r3, #0]
24004ab8:	4a37      	ldr	r2, [pc, #220]	; (24004b98 <HAL_DMA_Start+0x200>)
24004aba:	4293      	cmp	r3, r2
24004abc:	d04a      	beq.n	24004b54 <HAL_DMA_Start+0x1bc>
24004abe:	68fb      	ldr	r3, [r7, #12]
24004ac0:	681b      	ldr	r3, [r3, #0]
24004ac2:	4a36      	ldr	r2, [pc, #216]	; (24004b9c <HAL_DMA_Start+0x204>)
24004ac4:	4293      	cmp	r3, r2
24004ac6:	d045      	beq.n	24004b54 <HAL_DMA_Start+0x1bc>
24004ac8:	68fb      	ldr	r3, [r7, #12]
24004aca:	681b      	ldr	r3, [r3, #0]
24004acc:	4a34      	ldr	r2, [pc, #208]	; (24004ba0 <HAL_DMA_Start+0x208>)
24004ace:	4293      	cmp	r3, r2
24004ad0:	d040      	beq.n	24004b54 <HAL_DMA_Start+0x1bc>
24004ad2:	68fb      	ldr	r3, [r7, #12]
24004ad4:	681b      	ldr	r3, [r3, #0]
24004ad6:	4a33      	ldr	r2, [pc, #204]	; (24004ba4 <HAL_DMA_Start+0x20c>)
24004ad8:	4293      	cmp	r3, r2
24004ada:	d03b      	beq.n	24004b54 <HAL_DMA_Start+0x1bc>
24004adc:	68fb      	ldr	r3, [r7, #12]
24004ade:	681b      	ldr	r3, [r3, #0]
24004ae0:	4a31      	ldr	r2, [pc, #196]	; (24004ba8 <HAL_DMA_Start+0x210>)
24004ae2:	4293      	cmp	r3, r2
24004ae4:	d036      	beq.n	24004b54 <HAL_DMA_Start+0x1bc>
24004ae6:	68fb      	ldr	r3, [r7, #12]
24004ae8:	681b      	ldr	r3, [r3, #0]
24004aea:	4a30      	ldr	r2, [pc, #192]	; (24004bac <HAL_DMA_Start+0x214>)
24004aec:	4293      	cmp	r3, r2
24004aee:	d031      	beq.n	24004b54 <HAL_DMA_Start+0x1bc>
24004af0:	68fb      	ldr	r3, [r7, #12]
24004af2:	681b      	ldr	r3, [r3, #0]
24004af4:	4a2e      	ldr	r2, [pc, #184]	; (24004bb0 <HAL_DMA_Start+0x218>)
24004af6:	4293      	cmp	r3, r2
24004af8:	d02c      	beq.n	24004b54 <HAL_DMA_Start+0x1bc>
24004afa:	68fb      	ldr	r3, [r7, #12]
24004afc:	681b      	ldr	r3, [r3, #0]
24004afe:	4a2d      	ldr	r2, [pc, #180]	; (24004bb4 <HAL_DMA_Start+0x21c>)
24004b00:	4293      	cmp	r3, r2
24004b02:	d027      	beq.n	24004b54 <HAL_DMA_Start+0x1bc>
24004b04:	68fb      	ldr	r3, [r7, #12]
24004b06:	681b      	ldr	r3, [r3, #0]
24004b08:	4a2b      	ldr	r2, [pc, #172]	; (24004bb8 <HAL_DMA_Start+0x220>)
24004b0a:	4293      	cmp	r3, r2
24004b0c:	d022      	beq.n	24004b54 <HAL_DMA_Start+0x1bc>
24004b0e:	68fb      	ldr	r3, [r7, #12]
24004b10:	681b      	ldr	r3, [r3, #0]
24004b12:	4a2a      	ldr	r2, [pc, #168]	; (24004bbc <HAL_DMA_Start+0x224>)
24004b14:	4293      	cmp	r3, r2
24004b16:	d01d      	beq.n	24004b54 <HAL_DMA_Start+0x1bc>
24004b18:	68fb      	ldr	r3, [r7, #12]
24004b1a:	681b      	ldr	r3, [r3, #0]
24004b1c:	4a28      	ldr	r2, [pc, #160]	; (24004bc0 <HAL_DMA_Start+0x228>)
24004b1e:	4293      	cmp	r3, r2
24004b20:	d018      	beq.n	24004b54 <HAL_DMA_Start+0x1bc>
24004b22:	68fb      	ldr	r3, [r7, #12]
24004b24:	681b      	ldr	r3, [r3, #0]
24004b26:	4a27      	ldr	r2, [pc, #156]	; (24004bc4 <HAL_DMA_Start+0x22c>)
24004b28:	4293      	cmp	r3, r2
24004b2a:	d013      	beq.n	24004b54 <HAL_DMA_Start+0x1bc>
24004b2c:	68fb      	ldr	r3, [r7, #12]
24004b2e:	681b      	ldr	r3, [r3, #0]
24004b30:	4a25      	ldr	r2, [pc, #148]	; (24004bc8 <HAL_DMA_Start+0x230>)
24004b32:	4293      	cmp	r3, r2
24004b34:	d00e      	beq.n	24004b54 <HAL_DMA_Start+0x1bc>
24004b36:	68fb      	ldr	r3, [r7, #12]
24004b38:	681b      	ldr	r3, [r3, #0]
24004b3a:	4a24      	ldr	r2, [pc, #144]	; (24004bcc <HAL_DMA_Start+0x234>)
24004b3c:	4293      	cmp	r3, r2
24004b3e:	d009      	beq.n	24004b54 <HAL_DMA_Start+0x1bc>
24004b40:	68fb      	ldr	r3, [r7, #12]
24004b42:	681b      	ldr	r3, [r3, #0]
24004b44:	4a22      	ldr	r2, [pc, #136]	; (24004bd0 <HAL_DMA_Start+0x238>)
24004b46:	4293      	cmp	r3, r2
24004b48:	d004      	beq.n	24004b54 <HAL_DMA_Start+0x1bc>
24004b4a:	68fb      	ldr	r3, [r7, #12]
24004b4c:	681b      	ldr	r3, [r3, #0]
24004b4e:	4a21      	ldr	r2, [pc, #132]	; (24004bd4 <HAL_DMA_Start+0x23c>)
24004b50:	4293      	cmp	r3, r2
24004b52:	d108      	bne.n	24004b66 <HAL_DMA_Start+0x1ce>
24004b54:	68fb      	ldr	r3, [r7, #12]
24004b56:	681b      	ldr	r3, [r3, #0]
24004b58:	681a      	ldr	r2, [r3, #0]
24004b5a:	68fb      	ldr	r3, [r7, #12]
24004b5c:	681b      	ldr	r3, [r3, #0]
24004b5e:	f042 0201 	orr.w	r2, r2, #1
24004b62:	601a      	str	r2, [r3, #0]
24004b64:	e012      	b.n	24004b8c <HAL_DMA_Start+0x1f4>
24004b66:	68fb      	ldr	r3, [r7, #12]
24004b68:	681b      	ldr	r3, [r3, #0]
24004b6a:	681a      	ldr	r2, [r3, #0]
24004b6c:	68fb      	ldr	r3, [r7, #12]
24004b6e:	681b      	ldr	r3, [r3, #0]
24004b70:	f042 0201 	orr.w	r2, r2, #1
24004b74:	601a      	str	r2, [r3, #0]
24004b76:	e009      	b.n	24004b8c <HAL_DMA_Start+0x1f4>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
24004b78:	68fb      	ldr	r3, [r7, #12]
24004b7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
24004b7e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
24004b80:	68fb      	ldr	r3, [r7, #12]
24004b82:	2200      	movs	r2, #0
24004b84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
24004b88:	2301      	movs	r3, #1
24004b8a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
24004b8c:	7dfb      	ldrb	r3, [r7, #23]
}
24004b8e:	4618      	mov	r0, r3
24004b90:	3718      	adds	r7, #24
24004b92:	46bd      	mov	sp, r7
24004b94:	bd80      	pop	{r7, pc}
24004b96:	bf00      	nop
24004b98:	40020010 	.word	0x40020010
24004b9c:	40020028 	.word	0x40020028
24004ba0:	40020040 	.word	0x40020040
24004ba4:	40020058 	.word	0x40020058
24004ba8:	40020070 	.word	0x40020070
24004bac:	40020088 	.word	0x40020088
24004bb0:	400200a0 	.word	0x400200a0
24004bb4:	400200b8 	.word	0x400200b8
24004bb8:	40020410 	.word	0x40020410
24004bbc:	40020428 	.word	0x40020428
24004bc0:	40020440 	.word	0x40020440
24004bc4:	40020458 	.word	0x40020458
24004bc8:	40020470 	.word	0x40020470
24004bcc:	40020488 	.word	0x40020488
24004bd0:	400204a0 	.word	0x400204a0
24004bd4:	400204b8 	.word	0x400204b8

24004bd8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
24004bd8:	b580      	push	{r7, lr}
24004bda:	b086      	sub	sp, #24
24004bdc:	af00      	add	r7, sp, #0
24004bde:	60f8      	str	r0, [r7, #12]
24004be0:	60b9      	str	r1, [r7, #8]
24004be2:	607a      	str	r2, [r7, #4]
24004be4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
24004be6:	2300      	movs	r3, #0
24004be8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
24004bea:	68fb      	ldr	r3, [r7, #12]
24004bec:	2b00      	cmp	r3, #0
24004bee:	d101      	bne.n	24004bf4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
24004bf0:	2301      	movs	r3, #1
24004bf2:	e226      	b.n	24005042 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
24004bf4:	68fb      	ldr	r3, [r7, #12]
24004bf6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
24004bfa:	2b01      	cmp	r3, #1
24004bfc:	d101      	bne.n	24004c02 <HAL_DMA_Start_IT+0x2a>
24004bfe:	2302      	movs	r3, #2
24004c00:	e21f      	b.n	24005042 <HAL_DMA_Start_IT+0x46a>
24004c02:	68fb      	ldr	r3, [r7, #12]
24004c04:	2201      	movs	r2, #1
24004c06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
24004c0a:	68fb      	ldr	r3, [r7, #12]
24004c0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
24004c10:	b2db      	uxtb	r3, r3
24004c12:	2b01      	cmp	r3, #1
24004c14:	f040 820a 	bne.w	2400502c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
24004c18:	68fb      	ldr	r3, [r7, #12]
24004c1a:	2202      	movs	r2, #2
24004c1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
24004c20:	68fb      	ldr	r3, [r7, #12]
24004c22:	2200      	movs	r2, #0
24004c24:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
24004c26:	68fb      	ldr	r3, [r7, #12]
24004c28:	681b      	ldr	r3, [r3, #0]
24004c2a:	4a68      	ldr	r2, [pc, #416]	; (24004dcc <HAL_DMA_Start_IT+0x1f4>)
24004c2c:	4293      	cmp	r3, r2
24004c2e:	d04a      	beq.n	24004cc6 <HAL_DMA_Start_IT+0xee>
24004c30:	68fb      	ldr	r3, [r7, #12]
24004c32:	681b      	ldr	r3, [r3, #0]
24004c34:	4a66      	ldr	r2, [pc, #408]	; (24004dd0 <HAL_DMA_Start_IT+0x1f8>)
24004c36:	4293      	cmp	r3, r2
24004c38:	d045      	beq.n	24004cc6 <HAL_DMA_Start_IT+0xee>
24004c3a:	68fb      	ldr	r3, [r7, #12]
24004c3c:	681b      	ldr	r3, [r3, #0]
24004c3e:	4a65      	ldr	r2, [pc, #404]	; (24004dd4 <HAL_DMA_Start_IT+0x1fc>)
24004c40:	4293      	cmp	r3, r2
24004c42:	d040      	beq.n	24004cc6 <HAL_DMA_Start_IT+0xee>
24004c44:	68fb      	ldr	r3, [r7, #12]
24004c46:	681b      	ldr	r3, [r3, #0]
24004c48:	4a63      	ldr	r2, [pc, #396]	; (24004dd8 <HAL_DMA_Start_IT+0x200>)
24004c4a:	4293      	cmp	r3, r2
24004c4c:	d03b      	beq.n	24004cc6 <HAL_DMA_Start_IT+0xee>
24004c4e:	68fb      	ldr	r3, [r7, #12]
24004c50:	681b      	ldr	r3, [r3, #0]
24004c52:	4a62      	ldr	r2, [pc, #392]	; (24004ddc <HAL_DMA_Start_IT+0x204>)
24004c54:	4293      	cmp	r3, r2
24004c56:	d036      	beq.n	24004cc6 <HAL_DMA_Start_IT+0xee>
24004c58:	68fb      	ldr	r3, [r7, #12]
24004c5a:	681b      	ldr	r3, [r3, #0]
24004c5c:	4a60      	ldr	r2, [pc, #384]	; (24004de0 <HAL_DMA_Start_IT+0x208>)
24004c5e:	4293      	cmp	r3, r2
24004c60:	d031      	beq.n	24004cc6 <HAL_DMA_Start_IT+0xee>
24004c62:	68fb      	ldr	r3, [r7, #12]
24004c64:	681b      	ldr	r3, [r3, #0]
24004c66:	4a5f      	ldr	r2, [pc, #380]	; (24004de4 <HAL_DMA_Start_IT+0x20c>)
24004c68:	4293      	cmp	r3, r2
24004c6a:	d02c      	beq.n	24004cc6 <HAL_DMA_Start_IT+0xee>
24004c6c:	68fb      	ldr	r3, [r7, #12]
24004c6e:	681b      	ldr	r3, [r3, #0]
24004c70:	4a5d      	ldr	r2, [pc, #372]	; (24004de8 <HAL_DMA_Start_IT+0x210>)
24004c72:	4293      	cmp	r3, r2
24004c74:	d027      	beq.n	24004cc6 <HAL_DMA_Start_IT+0xee>
24004c76:	68fb      	ldr	r3, [r7, #12]
24004c78:	681b      	ldr	r3, [r3, #0]
24004c7a:	4a5c      	ldr	r2, [pc, #368]	; (24004dec <HAL_DMA_Start_IT+0x214>)
24004c7c:	4293      	cmp	r3, r2
24004c7e:	d022      	beq.n	24004cc6 <HAL_DMA_Start_IT+0xee>
24004c80:	68fb      	ldr	r3, [r7, #12]
24004c82:	681b      	ldr	r3, [r3, #0]
24004c84:	4a5a      	ldr	r2, [pc, #360]	; (24004df0 <HAL_DMA_Start_IT+0x218>)
24004c86:	4293      	cmp	r3, r2
24004c88:	d01d      	beq.n	24004cc6 <HAL_DMA_Start_IT+0xee>
24004c8a:	68fb      	ldr	r3, [r7, #12]
24004c8c:	681b      	ldr	r3, [r3, #0]
24004c8e:	4a59      	ldr	r2, [pc, #356]	; (24004df4 <HAL_DMA_Start_IT+0x21c>)
24004c90:	4293      	cmp	r3, r2
24004c92:	d018      	beq.n	24004cc6 <HAL_DMA_Start_IT+0xee>
24004c94:	68fb      	ldr	r3, [r7, #12]
24004c96:	681b      	ldr	r3, [r3, #0]
24004c98:	4a57      	ldr	r2, [pc, #348]	; (24004df8 <HAL_DMA_Start_IT+0x220>)
24004c9a:	4293      	cmp	r3, r2
24004c9c:	d013      	beq.n	24004cc6 <HAL_DMA_Start_IT+0xee>
24004c9e:	68fb      	ldr	r3, [r7, #12]
24004ca0:	681b      	ldr	r3, [r3, #0]
24004ca2:	4a56      	ldr	r2, [pc, #344]	; (24004dfc <HAL_DMA_Start_IT+0x224>)
24004ca4:	4293      	cmp	r3, r2
24004ca6:	d00e      	beq.n	24004cc6 <HAL_DMA_Start_IT+0xee>
24004ca8:	68fb      	ldr	r3, [r7, #12]
24004caa:	681b      	ldr	r3, [r3, #0]
24004cac:	4a54      	ldr	r2, [pc, #336]	; (24004e00 <HAL_DMA_Start_IT+0x228>)
24004cae:	4293      	cmp	r3, r2
24004cb0:	d009      	beq.n	24004cc6 <HAL_DMA_Start_IT+0xee>
24004cb2:	68fb      	ldr	r3, [r7, #12]
24004cb4:	681b      	ldr	r3, [r3, #0]
24004cb6:	4a53      	ldr	r2, [pc, #332]	; (24004e04 <HAL_DMA_Start_IT+0x22c>)
24004cb8:	4293      	cmp	r3, r2
24004cba:	d004      	beq.n	24004cc6 <HAL_DMA_Start_IT+0xee>
24004cbc:	68fb      	ldr	r3, [r7, #12]
24004cbe:	681b      	ldr	r3, [r3, #0]
24004cc0:	4a51      	ldr	r2, [pc, #324]	; (24004e08 <HAL_DMA_Start_IT+0x230>)
24004cc2:	4293      	cmp	r3, r2
24004cc4:	d108      	bne.n	24004cd8 <HAL_DMA_Start_IT+0x100>
24004cc6:	68fb      	ldr	r3, [r7, #12]
24004cc8:	681b      	ldr	r3, [r3, #0]
24004cca:	681a      	ldr	r2, [r3, #0]
24004ccc:	68fb      	ldr	r3, [r7, #12]
24004cce:	681b      	ldr	r3, [r3, #0]
24004cd0:	f022 0201 	bic.w	r2, r2, #1
24004cd4:	601a      	str	r2, [r3, #0]
24004cd6:	e007      	b.n	24004ce8 <HAL_DMA_Start_IT+0x110>
24004cd8:	68fb      	ldr	r3, [r7, #12]
24004cda:	681b      	ldr	r3, [r3, #0]
24004cdc:	681a      	ldr	r2, [r3, #0]
24004cde:	68fb      	ldr	r3, [r7, #12]
24004ce0:	681b      	ldr	r3, [r3, #0]
24004ce2:	f022 0201 	bic.w	r2, r2, #1
24004ce6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
24004ce8:	683b      	ldr	r3, [r7, #0]
24004cea:	687a      	ldr	r2, [r7, #4]
24004cec:	68b9      	ldr	r1, [r7, #8]
24004cee:	68f8      	ldr	r0, [r7, #12]
24004cf0:	f002 faf6 	bl	240072e0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24004cf4:	68fb      	ldr	r3, [r7, #12]
24004cf6:	681b      	ldr	r3, [r3, #0]
24004cf8:	4a34      	ldr	r2, [pc, #208]	; (24004dcc <HAL_DMA_Start_IT+0x1f4>)
24004cfa:	4293      	cmp	r3, r2
24004cfc:	d04a      	beq.n	24004d94 <HAL_DMA_Start_IT+0x1bc>
24004cfe:	68fb      	ldr	r3, [r7, #12]
24004d00:	681b      	ldr	r3, [r3, #0]
24004d02:	4a33      	ldr	r2, [pc, #204]	; (24004dd0 <HAL_DMA_Start_IT+0x1f8>)
24004d04:	4293      	cmp	r3, r2
24004d06:	d045      	beq.n	24004d94 <HAL_DMA_Start_IT+0x1bc>
24004d08:	68fb      	ldr	r3, [r7, #12]
24004d0a:	681b      	ldr	r3, [r3, #0]
24004d0c:	4a31      	ldr	r2, [pc, #196]	; (24004dd4 <HAL_DMA_Start_IT+0x1fc>)
24004d0e:	4293      	cmp	r3, r2
24004d10:	d040      	beq.n	24004d94 <HAL_DMA_Start_IT+0x1bc>
24004d12:	68fb      	ldr	r3, [r7, #12]
24004d14:	681b      	ldr	r3, [r3, #0]
24004d16:	4a30      	ldr	r2, [pc, #192]	; (24004dd8 <HAL_DMA_Start_IT+0x200>)
24004d18:	4293      	cmp	r3, r2
24004d1a:	d03b      	beq.n	24004d94 <HAL_DMA_Start_IT+0x1bc>
24004d1c:	68fb      	ldr	r3, [r7, #12]
24004d1e:	681b      	ldr	r3, [r3, #0]
24004d20:	4a2e      	ldr	r2, [pc, #184]	; (24004ddc <HAL_DMA_Start_IT+0x204>)
24004d22:	4293      	cmp	r3, r2
24004d24:	d036      	beq.n	24004d94 <HAL_DMA_Start_IT+0x1bc>
24004d26:	68fb      	ldr	r3, [r7, #12]
24004d28:	681b      	ldr	r3, [r3, #0]
24004d2a:	4a2d      	ldr	r2, [pc, #180]	; (24004de0 <HAL_DMA_Start_IT+0x208>)
24004d2c:	4293      	cmp	r3, r2
24004d2e:	d031      	beq.n	24004d94 <HAL_DMA_Start_IT+0x1bc>
24004d30:	68fb      	ldr	r3, [r7, #12]
24004d32:	681b      	ldr	r3, [r3, #0]
24004d34:	4a2b      	ldr	r2, [pc, #172]	; (24004de4 <HAL_DMA_Start_IT+0x20c>)
24004d36:	4293      	cmp	r3, r2
24004d38:	d02c      	beq.n	24004d94 <HAL_DMA_Start_IT+0x1bc>
24004d3a:	68fb      	ldr	r3, [r7, #12]
24004d3c:	681b      	ldr	r3, [r3, #0]
24004d3e:	4a2a      	ldr	r2, [pc, #168]	; (24004de8 <HAL_DMA_Start_IT+0x210>)
24004d40:	4293      	cmp	r3, r2
24004d42:	d027      	beq.n	24004d94 <HAL_DMA_Start_IT+0x1bc>
24004d44:	68fb      	ldr	r3, [r7, #12]
24004d46:	681b      	ldr	r3, [r3, #0]
24004d48:	4a28      	ldr	r2, [pc, #160]	; (24004dec <HAL_DMA_Start_IT+0x214>)
24004d4a:	4293      	cmp	r3, r2
24004d4c:	d022      	beq.n	24004d94 <HAL_DMA_Start_IT+0x1bc>
24004d4e:	68fb      	ldr	r3, [r7, #12]
24004d50:	681b      	ldr	r3, [r3, #0]
24004d52:	4a27      	ldr	r2, [pc, #156]	; (24004df0 <HAL_DMA_Start_IT+0x218>)
24004d54:	4293      	cmp	r3, r2
24004d56:	d01d      	beq.n	24004d94 <HAL_DMA_Start_IT+0x1bc>
24004d58:	68fb      	ldr	r3, [r7, #12]
24004d5a:	681b      	ldr	r3, [r3, #0]
24004d5c:	4a25      	ldr	r2, [pc, #148]	; (24004df4 <HAL_DMA_Start_IT+0x21c>)
24004d5e:	4293      	cmp	r3, r2
24004d60:	d018      	beq.n	24004d94 <HAL_DMA_Start_IT+0x1bc>
24004d62:	68fb      	ldr	r3, [r7, #12]
24004d64:	681b      	ldr	r3, [r3, #0]
24004d66:	4a24      	ldr	r2, [pc, #144]	; (24004df8 <HAL_DMA_Start_IT+0x220>)
24004d68:	4293      	cmp	r3, r2
24004d6a:	d013      	beq.n	24004d94 <HAL_DMA_Start_IT+0x1bc>
24004d6c:	68fb      	ldr	r3, [r7, #12]
24004d6e:	681b      	ldr	r3, [r3, #0]
24004d70:	4a22      	ldr	r2, [pc, #136]	; (24004dfc <HAL_DMA_Start_IT+0x224>)
24004d72:	4293      	cmp	r3, r2
24004d74:	d00e      	beq.n	24004d94 <HAL_DMA_Start_IT+0x1bc>
24004d76:	68fb      	ldr	r3, [r7, #12]
24004d78:	681b      	ldr	r3, [r3, #0]
24004d7a:	4a21      	ldr	r2, [pc, #132]	; (24004e00 <HAL_DMA_Start_IT+0x228>)
24004d7c:	4293      	cmp	r3, r2
24004d7e:	d009      	beq.n	24004d94 <HAL_DMA_Start_IT+0x1bc>
24004d80:	68fb      	ldr	r3, [r7, #12]
24004d82:	681b      	ldr	r3, [r3, #0]
24004d84:	4a1f      	ldr	r2, [pc, #124]	; (24004e04 <HAL_DMA_Start_IT+0x22c>)
24004d86:	4293      	cmp	r3, r2
24004d88:	d004      	beq.n	24004d94 <HAL_DMA_Start_IT+0x1bc>
24004d8a:	68fb      	ldr	r3, [r7, #12]
24004d8c:	681b      	ldr	r3, [r3, #0]
24004d8e:	4a1e      	ldr	r2, [pc, #120]	; (24004e08 <HAL_DMA_Start_IT+0x230>)
24004d90:	4293      	cmp	r3, r2
24004d92:	d101      	bne.n	24004d98 <HAL_DMA_Start_IT+0x1c0>
24004d94:	2301      	movs	r3, #1
24004d96:	e000      	b.n	24004d9a <HAL_DMA_Start_IT+0x1c2>
24004d98:	2300      	movs	r3, #0
24004d9a:	2b00      	cmp	r3, #0
24004d9c:	d036      	beq.n	24004e0c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
24004d9e:	68fb      	ldr	r3, [r7, #12]
24004da0:	681b      	ldr	r3, [r3, #0]
24004da2:	681b      	ldr	r3, [r3, #0]
24004da4:	f023 021e 	bic.w	r2, r3, #30
24004da8:	68fb      	ldr	r3, [r7, #12]
24004daa:	681b      	ldr	r3, [r3, #0]
24004dac:	f042 0216 	orr.w	r2, r2, #22
24004db0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
24004db2:	68fb      	ldr	r3, [r7, #12]
24004db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24004db6:	2b00      	cmp	r3, #0
24004db8:	d03e      	beq.n	24004e38 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
24004dba:	68fb      	ldr	r3, [r7, #12]
24004dbc:	681b      	ldr	r3, [r3, #0]
24004dbe:	681a      	ldr	r2, [r3, #0]
24004dc0:	68fb      	ldr	r3, [r7, #12]
24004dc2:	681b      	ldr	r3, [r3, #0]
24004dc4:	f042 0208 	orr.w	r2, r2, #8
24004dc8:	601a      	str	r2, [r3, #0]
24004dca:	e035      	b.n	24004e38 <HAL_DMA_Start_IT+0x260>
24004dcc:	40020010 	.word	0x40020010
24004dd0:	40020028 	.word	0x40020028
24004dd4:	40020040 	.word	0x40020040
24004dd8:	40020058 	.word	0x40020058
24004ddc:	40020070 	.word	0x40020070
24004de0:	40020088 	.word	0x40020088
24004de4:	400200a0 	.word	0x400200a0
24004de8:	400200b8 	.word	0x400200b8
24004dec:	40020410 	.word	0x40020410
24004df0:	40020428 	.word	0x40020428
24004df4:	40020440 	.word	0x40020440
24004df8:	40020458 	.word	0x40020458
24004dfc:	40020470 	.word	0x40020470
24004e00:	40020488 	.word	0x40020488
24004e04:	400204a0 	.word	0x400204a0
24004e08:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
24004e0c:	68fb      	ldr	r3, [r7, #12]
24004e0e:	681b      	ldr	r3, [r3, #0]
24004e10:	681b      	ldr	r3, [r3, #0]
24004e12:	f023 020e 	bic.w	r2, r3, #14
24004e16:	68fb      	ldr	r3, [r7, #12]
24004e18:	681b      	ldr	r3, [r3, #0]
24004e1a:	f042 020a 	orr.w	r2, r2, #10
24004e1e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
24004e20:	68fb      	ldr	r3, [r7, #12]
24004e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24004e24:	2b00      	cmp	r3, #0
24004e26:	d007      	beq.n	24004e38 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
24004e28:	68fb      	ldr	r3, [r7, #12]
24004e2a:	681b      	ldr	r3, [r3, #0]
24004e2c:	681a      	ldr	r2, [r3, #0]
24004e2e:	68fb      	ldr	r3, [r7, #12]
24004e30:	681b      	ldr	r3, [r3, #0]
24004e32:	f042 0204 	orr.w	r2, r2, #4
24004e36:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24004e38:	68fb      	ldr	r3, [r7, #12]
24004e3a:	681b      	ldr	r3, [r3, #0]
24004e3c:	4a83      	ldr	r2, [pc, #524]	; (2400504c <HAL_DMA_Start_IT+0x474>)
24004e3e:	4293      	cmp	r3, r2
24004e40:	d072      	beq.n	24004f28 <HAL_DMA_Start_IT+0x350>
24004e42:	68fb      	ldr	r3, [r7, #12]
24004e44:	681b      	ldr	r3, [r3, #0]
24004e46:	4a82      	ldr	r2, [pc, #520]	; (24005050 <HAL_DMA_Start_IT+0x478>)
24004e48:	4293      	cmp	r3, r2
24004e4a:	d06d      	beq.n	24004f28 <HAL_DMA_Start_IT+0x350>
24004e4c:	68fb      	ldr	r3, [r7, #12]
24004e4e:	681b      	ldr	r3, [r3, #0]
24004e50:	4a80      	ldr	r2, [pc, #512]	; (24005054 <HAL_DMA_Start_IT+0x47c>)
24004e52:	4293      	cmp	r3, r2
24004e54:	d068      	beq.n	24004f28 <HAL_DMA_Start_IT+0x350>
24004e56:	68fb      	ldr	r3, [r7, #12]
24004e58:	681b      	ldr	r3, [r3, #0]
24004e5a:	4a7f      	ldr	r2, [pc, #508]	; (24005058 <HAL_DMA_Start_IT+0x480>)
24004e5c:	4293      	cmp	r3, r2
24004e5e:	d063      	beq.n	24004f28 <HAL_DMA_Start_IT+0x350>
24004e60:	68fb      	ldr	r3, [r7, #12]
24004e62:	681b      	ldr	r3, [r3, #0]
24004e64:	4a7d      	ldr	r2, [pc, #500]	; (2400505c <HAL_DMA_Start_IT+0x484>)
24004e66:	4293      	cmp	r3, r2
24004e68:	d05e      	beq.n	24004f28 <HAL_DMA_Start_IT+0x350>
24004e6a:	68fb      	ldr	r3, [r7, #12]
24004e6c:	681b      	ldr	r3, [r3, #0]
24004e6e:	4a7c      	ldr	r2, [pc, #496]	; (24005060 <HAL_DMA_Start_IT+0x488>)
24004e70:	4293      	cmp	r3, r2
24004e72:	d059      	beq.n	24004f28 <HAL_DMA_Start_IT+0x350>
24004e74:	68fb      	ldr	r3, [r7, #12]
24004e76:	681b      	ldr	r3, [r3, #0]
24004e78:	4a7a      	ldr	r2, [pc, #488]	; (24005064 <HAL_DMA_Start_IT+0x48c>)
24004e7a:	4293      	cmp	r3, r2
24004e7c:	d054      	beq.n	24004f28 <HAL_DMA_Start_IT+0x350>
24004e7e:	68fb      	ldr	r3, [r7, #12]
24004e80:	681b      	ldr	r3, [r3, #0]
24004e82:	4a79      	ldr	r2, [pc, #484]	; (24005068 <HAL_DMA_Start_IT+0x490>)
24004e84:	4293      	cmp	r3, r2
24004e86:	d04f      	beq.n	24004f28 <HAL_DMA_Start_IT+0x350>
24004e88:	68fb      	ldr	r3, [r7, #12]
24004e8a:	681b      	ldr	r3, [r3, #0]
24004e8c:	4a77      	ldr	r2, [pc, #476]	; (2400506c <HAL_DMA_Start_IT+0x494>)
24004e8e:	4293      	cmp	r3, r2
24004e90:	d04a      	beq.n	24004f28 <HAL_DMA_Start_IT+0x350>
24004e92:	68fb      	ldr	r3, [r7, #12]
24004e94:	681b      	ldr	r3, [r3, #0]
24004e96:	4a76      	ldr	r2, [pc, #472]	; (24005070 <HAL_DMA_Start_IT+0x498>)
24004e98:	4293      	cmp	r3, r2
24004e9a:	d045      	beq.n	24004f28 <HAL_DMA_Start_IT+0x350>
24004e9c:	68fb      	ldr	r3, [r7, #12]
24004e9e:	681b      	ldr	r3, [r3, #0]
24004ea0:	4a74      	ldr	r2, [pc, #464]	; (24005074 <HAL_DMA_Start_IT+0x49c>)
24004ea2:	4293      	cmp	r3, r2
24004ea4:	d040      	beq.n	24004f28 <HAL_DMA_Start_IT+0x350>
24004ea6:	68fb      	ldr	r3, [r7, #12]
24004ea8:	681b      	ldr	r3, [r3, #0]
24004eaa:	4a73      	ldr	r2, [pc, #460]	; (24005078 <HAL_DMA_Start_IT+0x4a0>)
24004eac:	4293      	cmp	r3, r2
24004eae:	d03b      	beq.n	24004f28 <HAL_DMA_Start_IT+0x350>
24004eb0:	68fb      	ldr	r3, [r7, #12]
24004eb2:	681b      	ldr	r3, [r3, #0]
24004eb4:	4a71      	ldr	r2, [pc, #452]	; (2400507c <HAL_DMA_Start_IT+0x4a4>)
24004eb6:	4293      	cmp	r3, r2
24004eb8:	d036      	beq.n	24004f28 <HAL_DMA_Start_IT+0x350>
24004eba:	68fb      	ldr	r3, [r7, #12]
24004ebc:	681b      	ldr	r3, [r3, #0]
24004ebe:	4a70      	ldr	r2, [pc, #448]	; (24005080 <HAL_DMA_Start_IT+0x4a8>)
24004ec0:	4293      	cmp	r3, r2
24004ec2:	d031      	beq.n	24004f28 <HAL_DMA_Start_IT+0x350>
24004ec4:	68fb      	ldr	r3, [r7, #12]
24004ec6:	681b      	ldr	r3, [r3, #0]
24004ec8:	4a6e      	ldr	r2, [pc, #440]	; (24005084 <HAL_DMA_Start_IT+0x4ac>)
24004eca:	4293      	cmp	r3, r2
24004ecc:	d02c      	beq.n	24004f28 <HAL_DMA_Start_IT+0x350>
24004ece:	68fb      	ldr	r3, [r7, #12]
24004ed0:	681b      	ldr	r3, [r3, #0]
24004ed2:	4a6d      	ldr	r2, [pc, #436]	; (24005088 <HAL_DMA_Start_IT+0x4b0>)
24004ed4:	4293      	cmp	r3, r2
24004ed6:	d027      	beq.n	24004f28 <HAL_DMA_Start_IT+0x350>
24004ed8:	68fb      	ldr	r3, [r7, #12]
24004eda:	681b      	ldr	r3, [r3, #0]
24004edc:	4a6b      	ldr	r2, [pc, #428]	; (2400508c <HAL_DMA_Start_IT+0x4b4>)
24004ede:	4293      	cmp	r3, r2
24004ee0:	d022      	beq.n	24004f28 <HAL_DMA_Start_IT+0x350>
24004ee2:	68fb      	ldr	r3, [r7, #12]
24004ee4:	681b      	ldr	r3, [r3, #0]
24004ee6:	4a6a      	ldr	r2, [pc, #424]	; (24005090 <HAL_DMA_Start_IT+0x4b8>)
24004ee8:	4293      	cmp	r3, r2
24004eea:	d01d      	beq.n	24004f28 <HAL_DMA_Start_IT+0x350>
24004eec:	68fb      	ldr	r3, [r7, #12]
24004eee:	681b      	ldr	r3, [r3, #0]
24004ef0:	4a68      	ldr	r2, [pc, #416]	; (24005094 <HAL_DMA_Start_IT+0x4bc>)
24004ef2:	4293      	cmp	r3, r2
24004ef4:	d018      	beq.n	24004f28 <HAL_DMA_Start_IT+0x350>
24004ef6:	68fb      	ldr	r3, [r7, #12]
24004ef8:	681b      	ldr	r3, [r3, #0]
24004efa:	4a67      	ldr	r2, [pc, #412]	; (24005098 <HAL_DMA_Start_IT+0x4c0>)
24004efc:	4293      	cmp	r3, r2
24004efe:	d013      	beq.n	24004f28 <HAL_DMA_Start_IT+0x350>
24004f00:	68fb      	ldr	r3, [r7, #12]
24004f02:	681b      	ldr	r3, [r3, #0]
24004f04:	4a65      	ldr	r2, [pc, #404]	; (2400509c <HAL_DMA_Start_IT+0x4c4>)
24004f06:	4293      	cmp	r3, r2
24004f08:	d00e      	beq.n	24004f28 <HAL_DMA_Start_IT+0x350>
24004f0a:	68fb      	ldr	r3, [r7, #12]
24004f0c:	681b      	ldr	r3, [r3, #0]
24004f0e:	4a64      	ldr	r2, [pc, #400]	; (240050a0 <HAL_DMA_Start_IT+0x4c8>)
24004f10:	4293      	cmp	r3, r2
24004f12:	d009      	beq.n	24004f28 <HAL_DMA_Start_IT+0x350>
24004f14:	68fb      	ldr	r3, [r7, #12]
24004f16:	681b      	ldr	r3, [r3, #0]
24004f18:	4a62      	ldr	r2, [pc, #392]	; (240050a4 <HAL_DMA_Start_IT+0x4cc>)
24004f1a:	4293      	cmp	r3, r2
24004f1c:	d004      	beq.n	24004f28 <HAL_DMA_Start_IT+0x350>
24004f1e:	68fb      	ldr	r3, [r7, #12]
24004f20:	681b      	ldr	r3, [r3, #0]
24004f22:	4a61      	ldr	r2, [pc, #388]	; (240050a8 <HAL_DMA_Start_IT+0x4d0>)
24004f24:	4293      	cmp	r3, r2
24004f26:	d101      	bne.n	24004f2c <HAL_DMA_Start_IT+0x354>
24004f28:	2301      	movs	r3, #1
24004f2a:	e000      	b.n	24004f2e <HAL_DMA_Start_IT+0x356>
24004f2c:	2300      	movs	r3, #0
24004f2e:	2b00      	cmp	r3, #0
24004f30:	d01a      	beq.n	24004f68 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
24004f32:	68fb      	ldr	r3, [r7, #12]
24004f34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24004f36:	681b      	ldr	r3, [r3, #0]
24004f38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
24004f3c:	2b00      	cmp	r3, #0
24004f3e:	d007      	beq.n	24004f50 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
24004f40:	68fb      	ldr	r3, [r7, #12]
24004f42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24004f44:	681a      	ldr	r2, [r3, #0]
24004f46:	68fb      	ldr	r3, [r7, #12]
24004f48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24004f4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
24004f4e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
24004f50:	68fb      	ldr	r3, [r7, #12]
24004f52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24004f54:	2b00      	cmp	r3, #0
24004f56:	d007      	beq.n	24004f68 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
24004f58:	68fb      	ldr	r3, [r7, #12]
24004f5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24004f5c:	681a      	ldr	r2, [r3, #0]
24004f5e:	68fb      	ldr	r3, [r7, #12]
24004f60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24004f62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
24004f66:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
24004f68:	68fb      	ldr	r3, [r7, #12]
24004f6a:	681b      	ldr	r3, [r3, #0]
24004f6c:	4a37      	ldr	r2, [pc, #220]	; (2400504c <HAL_DMA_Start_IT+0x474>)
24004f6e:	4293      	cmp	r3, r2
24004f70:	d04a      	beq.n	24005008 <HAL_DMA_Start_IT+0x430>
24004f72:	68fb      	ldr	r3, [r7, #12]
24004f74:	681b      	ldr	r3, [r3, #0]
24004f76:	4a36      	ldr	r2, [pc, #216]	; (24005050 <HAL_DMA_Start_IT+0x478>)
24004f78:	4293      	cmp	r3, r2
24004f7a:	d045      	beq.n	24005008 <HAL_DMA_Start_IT+0x430>
24004f7c:	68fb      	ldr	r3, [r7, #12]
24004f7e:	681b      	ldr	r3, [r3, #0]
24004f80:	4a34      	ldr	r2, [pc, #208]	; (24005054 <HAL_DMA_Start_IT+0x47c>)
24004f82:	4293      	cmp	r3, r2
24004f84:	d040      	beq.n	24005008 <HAL_DMA_Start_IT+0x430>
24004f86:	68fb      	ldr	r3, [r7, #12]
24004f88:	681b      	ldr	r3, [r3, #0]
24004f8a:	4a33      	ldr	r2, [pc, #204]	; (24005058 <HAL_DMA_Start_IT+0x480>)
24004f8c:	4293      	cmp	r3, r2
24004f8e:	d03b      	beq.n	24005008 <HAL_DMA_Start_IT+0x430>
24004f90:	68fb      	ldr	r3, [r7, #12]
24004f92:	681b      	ldr	r3, [r3, #0]
24004f94:	4a31      	ldr	r2, [pc, #196]	; (2400505c <HAL_DMA_Start_IT+0x484>)
24004f96:	4293      	cmp	r3, r2
24004f98:	d036      	beq.n	24005008 <HAL_DMA_Start_IT+0x430>
24004f9a:	68fb      	ldr	r3, [r7, #12]
24004f9c:	681b      	ldr	r3, [r3, #0]
24004f9e:	4a30      	ldr	r2, [pc, #192]	; (24005060 <HAL_DMA_Start_IT+0x488>)
24004fa0:	4293      	cmp	r3, r2
24004fa2:	d031      	beq.n	24005008 <HAL_DMA_Start_IT+0x430>
24004fa4:	68fb      	ldr	r3, [r7, #12]
24004fa6:	681b      	ldr	r3, [r3, #0]
24004fa8:	4a2e      	ldr	r2, [pc, #184]	; (24005064 <HAL_DMA_Start_IT+0x48c>)
24004faa:	4293      	cmp	r3, r2
24004fac:	d02c      	beq.n	24005008 <HAL_DMA_Start_IT+0x430>
24004fae:	68fb      	ldr	r3, [r7, #12]
24004fb0:	681b      	ldr	r3, [r3, #0]
24004fb2:	4a2d      	ldr	r2, [pc, #180]	; (24005068 <HAL_DMA_Start_IT+0x490>)
24004fb4:	4293      	cmp	r3, r2
24004fb6:	d027      	beq.n	24005008 <HAL_DMA_Start_IT+0x430>
24004fb8:	68fb      	ldr	r3, [r7, #12]
24004fba:	681b      	ldr	r3, [r3, #0]
24004fbc:	4a2b      	ldr	r2, [pc, #172]	; (2400506c <HAL_DMA_Start_IT+0x494>)
24004fbe:	4293      	cmp	r3, r2
24004fc0:	d022      	beq.n	24005008 <HAL_DMA_Start_IT+0x430>
24004fc2:	68fb      	ldr	r3, [r7, #12]
24004fc4:	681b      	ldr	r3, [r3, #0]
24004fc6:	4a2a      	ldr	r2, [pc, #168]	; (24005070 <HAL_DMA_Start_IT+0x498>)
24004fc8:	4293      	cmp	r3, r2
24004fca:	d01d      	beq.n	24005008 <HAL_DMA_Start_IT+0x430>
24004fcc:	68fb      	ldr	r3, [r7, #12]
24004fce:	681b      	ldr	r3, [r3, #0]
24004fd0:	4a28      	ldr	r2, [pc, #160]	; (24005074 <HAL_DMA_Start_IT+0x49c>)
24004fd2:	4293      	cmp	r3, r2
24004fd4:	d018      	beq.n	24005008 <HAL_DMA_Start_IT+0x430>
24004fd6:	68fb      	ldr	r3, [r7, #12]
24004fd8:	681b      	ldr	r3, [r3, #0]
24004fda:	4a27      	ldr	r2, [pc, #156]	; (24005078 <HAL_DMA_Start_IT+0x4a0>)
24004fdc:	4293      	cmp	r3, r2
24004fde:	d013      	beq.n	24005008 <HAL_DMA_Start_IT+0x430>
24004fe0:	68fb      	ldr	r3, [r7, #12]
24004fe2:	681b      	ldr	r3, [r3, #0]
24004fe4:	4a25      	ldr	r2, [pc, #148]	; (2400507c <HAL_DMA_Start_IT+0x4a4>)
24004fe6:	4293      	cmp	r3, r2
24004fe8:	d00e      	beq.n	24005008 <HAL_DMA_Start_IT+0x430>
24004fea:	68fb      	ldr	r3, [r7, #12]
24004fec:	681b      	ldr	r3, [r3, #0]
24004fee:	4a24      	ldr	r2, [pc, #144]	; (24005080 <HAL_DMA_Start_IT+0x4a8>)
24004ff0:	4293      	cmp	r3, r2
24004ff2:	d009      	beq.n	24005008 <HAL_DMA_Start_IT+0x430>
24004ff4:	68fb      	ldr	r3, [r7, #12]
24004ff6:	681b      	ldr	r3, [r3, #0]
24004ff8:	4a22      	ldr	r2, [pc, #136]	; (24005084 <HAL_DMA_Start_IT+0x4ac>)
24004ffa:	4293      	cmp	r3, r2
24004ffc:	d004      	beq.n	24005008 <HAL_DMA_Start_IT+0x430>
24004ffe:	68fb      	ldr	r3, [r7, #12]
24005000:	681b      	ldr	r3, [r3, #0]
24005002:	4a21      	ldr	r2, [pc, #132]	; (24005088 <HAL_DMA_Start_IT+0x4b0>)
24005004:	4293      	cmp	r3, r2
24005006:	d108      	bne.n	2400501a <HAL_DMA_Start_IT+0x442>
24005008:	68fb      	ldr	r3, [r7, #12]
2400500a:	681b      	ldr	r3, [r3, #0]
2400500c:	681a      	ldr	r2, [r3, #0]
2400500e:	68fb      	ldr	r3, [r7, #12]
24005010:	681b      	ldr	r3, [r3, #0]
24005012:	f042 0201 	orr.w	r2, r2, #1
24005016:	601a      	str	r2, [r3, #0]
24005018:	e012      	b.n	24005040 <HAL_DMA_Start_IT+0x468>
2400501a:	68fb      	ldr	r3, [r7, #12]
2400501c:	681b      	ldr	r3, [r3, #0]
2400501e:	681a      	ldr	r2, [r3, #0]
24005020:	68fb      	ldr	r3, [r7, #12]
24005022:	681b      	ldr	r3, [r3, #0]
24005024:	f042 0201 	orr.w	r2, r2, #1
24005028:	601a      	str	r2, [r3, #0]
2400502a:	e009      	b.n	24005040 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
2400502c:	68fb      	ldr	r3, [r7, #12]
2400502e:	f44f 6200 	mov.w	r2, #2048	; 0x800
24005032:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
24005034:	68fb      	ldr	r3, [r7, #12]
24005036:	2200      	movs	r2, #0
24005038:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
2400503c:	2301      	movs	r3, #1
2400503e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
24005040:	7dfb      	ldrb	r3, [r7, #23]
}
24005042:	4618      	mov	r0, r3
24005044:	3718      	adds	r7, #24
24005046:	46bd      	mov	sp, r7
24005048:	bd80      	pop	{r7, pc}
2400504a:	bf00      	nop
2400504c:	40020010 	.word	0x40020010
24005050:	40020028 	.word	0x40020028
24005054:	40020040 	.word	0x40020040
24005058:	40020058 	.word	0x40020058
2400505c:	40020070 	.word	0x40020070
24005060:	40020088 	.word	0x40020088
24005064:	400200a0 	.word	0x400200a0
24005068:	400200b8 	.word	0x400200b8
2400506c:	40020410 	.word	0x40020410
24005070:	40020428 	.word	0x40020428
24005074:	40020440 	.word	0x40020440
24005078:	40020458 	.word	0x40020458
2400507c:	40020470 	.word	0x40020470
24005080:	40020488 	.word	0x40020488
24005084:	400204a0 	.word	0x400204a0
24005088:	400204b8 	.word	0x400204b8
2400508c:	58025408 	.word	0x58025408
24005090:	5802541c 	.word	0x5802541c
24005094:	58025430 	.word	0x58025430
24005098:	58025444 	.word	0x58025444
2400509c:	58025458 	.word	0x58025458
240050a0:	5802546c 	.word	0x5802546c
240050a4:	58025480 	.word	0x58025480
240050a8:	58025494 	.word	0x58025494

240050ac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
240050ac:	b580      	push	{r7, lr}
240050ae:	b086      	sub	sp, #24
240050b0:	af00      	add	r7, sp, #0
240050b2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
240050b4:	f7fd fff6 	bl	240030a4 <HAL_GetTick>
240050b8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
240050ba:	687b      	ldr	r3, [r7, #4]
240050bc:	2b00      	cmp	r3, #0
240050be:	d101      	bne.n	240050c4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
240050c0:	2301      	movs	r3, #1
240050c2:	e2dc      	b.n	2400567e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
240050c4:	687b      	ldr	r3, [r7, #4]
240050c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
240050ca:	b2db      	uxtb	r3, r3
240050cc:	2b02      	cmp	r3, #2
240050ce:	d008      	beq.n	240050e2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
240050d0:	687b      	ldr	r3, [r7, #4]
240050d2:	2280      	movs	r2, #128	; 0x80
240050d4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
240050d6:	687b      	ldr	r3, [r7, #4]
240050d8:	2200      	movs	r2, #0
240050da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
240050de:	2301      	movs	r3, #1
240050e0:	e2cd      	b.n	2400567e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
240050e2:	687b      	ldr	r3, [r7, #4]
240050e4:	681b      	ldr	r3, [r3, #0]
240050e6:	4a76      	ldr	r2, [pc, #472]	; (240052c0 <HAL_DMA_Abort+0x214>)
240050e8:	4293      	cmp	r3, r2
240050ea:	d04a      	beq.n	24005182 <HAL_DMA_Abort+0xd6>
240050ec:	687b      	ldr	r3, [r7, #4]
240050ee:	681b      	ldr	r3, [r3, #0]
240050f0:	4a74      	ldr	r2, [pc, #464]	; (240052c4 <HAL_DMA_Abort+0x218>)
240050f2:	4293      	cmp	r3, r2
240050f4:	d045      	beq.n	24005182 <HAL_DMA_Abort+0xd6>
240050f6:	687b      	ldr	r3, [r7, #4]
240050f8:	681b      	ldr	r3, [r3, #0]
240050fa:	4a73      	ldr	r2, [pc, #460]	; (240052c8 <HAL_DMA_Abort+0x21c>)
240050fc:	4293      	cmp	r3, r2
240050fe:	d040      	beq.n	24005182 <HAL_DMA_Abort+0xd6>
24005100:	687b      	ldr	r3, [r7, #4]
24005102:	681b      	ldr	r3, [r3, #0]
24005104:	4a71      	ldr	r2, [pc, #452]	; (240052cc <HAL_DMA_Abort+0x220>)
24005106:	4293      	cmp	r3, r2
24005108:	d03b      	beq.n	24005182 <HAL_DMA_Abort+0xd6>
2400510a:	687b      	ldr	r3, [r7, #4]
2400510c:	681b      	ldr	r3, [r3, #0]
2400510e:	4a70      	ldr	r2, [pc, #448]	; (240052d0 <HAL_DMA_Abort+0x224>)
24005110:	4293      	cmp	r3, r2
24005112:	d036      	beq.n	24005182 <HAL_DMA_Abort+0xd6>
24005114:	687b      	ldr	r3, [r7, #4]
24005116:	681b      	ldr	r3, [r3, #0]
24005118:	4a6e      	ldr	r2, [pc, #440]	; (240052d4 <HAL_DMA_Abort+0x228>)
2400511a:	4293      	cmp	r3, r2
2400511c:	d031      	beq.n	24005182 <HAL_DMA_Abort+0xd6>
2400511e:	687b      	ldr	r3, [r7, #4]
24005120:	681b      	ldr	r3, [r3, #0]
24005122:	4a6d      	ldr	r2, [pc, #436]	; (240052d8 <HAL_DMA_Abort+0x22c>)
24005124:	4293      	cmp	r3, r2
24005126:	d02c      	beq.n	24005182 <HAL_DMA_Abort+0xd6>
24005128:	687b      	ldr	r3, [r7, #4]
2400512a:	681b      	ldr	r3, [r3, #0]
2400512c:	4a6b      	ldr	r2, [pc, #428]	; (240052dc <HAL_DMA_Abort+0x230>)
2400512e:	4293      	cmp	r3, r2
24005130:	d027      	beq.n	24005182 <HAL_DMA_Abort+0xd6>
24005132:	687b      	ldr	r3, [r7, #4]
24005134:	681b      	ldr	r3, [r3, #0]
24005136:	4a6a      	ldr	r2, [pc, #424]	; (240052e0 <HAL_DMA_Abort+0x234>)
24005138:	4293      	cmp	r3, r2
2400513a:	d022      	beq.n	24005182 <HAL_DMA_Abort+0xd6>
2400513c:	687b      	ldr	r3, [r7, #4]
2400513e:	681b      	ldr	r3, [r3, #0]
24005140:	4a68      	ldr	r2, [pc, #416]	; (240052e4 <HAL_DMA_Abort+0x238>)
24005142:	4293      	cmp	r3, r2
24005144:	d01d      	beq.n	24005182 <HAL_DMA_Abort+0xd6>
24005146:	687b      	ldr	r3, [r7, #4]
24005148:	681b      	ldr	r3, [r3, #0]
2400514a:	4a67      	ldr	r2, [pc, #412]	; (240052e8 <HAL_DMA_Abort+0x23c>)
2400514c:	4293      	cmp	r3, r2
2400514e:	d018      	beq.n	24005182 <HAL_DMA_Abort+0xd6>
24005150:	687b      	ldr	r3, [r7, #4]
24005152:	681b      	ldr	r3, [r3, #0]
24005154:	4a65      	ldr	r2, [pc, #404]	; (240052ec <HAL_DMA_Abort+0x240>)
24005156:	4293      	cmp	r3, r2
24005158:	d013      	beq.n	24005182 <HAL_DMA_Abort+0xd6>
2400515a:	687b      	ldr	r3, [r7, #4]
2400515c:	681b      	ldr	r3, [r3, #0]
2400515e:	4a64      	ldr	r2, [pc, #400]	; (240052f0 <HAL_DMA_Abort+0x244>)
24005160:	4293      	cmp	r3, r2
24005162:	d00e      	beq.n	24005182 <HAL_DMA_Abort+0xd6>
24005164:	687b      	ldr	r3, [r7, #4]
24005166:	681b      	ldr	r3, [r3, #0]
24005168:	4a62      	ldr	r2, [pc, #392]	; (240052f4 <HAL_DMA_Abort+0x248>)
2400516a:	4293      	cmp	r3, r2
2400516c:	d009      	beq.n	24005182 <HAL_DMA_Abort+0xd6>
2400516e:	687b      	ldr	r3, [r7, #4]
24005170:	681b      	ldr	r3, [r3, #0]
24005172:	4a61      	ldr	r2, [pc, #388]	; (240052f8 <HAL_DMA_Abort+0x24c>)
24005174:	4293      	cmp	r3, r2
24005176:	d004      	beq.n	24005182 <HAL_DMA_Abort+0xd6>
24005178:	687b      	ldr	r3, [r7, #4]
2400517a:	681b      	ldr	r3, [r3, #0]
2400517c:	4a5f      	ldr	r2, [pc, #380]	; (240052fc <HAL_DMA_Abort+0x250>)
2400517e:	4293      	cmp	r3, r2
24005180:	d101      	bne.n	24005186 <HAL_DMA_Abort+0xda>
24005182:	2301      	movs	r3, #1
24005184:	e000      	b.n	24005188 <HAL_DMA_Abort+0xdc>
24005186:	2300      	movs	r3, #0
24005188:	2b00      	cmp	r3, #0
2400518a:	d013      	beq.n	240051b4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
2400518c:	687b      	ldr	r3, [r7, #4]
2400518e:	681b      	ldr	r3, [r3, #0]
24005190:	681a      	ldr	r2, [r3, #0]
24005192:	687b      	ldr	r3, [r7, #4]
24005194:	681b      	ldr	r3, [r3, #0]
24005196:	f022 021e 	bic.w	r2, r2, #30
2400519a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
2400519c:	687b      	ldr	r3, [r7, #4]
2400519e:	681b      	ldr	r3, [r3, #0]
240051a0:	695a      	ldr	r2, [r3, #20]
240051a2:	687b      	ldr	r3, [r7, #4]
240051a4:	681b      	ldr	r3, [r3, #0]
240051a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
240051aa:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
240051ac:	687b      	ldr	r3, [r7, #4]
240051ae:	681b      	ldr	r3, [r3, #0]
240051b0:	617b      	str	r3, [r7, #20]
240051b2:	e00a      	b.n	240051ca <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
240051b4:	687b      	ldr	r3, [r7, #4]
240051b6:	681b      	ldr	r3, [r3, #0]
240051b8:	681a      	ldr	r2, [r3, #0]
240051ba:	687b      	ldr	r3, [r7, #4]
240051bc:	681b      	ldr	r3, [r3, #0]
240051be:	f022 020e 	bic.w	r2, r2, #14
240051c2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
240051c4:	687b      	ldr	r3, [r7, #4]
240051c6:	681b      	ldr	r3, [r3, #0]
240051c8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
240051ca:	687b      	ldr	r3, [r7, #4]
240051cc:	681b      	ldr	r3, [r3, #0]
240051ce:	4a3c      	ldr	r2, [pc, #240]	; (240052c0 <HAL_DMA_Abort+0x214>)
240051d0:	4293      	cmp	r3, r2
240051d2:	d072      	beq.n	240052ba <HAL_DMA_Abort+0x20e>
240051d4:	687b      	ldr	r3, [r7, #4]
240051d6:	681b      	ldr	r3, [r3, #0]
240051d8:	4a3a      	ldr	r2, [pc, #232]	; (240052c4 <HAL_DMA_Abort+0x218>)
240051da:	4293      	cmp	r3, r2
240051dc:	d06d      	beq.n	240052ba <HAL_DMA_Abort+0x20e>
240051de:	687b      	ldr	r3, [r7, #4]
240051e0:	681b      	ldr	r3, [r3, #0]
240051e2:	4a39      	ldr	r2, [pc, #228]	; (240052c8 <HAL_DMA_Abort+0x21c>)
240051e4:	4293      	cmp	r3, r2
240051e6:	d068      	beq.n	240052ba <HAL_DMA_Abort+0x20e>
240051e8:	687b      	ldr	r3, [r7, #4]
240051ea:	681b      	ldr	r3, [r3, #0]
240051ec:	4a37      	ldr	r2, [pc, #220]	; (240052cc <HAL_DMA_Abort+0x220>)
240051ee:	4293      	cmp	r3, r2
240051f0:	d063      	beq.n	240052ba <HAL_DMA_Abort+0x20e>
240051f2:	687b      	ldr	r3, [r7, #4]
240051f4:	681b      	ldr	r3, [r3, #0]
240051f6:	4a36      	ldr	r2, [pc, #216]	; (240052d0 <HAL_DMA_Abort+0x224>)
240051f8:	4293      	cmp	r3, r2
240051fa:	d05e      	beq.n	240052ba <HAL_DMA_Abort+0x20e>
240051fc:	687b      	ldr	r3, [r7, #4]
240051fe:	681b      	ldr	r3, [r3, #0]
24005200:	4a34      	ldr	r2, [pc, #208]	; (240052d4 <HAL_DMA_Abort+0x228>)
24005202:	4293      	cmp	r3, r2
24005204:	d059      	beq.n	240052ba <HAL_DMA_Abort+0x20e>
24005206:	687b      	ldr	r3, [r7, #4]
24005208:	681b      	ldr	r3, [r3, #0]
2400520a:	4a33      	ldr	r2, [pc, #204]	; (240052d8 <HAL_DMA_Abort+0x22c>)
2400520c:	4293      	cmp	r3, r2
2400520e:	d054      	beq.n	240052ba <HAL_DMA_Abort+0x20e>
24005210:	687b      	ldr	r3, [r7, #4]
24005212:	681b      	ldr	r3, [r3, #0]
24005214:	4a31      	ldr	r2, [pc, #196]	; (240052dc <HAL_DMA_Abort+0x230>)
24005216:	4293      	cmp	r3, r2
24005218:	d04f      	beq.n	240052ba <HAL_DMA_Abort+0x20e>
2400521a:	687b      	ldr	r3, [r7, #4]
2400521c:	681b      	ldr	r3, [r3, #0]
2400521e:	4a30      	ldr	r2, [pc, #192]	; (240052e0 <HAL_DMA_Abort+0x234>)
24005220:	4293      	cmp	r3, r2
24005222:	d04a      	beq.n	240052ba <HAL_DMA_Abort+0x20e>
24005224:	687b      	ldr	r3, [r7, #4]
24005226:	681b      	ldr	r3, [r3, #0]
24005228:	4a2e      	ldr	r2, [pc, #184]	; (240052e4 <HAL_DMA_Abort+0x238>)
2400522a:	4293      	cmp	r3, r2
2400522c:	d045      	beq.n	240052ba <HAL_DMA_Abort+0x20e>
2400522e:	687b      	ldr	r3, [r7, #4]
24005230:	681b      	ldr	r3, [r3, #0]
24005232:	4a2d      	ldr	r2, [pc, #180]	; (240052e8 <HAL_DMA_Abort+0x23c>)
24005234:	4293      	cmp	r3, r2
24005236:	d040      	beq.n	240052ba <HAL_DMA_Abort+0x20e>
24005238:	687b      	ldr	r3, [r7, #4]
2400523a:	681b      	ldr	r3, [r3, #0]
2400523c:	4a2b      	ldr	r2, [pc, #172]	; (240052ec <HAL_DMA_Abort+0x240>)
2400523e:	4293      	cmp	r3, r2
24005240:	d03b      	beq.n	240052ba <HAL_DMA_Abort+0x20e>
24005242:	687b      	ldr	r3, [r7, #4]
24005244:	681b      	ldr	r3, [r3, #0]
24005246:	4a2a      	ldr	r2, [pc, #168]	; (240052f0 <HAL_DMA_Abort+0x244>)
24005248:	4293      	cmp	r3, r2
2400524a:	d036      	beq.n	240052ba <HAL_DMA_Abort+0x20e>
2400524c:	687b      	ldr	r3, [r7, #4]
2400524e:	681b      	ldr	r3, [r3, #0]
24005250:	4a28      	ldr	r2, [pc, #160]	; (240052f4 <HAL_DMA_Abort+0x248>)
24005252:	4293      	cmp	r3, r2
24005254:	d031      	beq.n	240052ba <HAL_DMA_Abort+0x20e>
24005256:	687b      	ldr	r3, [r7, #4]
24005258:	681b      	ldr	r3, [r3, #0]
2400525a:	4a27      	ldr	r2, [pc, #156]	; (240052f8 <HAL_DMA_Abort+0x24c>)
2400525c:	4293      	cmp	r3, r2
2400525e:	d02c      	beq.n	240052ba <HAL_DMA_Abort+0x20e>
24005260:	687b      	ldr	r3, [r7, #4]
24005262:	681b      	ldr	r3, [r3, #0]
24005264:	4a25      	ldr	r2, [pc, #148]	; (240052fc <HAL_DMA_Abort+0x250>)
24005266:	4293      	cmp	r3, r2
24005268:	d027      	beq.n	240052ba <HAL_DMA_Abort+0x20e>
2400526a:	687b      	ldr	r3, [r7, #4]
2400526c:	681b      	ldr	r3, [r3, #0]
2400526e:	4a24      	ldr	r2, [pc, #144]	; (24005300 <HAL_DMA_Abort+0x254>)
24005270:	4293      	cmp	r3, r2
24005272:	d022      	beq.n	240052ba <HAL_DMA_Abort+0x20e>
24005274:	687b      	ldr	r3, [r7, #4]
24005276:	681b      	ldr	r3, [r3, #0]
24005278:	4a22      	ldr	r2, [pc, #136]	; (24005304 <HAL_DMA_Abort+0x258>)
2400527a:	4293      	cmp	r3, r2
2400527c:	d01d      	beq.n	240052ba <HAL_DMA_Abort+0x20e>
2400527e:	687b      	ldr	r3, [r7, #4]
24005280:	681b      	ldr	r3, [r3, #0]
24005282:	4a21      	ldr	r2, [pc, #132]	; (24005308 <HAL_DMA_Abort+0x25c>)
24005284:	4293      	cmp	r3, r2
24005286:	d018      	beq.n	240052ba <HAL_DMA_Abort+0x20e>
24005288:	687b      	ldr	r3, [r7, #4]
2400528a:	681b      	ldr	r3, [r3, #0]
2400528c:	4a1f      	ldr	r2, [pc, #124]	; (2400530c <HAL_DMA_Abort+0x260>)
2400528e:	4293      	cmp	r3, r2
24005290:	d013      	beq.n	240052ba <HAL_DMA_Abort+0x20e>
24005292:	687b      	ldr	r3, [r7, #4]
24005294:	681b      	ldr	r3, [r3, #0]
24005296:	4a1e      	ldr	r2, [pc, #120]	; (24005310 <HAL_DMA_Abort+0x264>)
24005298:	4293      	cmp	r3, r2
2400529a:	d00e      	beq.n	240052ba <HAL_DMA_Abort+0x20e>
2400529c:	687b      	ldr	r3, [r7, #4]
2400529e:	681b      	ldr	r3, [r3, #0]
240052a0:	4a1c      	ldr	r2, [pc, #112]	; (24005314 <HAL_DMA_Abort+0x268>)
240052a2:	4293      	cmp	r3, r2
240052a4:	d009      	beq.n	240052ba <HAL_DMA_Abort+0x20e>
240052a6:	687b      	ldr	r3, [r7, #4]
240052a8:	681b      	ldr	r3, [r3, #0]
240052aa:	4a1b      	ldr	r2, [pc, #108]	; (24005318 <HAL_DMA_Abort+0x26c>)
240052ac:	4293      	cmp	r3, r2
240052ae:	d004      	beq.n	240052ba <HAL_DMA_Abort+0x20e>
240052b0:	687b      	ldr	r3, [r7, #4]
240052b2:	681b      	ldr	r3, [r3, #0]
240052b4:	4a19      	ldr	r2, [pc, #100]	; (2400531c <HAL_DMA_Abort+0x270>)
240052b6:	4293      	cmp	r3, r2
240052b8:	d132      	bne.n	24005320 <HAL_DMA_Abort+0x274>
240052ba:	2301      	movs	r3, #1
240052bc:	e031      	b.n	24005322 <HAL_DMA_Abort+0x276>
240052be:	bf00      	nop
240052c0:	40020010 	.word	0x40020010
240052c4:	40020028 	.word	0x40020028
240052c8:	40020040 	.word	0x40020040
240052cc:	40020058 	.word	0x40020058
240052d0:	40020070 	.word	0x40020070
240052d4:	40020088 	.word	0x40020088
240052d8:	400200a0 	.word	0x400200a0
240052dc:	400200b8 	.word	0x400200b8
240052e0:	40020410 	.word	0x40020410
240052e4:	40020428 	.word	0x40020428
240052e8:	40020440 	.word	0x40020440
240052ec:	40020458 	.word	0x40020458
240052f0:	40020470 	.word	0x40020470
240052f4:	40020488 	.word	0x40020488
240052f8:	400204a0 	.word	0x400204a0
240052fc:	400204b8 	.word	0x400204b8
24005300:	58025408 	.word	0x58025408
24005304:	5802541c 	.word	0x5802541c
24005308:	58025430 	.word	0x58025430
2400530c:	58025444 	.word	0x58025444
24005310:	58025458 	.word	0x58025458
24005314:	5802546c 	.word	0x5802546c
24005318:	58025480 	.word	0x58025480
2400531c:	58025494 	.word	0x58025494
24005320:	2300      	movs	r3, #0
24005322:	2b00      	cmp	r3, #0
24005324:	d007      	beq.n	24005336 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
24005326:	687b      	ldr	r3, [r7, #4]
24005328:	6e1b      	ldr	r3, [r3, #96]	; 0x60
2400532a:	681a      	ldr	r2, [r3, #0]
2400532c:	687b      	ldr	r3, [r7, #4]
2400532e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24005330:	f422 7280 	bic.w	r2, r2, #256	; 0x100
24005334:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
24005336:	687b      	ldr	r3, [r7, #4]
24005338:	681b      	ldr	r3, [r3, #0]
2400533a:	4a6d      	ldr	r2, [pc, #436]	; (240054f0 <HAL_DMA_Abort+0x444>)
2400533c:	4293      	cmp	r3, r2
2400533e:	d04a      	beq.n	240053d6 <HAL_DMA_Abort+0x32a>
24005340:	687b      	ldr	r3, [r7, #4]
24005342:	681b      	ldr	r3, [r3, #0]
24005344:	4a6b      	ldr	r2, [pc, #428]	; (240054f4 <HAL_DMA_Abort+0x448>)
24005346:	4293      	cmp	r3, r2
24005348:	d045      	beq.n	240053d6 <HAL_DMA_Abort+0x32a>
2400534a:	687b      	ldr	r3, [r7, #4]
2400534c:	681b      	ldr	r3, [r3, #0]
2400534e:	4a6a      	ldr	r2, [pc, #424]	; (240054f8 <HAL_DMA_Abort+0x44c>)
24005350:	4293      	cmp	r3, r2
24005352:	d040      	beq.n	240053d6 <HAL_DMA_Abort+0x32a>
24005354:	687b      	ldr	r3, [r7, #4]
24005356:	681b      	ldr	r3, [r3, #0]
24005358:	4a68      	ldr	r2, [pc, #416]	; (240054fc <HAL_DMA_Abort+0x450>)
2400535a:	4293      	cmp	r3, r2
2400535c:	d03b      	beq.n	240053d6 <HAL_DMA_Abort+0x32a>
2400535e:	687b      	ldr	r3, [r7, #4]
24005360:	681b      	ldr	r3, [r3, #0]
24005362:	4a67      	ldr	r2, [pc, #412]	; (24005500 <HAL_DMA_Abort+0x454>)
24005364:	4293      	cmp	r3, r2
24005366:	d036      	beq.n	240053d6 <HAL_DMA_Abort+0x32a>
24005368:	687b      	ldr	r3, [r7, #4]
2400536a:	681b      	ldr	r3, [r3, #0]
2400536c:	4a65      	ldr	r2, [pc, #404]	; (24005504 <HAL_DMA_Abort+0x458>)
2400536e:	4293      	cmp	r3, r2
24005370:	d031      	beq.n	240053d6 <HAL_DMA_Abort+0x32a>
24005372:	687b      	ldr	r3, [r7, #4]
24005374:	681b      	ldr	r3, [r3, #0]
24005376:	4a64      	ldr	r2, [pc, #400]	; (24005508 <HAL_DMA_Abort+0x45c>)
24005378:	4293      	cmp	r3, r2
2400537a:	d02c      	beq.n	240053d6 <HAL_DMA_Abort+0x32a>
2400537c:	687b      	ldr	r3, [r7, #4]
2400537e:	681b      	ldr	r3, [r3, #0]
24005380:	4a62      	ldr	r2, [pc, #392]	; (2400550c <HAL_DMA_Abort+0x460>)
24005382:	4293      	cmp	r3, r2
24005384:	d027      	beq.n	240053d6 <HAL_DMA_Abort+0x32a>
24005386:	687b      	ldr	r3, [r7, #4]
24005388:	681b      	ldr	r3, [r3, #0]
2400538a:	4a61      	ldr	r2, [pc, #388]	; (24005510 <HAL_DMA_Abort+0x464>)
2400538c:	4293      	cmp	r3, r2
2400538e:	d022      	beq.n	240053d6 <HAL_DMA_Abort+0x32a>
24005390:	687b      	ldr	r3, [r7, #4]
24005392:	681b      	ldr	r3, [r3, #0]
24005394:	4a5f      	ldr	r2, [pc, #380]	; (24005514 <HAL_DMA_Abort+0x468>)
24005396:	4293      	cmp	r3, r2
24005398:	d01d      	beq.n	240053d6 <HAL_DMA_Abort+0x32a>
2400539a:	687b      	ldr	r3, [r7, #4]
2400539c:	681b      	ldr	r3, [r3, #0]
2400539e:	4a5e      	ldr	r2, [pc, #376]	; (24005518 <HAL_DMA_Abort+0x46c>)
240053a0:	4293      	cmp	r3, r2
240053a2:	d018      	beq.n	240053d6 <HAL_DMA_Abort+0x32a>
240053a4:	687b      	ldr	r3, [r7, #4]
240053a6:	681b      	ldr	r3, [r3, #0]
240053a8:	4a5c      	ldr	r2, [pc, #368]	; (2400551c <HAL_DMA_Abort+0x470>)
240053aa:	4293      	cmp	r3, r2
240053ac:	d013      	beq.n	240053d6 <HAL_DMA_Abort+0x32a>
240053ae:	687b      	ldr	r3, [r7, #4]
240053b0:	681b      	ldr	r3, [r3, #0]
240053b2:	4a5b      	ldr	r2, [pc, #364]	; (24005520 <HAL_DMA_Abort+0x474>)
240053b4:	4293      	cmp	r3, r2
240053b6:	d00e      	beq.n	240053d6 <HAL_DMA_Abort+0x32a>
240053b8:	687b      	ldr	r3, [r7, #4]
240053ba:	681b      	ldr	r3, [r3, #0]
240053bc:	4a59      	ldr	r2, [pc, #356]	; (24005524 <HAL_DMA_Abort+0x478>)
240053be:	4293      	cmp	r3, r2
240053c0:	d009      	beq.n	240053d6 <HAL_DMA_Abort+0x32a>
240053c2:	687b      	ldr	r3, [r7, #4]
240053c4:	681b      	ldr	r3, [r3, #0]
240053c6:	4a58      	ldr	r2, [pc, #352]	; (24005528 <HAL_DMA_Abort+0x47c>)
240053c8:	4293      	cmp	r3, r2
240053ca:	d004      	beq.n	240053d6 <HAL_DMA_Abort+0x32a>
240053cc:	687b      	ldr	r3, [r7, #4]
240053ce:	681b      	ldr	r3, [r3, #0]
240053d0:	4a56      	ldr	r2, [pc, #344]	; (2400552c <HAL_DMA_Abort+0x480>)
240053d2:	4293      	cmp	r3, r2
240053d4:	d108      	bne.n	240053e8 <HAL_DMA_Abort+0x33c>
240053d6:	687b      	ldr	r3, [r7, #4]
240053d8:	681b      	ldr	r3, [r3, #0]
240053da:	681a      	ldr	r2, [r3, #0]
240053dc:	687b      	ldr	r3, [r7, #4]
240053de:	681b      	ldr	r3, [r3, #0]
240053e0:	f022 0201 	bic.w	r2, r2, #1
240053e4:	601a      	str	r2, [r3, #0]
240053e6:	e007      	b.n	240053f8 <HAL_DMA_Abort+0x34c>
240053e8:	687b      	ldr	r3, [r7, #4]
240053ea:	681b      	ldr	r3, [r3, #0]
240053ec:	681a      	ldr	r2, [r3, #0]
240053ee:	687b      	ldr	r3, [r7, #4]
240053f0:	681b      	ldr	r3, [r3, #0]
240053f2:	f022 0201 	bic.w	r2, r2, #1
240053f6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
240053f8:	e013      	b.n	24005422 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
240053fa:	f7fd fe53 	bl	240030a4 <HAL_GetTick>
240053fe:	4602      	mov	r2, r0
24005400:	693b      	ldr	r3, [r7, #16]
24005402:	1ad3      	subs	r3, r2, r3
24005404:	2b05      	cmp	r3, #5
24005406:	d90c      	bls.n	24005422 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
24005408:	687b      	ldr	r3, [r7, #4]
2400540a:	2220      	movs	r2, #32
2400540c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
2400540e:	687b      	ldr	r3, [r7, #4]
24005410:	2203      	movs	r2, #3
24005412:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
24005416:	687b      	ldr	r3, [r7, #4]
24005418:	2200      	movs	r2, #0
2400541a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
2400541e:	2301      	movs	r3, #1
24005420:	e12d      	b.n	2400567e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
24005422:	697b      	ldr	r3, [r7, #20]
24005424:	681b      	ldr	r3, [r3, #0]
24005426:	f003 0301 	and.w	r3, r3, #1
2400542a:	2b00      	cmp	r3, #0
2400542c:	d1e5      	bne.n	240053fa <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
2400542e:	687b      	ldr	r3, [r7, #4]
24005430:	681b      	ldr	r3, [r3, #0]
24005432:	4a2f      	ldr	r2, [pc, #188]	; (240054f0 <HAL_DMA_Abort+0x444>)
24005434:	4293      	cmp	r3, r2
24005436:	d04a      	beq.n	240054ce <HAL_DMA_Abort+0x422>
24005438:	687b      	ldr	r3, [r7, #4]
2400543a:	681b      	ldr	r3, [r3, #0]
2400543c:	4a2d      	ldr	r2, [pc, #180]	; (240054f4 <HAL_DMA_Abort+0x448>)
2400543e:	4293      	cmp	r3, r2
24005440:	d045      	beq.n	240054ce <HAL_DMA_Abort+0x422>
24005442:	687b      	ldr	r3, [r7, #4]
24005444:	681b      	ldr	r3, [r3, #0]
24005446:	4a2c      	ldr	r2, [pc, #176]	; (240054f8 <HAL_DMA_Abort+0x44c>)
24005448:	4293      	cmp	r3, r2
2400544a:	d040      	beq.n	240054ce <HAL_DMA_Abort+0x422>
2400544c:	687b      	ldr	r3, [r7, #4]
2400544e:	681b      	ldr	r3, [r3, #0]
24005450:	4a2a      	ldr	r2, [pc, #168]	; (240054fc <HAL_DMA_Abort+0x450>)
24005452:	4293      	cmp	r3, r2
24005454:	d03b      	beq.n	240054ce <HAL_DMA_Abort+0x422>
24005456:	687b      	ldr	r3, [r7, #4]
24005458:	681b      	ldr	r3, [r3, #0]
2400545a:	4a29      	ldr	r2, [pc, #164]	; (24005500 <HAL_DMA_Abort+0x454>)
2400545c:	4293      	cmp	r3, r2
2400545e:	d036      	beq.n	240054ce <HAL_DMA_Abort+0x422>
24005460:	687b      	ldr	r3, [r7, #4]
24005462:	681b      	ldr	r3, [r3, #0]
24005464:	4a27      	ldr	r2, [pc, #156]	; (24005504 <HAL_DMA_Abort+0x458>)
24005466:	4293      	cmp	r3, r2
24005468:	d031      	beq.n	240054ce <HAL_DMA_Abort+0x422>
2400546a:	687b      	ldr	r3, [r7, #4]
2400546c:	681b      	ldr	r3, [r3, #0]
2400546e:	4a26      	ldr	r2, [pc, #152]	; (24005508 <HAL_DMA_Abort+0x45c>)
24005470:	4293      	cmp	r3, r2
24005472:	d02c      	beq.n	240054ce <HAL_DMA_Abort+0x422>
24005474:	687b      	ldr	r3, [r7, #4]
24005476:	681b      	ldr	r3, [r3, #0]
24005478:	4a24      	ldr	r2, [pc, #144]	; (2400550c <HAL_DMA_Abort+0x460>)
2400547a:	4293      	cmp	r3, r2
2400547c:	d027      	beq.n	240054ce <HAL_DMA_Abort+0x422>
2400547e:	687b      	ldr	r3, [r7, #4]
24005480:	681b      	ldr	r3, [r3, #0]
24005482:	4a23      	ldr	r2, [pc, #140]	; (24005510 <HAL_DMA_Abort+0x464>)
24005484:	4293      	cmp	r3, r2
24005486:	d022      	beq.n	240054ce <HAL_DMA_Abort+0x422>
24005488:	687b      	ldr	r3, [r7, #4]
2400548a:	681b      	ldr	r3, [r3, #0]
2400548c:	4a21      	ldr	r2, [pc, #132]	; (24005514 <HAL_DMA_Abort+0x468>)
2400548e:	4293      	cmp	r3, r2
24005490:	d01d      	beq.n	240054ce <HAL_DMA_Abort+0x422>
24005492:	687b      	ldr	r3, [r7, #4]
24005494:	681b      	ldr	r3, [r3, #0]
24005496:	4a20      	ldr	r2, [pc, #128]	; (24005518 <HAL_DMA_Abort+0x46c>)
24005498:	4293      	cmp	r3, r2
2400549a:	d018      	beq.n	240054ce <HAL_DMA_Abort+0x422>
2400549c:	687b      	ldr	r3, [r7, #4]
2400549e:	681b      	ldr	r3, [r3, #0]
240054a0:	4a1e      	ldr	r2, [pc, #120]	; (2400551c <HAL_DMA_Abort+0x470>)
240054a2:	4293      	cmp	r3, r2
240054a4:	d013      	beq.n	240054ce <HAL_DMA_Abort+0x422>
240054a6:	687b      	ldr	r3, [r7, #4]
240054a8:	681b      	ldr	r3, [r3, #0]
240054aa:	4a1d      	ldr	r2, [pc, #116]	; (24005520 <HAL_DMA_Abort+0x474>)
240054ac:	4293      	cmp	r3, r2
240054ae:	d00e      	beq.n	240054ce <HAL_DMA_Abort+0x422>
240054b0:	687b      	ldr	r3, [r7, #4]
240054b2:	681b      	ldr	r3, [r3, #0]
240054b4:	4a1b      	ldr	r2, [pc, #108]	; (24005524 <HAL_DMA_Abort+0x478>)
240054b6:	4293      	cmp	r3, r2
240054b8:	d009      	beq.n	240054ce <HAL_DMA_Abort+0x422>
240054ba:	687b      	ldr	r3, [r7, #4]
240054bc:	681b      	ldr	r3, [r3, #0]
240054be:	4a1a      	ldr	r2, [pc, #104]	; (24005528 <HAL_DMA_Abort+0x47c>)
240054c0:	4293      	cmp	r3, r2
240054c2:	d004      	beq.n	240054ce <HAL_DMA_Abort+0x422>
240054c4:	687b      	ldr	r3, [r7, #4]
240054c6:	681b      	ldr	r3, [r3, #0]
240054c8:	4a18      	ldr	r2, [pc, #96]	; (2400552c <HAL_DMA_Abort+0x480>)
240054ca:	4293      	cmp	r3, r2
240054cc:	d101      	bne.n	240054d2 <HAL_DMA_Abort+0x426>
240054ce:	2301      	movs	r3, #1
240054d0:	e000      	b.n	240054d4 <HAL_DMA_Abort+0x428>
240054d2:	2300      	movs	r3, #0
240054d4:	2b00      	cmp	r3, #0
240054d6:	d02b      	beq.n	24005530 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
240054d8:	687b      	ldr	r3, [r7, #4]
240054da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
240054dc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
240054de:	687b      	ldr	r3, [r7, #4]
240054e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
240054e2:	f003 031f 	and.w	r3, r3, #31
240054e6:	223f      	movs	r2, #63	; 0x3f
240054e8:	409a      	lsls	r2, r3
240054ea:	68bb      	ldr	r3, [r7, #8]
240054ec:	609a      	str	r2, [r3, #8]
240054ee:	e02a      	b.n	24005546 <HAL_DMA_Abort+0x49a>
240054f0:	40020010 	.word	0x40020010
240054f4:	40020028 	.word	0x40020028
240054f8:	40020040 	.word	0x40020040
240054fc:	40020058 	.word	0x40020058
24005500:	40020070 	.word	0x40020070
24005504:	40020088 	.word	0x40020088
24005508:	400200a0 	.word	0x400200a0
2400550c:	400200b8 	.word	0x400200b8
24005510:	40020410 	.word	0x40020410
24005514:	40020428 	.word	0x40020428
24005518:	40020440 	.word	0x40020440
2400551c:	40020458 	.word	0x40020458
24005520:	40020470 	.word	0x40020470
24005524:	40020488 	.word	0x40020488
24005528:	400204a0 	.word	0x400204a0
2400552c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
24005530:	687b      	ldr	r3, [r7, #4]
24005532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24005534:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
24005536:	687b      	ldr	r3, [r7, #4]
24005538:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2400553a:	f003 031f 	and.w	r3, r3, #31
2400553e:	2201      	movs	r2, #1
24005540:	409a      	lsls	r2, r3
24005542:	68fb      	ldr	r3, [r7, #12]
24005544:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24005546:	687b      	ldr	r3, [r7, #4]
24005548:	681b      	ldr	r3, [r3, #0]
2400554a:	4a4f      	ldr	r2, [pc, #316]	; (24005688 <HAL_DMA_Abort+0x5dc>)
2400554c:	4293      	cmp	r3, r2
2400554e:	d072      	beq.n	24005636 <HAL_DMA_Abort+0x58a>
24005550:	687b      	ldr	r3, [r7, #4]
24005552:	681b      	ldr	r3, [r3, #0]
24005554:	4a4d      	ldr	r2, [pc, #308]	; (2400568c <HAL_DMA_Abort+0x5e0>)
24005556:	4293      	cmp	r3, r2
24005558:	d06d      	beq.n	24005636 <HAL_DMA_Abort+0x58a>
2400555a:	687b      	ldr	r3, [r7, #4]
2400555c:	681b      	ldr	r3, [r3, #0]
2400555e:	4a4c      	ldr	r2, [pc, #304]	; (24005690 <HAL_DMA_Abort+0x5e4>)
24005560:	4293      	cmp	r3, r2
24005562:	d068      	beq.n	24005636 <HAL_DMA_Abort+0x58a>
24005564:	687b      	ldr	r3, [r7, #4]
24005566:	681b      	ldr	r3, [r3, #0]
24005568:	4a4a      	ldr	r2, [pc, #296]	; (24005694 <HAL_DMA_Abort+0x5e8>)
2400556a:	4293      	cmp	r3, r2
2400556c:	d063      	beq.n	24005636 <HAL_DMA_Abort+0x58a>
2400556e:	687b      	ldr	r3, [r7, #4]
24005570:	681b      	ldr	r3, [r3, #0]
24005572:	4a49      	ldr	r2, [pc, #292]	; (24005698 <HAL_DMA_Abort+0x5ec>)
24005574:	4293      	cmp	r3, r2
24005576:	d05e      	beq.n	24005636 <HAL_DMA_Abort+0x58a>
24005578:	687b      	ldr	r3, [r7, #4]
2400557a:	681b      	ldr	r3, [r3, #0]
2400557c:	4a47      	ldr	r2, [pc, #284]	; (2400569c <HAL_DMA_Abort+0x5f0>)
2400557e:	4293      	cmp	r3, r2
24005580:	d059      	beq.n	24005636 <HAL_DMA_Abort+0x58a>
24005582:	687b      	ldr	r3, [r7, #4]
24005584:	681b      	ldr	r3, [r3, #0]
24005586:	4a46      	ldr	r2, [pc, #280]	; (240056a0 <HAL_DMA_Abort+0x5f4>)
24005588:	4293      	cmp	r3, r2
2400558a:	d054      	beq.n	24005636 <HAL_DMA_Abort+0x58a>
2400558c:	687b      	ldr	r3, [r7, #4]
2400558e:	681b      	ldr	r3, [r3, #0]
24005590:	4a44      	ldr	r2, [pc, #272]	; (240056a4 <HAL_DMA_Abort+0x5f8>)
24005592:	4293      	cmp	r3, r2
24005594:	d04f      	beq.n	24005636 <HAL_DMA_Abort+0x58a>
24005596:	687b      	ldr	r3, [r7, #4]
24005598:	681b      	ldr	r3, [r3, #0]
2400559a:	4a43      	ldr	r2, [pc, #268]	; (240056a8 <HAL_DMA_Abort+0x5fc>)
2400559c:	4293      	cmp	r3, r2
2400559e:	d04a      	beq.n	24005636 <HAL_DMA_Abort+0x58a>
240055a0:	687b      	ldr	r3, [r7, #4]
240055a2:	681b      	ldr	r3, [r3, #0]
240055a4:	4a41      	ldr	r2, [pc, #260]	; (240056ac <HAL_DMA_Abort+0x600>)
240055a6:	4293      	cmp	r3, r2
240055a8:	d045      	beq.n	24005636 <HAL_DMA_Abort+0x58a>
240055aa:	687b      	ldr	r3, [r7, #4]
240055ac:	681b      	ldr	r3, [r3, #0]
240055ae:	4a40      	ldr	r2, [pc, #256]	; (240056b0 <HAL_DMA_Abort+0x604>)
240055b0:	4293      	cmp	r3, r2
240055b2:	d040      	beq.n	24005636 <HAL_DMA_Abort+0x58a>
240055b4:	687b      	ldr	r3, [r7, #4]
240055b6:	681b      	ldr	r3, [r3, #0]
240055b8:	4a3e      	ldr	r2, [pc, #248]	; (240056b4 <HAL_DMA_Abort+0x608>)
240055ba:	4293      	cmp	r3, r2
240055bc:	d03b      	beq.n	24005636 <HAL_DMA_Abort+0x58a>
240055be:	687b      	ldr	r3, [r7, #4]
240055c0:	681b      	ldr	r3, [r3, #0]
240055c2:	4a3d      	ldr	r2, [pc, #244]	; (240056b8 <HAL_DMA_Abort+0x60c>)
240055c4:	4293      	cmp	r3, r2
240055c6:	d036      	beq.n	24005636 <HAL_DMA_Abort+0x58a>
240055c8:	687b      	ldr	r3, [r7, #4]
240055ca:	681b      	ldr	r3, [r3, #0]
240055cc:	4a3b      	ldr	r2, [pc, #236]	; (240056bc <HAL_DMA_Abort+0x610>)
240055ce:	4293      	cmp	r3, r2
240055d0:	d031      	beq.n	24005636 <HAL_DMA_Abort+0x58a>
240055d2:	687b      	ldr	r3, [r7, #4]
240055d4:	681b      	ldr	r3, [r3, #0]
240055d6:	4a3a      	ldr	r2, [pc, #232]	; (240056c0 <HAL_DMA_Abort+0x614>)
240055d8:	4293      	cmp	r3, r2
240055da:	d02c      	beq.n	24005636 <HAL_DMA_Abort+0x58a>
240055dc:	687b      	ldr	r3, [r7, #4]
240055de:	681b      	ldr	r3, [r3, #0]
240055e0:	4a38      	ldr	r2, [pc, #224]	; (240056c4 <HAL_DMA_Abort+0x618>)
240055e2:	4293      	cmp	r3, r2
240055e4:	d027      	beq.n	24005636 <HAL_DMA_Abort+0x58a>
240055e6:	687b      	ldr	r3, [r7, #4]
240055e8:	681b      	ldr	r3, [r3, #0]
240055ea:	4a37      	ldr	r2, [pc, #220]	; (240056c8 <HAL_DMA_Abort+0x61c>)
240055ec:	4293      	cmp	r3, r2
240055ee:	d022      	beq.n	24005636 <HAL_DMA_Abort+0x58a>
240055f0:	687b      	ldr	r3, [r7, #4]
240055f2:	681b      	ldr	r3, [r3, #0]
240055f4:	4a35      	ldr	r2, [pc, #212]	; (240056cc <HAL_DMA_Abort+0x620>)
240055f6:	4293      	cmp	r3, r2
240055f8:	d01d      	beq.n	24005636 <HAL_DMA_Abort+0x58a>
240055fa:	687b      	ldr	r3, [r7, #4]
240055fc:	681b      	ldr	r3, [r3, #0]
240055fe:	4a34      	ldr	r2, [pc, #208]	; (240056d0 <HAL_DMA_Abort+0x624>)
24005600:	4293      	cmp	r3, r2
24005602:	d018      	beq.n	24005636 <HAL_DMA_Abort+0x58a>
24005604:	687b      	ldr	r3, [r7, #4]
24005606:	681b      	ldr	r3, [r3, #0]
24005608:	4a32      	ldr	r2, [pc, #200]	; (240056d4 <HAL_DMA_Abort+0x628>)
2400560a:	4293      	cmp	r3, r2
2400560c:	d013      	beq.n	24005636 <HAL_DMA_Abort+0x58a>
2400560e:	687b      	ldr	r3, [r7, #4]
24005610:	681b      	ldr	r3, [r3, #0]
24005612:	4a31      	ldr	r2, [pc, #196]	; (240056d8 <HAL_DMA_Abort+0x62c>)
24005614:	4293      	cmp	r3, r2
24005616:	d00e      	beq.n	24005636 <HAL_DMA_Abort+0x58a>
24005618:	687b      	ldr	r3, [r7, #4]
2400561a:	681b      	ldr	r3, [r3, #0]
2400561c:	4a2f      	ldr	r2, [pc, #188]	; (240056dc <HAL_DMA_Abort+0x630>)
2400561e:	4293      	cmp	r3, r2
24005620:	d009      	beq.n	24005636 <HAL_DMA_Abort+0x58a>
24005622:	687b      	ldr	r3, [r7, #4]
24005624:	681b      	ldr	r3, [r3, #0]
24005626:	4a2e      	ldr	r2, [pc, #184]	; (240056e0 <HAL_DMA_Abort+0x634>)
24005628:	4293      	cmp	r3, r2
2400562a:	d004      	beq.n	24005636 <HAL_DMA_Abort+0x58a>
2400562c:	687b      	ldr	r3, [r7, #4]
2400562e:	681b      	ldr	r3, [r3, #0]
24005630:	4a2c      	ldr	r2, [pc, #176]	; (240056e4 <HAL_DMA_Abort+0x638>)
24005632:	4293      	cmp	r3, r2
24005634:	d101      	bne.n	2400563a <HAL_DMA_Abort+0x58e>
24005636:	2301      	movs	r3, #1
24005638:	e000      	b.n	2400563c <HAL_DMA_Abort+0x590>
2400563a:	2300      	movs	r3, #0
2400563c:	2b00      	cmp	r3, #0
2400563e:	d015      	beq.n	2400566c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
24005640:	687b      	ldr	r3, [r7, #4]
24005642:	6e5b      	ldr	r3, [r3, #100]	; 0x64
24005644:	687a      	ldr	r2, [r7, #4]
24005646:	6e92      	ldr	r2, [r2, #104]	; 0x68
24005648:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
2400564a:	687b      	ldr	r3, [r7, #4]
2400564c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
2400564e:	2b00      	cmp	r3, #0
24005650:	d00c      	beq.n	2400566c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
24005652:	687b      	ldr	r3, [r7, #4]
24005654:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24005656:	681a      	ldr	r2, [r3, #0]
24005658:	687b      	ldr	r3, [r7, #4]
2400565a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
2400565c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
24005660:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
24005662:	687b      	ldr	r3, [r7, #4]
24005664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24005666:	687a      	ldr	r2, [r7, #4]
24005668:	6f52      	ldr	r2, [r2, #116]	; 0x74
2400566a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
2400566c:	687b      	ldr	r3, [r7, #4]
2400566e:	2201      	movs	r2, #1
24005670:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
24005674:	687b      	ldr	r3, [r7, #4]
24005676:	2200      	movs	r2, #0
24005678:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
2400567c:	2300      	movs	r3, #0
}
2400567e:	4618      	mov	r0, r3
24005680:	3718      	adds	r7, #24
24005682:	46bd      	mov	sp, r7
24005684:	bd80      	pop	{r7, pc}
24005686:	bf00      	nop
24005688:	40020010 	.word	0x40020010
2400568c:	40020028 	.word	0x40020028
24005690:	40020040 	.word	0x40020040
24005694:	40020058 	.word	0x40020058
24005698:	40020070 	.word	0x40020070
2400569c:	40020088 	.word	0x40020088
240056a0:	400200a0 	.word	0x400200a0
240056a4:	400200b8 	.word	0x400200b8
240056a8:	40020410 	.word	0x40020410
240056ac:	40020428 	.word	0x40020428
240056b0:	40020440 	.word	0x40020440
240056b4:	40020458 	.word	0x40020458
240056b8:	40020470 	.word	0x40020470
240056bc:	40020488 	.word	0x40020488
240056c0:	400204a0 	.word	0x400204a0
240056c4:	400204b8 	.word	0x400204b8
240056c8:	58025408 	.word	0x58025408
240056cc:	5802541c 	.word	0x5802541c
240056d0:	58025430 	.word	0x58025430
240056d4:	58025444 	.word	0x58025444
240056d8:	58025458 	.word	0x58025458
240056dc:	5802546c 	.word	0x5802546c
240056e0:	58025480 	.word	0x58025480
240056e4:	58025494 	.word	0x58025494

240056e8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
240056e8:	b580      	push	{r7, lr}
240056ea:	b084      	sub	sp, #16
240056ec:	af00      	add	r7, sp, #0
240056ee:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
240056f0:	687b      	ldr	r3, [r7, #4]
240056f2:	2b00      	cmp	r3, #0
240056f4:	d101      	bne.n	240056fa <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
240056f6:	2301      	movs	r3, #1
240056f8:	e237      	b.n	24005b6a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
240056fa:	687b      	ldr	r3, [r7, #4]
240056fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
24005700:	b2db      	uxtb	r3, r3
24005702:	2b02      	cmp	r3, #2
24005704:	d004      	beq.n	24005710 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
24005706:	687b      	ldr	r3, [r7, #4]
24005708:	2280      	movs	r2, #128	; 0x80
2400570a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
2400570c:	2301      	movs	r3, #1
2400570e:	e22c      	b.n	24005b6a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24005710:	687b      	ldr	r3, [r7, #4]
24005712:	681b      	ldr	r3, [r3, #0]
24005714:	4a5c      	ldr	r2, [pc, #368]	; (24005888 <HAL_DMA_Abort_IT+0x1a0>)
24005716:	4293      	cmp	r3, r2
24005718:	d04a      	beq.n	240057b0 <HAL_DMA_Abort_IT+0xc8>
2400571a:	687b      	ldr	r3, [r7, #4]
2400571c:	681b      	ldr	r3, [r3, #0]
2400571e:	4a5b      	ldr	r2, [pc, #364]	; (2400588c <HAL_DMA_Abort_IT+0x1a4>)
24005720:	4293      	cmp	r3, r2
24005722:	d045      	beq.n	240057b0 <HAL_DMA_Abort_IT+0xc8>
24005724:	687b      	ldr	r3, [r7, #4]
24005726:	681b      	ldr	r3, [r3, #0]
24005728:	4a59      	ldr	r2, [pc, #356]	; (24005890 <HAL_DMA_Abort_IT+0x1a8>)
2400572a:	4293      	cmp	r3, r2
2400572c:	d040      	beq.n	240057b0 <HAL_DMA_Abort_IT+0xc8>
2400572e:	687b      	ldr	r3, [r7, #4]
24005730:	681b      	ldr	r3, [r3, #0]
24005732:	4a58      	ldr	r2, [pc, #352]	; (24005894 <HAL_DMA_Abort_IT+0x1ac>)
24005734:	4293      	cmp	r3, r2
24005736:	d03b      	beq.n	240057b0 <HAL_DMA_Abort_IT+0xc8>
24005738:	687b      	ldr	r3, [r7, #4]
2400573a:	681b      	ldr	r3, [r3, #0]
2400573c:	4a56      	ldr	r2, [pc, #344]	; (24005898 <HAL_DMA_Abort_IT+0x1b0>)
2400573e:	4293      	cmp	r3, r2
24005740:	d036      	beq.n	240057b0 <HAL_DMA_Abort_IT+0xc8>
24005742:	687b      	ldr	r3, [r7, #4]
24005744:	681b      	ldr	r3, [r3, #0]
24005746:	4a55      	ldr	r2, [pc, #340]	; (2400589c <HAL_DMA_Abort_IT+0x1b4>)
24005748:	4293      	cmp	r3, r2
2400574a:	d031      	beq.n	240057b0 <HAL_DMA_Abort_IT+0xc8>
2400574c:	687b      	ldr	r3, [r7, #4]
2400574e:	681b      	ldr	r3, [r3, #0]
24005750:	4a53      	ldr	r2, [pc, #332]	; (240058a0 <HAL_DMA_Abort_IT+0x1b8>)
24005752:	4293      	cmp	r3, r2
24005754:	d02c      	beq.n	240057b0 <HAL_DMA_Abort_IT+0xc8>
24005756:	687b      	ldr	r3, [r7, #4]
24005758:	681b      	ldr	r3, [r3, #0]
2400575a:	4a52      	ldr	r2, [pc, #328]	; (240058a4 <HAL_DMA_Abort_IT+0x1bc>)
2400575c:	4293      	cmp	r3, r2
2400575e:	d027      	beq.n	240057b0 <HAL_DMA_Abort_IT+0xc8>
24005760:	687b      	ldr	r3, [r7, #4]
24005762:	681b      	ldr	r3, [r3, #0]
24005764:	4a50      	ldr	r2, [pc, #320]	; (240058a8 <HAL_DMA_Abort_IT+0x1c0>)
24005766:	4293      	cmp	r3, r2
24005768:	d022      	beq.n	240057b0 <HAL_DMA_Abort_IT+0xc8>
2400576a:	687b      	ldr	r3, [r7, #4]
2400576c:	681b      	ldr	r3, [r3, #0]
2400576e:	4a4f      	ldr	r2, [pc, #316]	; (240058ac <HAL_DMA_Abort_IT+0x1c4>)
24005770:	4293      	cmp	r3, r2
24005772:	d01d      	beq.n	240057b0 <HAL_DMA_Abort_IT+0xc8>
24005774:	687b      	ldr	r3, [r7, #4]
24005776:	681b      	ldr	r3, [r3, #0]
24005778:	4a4d      	ldr	r2, [pc, #308]	; (240058b0 <HAL_DMA_Abort_IT+0x1c8>)
2400577a:	4293      	cmp	r3, r2
2400577c:	d018      	beq.n	240057b0 <HAL_DMA_Abort_IT+0xc8>
2400577e:	687b      	ldr	r3, [r7, #4]
24005780:	681b      	ldr	r3, [r3, #0]
24005782:	4a4c      	ldr	r2, [pc, #304]	; (240058b4 <HAL_DMA_Abort_IT+0x1cc>)
24005784:	4293      	cmp	r3, r2
24005786:	d013      	beq.n	240057b0 <HAL_DMA_Abort_IT+0xc8>
24005788:	687b      	ldr	r3, [r7, #4]
2400578a:	681b      	ldr	r3, [r3, #0]
2400578c:	4a4a      	ldr	r2, [pc, #296]	; (240058b8 <HAL_DMA_Abort_IT+0x1d0>)
2400578e:	4293      	cmp	r3, r2
24005790:	d00e      	beq.n	240057b0 <HAL_DMA_Abort_IT+0xc8>
24005792:	687b      	ldr	r3, [r7, #4]
24005794:	681b      	ldr	r3, [r3, #0]
24005796:	4a49      	ldr	r2, [pc, #292]	; (240058bc <HAL_DMA_Abort_IT+0x1d4>)
24005798:	4293      	cmp	r3, r2
2400579a:	d009      	beq.n	240057b0 <HAL_DMA_Abort_IT+0xc8>
2400579c:	687b      	ldr	r3, [r7, #4]
2400579e:	681b      	ldr	r3, [r3, #0]
240057a0:	4a47      	ldr	r2, [pc, #284]	; (240058c0 <HAL_DMA_Abort_IT+0x1d8>)
240057a2:	4293      	cmp	r3, r2
240057a4:	d004      	beq.n	240057b0 <HAL_DMA_Abort_IT+0xc8>
240057a6:	687b      	ldr	r3, [r7, #4]
240057a8:	681b      	ldr	r3, [r3, #0]
240057aa:	4a46      	ldr	r2, [pc, #280]	; (240058c4 <HAL_DMA_Abort_IT+0x1dc>)
240057ac:	4293      	cmp	r3, r2
240057ae:	d101      	bne.n	240057b4 <HAL_DMA_Abort_IT+0xcc>
240057b0:	2301      	movs	r3, #1
240057b2:	e000      	b.n	240057b6 <HAL_DMA_Abort_IT+0xce>
240057b4:	2300      	movs	r3, #0
240057b6:	2b00      	cmp	r3, #0
240057b8:	f000 8086 	beq.w	240058c8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
240057bc:	687b      	ldr	r3, [r7, #4]
240057be:	2204      	movs	r2, #4
240057c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
240057c4:	687b      	ldr	r3, [r7, #4]
240057c6:	681b      	ldr	r3, [r3, #0]
240057c8:	4a2f      	ldr	r2, [pc, #188]	; (24005888 <HAL_DMA_Abort_IT+0x1a0>)
240057ca:	4293      	cmp	r3, r2
240057cc:	d04a      	beq.n	24005864 <HAL_DMA_Abort_IT+0x17c>
240057ce:	687b      	ldr	r3, [r7, #4]
240057d0:	681b      	ldr	r3, [r3, #0]
240057d2:	4a2e      	ldr	r2, [pc, #184]	; (2400588c <HAL_DMA_Abort_IT+0x1a4>)
240057d4:	4293      	cmp	r3, r2
240057d6:	d045      	beq.n	24005864 <HAL_DMA_Abort_IT+0x17c>
240057d8:	687b      	ldr	r3, [r7, #4]
240057da:	681b      	ldr	r3, [r3, #0]
240057dc:	4a2c      	ldr	r2, [pc, #176]	; (24005890 <HAL_DMA_Abort_IT+0x1a8>)
240057de:	4293      	cmp	r3, r2
240057e0:	d040      	beq.n	24005864 <HAL_DMA_Abort_IT+0x17c>
240057e2:	687b      	ldr	r3, [r7, #4]
240057e4:	681b      	ldr	r3, [r3, #0]
240057e6:	4a2b      	ldr	r2, [pc, #172]	; (24005894 <HAL_DMA_Abort_IT+0x1ac>)
240057e8:	4293      	cmp	r3, r2
240057ea:	d03b      	beq.n	24005864 <HAL_DMA_Abort_IT+0x17c>
240057ec:	687b      	ldr	r3, [r7, #4]
240057ee:	681b      	ldr	r3, [r3, #0]
240057f0:	4a29      	ldr	r2, [pc, #164]	; (24005898 <HAL_DMA_Abort_IT+0x1b0>)
240057f2:	4293      	cmp	r3, r2
240057f4:	d036      	beq.n	24005864 <HAL_DMA_Abort_IT+0x17c>
240057f6:	687b      	ldr	r3, [r7, #4]
240057f8:	681b      	ldr	r3, [r3, #0]
240057fa:	4a28      	ldr	r2, [pc, #160]	; (2400589c <HAL_DMA_Abort_IT+0x1b4>)
240057fc:	4293      	cmp	r3, r2
240057fe:	d031      	beq.n	24005864 <HAL_DMA_Abort_IT+0x17c>
24005800:	687b      	ldr	r3, [r7, #4]
24005802:	681b      	ldr	r3, [r3, #0]
24005804:	4a26      	ldr	r2, [pc, #152]	; (240058a0 <HAL_DMA_Abort_IT+0x1b8>)
24005806:	4293      	cmp	r3, r2
24005808:	d02c      	beq.n	24005864 <HAL_DMA_Abort_IT+0x17c>
2400580a:	687b      	ldr	r3, [r7, #4]
2400580c:	681b      	ldr	r3, [r3, #0]
2400580e:	4a25      	ldr	r2, [pc, #148]	; (240058a4 <HAL_DMA_Abort_IT+0x1bc>)
24005810:	4293      	cmp	r3, r2
24005812:	d027      	beq.n	24005864 <HAL_DMA_Abort_IT+0x17c>
24005814:	687b      	ldr	r3, [r7, #4]
24005816:	681b      	ldr	r3, [r3, #0]
24005818:	4a23      	ldr	r2, [pc, #140]	; (240058a8 <HAL_DMA_Abort_IT+0x1c0>)
2400581a:	4293      	cmp	r3, r2
2400581c:	d022      	beq.n	24005864 <HAL_DMA_Abort_IT+0x17c>
2400581e:	687b      	ldr	r3, [r7, #4]
24005820:	681b      	ldr	r3, [r3, #0]
24005822:	4a22      	ldr	r2, [pc, #136]	; (240058ac <HAL_DMA_Abort_IT+0x1c4>)
24005824:	4293      	cmp	r3, r2
24005826:	d01d      	beq.n	24005864 <HAL_DMA_Abort_IT+0x17c>
24005828:	687b      	ldr	r3, [r7, #4]
2400582a:	681b      	ldr	r3, [r3, #0]
2400582c:	4a20      	ldr	r2, [pc, #128]	; (240058b0 <HAL_DMA_Abort_IT+0x1c8>)
2400582e:	4293      	cmp	r3, r2
24005830:	d018      	beq.n	24005864 <HAL_DMA_Abort_IT+0x17c>
24005832:	687b      	ldr	r3, [r7, #4]
24005834:	681b      	ldr	r3, [r3, #0]
24005836:	4a1f      	ldr	r2, [pc, #124]	; (240058b4 <HAL_DMA_Abort_IT+0x1cc>)
24005838:	4293      	cmp	r3, r2
2400583a:	d013      	beq.n	24005864 <HAL_DMA_Abort_IT+0x17c>
2400583c:	687b      	ldr	r3, [r7, #4]
2400583e:	681b      	ldr	r3, [r3, #0]
24005840:	4a1d      	ldr	r2, [pc, #116]	; (240058b8 <HAL_DMA_Abort_IT+0x1d0>)
24005842:	4293      	cmp	r3, r2
24005844:	d00e      	beq.n	24005864 <HAL_DMA_Abort_IT+0x17c>
24005846:	687b      	ldr	r3, [r7, #4]
24005848:	681b      	ldr	r3, [r3, #0]
2400584a:	4a1c      	ldr	r2, [pc, #112]	; (240058bc <HAL_DMA_Abort_IT+0x1d4>)
2400584c:	4293      	cmp	r3, r2
2400584e:	d009      	beq.n	24005864 <HAL_DMA_Abort_IT+0x17c>
24005850:	687b      	ldr	r3, [r7, #4]
24005852:	681b      	ldr	r3, [r3, #0]
24005854:	4a1a      	ldr	r2, [pc, #104]	; (240058c0 <HAL_DMA_Abort_IT+0x1d8>)
24005856:	4293      	cmp	r3, r2
24005858:	d004      	beq.n	24005864 <HAL_DMA_Abort_IT+0x17c>
2400585a:	687b      	ldr	r3, [r7, #4]
2400585c:	681b      	ldr	r3, [r3, #0]
2400585e:	4a19      	ldr	r2, [pc, #100]	; (240058c4 <HAL_DMA_Abort_IT+0x1dc>)
24005860:	4293      	cmp	r3, r2
24005862:	d108      	bne.n	24005876 <HAL_DMA_Abort_IT+0x18e>
24005864:	687b      	ldr	r3, [r7, #4]
24005866:	681b      	ldr	r3, [r3, #0]
24005868:	681a      	ldr	r2, [r3, #0]
2400586a:	687b      	ldr	r3, [r7, #4]
2400586c:	681b      	ldr	r3, [r3, #0]
2400586e:	f022 0201 	bic.w	r2, r2, #1
24005872:	601a      	str	r2, [r3, #0]
24005874:	e178      	b.n	24005b68 <HAL_DMA_Abort_IT+0x480>
24005876:	687b      	ldr	r3, [r7, #4]
24005878:	681b      	ldr	r3, [r3, #0]
2400587a:	681a      	ldr	r2, [r3, #0]
2400587c:	687b      	ldr	r3, [r7, #4]
2400587e:	681b      	ldr	r3, [r3, #0]
24005880:	f022 0201 	bic.w	r2, r2, #1
24005884:	601a      	str	r2, [r3, #0]
24005886:	e16f      	b.n	24005b68 <HAL_DMA_Abort_IT+0x480>
24005888:	40020010 	.word	0x40020010
2400588c:	40020028 	.word	0x40020028
24005890:	40020040 	.word	0x40020040
24005894:	40020058 	.word	0x40020058
24005898:	40020070 	.word	0x40020070
2400589c:	40020088 	.word	0x40020088
240058a0:	400200a0 	.word	0x400200a0
240058a4:	400200b8 	.word	0x400200b8
240058a8:	40020410 	.word	0x40020410
240058ac:	40020428 	.word	0x40020428
240058b0:	40020440 	.word	0x40020440
240058b4:	40020458 	.word	0x40020458
240058b8:	40020470 	.word	0x40020470
240058bc:	40020488 	.word	0x40020488
240058c0:	400204a0 	.word	0x400204a0
240058c4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
240058c8:	687b      	ldr	r3, [r7, #4]
240058ca:	681b      	ldr	r3, [r3, #0]
240058cc:	681a      	ldr	r2, [r3, #0]
240058ce:	687b      	ldr	r3, [r7, #4]
240058d0:	681b      	ldr	r3, [r3, #0]
240058d2:	f022 020e 	bic.w	r2, r2, #14
240058d6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
240058d8:	687b      	ldr	r3, [r7, #4]
240058da:	681b      	ldr	r3, [r3, #0]
240058dc:	4a6c      	ldr	r2, [pc, #432]	; (24005a90 <HAL_DMA_Abort_IT+0x3a8>)
240058de:	4293      	cmp	r3, r2
240058e0:	d04a      	beq.n	24005978 <HAL_DMA_Abort_IT+0x290>
240058e2:	687b      	ldr	r3, [r7, #4]
240058e4:	681b      	ldr	r3, [r3, #0]
240058e6:	4a6b      	ldr	r2, [pc, #428]	; (24005a94 <HAL_DMA_Abort_IT+0x3ac>)
240058e8:	4293      	cmp	r3, r2
240058ea:	d045      	beq.n	24005978 <HAL_DMA_Abort_IT+0x290>
240058ec:	687b      	ldr	r3, [r7, #4]
240058ee:	681b      	ldr	r3, [r3, #0]
240058f0:	4a69      	ldr	r2, [pc, #420]	; (24005a98 <HAL_DMA_Abort_IT+0x3b0>)
240058f2:	4293      	cmp	r3, r2
240058f4:	d040      	beq.n	24005978 <HAL_DMA_Abort_IT+0x290>
240058f6:	687b      	ldr	r3, [r7, #4]
240058f8:	681b      	ldr	r3, [r3, #0]
240058fa:	4a68      	ldr	r2, [pc, #416]	; (24005a9c <HAL_DMA_Abort_IT+0x3b4>)
240058fc:	4293      	cmp	r3, r2
240058fe:	d03b      	beq.n	24005978 <HAL_DMA_Abort_IT+0x290>
24005900:	687b      	ldr	r3, [r7, #4]
24005902:	681b      	ldr	r3, [r3, #0]
24005904:	4a66      	ldr	r2, [pc, #408]	; (24005aa0 <HAL_DMA_Abort_IT+0x3b8>)
24005906:	4293      	cmp	r3, r2
24005908:	d036      	beq.n	24005978 <HAL_DMA_Abort_IT+0x290>
2400590a:	687b      	ldr	r3, [r7, #4]
2400590c:	681b      	ldr	r3, [r3, #0]
2400590e:	4a65      	ldr	r2, [pc, #404]	; (24005aa4 <HAL_DMA_Abort_IT+0x3bc>)
24005910:	4293      	cmp	r3, r2
24005912:	d031      	beq.n	24005978 <HAL_DMA_Abort_IT+0x290>
24005914:	687b      	ldr	r3, [r7, #4]
24005916:	681b      	ldr	r3, [r3, #0]
24005918:	4a63      	ldr	r2, [pc, #396]	; (24005aa8 <HAL_DMA_Abort_IT+0x3c0>)
2400591a:	4293      	cmp	r3, r2
2400591c:	d02c      	beq.n	24005978 <HAL_DMA_Abort_IT+0x290>
2400591e:	687b      	ldr	r3, [r7, #4]
24005920:	681b      	ldr	r3, [r3, #0]
24005922:	4a62      	ldr	r2, [pc, #392]	; (24005aac <HAL_DMA_Abort_IT+0x3c4>)
24005924:	4293      	cmp	r3, r2
24005926:	d027      	beq.n	24005978 <HAL_DMA_Abort_IT+0x290>
24005928:	687b      	ldr	r3, [r7, #4]
2400592a:	681b      	ldr	r3, [r3, #0]
2400592c:	4a60      	ldr	r2, [pc, #384]	; (24005ab0 <HAL_DMA_Abort_IT+0x3c8>)
2400592e:	4293      	cmp	r3, r2
24005930:	d022      	beq.n	24005978 <HAL_DMA_Abort_IT+0x290>
24005932:	687b      	ldr	r3, [r7, #4]
24005934:	681b      	ldr	r3, [r3, #0]
24005936:	4a5f      	ldr	r2, [pc, #380]	; (24005ab4 <HAL_DMA_Abort_IT+0x3cc>)
24005938:	4293      	cmp	r3, r2
2400593a:	d01d      	beq.n	24005978 <HAL_DMA_Abort_IT+0x290>
2400593c:	687b      	ldr	r3, [r7, #4]
2400593e:	681b      	ldr	r3, [r3, #0]
24005940:	4a5d      	ldr	r2, [pc, #372]	; (24005ab8 <HAL_DMA_Abort_IT+0x3d0>)
24005942:	4293      	cmp	r3, r2
24005944:	d018      	beq.n	24005978 <HAL_DMA_Abort_IT+0x290>
24005946:	687b      	ldr	r3, [r7, #4]
24005948:	681b      	ldr	r3, [r3, #0]
2400594a:	4a5c      	ldr	r2, [pc, #368]	; (24005abc <HAL_DMA_Abort_IT+0x3d4>)
2400594c:	4293      	cmp	r3, r2
2400594e:	d013      	beq.n	24005978 <HAL_DMA_Abort_IT+0x290>
24005950:	687b      	ldr	r3, [r7, #4]
24005952:	681b      	ldr	r3, [r3, #0]
24005954:	4a5a      	ldr	r2, [pc, #360]	; (24005ac0 <HAL_DMA_Abort_IT+0x3d8>)
24005956:	4293      	cmp	r3, r2
24005958:	d00e      	beq.n	24005978 <HAL_DMA_Abort_IT+0x290>
2400595a:	687b      	ldr	r3, [r7, #4]
2400595c:	681b      	ldr	r3, [r3, #0]
2400595e:	4a59      	ldr	r2, [pc, #356]	; (24005ac4 <HAL_DMA_Abort_IT+0x3dc>)
24005960:	4293      	cmp	r3, r2
24005962:	d009      	beq.n	24005978 <HAL_DMA_Abort_IT+0x290>
24005964:	687b      	ldr	r3, [r7, #4]
24005966:	681b      	ldr	r3, [r3, #0]
24005968:	4a57      	ldr	r2, [pc, #348]	; (24005ac8 <HAL_DMA_Abort_IT+0x3e0>)
2400596a:	4293      	cmp	r3, r2
2400596c:	d004      	beq.n	24005978 <HAL_DMA_Abort_IT+0x290>
2400596e:	687b      	ldr	r3, [r7, #4]
24005970:	681b      	ldr	r3, [r3, #0]
24005972:	4a56      	ldr	r2, [pc, #344]	; (24005acc <HAL_DMA_Abort_IT+0x3e4>)
24005974:	4293      	cmp	r3, r2
24005976:	d108      	bne.n	2400598a <HAL_DMA_Abort_IT+0x2a2>
24005978:	687b      	ldr	r3, [r7, #4]
2400597a:	681b      	ldr	r3, [r3, #0]
2400597c:	681a      	ldr	r2, [r3, #0]
2400597e:	687b      	ldr	r3, [r7, #4]
24005980:	681b      	ldr	r3, [r3, #0]
24005982:	f022 0201 	bic.w	r2, r2, #1
24005986:	601a      	str	r2, [r3, #0]
24005988:	e007      	b.n	2400599a <HAL_DMA_Abort_IT+0x2b2>
2400598a:	687b      	ldr	r3, [r7, #4]
2400598c:	681b      	ldr	r3, [r3, #0]
2400598e:	681a      	ldr	r2, [r3, #0]
24005990:	687b      	ldr	r3, [r7, #4]
24005992:	681b      	ldr	r3, [r3, #0]
24005994:	f022 0201 	bic.w	r2, r2, #1
24005998:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
2400599a:	687b      	ldr	r3, [r7, #4]
2400599c:	681b      	ldr	r3, [r3, #0]
2400599e:	4a3c      	ldr	r2, [pc, #240]	; (24005a90 <HAL_DMA_Abort_IT+0x3a8>)
240059a0:	4293      	cmp	r3, r2
240059a2:	d072      	beq.n	24005a8a <HAL_DMA_Abort_IT+0x3a2>
240059a4:	687b      	ldr	r3, [r7, #4]
240059a6:	681b      	ldr	r3, [r3, #0]
240059a8:	4a3a      	ldr	r2, [pc, #232]	; (24005a94 <HAL_DMA_Abort_IT+0x3ac>)
240059aa:	4293      	cmp	r3, r2
240059ac:	d06d      	beq.n	24005a8a <HAL_DMA_Abort_IT+0x3a2>
240059ae:	687b      	ldr	r3, [r7, #4]
240059b0:	681b      	ldr	r3, [r3, #0]
240059b2:	4a39      	ldr	r2, [pc, #228]	; (24005a98 <HAL_DMA_Abort_IT+0x3b0>)
240059b4:	4293      	cmp	r3, r2
240059b6:	d068      	beq.n	24005a8a <HAL_DMA_Abort_IT+0x3a2>
240059b8:	687b      	ldr	r3, [r7, #4]
240059ba:	681b      	ldr	r3, [r3, #0]
240059bc:	4a37      	ldr	r2, [pc, #220]	; (24005a9c <HAL_DMA_Abort_IT+0x3b4>)
240059be:	4293      	cmp	r3, r2
240059c0:	d063      	beq.n	24005a8a <HAL_DMA_Abort_IT+0x3a2>
240059c2:	687b      	ldr	r3, [r7, #4]
240059c4:	681b      	ldr	r3, [r3, #0]
240059c6:	4a36      	ldr	r2, [pc, #216]	; (24005aa0 <HAL_DMA_Abort_IT+0x3b8>)
240059c8:	4293      	cmp	r3, r2
240059ca:	d05e      	beq.n	24005a8a <HAL_DMA_Abort_IT+0x3a2>
240059cc:	687b      	ldr	r3, [r7, #4]
240059ce:	681b      	ldr	r3, [r3, #0]
240059d0:	4a34      	ldr	r2, [pc, #208]	; (24005aa4 <HAL_DMA_Abort_IT+0x3bc>)
240059d2:	4293      	cmp	r3, r2
240059d4:	d059      	beq.n	24005a8a <HAL_DMA_Abort_IT+0x3a2>
240059d6:	687b      	ldr	r3, [r7, #4]
240059d8:	681b      	ldr	r3, [r3, #0]
240059da:	4a33      	ldr	r2, [pc, #204]	; (24005aa8 <HAL_DMA_Abort_IT+0x3c0>)
240059dc:	4293      	cmp	r3, r2
240059de:	d054      	beq.n	24005a8a <HAL_DMA_Abort_IT+0x3a2>
240059e0:	687b      	ldr	r3, [r7, #4]
240059e2:	681b      	ldr	r3, [r3, #0]
240059e4:	4a31      	ldr	r2, [pc, #196]	; (24005aac <HAL_DMA_Abort_IT+0x3c4>)
240059e6:	4293      	cmp	r3, r2
240059e8:	d04f      	beq.n	24005a8a <HAL_DMA_Abort_IT+0x3a2>
240059ea:	687b      	ldr	r3, [r7, #4]
240059ec:	681b      	ldr	r3, [r3, #0]
240059ee:	4a30      	ldr	r2, [pc, #192]	; (24005ab0 <HAL_DMA_Abort_IT+0x3c8>)
240059f0:	4293      	cmp	r3, r2
240059f2:	d04a      	beq.n	24005a8a <HAL_DMA_Abort_IT+0x3a2>
240059f4:	687b      	ldr	r3, [r7, #4]
240059f6:	681b      	ldr	r3, [r3, #0]
240059f8:	4a2e      	ldr	r2, [pc, #184]	; (24005ab4 <HAL_DMA_Abort_IT+0x3cc>)
240059fa:	4293      	cmp	r3, r2
240059fc:	d045      	beq.n	24005a8a <HAL_DMA_Abort_IT+0x3a2>
240059fe:	687b      	ldr	r3, [r7, #4]
24005a00:	681b      	ldr	r3, [r3, #0]
24005a02:	4a2d      	ldr	r2, [pc, #180]	; (24005ab8 <HAL_DMA_Abort_IT+0x3d0>)
24005a04:	4293      	cmp	r3, r2
24005a06:	d040      	beq.n	24005a8a <HAL_DMA_Abort_IT+0x3a2>
24005a08:	687b      	ldr	r3, [r7, #4]
24005a0a:	681b      	ldr	r3, [r3, #0]
24005a0c:	4a2b      	ldr	r2, [pc, #172]	; (24005abc <HAL_DMA_Abort_IT+0x3d4>)
24005a0e:	4293      	cmp	r3, r2
24005a10:	d03b      	beq.n	24005a8a <HAL_DMA_Abort_IT+0x3a2>
24005a12:	687b      	ldr	r3, [r7, #4]
24005a14:	681b      	ldr	r3, [r3, #0]
24005a16:	4a2a      	ldr	r2, [pc, #168]	; (24005ac0 <HAL_DMA_Abort_IT+0x3d8>)
24005a18:	4293      	cmp	r3, r2
24005a1a:	d036      	beq.n	24005a8a <HAL_DMA_Abort_IT+0x3a2>
24005a1c:	687b      	ldr	r3, [r7, #4]
24005a1e:	681b      	ldr	r3, [r3, #0]
24005a20:	4a28      	ldr	r2, [pc, #160]	; (24005ac4 <HAL_DMA_Abort_IT+0x3dc>)
24005a22:	4293      	cmp	r3, r2
24005a24:	d031      	beq.n	24005a8a <HAL_DMA_Abort_IT+0x3a2>
24005a26:	687b      	ldr	r3, [r7, #4]
24005a28:	681b      	ldr	r3, [r3, #0]
24005a2a:	4a27      	ldr	r2, [pc, #156]	; (24005ac8 <HAL_DMA_Abort_IT+0x3e0>)
24005a2c:	4293      	cmp	r3, r2
24005a2e:	d02c      	beq.n	24005a8a <HAL_DMA_Abort_IT+0x3a2>
24005a30:	687b      	ldr	r3, [r7, #4]
24005a32:	681b      	ldr	r3, [r3, #0]
24005a34:	4a25      	ldr	r2, [pc, #148]	; (24005acc <HAL_DMA_Abort_IT+0x3e4>)
24005a36:	4293      	cmp	r3, r2
24005a38:	d027      	beq.n	24005a8a <HAL_DMA_Abort_IT+0x3a2>
24005a3a:	687b      	ldr	r3, [r7, #4]
24005a3c:	681b      	ldr	r3, [r3, #0]
24005a3e:	4a24      	ldr	r2, [pc, #144]	; (24005ad0 <HAL_DMA_Abort_IT+0x3e8>)
24005a40:	4293      	cmp	r3, r2
24005a42:	d022      	beq.n	24005a8a <HAL_DMA_Abort_IT+0x3a2>
24005a44:	687b      	ldr	r3, [r7, #4]
24005a46:	681b      	ldr	r3, [r3, #0]
24005a48:	4a22      	ldr	r2, [pc, #136]	; (24005ad4 <HAL_DMA_Abort_IT+0x3ec>)
24005a4a:	4293      	cmp	r3, r2
24005a4c:	d01d      	beq.n	24005a8a <HAL_DMA_Abort_IT+0x3a2>
24005a4e:	687b      	ldr	r3, [r7, #4]
24005a50:	681b      	ldr	r3, [r3, #0]
24005a52:	4a21      	ldr	r2, [pc, #132]	; (24005ad8 <HAL_DMA_Abort_IT+0x3f0>)
24005a54:	4293      	cmp	r3, r2
24005a56:	d018      	beq.n	24005a8a <HAL_DMA_Abort_IT+0x3a2>
24005a58:	687b      	ldr	r3, [r7, #4]
24005a5a:	681b      	ldr	r3, [r3, #0]
24005a5c:	4a1f      	ldr	r2, [pc, #124]	; (24005adc <HAL_DMA_Abort_IT+0x3f4>)
24005a5e:	4293      	cmp	r3, r2
24005a60:	d013      	beq.n	24005a8a <HAL_DMA_Abort_IT+0x3a2>
24005a62:	687b      	ldr	r3, [r7, #4]
24005a64:	681b      	ldr	r3, [r3, #0]
24005a66:	4a1e      	ldr	r2, [pc, #120]	; (24005ae0 <HAL_DMA_Abort_IT+0x3f8>)
24005a68:	4293      	cmp	r3, r2
24005a6a:	d00e      	beq.n	24005a8a <HAL_DMA_Abort_IT+0x3a2>
24005a6c:	687b      	ldr	r3, [r7, #4]
24005a6e:	681b      	ldr	r3, [r3, #0]
24005a70:	4a1c      	ldr	r2, [pc, #112]	; (24005ae4 <HAL_DMA_Abort_IT+0x3fc>)
24005a72:	4293      	cmp	r3, r2
24005a74:	d009      	beq.n	24005a8a <HAL_DMA_Abort_IT+0x3a2>
24005a76:	687b      	ldr	r3, [r7, #4]
24005a78:	681b      	ldr	r3, [r3, #0]
24005a7a:	4a1b      	ldr	r2, [pc, #108]	; (24005ae8 <HAL_DMA_Abort_IT+0x400>)
24005a7c:	4293      	cmp	r3, r2
24005a7e:	d004      	beq.n	24005a8a <HAL_DMA_Abort_IT+0x3a2>
24005a80:	687b      	ldr	r3, [r7, #4]
24005a82:	681b      	ldr	r3, [r3, #0]
24005a84:	4a19      	ldr	r2, [pc, #100]	; (24005aec <HAL_DMA_Abort_IT+0x404>)
24005a86:	4293      	cmp	r3, r2
24005a88:	d132      	bne.n	24005af0 <HAL_DMA_Abort_IT+0x408>
24005a8a:	2301      	movs	r3, #1
24005a8c:	e031      	b.n	24005af2 <HAL_DMA_Abort_IT+0x40a>
24005a8e:	bf00      	nop
24005a90:	40020010 	.word	0x40020010
24005a94:	40020028 	.word	0x40020028
24005a98:	40020040 	.word	0x40020040
24005a9c:	40020058 	.word	0x40020058
24005aa0:	40020070 	.word	0x40020070
24005aa4:	40020088 	.word	0x40020088
24005aa8:	400200a0 	.word	0x400200a0
24005aac:	400200b8 	.word	0x400200b8
24005ab0:	40020410 	.word	0x40020410
24005ab4:	40020428 	.word	0x40020428
24005ab8:	40020440 	.word	0x40020440
24005abc:	40020458 	.word	0x40020458
24005ac0:	40020470 	.word	0x40020470
24005ac4:	40020488 	.word	0x40020488
24005ac8:	400204a0 	.word	0x400204a0
24005acc:	400204b8 	.word	0x400204b8
24005ad0:	58025408 	.word	0x58025408
24005ad4:	5802541c 	.word	0x5802541c
24005ad8:	58025430 	.word	0x58025430
24005adc:	58025444 	.word	0x58025444
24005ae0:	58025458 	.word	0x58025458
24005ae4:	5802546c 	.word	0x5802546c
24005ae8:	58025480 	.word	0x58025480
24005aec:	58025494 	.word	0x58025494
24005af0:	2300      	movs	r3, #0
24005af2:	2b00      	cmp	r3, #0
24005af4:	d028      	beq.n	24005b48 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
24005af6:	687b      	ldr	r3, [r7, #4]
24005af8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24005afa:	681a      	ldr	r2, [r3, #0]
24005afc:	687b      	ldr	r3, [r7, #4]
24005afe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24005b00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
24005b04:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
24005b06:	687b      	ldr	r3, [r7, #4]
24005b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24005b0a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
24005b0c:	687b      	ldr	r3, [r7, #4]
24005b0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24005b10:	f003 031f 	and.w	r3, r3, #31
24005b14:	2201      	movs	r2, #1
24005b16:	409a      	lsls	r2, r3
24005b18:	68fb      	ldr	r3, [r7, #12]
24005b1a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
24005b1c:	687b      	ldr	r3, [r7, #4]
24005b1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
24005b20:	687a      	ldr	r2, [r7, #4]
24005b22:	6e92      	ldr	r2, [r2, #104]	; 0x68
24005b24:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
24005b26:	687b      	ldr	r3, [r7, #4]
24005b28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24005b2a:	2b00      	cmp	r3, #0
24005b2c:	d00c      	beq.n	24005b48 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
24005b2e:	687b      	ldr	r3, [r7, #4]
24005b30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24005b32:	681a      	ldr	r2, [r3, #0]
24005b34:	687b      	ldr	r3, [r7, #4]
24005b36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24005b38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
24005b3c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
24005b3e:	687b      	ldr	r3, [r7, #4]
24005b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24005b42:	687a      	ldr	r2, [r7, #4]
24005b44:	6f52      	ldr	r2, [r2, #116]	; 0x74
24005b46:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
24005b48:	687b      	ldr	r3, [r7, #4]
24005b4a:	2201      	movs	r2, #1
24005b4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
24005b50:	687b      	ldr	r3, [r7, #4]
24005b52:	2200      	movs	r2, #0
24005b54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
24005b58:	687b      	ldr	r3, [r7, #4]
24005b5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24005b5c:	2b00      	cmp	r3, #0
24005b5e:	d003      	beq.n	24005b68 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
24005b60:	687b      	ldr	r3, [r7, #4]
24005b62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24005b64:	6878      	ldr	r0, [r7, #4]
24005b66:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
24005b68:	2300      	movs	r3, #0
}
24005b6a:	4618      	mov	r0, r3
24005b6c:	3710      	adds	r7, #16
24005b6e:	46bd      	mov	sp, r7
24005b70:	bd80      	pop	{r7, pc}
24005b72:	bf00      	nop

24005b74 <HAL_DMA_PollForTransfer>:
  * @note   The HAL_DMA_PollForTransfer API cannot be used in circular and double buffering mode (automatic circular mode).
  * @param  Timeout:       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, HAL_DMA_LevelCompleteTypeDef CompleteLevel, uint32_t Timeout)
{
24005b74:	b580      	push	{r7, lr}
24005b76:	b08a      	sub	sp, #40	; 0x28
24005b78:	af00      	add	r7, sp, #0
24005b7a:	60f8      	str	r0, [r7, #12]
24005b7c:	460b      	mov	r3, r1
24005b7e:	607a      	str	r2, [r7, #4]
24005b80:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
24005b82:	2300      	movs	r3, #0
24005b84:	76fb      	strb	r3, [r7, #27]
  uint32_t cpltlevel_mask;
  uint32_t tickstart = HAL_GetTick();
24005b86:	f7fd fa8d 	bl	240030a4 <HAL_GetTick>
24005b8a:	6178      	str	r0, [r7, #20]
  __IO uint32_t *isr_reg;
  /* IT clear flag register */
  __IO uint32_t *ifcr_reg;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
24005b8c:	68fb      	ldr	r3, [r7, #12]
24005b8e:	2b00      	cmp	r3, #0
24005b90:	d101      	bne.n	24005b96 <HAL_DMA_PollForTransfer+0x22>
  {
    return HAL_ERROR;
24005b92:	2301      	movs	r3, #1
24005b94:	e374      	b.n	24006280 <HAL_DMA_PollForTransfer+0x70c>
  }

  if(HAL_DMA_STATE_BUSY != hdma->State)
24005b96:	68fb      	ldr	r3, [r7, #12]
24005b98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
24005b9c:	b2db      	uxtb	r3, r3
24005b9e:	2b02      	cmp	r3, #2
24005ba0:	d008      	beq.n	24005bb4 <HAL_DMA_PollForTransfer+0x40>
  {
    /* No transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
24005ba2:	68fb      	ldr	r3, [r7, #12]
24005ba4:	2280      	movs	r2, #128	; 0x80
24005ba6:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hdma);
24005ba8:	68fb      	ldr	r3, [r7, #12]
24005baa:	2200      	movs	r2, #0
24005bac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
24005bb0:	2301      	movs	r3, #1
24005bb2:	e365      	b.n	24006280 <HAL_DMA_PollForTransfer+0x70c>
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24005bb4:	68fb      	ldr	r3, [r7, #12]
24005bb6:	681b      	ldr	r3, [r3, #0]
24005bb8:	4a7b      	ldr	r2, [pc, #492]	; (24005da8 <HAL_DMA_PollForTransfer+0x234>)
24005bba:	4293      	cmp	r3, r2
24005bbc:	d04a      	beq.n	24005c54 <HAL_DMA_PollForTransfer+0xe0>
24005bbe:	68fb      	ldr	r3, [r7, #12]
24005bc0:	681b      	ldr	r3, [r3, #0]
24005bc2:	4a7a      	ldr	r2, [pc, #488]	; (24005dac <HAL_DMA_PollForTransfer+0x238>)
24005bc4:	4293      	cmp	r3, r2
24005bc6:	d045      	beq.n	24005c54 <HAL_DMA_PollForTransfer+0xe0>
24005bc8:	68fb      	ldr	r3, [r7, #12]
24005bca:	681b      	ldr	r3, [r3, #0]
24005bcc:	4a78      	ldr	r2, [pc, #480]	; (24005db0 <HAL_DMA_PollForTransfer+0x23c>)
24005bce:	4293      	cmp	r3, r2
24005bd0:	d040      	beq.n	24005c54 <HAL_DMA_PollForTransfer+0xe0>
24005bd2:	68fb      	ldr	r3, [r7, #12]
24005bd4:	681b      	ldr	r3, [r3, #0]
24005bd6:	4a77      	ldr	r2, [pc, #476]	; (24005db4 <HAL_DMA_PollForTransfer+0x240>)
24005bd8:	4293      	cmp	r3, r2
24005bda:	d03b      	beq.n	24005c54 <HAL_DMA_PollForTransfer+0xe0>
24005bdc:	68fb      	ldr	r3, [r7, #12]
24005bde:	681b      	ldr	r3, [r3, #0]
24005be0:	4a75      	ldr	r2, [pc, #468]	; (24005db8 <HAL_DMA_PollForTransfer+0x244>)
24005be2:	4293      	cmp	r3, r2
24005be4:	d036      	beq.n	24005c54 <HAL_DMA_PollForTransfer+0xe0>
24005be6:	68fb      	ldr	r3, [r7, #12]
24005be8:	681b      	ldr	r3, [r3, #0]
24005bea:	4a74      	ldr	r2, [pc, #464]	; (24005dbc <HAL_DMA_PollForTransfer+0x248>)
24005bec:	4293      	cmp	r3, r2
24005bee:	d031      	beq.n	24005c54 <HAL_DMA_PollForTransfer+0xe0>
24005bf0:	68fb      	ldr	r3, [r7, #12]
24005bf2:	681b      	ldr	r3, [r3, #0]
24005bf4:	4a72      	ldr	r2, [pc, #456]	; (24005dc0 <HAL_DMA_PollForTransfer+0x24c>)
24005bf6:	4293      	cmp	r3, r2
24005bf8:	d02c      	beq.n	24005c54 <HAL_DMA_PollForTransfer+0xe0>
24005bfa:	68fb      	ldr	r3, [r7, #12]
24005bfc:	681b      	ldr	r3, [r3, #0]
24005bfe:	4a71      	ldr	r2, [pc, #452]	; (24005dc4 <HAL_DMA_PollForTransfer+0x250>)
24005c00:	4293      	cmp	r3, r2
24005c02:	d027      	beq.n	24005c54 <HAL_DMA_PollForTransfer+0xe0>
24005c04:	68fb      	ldr	r3, [r7, #12]
24005c06:	681b      	ldr	r3, [r3, #0]
24005c08:	4a6f      	ldr	r2, [pc, #444]	; (24005dc8 <HAL_DMA_PollForTransfer+0x254>)
24005c0a:	4293      	cmp	r3, r2
24005c0c:	d022      	beq.n	24005c54 <HAL_DMA_PollForTransfer+0xe0>
24005c0e:	68fb      	ldr	r3, [r7, #12]
24005c10:	681b      	ldr	r3, [r3, #0]
24005c12:	4a6e      	ldr	r2, [pc, #440]	; (24005dcc <HAL_DMA_PollForTransfer+0x258>)
24005c14:	4293      	cmp	r3, r2
24005c16:	d01d      	beq.n	24005c54 <HAL_DMA_PollForTransfer+0xe0>
24005c18:	68fb      	ldr	r3, [r7, #12]
24005c1a:	681b      	ldr	r3, [r3, #0]
24005c1c:	4a6c      	ldr	r2, [pc, #432]	; (24005dd0 <HAL_DMA_PollForTransfer+0x25c>)
24005c1e:	4293      	cmp	r3, r2
24005c20:	d018      	beq.n	24005c54 <HAL_DMA_PollForTransfer+0xe0>
24005c22:	68fb      	ldr	r3, [r7, #12]
24005c24:	681b      	ldr	r3, [r3, #0]
24005c26:	4a6b      	ldr	r2, [pc, #428]	; (24005dd4 <HAL_DMA_PollForTransfer+0x260>)
24005c28:	4293      	cmp	r3, r2
24005c2a:	d013      	beq.n	24005c54 <HAL_DMA_PollForTransfer+0xe0>
24005c2c:	68fb      	ldr	r3, [r7, #12]
24005c2e:	681b      	ldr	r3, [r3, #0]
24005c30:	4a69      	ldr	r2, [pc, #420]	; (24005dd8 <HAL_DMA_PollForTransfer+0x264>)
24005c32:	4293      	cmp	r3, r2
24005c34:	d00e      	beq.n	24005c54 <HAL_DMA_PollForTransfer+0xe0>
24005c36:	68fb      	ldr	r3, [r7, #12]
24005c38:	681b      	ldr	r3, [r3, #0]
24005c3a:	4a68      	ldr	r2, [pc, #416]	; (24005ddc <HAL_DMA_PollForTransfer+0x268>)
24005c3c:	4293      	cmp	r3, r2
24005c3e:	d009      	beq.n	24005c54 <HAL_DMA_PollForTransfer+0xe0>
24005c40:	68fb      	ldr	r3, [r7, #12]
24005c42:	681b      	ldr	r3, [r3, #0]
24005c44:	4a66      	ldr	r2, [pc, #408]	; (24005de0 <HAL_DMA_PollForTransfer+0x26c>)
24005c46:	4293      	cmp	r3, r2
24005c48:	d004      	beq.n	24005c54 <HAL_DMA_PollForTransfer+0xe0>
24005c4a:	68fb      	ldr	r3, [r7, #12]
24005c4c:	681b      	ldr	r3, [r3, #0]
24005c4e:	4a65      	ldr	r2, [pc, #404]	; (24005de4 <HAL_DMA_PollForTransfer+0x270>)
24005c50:	4293      	cmp	r3, r2
24005c52:	d101      	bne.n	24005c58 <HAL_DMA_PollForTransfer+0xe4>
24005c54:	2301      	movs	r3, #1
24005c56:	e000      	b.n	24005c5a <HAL_DMA_PollForTransfer+0xe6>
24005c58:	2300      	movs	r3, #0
24005c5a:	2b00      	cmp	r3, #0
24005c5c:	d028      	beq.n	24005cb0 <HAL_DMA_PollForTransfer+0x13c>
  {
    /* Polling mode not supported in circular mode and double buffering mode */
    if ((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) != 0U)
24005c5e:	68fb      	ldr	r3, [r7, #12]
24005c60:	681b      	ldr	r3, [r3, #0]
24005c62:	681b      	ldr	r3, [r3, #0]
24005c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
24005c68:	2b00      	cmp	r3, #0
24005c6a:	d005      	beq.n	24005c78 <HAL_DMA_PollForTransfer+0x104>
    {
      hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
24005c6c:	68fb      	ldr	r3, [r7, #12]
24005c6e:	f44f 7280 	mov.w	r2, #256	; 0x100
24005c72:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
24005c74:	2301      	movs	r3, #1
24005c76:	e303      	b.n	24006280 <HAL_DMA_PollForTransfer+0x70c>
    }

    /* Get the level transfer complete flag */
    if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
24005c78:	7afb      	ldrb	r3, [r7, #11]
24005c7a:	2b00      	cmp	r3, #0
24005c7c:	d108      	bne.n	24005c90 <HAL_DMA_PollForTransfer+0x11c>
    {
      /* Transfer Complete flag */
      cpltlevel_mask = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
24005c7e:	68fb      	ldr	r3, [r7, #12]
24005c80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24005c82:	f003 031f 	and.w	r3, r3, #31
24005c86:	2220      	movs	r2, #32
24005c88:	fa02 f303 	lsl.w	r3, r2, r3
24005c8c:	627b      	str	r3, [r7, #36]	; 0x24
24005c8e:	e007      	b.n	24005ca0 <HAL_DMA_PollForTransfer+0x12c>
    }
    else
    {
      /* Half Transfer Complete flag */
      cpltlevel_mask = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
24005c90:	68fb      	ldr	r3, [r7, #12]
24005c92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24005c94:	f003 031f 	and.w	r3, r3, #31
24005c98:	2210      	movs	r2, #16
24005c9a:	fa02 f303 	lsl.w	r3, r2, r3
24005c9e:	627b      	str	r3, [r7, #36]	; 0x24
    }

    isr_reg  = &(((DMA_Base_Registers *)hdma->StreamBaseAddress)->ISR);
24005ca0:	68fb      	ldr	r3, [r7, #12]
24005ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24005ca4:	623b      	str	r3, [r7, #32]
    ifcr_reg = &(((DMA_Base_Registers *)hdma->StreamBaseAddress)->IFCR);
24005ca6:	68fb      	ldr	r3, [r7, #12]
24005ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24005caa:	3308      	adds	r3, #8
24005cac:	61fb      	str	r3, [r7, #28]
24005cae:	e1d5      	b.n	2400605c <HAL_DMA_PollForTransfer+0x4e8>
  }
  else /* BDMA channel */
  {
    /* Polling mode not supported in circular mode */
    if ((((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR & BDMA_CCR_CIRC) != 0U)
24005cb0:	68fb      	ldr	r3, [r7, #12]
24005cb2:	681b      	ldr	r3, [r3, #0]
24005cb4:	681b      	ldr	r3, [r3, #0]
24005cb6:	f003 0320 	and.w	r3, r3, #32
24005cba:	2b00      	cmp	r3, #0
24005cbc:	d005      	beq.n	24005cca <HAL_DMA_PollForTransfer+0x156>
    {
      hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
24005cbe:	68fb      	ldr	r3, [r7, #12]
24005cc0:	f44f 7280 	mov.w	r2, #256	; 0x100
24005cc4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
24005cc6:	2301      	movs	r3, #1
24005cc8:	e2da      	b.n	24006280 <HAL_DMA_PollForTransfer+0x70c>
    }

    /* Get the level transfer complete flag */
    if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
24005cca:	7afb      	ldrb	r3, [r7, #11]
24005ccc:	2b00      	cmp	r3, #0
24005cce:	d108      	bne.n	24005ce2 <HAL_DMA_PollForTransfer+0x16e>
    {
      /* Transfer Complete flag */
      cpltlevel_mask = BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU);
24005cd0:	68fb      	ldr	r3, [r7, #12]
24005cd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24005cd4:	f003 031f 	and.w	r3, r3, #31
24005cd8:	2202      	movs	r2, #2
24005cda:	fa02 f303 	lsl.w	r3, r2, r3
24005cde:	627b      	str	r3, [r7, #36]	; 0x24
24005ce0:	e007      	b.n	24005cf2 <HAL_DMA_PollForTransfer+0x17e>
    }
    else
    {
      /* Half Transfer Complete flag */
      cpltlevel_mask = BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU);
24005ce2:	68fb      	ldr	r3, [r7, #12]
24005ce4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24005ce6:	f003 031f 	and.w	r3, r3, #31
24005cea:	2204      	movs	r2, #4
24005cec:	fa02 f303 	lsl.w	r3, r2, r3
24005cf0:	627b      	str	r3, [r7, #36]	; 0x24
    }

    isr_reg  = &(((BDMA_Base_Registers *)hdma->StreamBaseAddress)->ISR);
24005cf2:	68fb      	ldr	r3, [r7, #12]
24005cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24005cf6:	623b      	str	r3, [r7, #32]
    ifcr_reg = &(((BDMA_Base_Registers *)hdma->StreamBaseAddress)->IFCR);
24005cf8:	68fb      	ldr	r3, [r7, #12]
24005cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24005cfc:	3304      	adds	r3, #4
24005cfe:	61fb      	str	r3, [r7, #28]
  }

  while(((*isr_reg) & cpltlevel_mask) == 0U)
24005d00:	e1ac      	b.n	2400605c <HAL_DMA_PollForTransfer+0x4e8>
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24005d02:	68fb      	ldr	r3, [r7, #12]
24005d04:	681b      	ldr	r3, [r3, #0]
24005d06:	4a28      	ldr	r2, [pc, #160]	; (24005da8 <HAL_DMA_PollForTransfer+0x234>)
24005d08:	4293      	cmp	r3, r2
24005d0a:	d04a      	beq.n	24005da2 <HAL_DMA_PollForTransfer+0x22e>
24005d0c:	68fb      	ldr	r3, [r7, #12]
24005d0e:	681b      	ldr	r3, [r3, #0]
24005d10:	4a26      	ldr	r2, [pc, #152]	; (24005dac <HAL_DMA_PollForTransfer+0x238>)
24005d12:	4293      	cmp	r3, r2
24005d14:	d045      	beq.n	24005da2 <HAL_DMA_PollForTransfer+0x22e>
24005d16:	68fb      	ldr	r3, [r7, #12]
24005d18:	681b      	ldr	r3, [r3, #0]
24005d1a:	4a25      	ldr	r2, [pc, #148]	; (24005db0 <HAL_DMA_PollForTransfer+0x23c>)
24005d1c:	4293      	cmp	r3, r2
24005d1e:	d040      	beq.n	24005da2 <HAL_DMA_PollForTransfer+0x22e>
24005d20:	68fb      	ldr	r3, [r7, #12]
24005d22:	681b      	ldr	r3, [r3, #0]
24005d24:	4a23      	ldr	r2, [pc, #140]	; (24005db4 <HAL_DMA_PollForTransfer+0x240>)
24005d26:	4293      	cmp	r3, r2
24005d28:	d03b      	beq.n	24005da2 <HAL_DMA_PollForTransfer+0x22e>
24005d2a:	68fb      	ldr	r3, [r7, #12]
24005d2c:	681b      	ldr	r3, [r3, #0]
24005d2e:	4a22      	ldr	r2, [pc, #136]	; (24005db8 <HAL_DMA_PollForTransfer+0x244>)
24005d30:	4293      	cmp	r3, r2
24005d32:	d036      	beq.n	24005da2 <HAL_DMA_PollForTransfer+0x22e>
24005d34:	68fb      	ldr	r3, [r7, #12]
24005d36:	681b      	ldr	r3, [r3, #0]
24005d38:	4a20      	ldr	r2, [pc, #128]	; (24005dbc <HAL_DMA_PollForTransfer+0x248>)
24005d3a:	4293      	cmp	r3, r2
24005d3c:	d031      	beq.n	24005da2 <HAL_DMA_PollForTransfer+0x22e>
24005d3e:	68fb      	ldr	r3, [r7, #12]
24005d40:	681b      	ldr	r3, [r3, #0]
24005d42:	4a1f      	ldr	r2, [pc, #124]	; (24005dc0 <HAL_DMA_PollForTransfer+0x24c>)
24005d44:	4293      	cmp	r3, r2
24005d46:	d02c      	beq.n	24005da2 <HAL_DMA_PollForTransfer+0x22e>
24005d48:	68fb      	ldr	r3, [r7, #12]
24005d4a:	681b      	ldr	r3, [r3, #0]
24005d4c:	4a1d      	ldr	r2, [pc, #116]	; (24005dc4 <HAL_DMA_PollForTransfer+0x250>)
24005d4e:	4293      	cmp	r3, r2
24005d50:	d027      	beq.n	24005da2 <HAL_DMA_PollForTransfer+0x22e>
24005d52:	68fb      	ldr	r3, [r7, #12]
24005d54:	681b      	ldr	r3, [r3, #0]
24005d56:	4a1c      	ldr	r2, [pc, #112]	; (24005dc8 <HAL_DMA_PollForTransfer+0x254>)
24005d58:	4293      	cmp	r3, r2
24005d5a:	d022      	beq.n	24005da2 <HAL_DMA_PollForTransfer+0x22e>
24005d5c:	68fb      	ldr	r3, [r7, #12]
24005d5e:	681b      	ldr	r3, [r3, #0]
24005d60:	4a1a      	ldr	r2, [pc, #104]	; (24005dcc <HAL_DMA_PollForTransfer+0x258>)
24005d62:	4293      	cmp	r3, r2
24005d64:	d01d      	beq.n	24005da2 <HAL_DMA_PollForTransfer+0x22e>
24005d66:	68fb      	ldr	r3, [r7, #12]
24005d68:	681b      	ldr	r3, [r3, #0]
24005d6a:	4a19      	ldr	r2, [pc, #100]	; (24005dd0 <HAL_DMA_PollForTransfer+0x25c>)
24005d6c:	4293      	cmp	r3, r2
24005d6e:	d018      	beq.n	24005da2 <HAL_DMA_PollForTransfer+0x22e>
24005d70:	68fb      	ldr	r3, [r7, #12]
24005d72:	681b      	ldr	r3, [r3, #0]
24005d74:	4a17      	ldr	r2, [pc, #92]	; (24005dd4 <HAL_DMA_PollForTransfer+0x260>)
24005d76:	4293      	cmp	r3, r2
24005d78:	d013      	beq.n	24005da2 <HAL_DMA_PollForTransfer+0x22e>
24005d7a:	68fb      	ldr	r3, [r7, #12]
24005d7c:	681b      	ldr	r3, [r3, #0]
24005d7e:	4a16      	ldr	r2, [pc, #88]	; (24005dd8 <HAL_DMA_PollForTransfer+0x264>)
24005d80:	4293      	cmp	r3, r2
24005d82:	d00e      	beq.n	24005da2 <HAL_DMA_PollForTransfer+0x22e>
24005d84:	68fb      	ldr	r3, [r7, #12]
24005d86:	681b      	ldr	r3, [r3, #0]
24005d88:	4a14      	ldr	r2, [pc, #80]	; (24005ddc <HAL_DMA_PollForTransfer+0x268>)
24005d8a:	4293      	cmp	r3, r2
24005d8c:	d009      	beq.n	24005da2 <HAL_DMA_PollForTransfer+0x22e>
24005d8e:	68fb      	ldr	r3, [r7, #12]
24005d90:	681b      	ldr	r3, [r3, #0]
24005d92:	4a13      	ldr	r2, [pc, #76]	; (24005de0 <HAL_DMA_PollForTransfer+0x26c>)
24005d94:	4293      	cmp	r3, r2
24005d96:	d004      	beq.n	24005da2 <HAL_DMA_PollForTransfer+0x22e>
24005d98:	68fb      	ldr	r3, [r7, #12]
24005d9a:	681b      	ldr	r3, [r3, #0]
24005d9c:	4a11      	ldr	r2, [pc, #68]	; (24005de4 <HAL_DMA_PollForTransfer+0x270>)
24005d9e:	4293      	cmp	r3, r2
24005da0:	d122      	bne.n	24005de8 <HAL_DMA_PollForTransfer+0x274>
24005da2:	2301      	movs	r3, #1
24005da4:	e021      	b.n	24005dea <HAL_DMA_PollForTransfer+0x276>
24005da6:	bf00      	nop
24005da8:	40020010 	.word	0x40020010
24005dac:	40020028 	.word	0x40020028
24005db0:	40020040 	.word	0x40020040
24005db4:	40020058 	.word	0x40020058
24005db8:	40020070 	.word	0x40020070
24005dbc:	40020088 	.word	0x40020088
24005dc0:	400200a0 	.word	0x400200a0
24005dc4:	400200b8 	.word	0x400200b8
24005dc8:	40020410 	.word	0x40020410
24005dcc:	40020428 	.word	0x40020428
24005dd0:	40020440 	.word	0x40020440
24005dd4:	40020458 	.word	0x40020458
24005dd8:	40020470 	.word	0x40020470
24005ddc:	40020488 	.word	0x40020488
24005de0:	400204a0 	.word	0x400204a0
24005de4:	400204b8 	.word	0x400204b8
24005de8:	2300      	movs	r3, #0
24005dea:	2b00      	cmp	r3, #0
24005dec:	d057      	beq.n	24005e9e <HAL_DMA_PollForTransfer+0x32a>
    {
      if(((*isr_reg) & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24005dee:	6a3b      	ldr	r3, [r7, #32]
24005df0:	681a      	ldr	r2, [r3, #0]
24005df2:	68fb      	ldr	r3, [r7, #12]
24005df4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24005df6:	f003 031f 	and.w	r3, r3, #31
24005dfa:	fa22 f303 	lsr.w	r3, r2, r3
24005dfe:	f003 0301 	and.w	r3, r3, #1
24005e02:	2b00      	cmp	r3, #0
24005e04:	d00d      	beq.n	24005e22 <HAL_DMA_PollForTransfer+0x2ae>
      {
        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
24005e06:	68fb      	ldr	r3, [r7, #12]
24005e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24005e0a:	f043 0202 	orr.w	r2, r3, #2
24005e0e:	68fb      	ldr	r3, [r7, #12]
24005e10:	655a      	str	r2, [r3, #84]	; 0x54

        /* Clear the FIFO error flag */
        (*ifcr_reg) = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
24005e12:	68fb      	ldr	r3, [r7, #12]
24005e14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24005e16:	f003 031f 	and.w	r3, r3, #31
24005e1a:	2201      	movs	r2, #1
24005e1c:	409a      	lsls	r2, r3
24005e1e:	69fb      	ldr	r3, [r7, #28]
24005e20:	601a      	str	r2, [r3, #0]
      }

      if(((*isr_reg) & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24005e22:	6a3b      	ldr	r3, [r7, #32]
24005e24:	681a      	ldr	r2, [r3, #0]
24005e26:	68fb      	ldr	r3, [r7, #12]
24005e28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24005e2a:	f003 031f 	and.w	r3, r3, #31
24005e2e:	2104      	movs	r1, #4
24005e30:	fa01 f303 	lsl.w	r3, r1, r3
24005e34:	4013      	ands	r3, r2
24005e36:	2b00      	cmp	r3, #0
24005e38:	d00d      	beq.n	24005e56 <HAL_DMA_PollForTransfer+0x2e2>
      {
        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
24005e3a:	68fb      	ldr	r3, [r7, #12]
24005e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24005e3e:	f043 0204 	orr.w	r2, r3, #4
24005e42:	68fb      	ldr	r3, [r7, #12]
24005e44:	655a      	str	r2, [r3, #84]	; 0x54

        /* Clear the Direct Mode error flag */
        (*ifcr_reg) = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
24005e46:	68fb      	ldr	r3, [r7, #12]
24005e48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24005e4a:	f003 031f 	and.w	r3, r3, #31
24005e4e:	2204      	movs	r2, #4
24005e50:	409a      	lsls	r2, r3
24005e52:	69fb      	ldr	r3, [r7, #28]
24005e54:	601a      	str	r2, [r3, #0]
      }

      if(((*isr_reg) & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24005e56:	6a3b      	ldr	r3, [r7, #32]
24005e58:	681a      	ldr	r2, [r3, #0]
24005e5a:	68fb      	ldr	r3, [r7, #12]
24005e5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24005e5e:	f003 031f 	and.w	r3, r3, #31
24005e62:	2108      	movs	r1, #8
24005e64:	fa01 f303 	lsl.w	r3, r1, r3
24005e68:	4013      	ands	r3, r2
24005e6a:	2b00      	cmp	r3, #0
24005e6c:	d038      	beq.n	24005ee0 <HAL_DMA_PollForTransfer+0x36c>
      {
        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
24005e6e:	68fb      	ldr	r3, [r7, #12]
24005e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24005e72:	f043 0201 	orr.w	r2, r3, #1
24005e76:	68fb      	ldr	r3, [r7, #12]
24005e78:	655a      	str	r2, [r3, #84]	; 0x54

        /* Clear the transfer error flag */
        (*ifcr_reg) = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
24005e7a:	68fb      	ldr	r3, [r7, #12]
24005e7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24005e7e:	f003 031f 	and.w	r3, r3, #31
24005e82:	2208      	movs	r2, #8
24005e84:	409a      	lsls	r2, r3
24005e86:	69fb      	ldr	r3, [r7, #28]
24005e88:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
24005e8a:	68fb      	ldr	r3, [r7, #12]
24005e8c:	2201      	movs	r2, #1
24005e8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
24005e92:	68fb      	ldr	r3, [r7, #12]
24005e94:	2200      	movs	r2, #0
24005e96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
24005e9a:	2301      	movs	r3, #1
24005e9c:	e1f0      	b.n	24006280 <HAL_DMA_PollForTransfer+0x70c>
      }
    }
    else /* BDMA channel */
    {
      if(((*isr_reg) & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U)
24005e9e:	6a3b      	ldr	r3, [r7, #32]
24005ea0:	681a      	ldr	r2, [r3, #0]
24005ea2:	68fb      	ldr	r3, [r7, #12]
24005ea4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24005ea6:	f003 031f 	and.w	r3, r3, #31
24005eaa:	2108      	movs	r1, #8
24005eac:	fa01 f303 	lsl.w	r3, r1, r3
24005eb0:	4013      	ands	r3, r2
24005eb2:	2b00      	cmp	r3, #0
24005eb4:	d014      	beq.n	24005ee0 <HAL_DMA_PollForTransfer+0x36c>
      {
        /* When a DMA transfer error occurs */
        /* A hardware clear of its EN bits is performed */
        /* Clear all flags */
        (*isr_reg) = ((BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU));
24005eb6:	68fb      	ldr	r3, [r7, #12]
24005eb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24005eba:	f003 031f 	and.w	r3, r3, #31
24005ebe:	2201      	movs	r2, #1
24005ec0:	409a      	lsls	r2, r3
24005ec2:	6a3b      	ldr	r3, [r7, #32]
24005ec4:	601a      	str	r2, [r3, #0]

        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TE;
24005ec6:	68fb      	ldr	r3, [r7, #12]
24005ec8:	2201      	movs	r2, #1
24005eca:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
24005ecc:	68fb      	ldr	r3, [r7, #12]
24005ece:	2201      	movs	r2, #1
24005ed0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
24005ed4:	68fb      	ldr	r3, [r7, #12]
24005ed6:	2200      	movs	r2, #0
24005ed8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
24005edc:	2301      	movs	r3, #1
24005ede:	e1cf      	b.n	24006280 <HAL_DMA_PollForTransfer+0x70c>
      }
    }

    /* Check for the Timeout (Not applicable in circular mode)*/
    if(Timeout != HAL_MAX_DELAY)
24005ee0:	687b      	ldr	r3, [r7, #4]
24005ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
24005ee6:	d012      	beq.n	24005f0e <HAL_DMA_PollForTransfer+0x39a>
    {
      if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
24005ee8:	f7fd f8dc 	bl	240030a4 <HAL_GetTick>
24005eec:	4602      	mov	r2, r0
24005eee:	697b      	ldr	r3, [r7, #20]
24005ef0:	1ad3      	subs	r3, r2, r3
24005ef2:	687a      	ldr	r2, [r7, #4]
24005ef4:	429a      	cmp	r2, r3
24005ef6:	d302      	bcc.n	24005efe <HAL_DMA_PollForTransfer+0x38a>
24005ef8:	687b      	ldr	r3, [r7, #4]
24005efa:	2b00      	cmp	r3, #0
24005efc:	d107      	bne.n	24005f0e <HAL_DMA_PollForTransfer+0x39a>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
24005efe:	68fb      	ldr	r3, [r7, #12]
24005f00:	2220      	movs	r2, #32
24005f02:	655a      	str	r2, [r3, #84]	; 0x54

        /* if timeout then abort the current transfer */
        /* No need to check return value: as in this case we will return HAL_ERROR with HAL_DMA_ERROR_TIMEOUT error code  */
        (void) HAL_DMA_Abort(hdma);
24005f04:	68f8      	ldr	r0, [r7, #12]
24005f06:	f7ff f8d1 	bl	240050ac <HAL_DMA_Abort>
              - Clear the transfer error flags
              - Unlock
              - Set the State
          */

        return HAL_ERROR;
24005f0a:	2301      	movs	r3, #1
24005f0c:	e1b8      	b.n	24006280 <HAL_DMA_PollForTransfer+0x70c>
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24005f0e:	68fb      	ldr	r3, [r7, #12]
24005f10:	681b      	ldr	r3, [r3, #0]
24005f12:	4a81      	ldr	r2, [pc, #516]	; (24006118 <HAL_DMA_PollForTransfer+0x5a4>)
24005f14:	4293      	cmp	r3, r2
24005f16:	d072      	beq.n	24005ffe <HAL_DMA_PollForTransfer+0x48a>
24005f18:	68fb      	ldr	r3, [r7, #12]
24005f1a:	681b      	ldr	r3, [r3, #0]
24005f1c:	4a7f      	ldr	r2, [pc, #508]	; (2400611c <HAL_DMA_PollForTransfer+0x5a8>)
24005f1e:	4293      	cmp	r3, r2
24005f20:	d06d      	beq.n	24005ffe <HAL_DMA_PollForTransfer+0x48a>
24005f22:	68fb      	ldr	r3, [r7, #12]
24005f24:	681b      	ldr	r3, [r3, #0]
24005f26:	4a7e      	ldr	r2, [pc, #504]	; (24006120 <HAL_DMA_PollForTransfer+0x5ac>)
24005f28:	4293      	cmp	r3, r2
24005f2a:	d068      	beq.n	24005ffe <HAL_DMA_PollForTransfer+0x48a>
24005f2c:	68fb      	ldr	r3, [r7, #12]
24005f2e:	681b      	ldr	r3, [r3, #0]
24005f30:	4a7c      	ldr	r2, [pc, #496]	; (24006124 <HAL_DMA_PollForTransfer+0x5b0>)
24005f32:	4293      	cmp	r3, r2
24005f34:	d063      	beq.n	24005ffe <HAL_DMA_PollForTransfer+0x48a>
24005f36:	68fb      	ldr	r3, [r7, #12]
24005f38:	681b      	ldr	r3, [r3, #0]
24005f3a:	4a7b      	ldr	r2, [pc, #492]	; (24006128 <HAL_DMA_PollForTransfer+0x5b4>)
24005f3c:	4293      	cmp	r3, r2
24005f3e:	d05e      	beq.n	24005ffe <HAL_DMA_PollForTransfer+0x48a>
24005f40:	68fb      	ldr	r3, [r7, #12]
24005f42:	681b      	ldr	r3, [r3, #0]
24005f44:	4a79      	ldr	r2, [pc, #484]	; (2400612c <HAL_DMA_PollForTransfer+0x5b8>)
24005f46:	4293      	cmp	r3, r2
24005f48:	d059      	beq.n	24005ffe <HAL_DMA_PollForTransfer+0x48a>
24005f4a:	68fb      	ldr	r3, [r7, #12]
24005f4c:	681b      	ldr	r3, [r3, #0]
24005f4e:	4a78      	ldr	r2, [pc, #480]	; (24006130 <HAL_DMA_PollForTransfer+0x5bc>)
24005f50:	4293      	cmp	r3, r2
24005f52:	d054      	beq.n	24005ffe <HAL_DMA_PollForTransfer+0x48a>
24005f54:	68fb      	ldr	r3, [r7, #12]
24005f56:	681b      	ldr	r3, [r3, #0]
24005f58:	4a76      	ldr	r2, [pc, #472]	; (24006134 <HAL_DMA_PollForTransfer+0x5c0>)
24005f5a:	4293      	cmp	r3, r2
24005f5c:	d04f      	beq.n	24005ffe <HAL_DMA_PollForTransfer+0x48a>
24005f5e:	68fb      	ldr	r3, [r7, #12]
24005f60:	681b      	ldr	r3, [r3, #0]
24005f62:	4a75      	ldr	r2, [pc, #468]	; (24006138 <HAL_DMA_PollForTransfer+0x5c4>)
24005f64:	4293      	cmp	r3, r2
24005f66:	d04a      	beq.n	24005ffe <HAL_DMA_PollForTransfer+0x48a>
24005f68:	68fb      	ldr	r3, [r7, #12]
24005f6a:	681b      	ldr	r3, [r3, #0]
24005f6c:	4a73      	ldr	r2, [pc, #460]	; (2400613c <HAL_DMA_PollForTransfer+0x5c8>)
24005f6e:	4293      	cmp	r3, r2
24005f70:	d045      	beq.n	24005ffe <HAL_DMA_PollForTransfer+0x48a>
24005f72:	68fb      	ldr	r3, [r7, #12]
24005f74:	681b      	ldr	r3, [r3, #0]
24005f76:	4a72      	ldr	r2, [pc, #456]	; (24006140 <HAL_DMA_PollForTransfer+0x5cc>)
24005f78:	4293      	cmp	r3, r2
24005f7a:	d040      	beq.n	24005ffe <HAL_DMA_PollForTransfer+0x48a>
24005f7c:	68fb      	ldr	r3, [r7, #12]
24005f7e:	681b      	ldr	r3, [r3, #0]
24005f80:	4a70      	ldr	r2, [pc, #448]	; (24006144 <HAL_DMA_PollForTransfer+0x5d0>)
24005f82:	4293      	cmp	r3, r2
24005f84:	d03b      	beq.n	24005ffe <HAL_DMA_PollForTransfer+0x48a>
24005f86:	68fb      	ldr	r3, [r7, #12]
24005f88:	681b      	ldr	r3, [r3, #0]
24005f8a:	4a6f      	ldr	r2, [pc, #444]	; (24006148 <HAL_DMA_PollForTransfer+0x5d4>)
24005f8c:	4293      	cmp	r3, r2
24005f8e:	d036      	beq.n	24005ffe <HAL_DMA_PollForTransfer+0x48a>
24005f90:	68fb      	ldr	r3, [r7, #12]
24005f92:	681b      	ldr	r3, [r3, #0]
24005f94:	4a6d      	ldr	r2, [pc, #436]	; (2400614c <HAL_DMA_PollForTransfer+0x5d8>)
24005f96:	4293      	cmp	r3, r2
24005f98:	d031      	beq.n	24005ffe <HAL_DMA_PollForTransfer+0x48a>
24005f9a:	68fb      	ldr	r3, [r7, #12]
24005f9c:	681b      	ldr	r3, [r3, #0]
24005f9e:	4a6c      	ldr	r2, [pc, #432]	; (24006150 <HAL_DMA_PollForTransfer+0x5dc>)
24005fa0:	4293      	cmp	r3, r2
24005fa2:	d02c      	beq.n	24005ffe <HAL_DMA_PollForTransfer+0x48a>
24005fa4:	68fb      	ldr	r3, [r7, #12]
24005fa6:	681b      	ldr	r3, [r3, #0]
24005fa8:	4a6a      	ldr	r2, [pc, #424]	; (24006154 <HAL_DMA_PollForTransfer+0x5e0>)
24005faa:	4293      	cmp	r3, r2
24005fac:	d027      	beq.n	24005ffe <HAL_DMA_PollForTransfer+0x48a>
24005fae:	68fb      	ldr	r3, [r7, #12]
24005fb0:	681b      	ldr	r3, [r3, #0]
24005fb2:	4a69      	ldr	r2, [pc, #420]	; (24006158 <HAL_DMA_PollForTransfer+0x5e4>)
24005fb4:	4293      	cmp	r3, r2
24005fb6:	d022      	beq.n	24005ffe <HAL_DMA_PollForTransfer+0x48a>
24005fb8:	68fb      	ldr	r3, [r7, #12]
24005fba:	681b      	ldr	r3, [r3, #0]
24005fbc:	4a67      	ldr	r2, [pc, #412]	; (2400615c <HAL_DMA_PollForTransfer+0x5e8>)
24005fbe:	4293      	cmp	r3, r2
24005fc0:	d01d      	beq.n	24005ffe <HAL_DMA_PollForTransfer+0x48a>
24005fc2:	68fb      	ldr	r3, [r7, #12]
24005fc4:	681b      	ldr	r3, [r3, #0]
24005fc6:	4a66      	ldr	r2, [pc, #408]	; (24006160 <HAL_DMA_PollForTransfer+0x5ec>)
24005fc8:	4293      	cmp	r3, r2
24005fca:	d018      	beq.n	24005ffe <HAL_DMA_PollForTransfer+0x48a>
24005fcc:	68fb      	ldr	r3, [r7, #12]
24005fce:	681b      	ldr	r3, [r3, #0]
24005fd0:	4a64      	ldr	r2, [pc, #400]	; (24006164 <HAL_DMA_PollForTransfer+0x5f0>)
24005fd2:	4293      	cmp	r3, r2
24005fd4:	d013      	beq.n	24005ffe <HAL_DMA_PollForTransfer+0x48a>
24005fd6:	68fb      	ldr	r3, [r7, #12]
24005fd8:	681b      	ldr	r3, [r3, #0]
24005fda:	4a63      	ldr	r2, [pc, #396]	; (24006168 <HAL_DMA_PollForTransfer+0x5f4>)
24005fdc:	4293      	cmp	r3, r2
24005fde:	d00e      	beq.n	24005ffe <HAL_DMA_PollForTransfer+0x48a>
24005fe0:	68fb      	ldr	r3, [r7, #12]
24005fe2:	681b      	ldr	r3, [r3, #0]
24005fe4:	4a61      	ldr	r2, [pc, #388]	; (2400616c <HAL_DMA_PollForTransfer+0x5f8>)
24005fe6:	4293      	cmp	r3, r2
24005fe8:	d009      	beq.n	24005ffe <HAL_DMA_PollForTransfer+0x48a>
24005fea:	68fb      	ldr	r3, [r7, #12]
24005fec:	681b      	ldr	r3, [r3, #0]
24005fee:	4a60      	ldr	r2, [pc, #384]	; (24006170 <HAL_DMA_PollForTransfer+0x5fc>)
24005ff0:	4293      	cmp	r3, r2
24005ff2:	d004      	beq.n	24005ffe <HAL_DMA_PollForTransfer+0x48a>
24005ff4:	68fb      	ldr	r3, [r7, #12]
24005ff6:	681b      	ldr	r3, [r3, #0]
24005ff8:	4a5e      	ldr	r2, [pc, #376]	; (24006174 <HAL_DMA_PollForTransfer+0x600>)
24005ffa:	4293      	cmp	r3, r2
24005ffc:	d101      	bne.n	24006002 <HAL_DMA_PollForTransfer+0x48e>
24005ffe:	2301      	movs	r3, #1
24006000:	e000      	b.n	24006004 <HAL_DMA_PollForTransfer+0x490>
24006002:	2300      	movs	r3, #0
24006004:	2b00      	cmp	r3, #0
24006006:	d029      	beq.n	2400605c <HAL_DMA_PollForTransfer+0x4e8>
    {
      /* Check for DMAMUX Request generator (if used) overrun status */
      if(hdma->DMAmuxRequestGen != 0U)
24006008:	68fb      	ldr	r3, [r7, #12]
2400600a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
2400600c:	2b00      	cmp	r3, #0
2400600e:	d012      	beq.n	24006036 <HAL_DMA_PollForTransfer+0x4c2>
      {
        /* if using DMAMUX request generator Check for DMAMUX request generator overrun */
        if((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
24006010:	68fb      	ldr	r3, [r7, #12]
24006012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24006014:	681a      	ldr	r2, [r3, #0]
24006016:	68fb      	ldr	r3, [r7, #12]
24006018:	6f5b      	ldr	r3, [r3, #116]	; 0x74
2400601a:	4013      	ands	r3, r2
2400601c:	2b00      	cmp	r3, #0
2400601e:	d00a      	beq.n	24006036 <HAL_DMA_PollForTransfer+0x4c2>
        {
          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
24006020:	68fb      	ldr	r3, [r7, #12]
24006022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24006024:	68fa      	ldr	r2, [r7, #12]
24006026:	6f52      	ldr	r2, [r2, #116]	; 0x74
24006028:	605a      	str	r2, [r3, #4]

          /* Update error code */
          hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
2400602a:	68fb      	ldr	r3, [r7, #12]
2400602c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2400602e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
24006032:	68fb      	ldr	r3, [r7, #12]
24006034:	655a      	str	r2, [r3, #84]	; 0x54
        }
      }

      /* Check for DMAMUX Synchronization overrun */
      if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
24006036:	68fb      	ldr	r3, [r7, #12]
24006038:	6e5b      	ldr	r3, [r3, #100]	; 0x64
2400603a:	681a      	ldr	r2, [r3, #0]
2400603c:	68fb      	ldr	r3, [r7, #12]
2400603e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
24006040:	4013      	ands	r3, r2
24006042:	2b00      	cmp	r3, #0
24006044:	d00a      	beq.n	2400605c <HAL_DMA_PollForTransfer+0x4e8>
      {
        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
24006046:	68fb      	ldr	r3, [r7, #12]
24006048:	6e5b      	ldr	r3, [r3, #100]	; 0x64
2400604a:	68fa      	ldr	r2, [r7, #12]
2400604c:	6e92      	ldr	r2, [r2, #104]	; 0x68
2400604e:	605a      	str	r2, [r3, #4]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
24006050:	68fb      	ldr	r3, [r7, #12]
24006052:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24006054:	f443 7200 	orr.w	r2, r3, #512	; 0x200
24006058:	68fb      	ldr	r3, [r7, #12]
2400605a:	655a      	str	r2, [r3, #84]	; 0x54
  while(((*isr_reg) & cpltlevel_mask) == 0U)
2400605c:	6a3b      	ldr	r3, [r7, #32]
2400605e:	681a      	ldr	r2, [r3, #0]
24006060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24006062:	4013      	ands	r3, r2
24006064:	2b00      	cmp	r3, #0
24006066:	f43f ae4c 	beq.w	24005d02 <HAL_DMA_PollForTransfer+0x18e>
    }
  }


  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
2400606a:	7afb      	ldrb	r3, [r7, #11]
2400606c:	2b00      	cmp	r3, #0
2400606e:	f040 80a0 	bne.w	240061b2 <HAL_DMA_PollForTransfer+0x63e>
  {
    /* Clear the half transfer and transfer complete flags */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24006072:	68fb      	ldr	r3, [r7, #12]
24006074:	681b      	ldr	r3, [r3, #0]
24006076:	4a28      	ldr	r2, [pc, #160]	; (24006118 <HAL_DMA_PollForTransfer+0x5a4>)
24006078:	4293      	cmp	r3, r2
2400607a:	d04a      	beq.n	24006112 <HAL_DMA_PollForTransfer+0x59e>
2400607c:	68fb      	ldr	r3, [r7, #12]
2400607e:	681b      	ldr	r3, [r3, #0]
24006080:	4a26      	ldr	r2, [pc, #152]	; (2400611c <HAL_DMA_PollForTransfer+0x5a8>)
24006082:	4293      	cmp	r3, r2
24006084:	d045      	beq.n	24006112 <HAL_DMA_PollForTransfer+0x59e>
24006086:	68fb      	ldr	r3, [r7, #12]
24006088:	681b      	ldr	r3, [r3, #0]
2400608a:	4a25      	ldr	r2, [pc, #148]	; (24006120 <HAL_DMA_PollForTransfer+0x5ac>)
2400608c:	4293      	cmp	r3, r2
2400608e:	d040      	beq.n	24006112 <HAL_DMA_PollForTransfer+0x59e>
24006090:	68fb      	ldr	r3, [r7, #12]
24006092:	681b      	ldr	r3, [r3, #0]
24006094:	4a23      	ldr	r2, [pc, #140]	; (24006124 <HAL_DMA_PollForTransfer+0x5b0>)
24006096:	4293      	cmp	r3, r2
24006098:	d03b      	beq.n	24006112 <HAL_DMA_PollForTransfer+0x59e>
2400609a:	68fb      	ldr	r3, [r7, #12]
2400609c:	681b      	ldr	r3, [r3, #0]
2400609e:	4a22      	ldr	r2, [pc, #136]	; (24006128 <HAL_DMA_PollForTransfer+0x5b4>)
240060a0:	4293      	cmp	r3, r2
240060a2:	d036      	beq.n	24006112 <HAL_DMA_PollForTransfer+0x59e>
240060a4:	68fb      	ldr	r3, [r7, #12]
240060a6:	681b      	ldr	r3, [r3, #0]
240060a8:	4a20      	ldr	r2, [pc, #128]	; (2400612c <HAL_DMA_PollForTransfer+0x5b8>)
240060aa:	4293      	cmp	r3, r2
240060ac:	d031      	beq.n	24006112 <HAL_DMA_PollForTransfer+0x59e>
240060ae:	68fb      	ldr	r3, [r7, #12]
240060b0:	681b      	ldr	r3, [r3, #0]
240060b2:	4a1f      	ldr	r2, [pc, #124]	; (24006130 <HAL_DMA_PollForTransfer+0x5bc>)
240060b4:	4293      	cmp	r3, r2
240060b6:	d02c      	beq.n	24006112 <HAL_DMA_PollForTransfer+0x59e>
240060b8:	68fb      	ldr	r3, [r7, #12]
240060ba:	681b      	ldr	r3, [r3, #0]
240060bc:	4a1d      	ldr	r2, [pc, #116]	; (24006134 <HAL_DMA_PollForTransfer+0x5c0>)
240060be:	4293      	cmp	r3, r2
240060c0:	d027      	beq.n	24006112 <HAL_DMA_PollForTransfer+0x59e>
240060c2:	68fb      	ldr	r3, [r7, #12]
240060c4:	681b      	ldr	r3, [r3, #0]
240060c6:	4a1c      	ldr	r2, [pc, #112]	; (24006138 <HAL_DMA_PollForTransfer+0x5c4>)
240060c8:	4293      	cmp	r3, r2
240060ca:	d022      	beq.n	24006112 <HAL_DMA_PollForTransfer+0x59e>
240060cc:	68fb      	ldr	r3, [r7, #12]
240060ce:	681b      	ldr	r3, [r3, #0]
240060d0:	4a1a      	ldr	r2, [pc, #104]	; (2400613c <HAL_DMA_PollForTransfer+0x5c8>)
240060d2:	4293      	cmp	r3, r2
240060d4:	d01d      	beq.n	24006112 <HAL_DMA_PollForTransfer+0x59e>
240060d6:	68fb      	ldr	r3, [r7, #12]
240060d8:	681b      	ldr	r3, [r3, #0]
240060da:	4a19      	ldr	r2, [pc, #100]	; (24006140 <HAL_DMA_PollForTransfer+0x5cc>)
240060dc:	4293      	cmp	r3, r2
240060de:	d018      	beq.n	24006112 <HAL_DMA_PollForTransfer+0x59e>
240060e0:	68fb      	ldr	r3, [r7, #12]
240060e2:	681b      	ldr	r3, [r3, #0]
240060e4:	4a17      	ldr	r2, [pc, #92]	; (24006144 <HAL_DMA_PollForTransfer+0x5d0>)
240060e6:	4293      	cmp	r3, r2
240060e8:	d013      	beq.n	24006112 <HAL_DMA_PollForTransfer+0x59e>
240060ea:	68fb      	ldr	r3, [r7, #12]
240060ec:	681b      	ldr	r3, [r3, #0]
240060ee:	4a16      	ldr	r2, [pc, #88]	; (24006148 <HAL_DMA_PollForTransfer+0x5d4>)
240060f0:	4293      	cmp	r3, r2
240060f2:	d00e      	beq.n	24006112 <HAL_DMA_PollForTransfer+0x59e>
240060f4:	68fb      	ldr	r3, [r7, #12]
240060f6:	681b      	ldr	r3, [r3, #0]
240060f8:	4a14      	ldr	r2, [pc, #80]	; (2400614c <HAL_DMA_PollForTransfer+0x5d8>)
240060fa:	4293      	cmp	r3, r2
240060fc:	d009      	beq.n	24006112 <HAL_DMA_PollForTransfer+0x59e>
240060fe:	68fb      	ldr	r3, [r7, #12]
24006100:	681b      	ldr	r3, [r3, #0]
24006102:	4a13      	ldr	r2, [pc, #76]	; (24006150 <HAL_DMA_PollForTransfer+0x5dc>)
24006104:	4293      	cmp	r3, r2
24006106:	d004      	beq.n	24006112 <HAL_DMA_PollForTransfer+0x59e>
24006108:	68fb      	ldr	r3, [r7, #12]
2400610a:	681b      	ldr	r3, [r3, #0]
2400610c:	4a11      	ldr	r2, [pc, #68]	; (24006154 <HAL_DMA_PollForTransfer+0x5e0>)
2400610e:	4293      	cmp	r3, r2
24006110:	d132      	bne.n	24006178 <HAL_DMA_PollForTransfer+0x604>
24006112:	2301      	movs	r3, #1
24006114:	e031      	b.n	2400617a <HAL_DMA_PollForTransfer+0x606>
24006116:	bf00      	nop
24006118:	40020010 	.word	0x40020010
2400611c:	40020028 	.word	0x40020028
24006120:	40020040 	.word	0x40020040
24006124:	40020058 	.word	0x40020058
24006128:	40020070 	.word	0x40020070
2400612c:	40020088 	.word	0x40020088
24006130:	400200a0 	.word	0x400200a0
24006134:	400200b8 	.word	0x400200b8
24006138:	40020410 	.word	0x40020410
2400613c:	40020428 	.word	0x40020428
24006140:	40020440 	.word	0x40020440
24006144:	40020458 	.word	0x40020458
24006148:	40020470 	.word	0x40020470
2400614c:	40020488 	.word	0x40020488
24006150:	400204a0 	.word	0x400204a0
24006154:	400204b8 	.word	0x400204b8
24006158:	58025408 	.word	0x58025408
2400615c:	5802541c 	.word	0x5802541c
24006160:	58025430 	.word	0x58025430
24006164:	58025444 	.word	0x58025444
24006168:	58025458 	.word	0x58025458
2400616c:	5802546c 	.word	0x5802546c
24006170:	58025480 	.word	0x58025480
24006174:	58025494 	.word	0x58025494
24006178:	2300      	movs	r3, #0
2400617a:	2b00      	cmp	r3, #0
2400617c:	d008      	beq.n	24006190 <HAL_DMA_PollForTransfer+0x61c>
    {
      (*ifcr_reg) = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << (hdma->StreamIndex & 0x1FU);
2400617e:	68fb      	ldr	r3, [r7, #12]
24006180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24006182:	f003 031f 	and.w	r3, r3, #31
24006186:	2230      	movs	r2, #48	; 0x30
24006188:	409a      	lsls	r2, r3
2400618a:	69fb      	ldr	r3, [r7, #28]
2400618c:	601a      	str	r2, [r3, #0]
2400618e:	e007      	b.n	240061a0 <HAL_DMA_PollForTransfer+0x62c>
    }
    else /* BDMA channel */
    {
      (*ifcr_reg) = (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU));
24006190:	68fb      	ldr	r3, [r7, #12]
24006192:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24006194:	f003 031f 	and.w	r3, r3, #31
24006198:	2202      	movs	r2, #2
2400619a:	409a      	lsls	r2, r3
2400619c:	69fb      	ldr	r3, [r7, #28]
2400619e:	601a      	str	r2, [r3, #0]
    }

    hdma->State = HAL_DMA_STATE_READY;
240061a0:	68fb      	ldr	r3, [r7, #12]
240061a2:	2201      	movs	r2, #1
240061a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
240061a8:	68fb      	ldr	r3, [r7, #12]
240061aa:	2200      	movs	r2, #0
240061ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
240061b0:	e065      	b.n	2400627e <HAL_DMA_PollForTransfer+0x70a>
  }
  else /*CompleteLevel = HAL_DMA_HALF_TRANSFER*/
  {
    /* Clear the half transfer and transfer complete flags */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
240061b2:	68fb      	ldr	r3, [r7, #12]
240061b4:	681b      	ldr	r3, [r3, #0]
240061b6:	4a34      	ldr	r2, [pc, #208]	; (24006288 <HAL_DMA_PollForTransfer+0x714>)
240061b8:	4293      	cmp	r3, r2
240061ba:	d04a      	beq.n	24006252 <HAL_DMA_PollForTransfer+0x6de>
240061bc:	68fb      	ldr	r3, [r7, #12]
240061be:	681b      	ldr	r3, [r3, #0]
240061c0:	4a32      	ldr	r2, [pc, #200]	; (2400628c <HAL_DMA_PollForTransfer+0x718>)
240061c2:	4293      	cmp	r3, r2
240061c4:	d045      	beq.n	24006252 <HAL_DMA_PollForTransfer+0x6de>
240061c6:	68fb      	ldr	r3, [r7, #12]
240061c8:	681b      	ldr	r3, [r3, #0]
240061ca:	4a31      	ldr	r2, [pc, #196]	; (24006290 <HAL_DMA_PollForTransfer+0x71c>)
240061cc:	4293      	cmp	r3, r2
240061ce:	d040      	beq.n	24006252 <HAL_DMA_PollForTransfer+0x6de>
240061d0:	68fb      	ldr	r3, [r7, #12]
240061d2:	681b      	ldr	r3, [r3, #0]
240061d4:	4a2f      	ldr	r2, [pc, #188]	; (24006294 <HAL_DMA_PollForTransfer+0x720>)
240061d6:	4293      	cmp	r3, r2
240061d8:	d03b      	beq.n	24006252 <HAL_DMA_PollForTransfer+0x6de>
240061da:	68fb      	ldr	r3, [r7, #12]
240061dc:	681b      	ldr	r3, [r3, #0]
240061de:	4a2e      	ldr	r2, [pc, #184]	; (24006298 <HAL_DMA_PollForTransfer+0x724>)
240061e0:	4293      	cmp	r3, r2
240061e2:	d036      	beq.n	24006252 <HAL_DMA_PollForTransfer+0x6de>
240061e4:	68fb      	ldr	r3, [r7, #12]
240061e6:	681b      	ldr	r3, [r3, #0]
240061e8:	4a2c      	ldr	r2, [pc, #176]	; (2400629c <HAL_DMA_PollForTransfer+0x728>)
240061ea:	4293      	cmp	r3, r2
240061ec:	d031      	beq.n	24006252 <HAL_DMA_PollForTransfer+0x6de>
240061ee:	68fb      	ldr	r3, [r7, #12]
240061f0:	681b      	ldr	r3, [r3, #0]
240061f2:	4a2b      	ldr	r2, [pc, #172]	; (240062a0 <HAL_DMA_PollForTransfer+0x72c>)
240061f4:	4293      	cmp	r3, r2
240061f6:	d02c      	beq.n	24006252 <HAL_DMA_PollForTransfer+0x6de>
240061f8:	68fb      	ldr	r3, [r7, #12]
240061fa:	681b      	ldr	r3, [r3, #0]
240061fc:	4a29      	ldr	r2, [pc, #164]	; (240062a4 <HAL_DMA_PollForTransfer+0x730>)
240061fe:	4293      	cmp	r3, r2
24006200:	d027      	beq.n	24006252 <HAL_DMA_PollForTransfer+0x6de>
24006202:	68fb      	ldr	r3, [r7, #12]
24006204:	681b      	ldr	r3, [r3, #0]
24006206:	4a28      	ldr	r2, [pc, #160]	; (240062a8 <HAL_DMA_PollForTransfer+0x734>)
24006208:	4293      	cmp	r3, r2
2400620a:	d022      	beq.n	24006252 <HAL_DMA_PollForTransfer+0x6de>
2400620c:	68fb      	ldr	r3, [r7, #12]
2400620e:	681b      	ldr	r3, [r3, #0]
24006210:	4a26      	ldr	r2, [pc, #152]	; (240062ac <HAL_DMA_PollForTransfer+0x738>)
24006212:	4293      	cmp	r3, r2
24006214:	d01d      	beq.n	24006252 <HAL_DMA_PollForTransfer+0x6de>
24006216:	68fb      	ldr	r3, [r7, #12]
24006218:	681b      	ldr	r3, [r3, #0]
2400621a:	4a25      	ldr	r2, [pc, #148]	; (240062b0 <HAL_DMA_PollForTransfer+0x73c>)
2400621c:	4293      	cmp	r3, r2
2400621e:	d018      	beq.n	24006252 <HAL_DMA_PollForTransfer+0x6de>
24006220:	68fb      	ldr	r3, [r7, #12]
24006222:	681b      	ldr	r3, [r3, #0]
24006224:	4a23      	ldr	r2, [pc, #140]	; (240062b4 <HAL_DMA_PollForTransfer+0x740>)
24006226:	4293      	cmp	r3, r2
24006228:	d013      	beq.n	24006252 <HAL_DMA_PollForTransfer+0x6de>
2400622a:	68fb      	ldr	r3, [r7, #12]
2400622c:	681b      	ldr	r3, [r3, #0]
2400622e:	4a22      	ldr	r2, [pc, #136]	; (240062b8 <HAL_DMA_PollForTransfer+0x744>)
24006230:	4293      	cmp	r3, r2
24006232:	d00e      	beq.n	24006252 <HAL_DMA_PollForTransfer+0x6de>
24006234:	68fb      	ldr	r3, [r7, #12]
24006236:	681b      	ldr	r3, [r3, #0]
24006238:	4a20      	ldr	r2, [pc, #128]	; (240062bc <HAL_DMA_PollForTransfer+0x748>)
2400623a:	4293      	cmp	r3, r2
2400623c:	d009      	beq.n	24006252 <HAL_DMA_PollForTransfer+0x6de>
2400623e:	68fb      	ldr	r3, [r7, #12]
24006240:	681b      	ldr	r3, [r3, #0]
24006242:	4a1f      	ldr	r2, [pc, #124]	; (240062c0 <HAL_DMA_PollForTransfer+0x74c>)
24006244:	4293      	cmp	r3, r2
24006246:	d004      	beq.n	24006252 <HAL_DMA_PollForTransfer+0x6de>
24006248:	68fb      	ldr	r3, [r7, #12]
2400624a:	681b      	ldr	r3, [r3, #0]
2400624c:	4a1d      	ldr	r2, [pc, #116]	; (240062c4 <HAL_DMA_PollForTransfer+0x750>)
2400624e:	4293      	cmp	r3, r2
24006250:	d101      	bne.n	24006256 <HAL_DMA_PollForTransfer+0x6e2>
24006252:	2301      	movs	r3, #1
24006254:	e000      	b.n	24006258 <HAL_DMA_PollForTransfer+0x6e4>
24006256:	2300      	movs	r3, #0
24006258:	2b00      	cmp	r3, #0
2400625a:	d008      	beq.n	2400626e <HAL_DMA_PollForTransfer+0x6fa>
    {
      (*ifcr_reg) = (DMA_FLAG_HTIF0_4) << (hdma->StreamIndex & 0x1FU);
2400625c:	68fb      	ldr	r3, [r7, #12]
2400625e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24006260:	f003 031f 	and.w	r3, r3, #31
24006264:	2210      	movs	r2, #16
24006266:	409a      	lsls	r2, r3
24006268:	69fb      	ldr	r3, [r7, #28]
2400626a:	601a      	str	r2, [r3, #0]
2400626c:	e007      	b.n	2400627e <HAL_DMA_PollForTransfer+0x70a>
    }
    else /* BDMA channel */
    {
      (*ifcr_reg) = (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU));
2400626e:	68fb      	ldr	r3, [r7, #12]
24006270:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24006272:	f003 031f 	and.w	r3, r3, #31
24006276:	2204      	movs	r2, #4
24006278:	409a      	lsls	r2, r3
2400627a:	69fb      	ldr	r3, [r7, #28]
2400627c:	601a      	str	r2, [r3, #0]
    }
  }

  return status;
2400627e:	7efb      	ldrb	r3, [r7, #27]
}
24006280:	4618      	mov	r0, r3
24006282:	3728      	adds	r7, #40	; 0x28
24006284:	46bd      	mov	sp, r7
24006286:	bd80      	pop	{r7, pc}
24006288:	40020010 	.word	0x40020010
2400628c:	40020028 	.word	0x40020028
24006290:	40020040 	.word	0x40020040
24006294:	40020058 	.word	0x40020058
24006298:	40020070 	.word	0x40020070
2400629c:	40020088 	.word	0x40020088
240062a0:	400200a0 	.word	0x400200a0
240062a4:	400200b8 	.word	0x400200b8
240062a8:	40020410 	.word	0x40020410
240062ac:	40020428 	.word	0x40020428
240062b0:	40020440 	.word	0x40020440
240062b4:	40020458 	.word	0x40020458
240062b8:	40020470 	.word	0x40020470
240062bc:	40020488 	.word	0x40020488
240062c0:	400204a0 	.word	0x400204a0
240062c4:	400204b8 	.word	0x400204b8

240062c8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
240062c8:	b580      	push	{r7, lr}
240062ca:	b08a      	sub	sp, #40	; 0x28
240062cc:	af00      	add	r7, sp, #0
240062ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
240062d0:	2300      	movs	r3, #0
240062d2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
240062d4:	4b67      	ldr	r3, [pc, #412]	; (24006474 <HAL_DMA_IRQHandler+0x1ac>)
240062d6:	681b      	ldr	r3, [r3, #0]
240062d8:	4a67      	ldr	r2, [pc, #412]	; (24006478 <HAL_DMA_IRQHandler+0x1b0>)
240062da:	fba2 2303 	umull	r2, r3, r2, r3
240062de:	0a9b      	lsrs	r3, r3, #10
240062e0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
240062e2:	687b      	ldr	r3, [r7, #4]
240062e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
240062e6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
240062e8:	687b      	ldr	r3, [r7, #4]
240062ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
240062ec:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
240062ee:	6a3b      	ldr	r3, [r7, #32]
240062f0:	681b      	ldr	r3, [r3, #0]
240062f2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
240062f4:	69fb      	ldr	r3, [r7, #28]
240062f6:	681b      	ldr	r3, [r3, #0]
240062f8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
240062fa:	687b      	ldr	r3, [r7, #4]
240062fc:	681b      	ldr	r3, [r3, #0]
240062fe:	4a5f      	ldr	r2, [pc, #380]	; (2400647c <HAL_DMA_IRQHandler+0x1b4>)
24006300:	4293      	cmp	r3, r2
24006302:	d04a      	beq.n	2400639a <HAL_DMA_IRQHandler+0xd2>
24006304:	687b      	ldr	r3, [r7, #4]
24006306:	681b      	ldr	r3, [r3, #0]
24006308:	4a5d      	ldr	r2, [pc, #372]	; (24006480 <HAL_DMA_IRQHandler+0x1b8>)
2400630a:	4293      	cmp	r3, r2
2400630c:	d045      	beq.n	2400639a <HAL_DMA_IRQHandler+0xd2>
2400630e:	687b      	ldr	r3, [r7, #4]
24006310:	681b      	ldr	r3, [r3, #0]
24006312:	4a5c      	ldr	r2, [pc, #368]	; (24006484 <HAL_DMA_IRQHandler+0x1bc>)
24006314:	4293      	cmp	r3, r2
24006316:	d040      	beq.n	2400639a <HAL_DMA_IRQHandler+0xd2>
24006318:	687b      	ldr	r3, [r7, #4]
2400631a:	681b      	ldr	r3, [r3, #0]
2400631c:	4a5a      	ldr	r2, [pc, #360]	; (24006488 <HAL_DMA_IRQHandler+0x1c0>)
2400631e:	4293      	cmp	r3, r2
24006320:	d03b      	beq.n	2400639a <HAL_DMA_IRQHandler+0xd2>
24006322:	687b      	ldr	r3, [r7, #4]
24006324:	681b      	ldr	r3, [r3, #0]
24006326:	4a59      	ldr	r2, [pc, #356]	; (2400648c <HAL_DMA_IRQHandler+0x1c4>)
24006328:	4293      	cmp	r3, r2
2400632a:	d036      	beq.n	2400639a <HAL_DMA_IRQHandler+0xd2>
2400632c:	687b      	ldr	r3, [r7, #4]
2400632e:	681b      	ldr	r3, [r3, #0]
24006330:	4a57      	ldr	r2, [pc, #348]	; (24006490 <HAL_DMA_IRQHandler+0x1c8>)
24006332:	4293      	cmp	r3, r2
24006334:	d031      	beq.n	2400639a <HAL_DMA_IRQHandler+0xd2>
24006336:	687b      	ldr	r3, [r7, #4]
24006338:	681b      	ldr	r3, [r3, #0]
2400633a:	4a56      	ldr	r2, [pc, #344]	; (24006494 <HAL_DMA_IRQHandler+0x1cc>)
2400633c:	4293      	cmp	r3, r2
2400633e:	d02c      	beq.n	2400639a <HAL_DMA_IRQHandler+0xd2>
24006340:	687b      	ldr	r3, [r7, #4]
24006342:	681b      	ldr	r3, [r3, #0]
24006344:	4a54      	ldr	r2, [pc, #336]	; (24006498 <HAL_DMA_IRQHandler+0x1d0>)
24006346:	4293      	cmp	r3, r2
24006348:	d027      	beq.n	2400639a <HAL_DMA_IRQHandler+0xd2>
2400634a:	687b      	ldr	r3, [r7, #4]
2400634c:	681b      	ldr	r3, [r3, #0]
2400634e:	4a53      	ldr	r2, [pc, #332]	; (2400649c <HAL_DMA_IRQHandler+0x1d4>)
24006350:	4293      	cmp	r3, r2
24006352:	d022      	beq.n	2400639a <HAL_DMA_IRQHandler+0xd2>
24006354:	687b      	ldr	r3, [r7, #4]
24006356:	681b      	ldr	r3, [r3, #0]
24006358:	4a51      	ldr	r2, [pc, #324]	; (240064a0 <HAL_DMA_IRQHandler+0x1d8>)
2400635a:	4293      	cmp	r3, r2
2400635c:	d01d      	beq.n	2400639a <HAL_DMA_IRQHandler+0xd2>
2400635e:	687b      	ldr	r3, [r7, #4]
24006360:	681b      	ldr	r3, [r3, #0]
24006362:	4a50      	ldr	r2, [pc, #320]	; (240064a4 <HAL_DMA_IRQHandler+0x1dc>)
24006364:	4293      	cmp	r3, r2
24006366:	d018      	beq.n	2400639a <HAL_DMA_IRQHandler+0xd2>
24006368:	687b      	ldr	r3, [r7, #4]
2400636a:	681b      	ldr	r3, [r3, #0]
2400636c:	4a4e      	ldr	r2, [pc, #312]	; (240064a8 <HAL_DMA_IRQHandler+0x1e0>)
2400636e:	4293      	cmp	r3, r2
24006370:	d013      	beq.n	2400639a <HAL_DMA_IRQHandler+0xd2>
24006372:	687b      	ldr	r3, [r7, #4]
24006374:	681b      	ldr	r3, [r3, #0]
24006376:	4a4d      	ldr	r2, [pc, #308]	; (240064ac <HAL_DMA_IRQHandler+0x1e4>)
24006378:	4293      	cmp	r3, r2
2400637a:	d00e      	beq.n	2400639a <HAL_DMA_IRQHandler+0xd2>
2400637c:	687b      	ldr	r3, [r7, #4]
2400637e:	681b      	ldr	r3, [r3, #0]
24006380:	4a4b      	ldr	r2, [pc, #300]	; (240064b0 <HAL_DMA_IRQHandler+0x1e8>)
24006382:	4293      	cmp	r3, r2
24006384:	d009      	beq.n	2400639a <HAL_DMA_IRQHandler+0xd2>
24006386:	687b      	ldr	r3, [r7, #4]
24006388:	681b      	ldr	r3, [r3, #0]
2400638a:	4a4a      	ldr	r2, [pc, #296]	; (240064b4 <HAL_DMA_IRQHandler+0x1ec>)
2400638c:	4293      	cmp	r3, r2
2400638e:	d004      	beq.n	2400639a <HAL_DMA_IRQHandler+0xd2>
24006390:	687b      	ldr	r3, [r7, #4]
24006392:	681b      	ldr	r3, [r3, #0]
24006394:	4a48      	ldr	r2, [pc, #288]	; (240064b8 <HAL_DMA_IRQHandler+0x1f0>)
24006396:	4293      	cmp	r3, r2
24006398:	d101      	bne.n	2400639e <HAL_DMA_IRQHandler+0xd6>
2400639a:	2301      	movs	r3, #1
2400639c:	e000      	b.n	240063a0 <HAL_DMA_IRQHandler+0xd8>
2400639e:	2300      	movs	r3, #0
240063a0:	2b00      	cmp	r3, #0
240063a2:	f000 842b 	beq.w	24006bfc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
240063a6:	687b      	ldr	r3, [r7, #4]
240063a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
240063aa:	f003 031f 	and.w	r3, r3, #31
240063ae:	2208      	movs	r2, #8
240063b0:	409a      	lsls	r2, r3
240063b2:	69bb      	ldr	r3, [r7, #24]
240063b4:	4013      	ands	r3, r2
240063b6:	2b00      	cmp	r3, #0
240063b8:	f000 80a2 	beq.w	24006500 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
240063bc:	687b      	ldr	r3, [r7, #4]
240063be:	681b      	ldr	r3, [r3, #0]
240063c0:	4a2e      	ldr	r2, [pc, #184]	; (2400647c <HAL_DMA_IRQHandler+0x1b4>)
240063c2:	4293      	cmp	r3, r2
240063c4:	d04a      	beq.n	2400645c <HAL_DMA_IRQHandler+0x194>
240063c6:	687b      	ldr	r3, [r7, #4]
240063c8:	681b      	ldr	r3, [r3, #0]
240063ca:	4a2d      	ldr	r2, [pc, #180]	; (24006480 <HAL_DMA_IRQHandler+0x1b8>)
240063cc:	4293      	cmp	r3, r2
240063ce:	d045      	beq.n	2400645c <HAL_DMA_IRQHandler+0x194>
240063d0:	687b      	ldr	r3, [r7, #4]
240063d2:	681b      	ldr	r3, [r3, #0]
240063d4:	4a2b      	ldr	r2, [pc, #172]	; (24006484 <HAL_DMA_IRQHandler+0x1bc>)
240063d6:	4293      	cmp	r3, r2
240063d8:	d040      	beq.n	2400645c <HAL_DMA_IRQHandler+0x194>
240063da:	687b      	ldr	r3, [r7, #4]
240063dc:	681b      	ldr	r3, [r3, #0]
240063de:	4a2a      	ldr	r2, [pc, #168]	; (24006488 <HAL_DMA_IRQHandler+0x1c0>)
240063e0:	4293      	cmp	r3, r2
240063e2:	d03b      	beq.n	2400645c <HAL_DMA_IRQHandler+0x194>
240063e4:	687b      	ldr	r3, [r7, #4]
240063e6:	681b      	ldr	r3, [r3, #0]
240063e8:	4a28      	ldr	r2, [pc, #160]	; (2400648c <HAL_DMA_IRQHandler+0x1c4>)
240063ea:	4293      	cmp	r3, r2
240063ec:	d036      	beq.n	2400645c <HAL_DMA_IRQHandler+0x194>
240063ee:	687b      	ldr	r3, [r7, #4]
240063f0:	681b      	ldr	r3, [r3, #0]
240063f2:	4a27      	ldr	r2, [pc, #156]	; (24006490 <HAL_DMA_IRQHandler+0x1c8>)
240063f4:	4293      	cmp	r3, r2
240063f6:	d031      	beq.n	2400645c <HAL_DMA_IRQHandler+0x194>
240063f8:	687b      	ldr	r3, [r7, #4]
240063fa:	681b      	ldr	r3, [r3, #0]
240063fc:	4a25      	ldr	r2, [pc, #148]	; (24006494 <HAL_DMA_IRQHandler+0x1cc>)
240063fe:	4293      	cmp	r3, r2
24006400:	d02c      	beq.n	2400645c <HAL_DMA_IRQHandler+0x194>
24006402:	687b      	ldr	r3, [r7, #4]
24006404:	681b      	ldr	r3, [r3, #0]
24006406:	4a24      	ldr	r2, [pc, #144]	; (24006498 <HAL_DMA_IRQHandler+0x1d0>)
24006408:	4293      	cmp	r3, r2
2400640a:	d027      	beq.n	2400645c <HAL_DMA_IRQHandler+0x194>
2400640c:	687b      	ldr	r3, [r7, #4]
2400640e:	681b      	ldr	r3, [r3, #0]
24006410:	4a22      	ldr	r2, [pc, #136]	; (2400649c <HAL_DMA_IRQHandler+0x1d4>)
24006412:	4293      	cmp	r3, r2
24006414:	d022      	beq.n	2400645c <HAL_DMA_IRQHandler+0x194>
24006416:	687b      	ldr	r3, [r7, #4]
24006418:	681b      	ldr	r3, [r3, #0]
2400641a:	4a21      	ldr	r2, [pc, #132]	; (240064a0 <HAL_DMA_IRQHandler+0x1d8>)
2400641c:	4293      	cmp	r3, r2
2400641e:	d01d      	beq.n	2400645c <HAL_DMA_IRQHandler+0x194>
24006420:	687b      	ldr	r3, [r7, #4]
24006422:	681b      	ldr	r3, [r3, #0]
24006424:	4a1f      	ldr	r2, [pc, #124]	; (240064a4 <HAL_DMA_IRQHandler+0x1dc>)
24006426:	4293      	cmp	r3, r2
24006428:	d018      	beq.n	2400645c <HAL_DMA_IRQHandler+0x194>
2400642a:	687b      	ldr	r3, [r7, #4]
2400642c:	681b      	ldr	r3, [r3, #0]
2400642e:	4a1e      	ldr	r2, [pc, #120]	; (240064a8 <HAL_DMA_IRQHandler+0x1e0>)
24006430:	4293      	cmp	r3, r2
24006432:	d013      	beq.n	2400645c <HAL_DMA_IRQHandler+0x194>
24006434:	687b      	ldr	r3, [r7, #4]
24006436:	681b      	ldr	r3, [r3, #0]
24006438:	4a1c      	ldr	r2, [pc, #112]	; (240064ac <HAL_DMA_IRQHandler+0x1e4>)
2400643a:	4293      	cmp	r3, r2
2400643c:	d00e      	beq.n	2400645c <HAL_DMA_IRQHandler+0x194>
2400643e:	687b      	ldr	r3, [r7, #4]
24006440:	681b      	ldr	r3, [r3, #0]
24006442:	4a1b      	ldr	r2, [pc, #108]	; (240064b0 <HAL_DMA_IRQHandler+0x1e8>)
24006444:	4293      	cmp	r3, r2
24006446:	d009      	beq.n	2400645c <HAL_DMA_IRQHandler+0x194>
24006448:	687b      	ldr	r3, [r7, #4]
2400644a:	681b      	ldr	r3, [r3, #0]
2400644c:	4a19      	ldr	r2, [pc, #100]	; (240064b4 <HAL_DMA_IRQHandler+0x1ec>)
2400644e:	4293      	cmp	r3, r2
24006450:	d004      	beq.n	2400645c <HAL_DMA_IRQHandler+0x194>
24006452:	687b      	ldr	r3, [r7, #4]
24006454:	681b      	ldr	r3, [r3, #0]
24006456:	4a18      	ldr	r2, [pc, #96]	; (240064b8 <HAL_DMA_IRQHandler+0x1f0>)
24006458:	4293      	cmp	r3, r2
2400645a:	d12f      	bne.n	240064bc <HAL_DMA_IRQHandler+0x1f4>
2400645c:	687b      	ldr	r3, [r7, #4]
2400645e:	681b      	ldr	r3, [r3, #0]
24006460:	681b      	ldr	r3, [r3, #0]
24006462:	f003 0304 	and.w	r3, r3, #4
24006466:	2b00      	cmp	r3, #0
24006468:	bf14      	ite	ne
2400646a:	2301      	movne	r3, #1
2400646c:	2300      	moveq	r3, #0
2400646e:	b2db      	uxtb	r3, r3
24006470:	e02e      	b.n	240064d0 <HAL_DMA_IRQHandler+0x208>
24006472:	bf00      	nop
24006474:	240004b0 	.word	0x240004b0
24006478:	1b4e81b5 	.word	0x1b4e81b5
2400647c:	40020010 	.word	0x40020010
24006480:	40020028 	.word	0x40020028
24006484:	40020040 	.word	0x40020040
24006488:	40020058 	.word	0x40020058
2400648c:	40020070 	.word	0x40020070
24006490:	40020088 	.word	0x40020088
24006494:	400200a0 	.word	0x400200a0
24006498:	400200b8 	.word	0x400200b8
2400649c:	40020410 	.word	0x40020410
240064a0:	40020428 	.word	0x40020428
240064a4:	40020440 	.word	0x40020440
240064a8:	40020458 	.word	0x40020458
240064ac:	40020470 	.word	0x40020470
240064b0:	40020488 	.word	0x40020488
240064b4:	400204a0 	.word	0x400204a0
240064b8:	400204b8 	.word	0x400204b8
240064bc:	687b      	ldr	r3, [r7, #4]
240064be:	681b      	ldr	r3, [r3, #0]
240064c0:	681b      	ldr	r3, [r3, #0]
240064c2:	f003 0308 	and.w	r3, r3, #8
240064c6:	2b00      	cmp	r3, #0
240064c8:	bf14      	ite	ne
240064ca:	2301      	movne	r3, #1
240064cc:	2300      	moveq	r3, #0
240064ce:	b2db      	uxtb	r3, r3
240064d0:	2b00      	cmp	r3, #0
240064d2:	d015      	beq.n	24006500 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
240064d4:	687b      	ldr	r3, [r7, #4]
240064d6:	681b      	ldr	r3, [r3, #0]
240064d8:	681a      	ldr	r2, [r3, #0]
240064da:	687b      	ldr	r3, [r7, #4]
240064dc:	681b      	ldr	r3, [r3, #0]
240064de:	f022 0204 	bic.w	r2, r2, #4
240064e2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
240064e4:	687b      	ldr	r3, [r7, #4]
240064e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
240064e8:	f003 031f 	and.w	r3, r3, #31
240064ec:	2208      	movs	r2, #8
240064ee:	409a      	lsls	r2, r3
240064f0:	6a3b      	ldr	r3, [r7, #32]
240064f2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
240064f4:	687b      	ldr	r3, [r7, #4]
240064f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
240064f8:	f043 0201 	orr.w	r2, r3, #1
240064fc:	687b      	ldr	r3, [r7, #4]
240064fe:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24006500:	687b      	ldr	r3, [r7, #4]
24006502:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24006504:	f003 031f 	and.w	r3, r3, #31
24006508:	69ba      	ldr	r2, [r7, #24]
2400650a:	fa22 f303 	lsr.w	r3, r2, r3
2400650e:	f003 0301 	and.w	r3, r3, #1
24006512:	2b00      	cmp	r3, #0
24006514:	d06e      	beq.n	240065f4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
24006516:	687b      	ldr	r3, [r7, #4]
24006518:	681b      	ldr	r3, [r3, #0]
2400651a:	4a69      	ldr	r2, [pc, #420]	; (240066c0 <HAL_DMA_IRQHandler+0x3f8>)
2400651c:	4293      	cmp	r3, r2
2400651e:	d04a      	beq.n	240065b6 <HAL_DMA_IRQHandler+0x2ee>
24006520:	687b      	ldr	r3, [r7, #4]
24006522:	681b      	ldr	r3, [r3, #0]
24006524:	4a67      	ldr	r2, [pc, #412]	; (240066c4 <HAL_DMA_IRQHandler+0x3fc>)
24006526:	4293      	cmp	r3, r2
24006528:	d045      	beq.n	240065b6 <HAL_DMA_IRQHandler+0x2ee>
2400652a:	687b      	ldr	r3, [r7, #4]
2400652c:	681b      	ldr	r3, [r3, #0]
2400652e:	4a66      	ldr	r2, [pc, #408]	; (240066c8 <HAL_DMA_IRQHandler+0x400>)
24006530:	4293      	cmp	r3, r2
24006532:	d040      	beq.n	240065b6 <HAL_DMA_IRQHandler+0x2ee>
24006534:	687b      	ldr	r3, [r7, #4]
24006536:	681b      	ldr	r3, [r3, #0]
24006538:	4a64      	ldr	r2, [pc, #400]	; (240066cc <HAL_DMA_IRQHandler+0x404>)
2400653a:	4293      	cmp	r3, r2
2400653c:	d03b      	beq.n	240065b6 <HAL_DMA_IRQHandler+0x2ee>
2400653e:	687b      	ldr	r3, [r7, #4]
24006540:	681b      	ldr	r3, [r3, #0]
24006542:	4a63      	ldr	r2, [pc, #396]	; (240066d0 <HAL_DMA_IRQHandler+0x408>)
24006544:	4293      	cmp	r3, r2
24006546:	d036      	beq.n	240065b6 <HAL_DMA_IRQHandler+0x2ee>
24006548:	687b      	ldr	r3, [r7, #4]
2400654a:	681b      	ldr	r3, [r3, #0]
2400654c:	4a61      	ldr	r2, [pc, #388]	; (240066d4 <HAL_DMA_IRQHandler+0x40c>)
2400654e:	4293      	cmp	r3, r2
24006550:	d031      	beq.n	240065b6 <HAL_DMA_IRQHandler+0x2ee>
24006552:	687b      	ldr	r3, [r7, #4]
24006554:	681b      	ldr	r3, [r3, #0]
24006556:	4a60      	ldr	r2, [pc, #384]	; (240066d8 <HAL_DMA_IRQHandler+0x410>)
24006558:	4293      	cmp	r3, r2
2400655a:	d02c      	beq.n	240065b6 <HAL_DMA_IRQHandler+0x2ee>
2400655c:	687b      	ldr	r3, [r7, #4]
2400655e:	681b      	ldr	r3, [r3, #0]
24006560:	4a5e      	ldr	r2, [pc, #376]	; (240066dc <HAL_DMA_IRQHandler+0x414>)
24006562:	4293      	cmp	r3, r2
24006564:	d027      	beq.n	240065b6 <HAL_DMA_IRQHandler+0x2ee>
24006566:	687b      	ldr	r3, [r7, #4]
24006568:	681b      	ldr	r3, [r3, #0]
2400656a:	4a5d      	ldr	r2, [pc, #372]	; (240066e0 <HAL_DMA_IRQHandler+0x418>)
2400656c:	4293      	cmp	r3, r2
2400656e:	d022      	beq.n	240065b6 <HAL_DMA_IRQHandler+0x2ee>
24006570:	687b      	ldr	r3, [r7, #4]
24006572:	681b      	ldr	r3, [r3, #0]
24006574:	4a5b      	ldr	r2, [pc, #364]	; (240066e4 <HAL_DMA_IRQHandler+0x41c>)
24006576:	4293      	cmp	r3, r2
24006578:	d01d      	beq.n	240065b6 <HAL_DMA_IRQHandler+0x2ee>
2400657a:	687b      	ldr	r3, [r7, #4]
2400657c:	681b      	ldr	r3, [r3, #0]
2400657e:	4a5a      	ldr	r2, [pc, #360]	; (240066e8 <HAL_DMA_IRQHandler+0x420>)
24006580:	4293      	cmp	r3, r2
24006582:	d018      	beq.n	240065b6 <HAL_DMA_IRQHandler+0x2ee>
24006584:	687b      	ldr	r3, [r7, #4]
24006586:	681b      	ldr	r3, [r3, #0]
24006588:	4a58      	ldr	r2, [pc, #352]	; (240066ec <HAL_DMA_IRQHandler+0x424>)
2400658a:	4293      	cmp	r3, r2
2400658c:	d013      	beq.n	240065b6 <HAL_DMA_IRQHandler+0x2ee>
2400658e:	687b      	ldr	r3, [r7, #4]
24006590:	681b      	ldr	r3, [r3, #0]
24006592:	4a57      	ldr	r2, [pc, #348]	; (240066f0 <HAL_DMA_IRQHandler+0x428>)
24006594:	4293      	cmp	r3, r2
24006596:	d00e      	beq.n	240065b6 <HAL_DMA_IRQHandler+0x2ee>
24006598:	687b      	ldr	r3, [r7, #4]
2400659a:	681b      	ldr	r3, [r3, #0]
2400659c:	4a55      	ldr	r2, [pc, #340]	; (240066f4 <HAL_DMA_IRQHandler+0x42c>)
2400659e:	4293      	cmp	r3, r2
240065a0:	d009      	beq.n	240065b6 <HAL_DMA_IRQHandler+0x2ee>
240065a2:	687b      	ldr	r3, [r7, #4]
240065a4:	681b      	ldr	r3, [r3, #0]
240065a6:	4a54      	ldr	r2, [pc, #336]	; (240066f8 <HAL_DMA_IRQHandler+0x430>)
240065a8:	4293      	cmp	r3, r2
240065aa:	d004      	beq.n	240065b6 <HAL_DMA_IRQHandler+0x2ee>
240065ac:	687b      	ldr	r3, [r7, #4]
240065ae:	681b      	ldr	r3, [r3, #0]
240065b0:	4a52      	ldr	r2, [pc, #328]	; (240066fc <HAL_DMA_IRQHandler+0x434>)
240065b2:	4293      	cmp	r3, r2
240065b4:	d10a      	bne.n	240065cc <HAL_DMA_IRQHandler+0x304>
240065b6:	687b      	ldr	r3, [r7, #4]
240065b8:	681b      	ldr	r3, [r3, #0]
240065ba:	695b      	ldr	r3, [r3, #20]
240065bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
240065c0:	2b00      	cmp	r3, #0
240065c2:	bf14      	ite	ne
240065c4:	2301      	movne	r3, #1
240065c6:	2300      	moveq	r3, #0
240065c8:	b2db      	uxtb	r3, r3
240065ca:	e003      	b.n	240065d4 <HAL_DMA_IRQHandler+0x30c>
240065cc:	687b      	ldr	r3, [r7, #4]
240065ce:	681b      	ldr	r3, [r3, #0]
240065d0:	681b      	ldr	r3, [r3, #0]
240065d2:	2300      	movs	r3, #0
240065d4:	2b00      	cmp	r3, #0
240065d6:	d00d      	beq.n	240065f4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
240065d8:	687b      	ldr	r3, [r7, #4]
240065da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
240065dc:	f003 031f 	and.w	r3, r3, #31
240065e0:	2201      	movs	r2, #1
240065e2:	409a      	lsls	r2, r3
240065e4:	6a3b      	ldr	r3, [r7, #32]
240065e6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
240065e8:	687b      	ldr	r3, [r7, #4]
240065ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
240065ec:	f043 0202 	orr.w	r2, r3, #2
240065f0:	687b      	ldr	r3, [r7, #4]
240065f2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
240065f4:	687b      	ldr	r3, [r7, #4]
240065f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
240065f8:	f003 031f 	and.w	r3, r3, #31
240065fc:	2204      	movs	r2, #4
240065fe:	409a      	lsls	r2, r3
24006600:	69bb      	ldr	r3, [r7, #24]
24006602:	4013      	ands	r3, r2
24006604:	2b00      	cmp	r3, #0
24006606:	f000 808f 	beq.w	24006728 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
2400660a:	687b      	ldr	r3, [r7, #4]
2400660c:	681b      	ldr	r3, [r3, #0]
2400660e:	4a2c      	ldr	r2, [pc, #176]	; (240066c0 <HAL_DMA_IRQHandler+0x3f8>)
24006610:	4293      	cmp	r3, r2
24006612:	d04a      	beq.n	240066aa <HAL_DMA_IRQHandler+0x3e2>
24006614:	687b      	ldr	r3, [r7, #4]
24006616:	681b      	ldr	r3, [r3, #0]
24006618:	4a2a      	ldr	r2, [pc, #168]	; (240066c4 <HAL_DMA_IRQHandler+0x3fc>)
2400661a:	4293      	cmp	r3, r2
2400661c:	d045      	beq.n	240066aa <HAL_DMA_IRQHandler+0x3e2>
2400661e:	687b      	ldr	r3, [r7, #4]
24006620:	681b      	ldr	r3, [r3, #0]
24006622:	4a29      	ldr	r2, [pc, #164]	; (240066c8 <HAL_DMA_IRQHandler+0x400>)
24006624:	4293      	cmp	r3, r2
24006626:	d040      	beq.n	240066aa <HAL_DMA_IRQHandler+0x3e2>
24006628:	687b      	ldr	r3, [r7, #4]
2400662a:	681b      	ldr	r3, [r3, #0]
2400662c:	4a27      	ldr	r2, [pc, #156]	; (240066cc <HAL_DMA_IRQHandler+0x404>)
2400662e:	4293      	cmp	r3, r2
24006630:	d03b      	beq.n	240066aa <HAL_DMA_IRQHandler+0x3e2>
24006632:	687b      	ldr	r3, [r7, #4]
24006634:	681b      	ldr	r3, [r3, #0]
24006636:	4a26      	ldr	r2, [pc, #152]	; (240066d0 <HAL_DMA_IRQHandler+0x408>)
24006638:	4293      	cmp	r3, r2
2400663a:	d036      	beq.n	240066aa <HAL_DMA_IRQHandler+0x3e2>
2400663c:	687b      	ldr	r3, [r7, #4]
2400663e:	681b      	ldr	r3, [r3, #0]
24006640:	4a24      	ldr	r2, [pc, #144]	; (240066d4 <HAL_DMA_IRQHandler+0x40c>)
24006642:	4293      	cmp	r3, r2
24006644:	d031      	beq.n	240066aa <HAL_DMA_IRQHandler+0x3e2>
24006646:	687b      	ldr	r3, [r7, #4]
24006648:	681b      	ldr	r3, [r3, #0]
2400664a:	4a23      	ldr	r2, [pc, #140]	; (240066d8 <HAL_DMA_IRQHandler+0x410>)
2400664c:	4293      	cmp	r3, r2
2400664e:	d02c      	beq.n	240066aa <HAL_DMA_IRQHandler+0x3e2>
24006650:	687b      	ldr	r3, [r7, #4]
24006652:	681b      	ldr	r3, [r3, #0]
24006654:	4a21      	ldr	r2, [pc, #132]	; (240066dc <HAL_DMA_IRQHandler+0x414>)
24006656:	4293      	cmp	r3, r2
24006658:	d027      	beq.n	240066aa <HAL_DMA_IRQHandler+0x3e2>
2400665a:	687b      	ldr	r3, [r7, #4]
2400665c:	681b      	ldr	r3, [r3, #0]
2400665e:	4a20      	ldr	r2, [pc, #128]	; (240066e0 <HAL_DMA_IRQHandler+0x418>)
24006660:	4293      	cmp	r3, r2
24006662:	d022      	beq.n	240066aa <HAL_DMA_IRQHandler+0x3e2>
24006664:	687b      	ldr	r3, [r7, #4]
24006666:	681b      	ldr	r3, [r3, #0]
24006668:	4a1e      	ldr	r2, [pc, #120]	; (240066e4 <HAL_DMA_IRQHandler+0x41c>)
2400666a:	4293      	cmp	r3, r2
2400666c:	d01d      	beq.n	240066aa <HAL_DMA_IRQHandler+0x3e2>
2400666e:	687b      	ldr	r3, [r7, #4]
24006670:	681b      	ldr	r3, [r3, #0]
24006672:	4a1d      	ldr	r2, [pc, #116]	; (240066e8 <HAL_DMA_IRQHandler+0x420>)
24006674:	4293      	cmp	r3, r2
24006676:	d018      	beq.n	240066aa <HAL_DMA_IRQHandler+0x3e2>
24006678:	687b      	ldr	r3, [r7, #4]
2400667a:	681b      	ldr	r3, [r3, #0]
2400667c:	4a1b      	ldr	r2, [pc, #108]	; (240066ec <HAL_DMA_IRQHandler+0x424>)
2400667e:	4293      	cmp	r3, r2
24006680:	d013      	beq.n	240066aa <HAL_DMA_IRQHandler+0x3e2>
24006682:	687b      	ldr	r3, [r7, #4]
24006684:	681b      	ldr	r3, [r3, #0]
24006686:	4a1a      	ldr	r2, [pc, #104]	; (240066f0 <HAL_DMA_IRQHandler+0x428>)
24006688:	4293      	cmp	r3, r2
2400668a:	d00e      	beq.n	240066aa <HAL_DMA_IRQHandler+0x3e2>
2400668c:	687b      	ldr	r3, [r7, #4]
2400668e:	681b      	ldr	r3, [r3, #0]
24006690:	4a18      	ldr	r2, [pc, #96]	; (240066f4 <HAL_DMA_IRQHandler+0x42c>)
24006692:	4293      	cmp	r3, r2
24006694:	d009      	beq.n	240066aa <HAL_DMA_IRQHandler+0x3e2>
24006696:	687b      	ldr	r3, [r7, #4]
24006698:	681b      	ldr	r3, [r3, #0]
2400669a:	4a17      	ldr	r2, [pc, #92]	; (240066f8 <HAL_DMA_IRQHandler+0x430>)
2400669c:	4293      	cmp	r3, r2
2400669e:	d004      	beq.n	240066aa <HAL_DMA_IRQHandler+0x3e2>
240066a0:	687b      	ldr	r3, [r7, #4]
240066a2:	681b      	ldr	r3, [r3, #0]
240066a4:	4a15      	ldr	r2, [pc, #84]	; (240066fc <HAL_DMA_IRQHandler+0x434>)
240066a6:	4293      	cmp	r3, r2
240066a8:	d12a      	bne.n	24006700 <HAL_DMA_IRQHandler+0x438>
240066aa:	687b      	ldr	r3, [r7, #4]
240066ac:	681b      	ldr	r3, [r3, #0]
240066ae:	681b      	ldr	r3, [r3, #0]
240066b0:	f003 0302 	and.w	r3, r3, #2
240066b4:	2b00      	cmp	r3, #0
240066b6:	bf14      	ite	ne
240066b8:	2301      	movne	r3, #1
240066ba:	2300      	moveq	r3, #0
240066bc:	b2db      	uxtb	r3, r3
240066be:	e023      	b.n	24006708 <HAL_DMA_IRQHandler+0x440>
240066c0:	40020010 	.word	0x40020010
240066c4:	40020028 	.word	0x40020028
240066c8:	40020040 	.word	0x40020040
240066cc:	40020058 	.word	0x40020058
240066d0:	40020070 	.word	0x40020070
240066d4:	40020088 	.word	0x40020088
240066d8:	400200a0 	.word	0x400200a0
240066dc:	400200b8 	.word	0x400200b8
240066e0:	40020410 	.word	0x40020410
240066e4:	40020428 	.word	0x40020428
240066e8:	40020440 	.word	0x40020440
240066ec:	40020458 	.word	0x40020458
240066f0:	40020470 	.word	0x40020470
240066f4:	40020488 	.word	0x40020488
240066f8:	400204a0 	.word	0x400204a0
240066fc:	400204b8 	.word	0x400204b8
24006700:	687b      	ldr	r3, [r7, #4]
24006702:	681b      	ldr	r3, [r3, #0]
24006704:	681b      	ldr	r3, [r3, #0]
24006706:	2300      	movs	r3, #0
24006708:	2b00      	cmp	r3, #0
2400670a:	d00d      	beq.n	24006728 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
2400670c:	687b      	ldr	r3, [r7, #4]
2400670e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24006710:	f003 031f 	and.w	r3, r3, #31
24006714:	2204      	movs	r2, #4
24006716:	409a      	lsls	r2, r3
24006718:	6a3b      	ldr	r3, [r7, #32]
2400671a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
2400671c:	687b      	ldr	r3, [r7, #4]
2400671e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24006720:	f043 0204 	orr.w	r2, r3, #4
24006724:	687b      	ldr	r3, [r7, #4]
24006726:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24006728:	687b      	ldr	r3, [r7, #4]
2400672a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2400672c:	f003 031f 	and.w	r3, r3, #31
24006730:	2210      	movs	r2, #16
24006732:	409a      	lsls	r2, r3
24006734:	69bb      	ldr	r3, [r7, #24]
24006736:	4013      	ands	r3, r2
24006738:	2b00      	cmp	r3, #0
2400673a:	f000 80a6 	beq.w	2400688a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
2400673e:	687b      	ldr	r3, [r7, #4]
24006740:	681b      	ldr	r3, [r3, #0]
24006742:	4a85      	ldr	r2, [pc, #532]	; (24006958 <HAL_DMA_IRQHandler+0x690>)
24006744:	4293      	cmp	r3, r2
24006746:	d04a      	beq.n	240067de <HAL_DMA_IRQHandler+0x516>
24006748:	687b      	ldr	r3, [r7, #4]
2400674a:	681b      	ldr	r3, [r3, #0]
2400674c:	4a83      	ldr	r2, [pc, #524]	; (2400695c <HAL_DMA_IRQHandler+0x694>)
2400674e:	4293      	cmp	r3, r2
24006750:	d045      	beq.n	240067de <HAL_DMA_IRQHandler+0x516>
24006752:	687b      	ldr	r3, [r7, #4]
24006754:	681b      	ldr	r3, [r3, #0]
24006756:	4a82      	ldr	r2, [pc, #520]	; (24006960 <HAL_DMA_IRQHandler+0x698>)
24006758:	4293      	cmp	r3, r2
2400675a:	d040      	beq.n	240067de <HAL_DMA_IRQHandler+0x516>
2400675c:	687b      	ldr	r3, [r7, #4]
2400675e:	681b      	ldr	r3, [r3, #0]
24006760:	4a80      	ldr	r2, [pc, #512]	; (24006964 <HAL_DMA_IRQHandler+0x69c>)
24006762:	4293      	cmp	r3, r2
24006764:	d03b      	beq.n	240067de <HAL_DMA_IRQHandler+0x516>
24006766:	687b      	ldr	r3, [r7, #4]
24006768:	681b      	ldr	r3, [r3, #0]
2400676a:	4a7f      	ldr	r2, [pc, #508]	; (24006968 <HAL_DMA_IRQHandler+0x6a0>)
2400676c:	4293      	cmp	r3, r2
2400676e:	d036      	beq.n	240067de <HAL_DMA_IRQHandler+0x516>
24006770:	687b      	ldr	r3, [r7, #4]
24006772:	681b      	ldr	r3, [r3, #0]
24006774:	4a7d      	ldr	r2, [pc, #500]	; (2400696c <HAL_DMA_IRQHandler+0x6a4>)
24006776:	4293      	cmp	r3, r2
24006778:	d031      	beq.n	240067de <HAL_DMA_IRQHandler+0x516>
2400677a:	687b      	ldr	r3, [r7, #4]
2400677c:	681b      	ldr	r3, [r3, #0]
2400677e:	4a7c      	ldr	r2, [pc, #496]	; (24006970 <HAL_DMA_IRQHandler+0x6a8>)
24006780:	4293      	cmp	r3, r2
24006782:	d02c      	beq.n	240067de <HAL_DMA_IRQHandler+0x516>
24006784:	687b      	ldr	r3, [r7, #4]
24006786:	681b      	ldr	r3, [r3, #0]
24006788:	4a7a      	ldr	r2, [pc, #488]	; (24006974 <HAL_DMA_IRQHandler+0x6ac>)
2400678a:	4293      	cmp	r3, r2
2400678c:	d027      	beq.n	240067de <HAL_DMA_IRQHandler+0x516>
2400678e:	687b      	ldr	r3, [r7, #4]
24006790:	681b      	ldr	r3, [r3, #0]
24006792:	4a79      	ldr	r2, [pc, #484]	; (24006978 <HAL_DMA_IRQHandler+0x6b0>)
24006794:	4293      	cmp	r3, r2
24006796:	d022      	beq.n	240067de <HAL_DMA_IRQHandler+0x516>
24006798:	687b      	ldr	r3, [r7, #4]
2400679a:	681b      	ldr	r3, [r3, #0]
2400679c:	4a77      	ldr	r2, [pc, #476]	; (2400697c <HAL_DMA_IRQHandler+0x6b4>)
2400679e:	4293      	cmp	r3, r2
240067a0:	d01d      	beq.n	240067de <HAL_DMA_IRQHandler+0x516>
240067a2:	687b      	ldr	r3, [r7, #4]
240067a4:	681b      	ldr	r3, [r3, #0]
240067a6:	4a76      	ldr	r2, [pc, #472]	; (24006980 <HAL_DMA_IRQHandler+0x6b8>)
240067a8:	4293      	cmp	r3, r2
240067aa:	d018      	beq.n	240067de <HAL_DMA_IRQHandler+0x516>
240067ac:	687b      	ldr	r3, [r7, #4]
240067ae:	681b      	ldr	r3, [r3, #0]
240067b0:	4a74      	ldr	r2, [pc, #464]	; (24006984 <HAL_DMA_IRQHandler+0x6bc>)
240067b2:	4293      	cmp	r3, r2
240067b4:	d013      	beq.n	240067de <HAL_DMA_IRQHandler+0x516>
240067b6:	687b      	ldr	r3, [r7, #4]
240067b8:	681b      	ldr	r3, [r3, #0]
240067ba:	4a73      	ldr	r2, [pc, #460]	; (24006988 <HAL_DMA_IRQHandler+0x6c0>)
240067bc:	4293      	cmp	r3, r2
240067be:	d00e      	beq.n	240067de <HAL_DMA_IRQHandler+0x516>
240067c0:	687b      	ldr	r3, [r7, #4]
240067c2:	681b      	ldr	r3, [r3, #0]
240067c4:	4a71      	ldr	r2, [pc, #452]	; (2400698c <HAL_DMA_IRQHandler+0x6c4>)
240067c6:	4293      	cmp	r3, r2
240067c8:	d009      	beq.n	240067de <HAL_DMA_IRQHandler+0x516>
240067ca:	687b      	ldr	r3, [r7, #4]
240067cc:	681b      	ldr	r3, [r3, #0]
240067ce:	4a70      	ldr	r2, [pc, #448]	; (24006990 <HAL_DMA_IRQHandler+0x6c8>)
240067d0:	4293      	cmp	r3, r2
240067d2:	d004      	beq.n	240067de <HAL_DMA_IRQHandler+0x516>
240067d4:	687b      	ldr	r3, [r7, #4]
240067d6:	681b      	ldr	r3, [r3, #0]
240067d8:	4a6e      	ldr	r2, [pc, #440]	; (24006994 <HAL_DMA_IRQHandler+0x6cc>)
240067da:	4293      	cmp	r3, r2
240067dc:	d10a      	bne.n	240067f4 <HAL_DMA_IRQHandler+0x52c>
240067de:	687b      	ldr	r3, [r7, #4]
240067e0:	681b      	ldr	r3, [r3, #0]
240067e2:	681b      	ldr	r3, [r3, #0]
240067e4:	f003 0308 	and.w	r3, r3, #8
240067e8:	2b00      	cmp	r3, #0
240067ea:	bf14      	ite	ne
240067ec:	2301      	movne	r3, #1
240067ee:	2300      	moveq	r3, #0
240067f0:	b2db      	uxtb	r3, r3
240067f2:	e009      	b.n	24006808 <HAL_DMA_IRQHandler+0x540>
240067f4:	687b      	ldr	r3, [r7, #4]
240067f6:	681b      	ldr	r3, [r3, #0]
240067f8:	681b      	ldr	r3, [r3, #0]
240067fa:	f003 0304 	and.w	r3, r3, #4
240067fe:	2b00      	cmp	r3, #0
24006800:	bf14      	ite	ne
24006802:	2301      	movne	r3, #1
24006804:	2300      	moveq	r3, #0
24006806:	b2db      	uxtb	r3, r3
24006808:	2b00      	cmp	r3, #0
2400680a:	d03e      	beq.n	2400688a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
2400680c:	687b      	ldr	r3, [r7, #4]
2400680e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24006810:	f003 031f 	and.w	r3, r3, #31
24006814:	2210      	movs	r2, #16
24006816:	409a      	lsls	r2, r3
24006818:	6a3b      	ldr	r3, [r7, #32]
2400681a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
2400681c:	687b      	ldr	r3, [r7, #4]
2400681e:	681b      	ldr	r3, [r3, #0]
24006820:	681b      	ldr	r3, [r3, #0]
24006822:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
24006826:	2b00      	cmp	r3, #0
24006828:	d018      	beq.n	2400685c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
2400682a:	687b      	ldr	r3, [r7, #4]
2400682c:	681b      	ldr	r3, [r3, #0]
2400682e:	681b      	ldr	r3, [r3, #0]
24006830:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
24006834:	2b00      	cmp	r3, #0
24006836:	d108      	bne.n	2400684a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
24006838:	687b      	ldr	r3, [r7, #4]
2400683a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2400683c:	2b00      	cmp	r3, #0
2400683e:	d024      	beq.n	2400688a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
24006840:	687b      	ldr	r3, [r7, #4]
24006842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24006844:	6878      	ldr	r0, [r7, #4]
24006846:	4798      	blx	r3
24006848:	e01f      	b.n	2400688a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
2400684a:	687b      	ldr	r3, [r7, #4]
2400684c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2400684e:	2b00      	cmp	r3, #0
24006850:	d01b      	beq.n	2400688a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
24006852:	687b      	ldr	r3, [r7, #4]
24006854:	6c9b      	ldr	r3, [r3, #72]	; 0x48
24006856:	6878      	ldr	r0, [r7, #4]
24006858:	4798      	blx	r3
2400685a:	e016      	b.n	2400688a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
2400685c:	687b      	ldr	r3, [r7, #4]
2400685e:	681b      	ldr	r3, [r3, #0]
24006860:	681b      	ldr	r3, [r3, #0]
24006862:	f403 7380 	and.w	r3, r3, #256	; 0x100
24006866:	2b00      	cmp	r3, #0
24006868:	d107      	bne.n	2400687a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
2400686a:	687b      	ldr	r3, [r7, #4]
2400686c:	681b      	ldr	r3, [r3, #0]
2400686e:	681a      	ldr	r2, [r3, #0]
24006870:	687b      	ldr	r3, [r7, #4]
24006872:	681b      	ldr	r3, [r3, #0]
24006874:	f022 0208 	bic.w	r2, r2, #8
24006878:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
2400687a:	687b      	ldr	r3, [r7, #4]
2400687c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2400687e:	2b00      	cmp	r3, #0
24006880:	d003      	beq.n	2400688a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
24006882:	687b      	ldr	r3, [r7, #4]
24006884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24006886:	6878      	ldr	r0, [r7, #4]
24006888:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
2400688a:	687b      	ldr	r3, [r7, #4]
2400688c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2400688e:	f003 031f 	and.w	r3, r3, #31
24006892:	2220      	movs	r2, #32
24006894:	409a      	lsls	r2, r3
24006896:	69bb      	ldr	r3, [r7, #24]
24006898:	4013      	ands	r3, r2
2400689a:	2b00      	cmp	r3, #0
2400689c:	f000 8110 	beq.w	24006ac0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
240068a0:	687b      	ldr	r3, [r7, #4]
240068a2:	681b      	ldr	r3, [r3, #0]
240068a4:	4a2c      	ldr	r2, [pc, #176]	; (24006958 <HAL_DMA_IRQHandler+0x690>)
240068a6:	4293      	cmp	r3, r2
240068a8:	d04a      	beq.n	24006940 <HAL_DMA_IRQHandler+0x678>
240068aa:	687b      	ldr	r3, [r7, #4]
240068ac:	681b      	ldr	r3, [r3, #0]
240068ae:	4a2b      	ldr	r2, [pc, #172]	; (2400695c <HAL_DMA_IRQHandler+0x694>)
240068b0:	4293      	cmp	r3, r2
240068b2:	d045      	beq.n	24006940 <HAL_DMA_IRQHandler+0x678>
240068b4:	687b      	ldr	r3, [r7, #4]
240068b6:	681b      	ldr	r3, [r3, #0]
240068b8:	4a29      	ldr	r2, [pc, #164]	; (24006960 <HAL_DMA_IRQHandler+0x698>)
240068ba:	4293      	cmp	r3, r2
240068bc:	d040      	beq.n	24006940 <HAL_DMA_IRQHandler+0x678>
240068be:	687b      	ldr	r3, [r7, #4]
240068c0:	681b      	ldr	r3, [r3, #0]
240068c2:	4a28      	ldr	r2, [pc, #160]	; (24006964 <HAL_DMA_IRQHandler+0x69c>)
240068c4:	4293      	cmp	r3, r2
240068c6:	d03b      	beq.n	24006940 <HAL_DMA_IRQHandler+0x678>
240068c8:	687b      	ldr	r3, [r7, #4]
240068ca:	681b      	ldr	r3, [r3, #0]
240068cc:	4a26      	ldr	r2, [pc, #152]	; (24006968 <HAL_DMA_IRQHandler+0x6a0>)
240068ce:	4293      	cmp	r3, r2
240068d0:	d036      	beq.n	24006940 <HAL_DMA_IRQHandler+0x678>
240068d2:	687b      	ldr	r3, [r7, #4]
240068d4:	681b      	ldr	r3, [r3, #0]
240068d6:	4a25      	ldr	r2, [pc, #148]	; (2400696c <HAL_DMA_IRQHandler+0x6a4>)
240068d8:	4293      	cmp	r3, r2
240068da:	d031      	beq.n	24006940 <HAL_DMA_IRQHandler+0x678>
240068dc:	687b      	ldr	r3, [r7, #4]
240068de:	681b      	ldr	r3, [r3, #0]
240068e0:	4a23      	ldr	r2, [pc, #140]	; (24006970 <HAL_DMA_IRQHandler+0x6a8>)
240068e2:	4293      	cmp	r3, r2
240068e4:	d02c      	beq.n	24006940 <HAL_DMA_IRQHandler+0x678>
240068e6:	687b      	ldr	r3, [r7, #4]
240068e8:	681b      	ldr	r3, [r3, #0]
240068ea:	4a22      	ldr	r2, [pc, #136]	; (24006974 <HAL_DMA_IRQHandler+0x6ac>)
240068ec:	4293      	cmp	r3, r2
240068ee:	d027      	beq.n	24006940 <HAL_DMA_IRQHandler+0x678>
240068f0:	687b      	ldr	r3, [r7, #4]
240068f2:	681b      	ldr	r3, [r3, #0]
240068f4:	4a20      	ldr	r2, [pc, #128]	; (24006978 <HAL_DMA_IRQHandler+0x6b0>)
240068f6:	4293      	cmp	r3, r2
240068f8:	d022      	beq.n	24006940 <HAL_DMA_IRQHandler+0x678>
240068fa:	687b      	ldr	r3, [r7, #4]
240068fc:	681b      	ldr	r3, [r3, #0]
240068fe:	4a1f      	ldr	r2, [pc, #124]	; (2400697c <HAL_DMA_IRQHandler+0x6b4>)
24006900:	4293      	cmp	r3, r2
24006902:	d01d      	beq.n	24006940 <HAL_DMA_IRQHandler+0x678>
24006904:	687b      	ldr	r3, [r7, #4]
24006906:	681b      	ldr	r3, [r3, #0]
24006908:	4a1d      	ldr	r2, [pc, #116]	; (24006980 <HAL_DMA_IRQHandler+0x6b8>)
2400690a:	4293      	cmp	r3, r2
2400690c:	d018      	beq.n	24006940 <HAL_DMA_IRQHandler+0x678>
2400690e:	687b      	ldr	r3, [r7, #4]
24006910:	681b      	ldr	r3, [r3, #0]
24006912:	4a1c      	ldr	r2, [pc, #112]	; (24006984 <HAL_DMA_IRQHandler+0x6bc>)
24006914:	4293      	cmp	r3, r2
24006916:	d013      	beq.n	24006940 <HAL_DMA_IRQHandler+0x678>
24006918:	687b      	ldr	r3, [r7, #4]
2400691a:	681b      	ldr	r3, [r3, #0]
2400691c:	4a1a      	ldr	r2, [pc, #104]	; (24006988 <HAL_DMA_IRQHandler+0x6c0>)
2400691e:	4293      	cmp	r3, r2
24006920:	d00e      	beq.n	24006940 <HAL_DMA_IRQHandler+0x678>
24006922:	687b      	ldr	r3, [r7, #4]
24006924:	681b      	ldr	r3, [r3, #0]
24006926:	4a19      	ldr	r2, [pc, #100]	; (2400698c <HAL_DMA_IRQHandler+0x6c4>)
24006928:	4293      	cmp	r3, r2
2400692a:	d009      	beq.n	24006940 <HAL_DMA_IRQHandler+0x678>
2400692c:	687b      	ldr	r3, [r7, #4]
2400692e:	681b      	ldr	r3, [r3, #0]
24006930:	4a17      	ldr	r2, [pc, #92]	; (24006990 <HAL_DMA_IRQHandler+0x6c8>)
24006932:	4293      	cmp	r3, r2
24006934:	d004      	beq.n	24006940 <HAL_DMA_IRQHandler+0x678>
24006936:	687b      	ldr	r3, [r7, #4]
24006938:	681b      	ldr	r3, [r3, #0]
2400693a:	4a16      	ldr	r2, [pc, #88]	; (24006994 <HAL_DMA_IRQHandler+0x6cc>)
2400693c:	4293      	cmp	r3, r2
2400693e:	d12b      	bne.n	24006998 <HAL_DMA_IRQHandler+0x6d0>
24006940:	687b      	ldr	r3, [r7, #4]
24006942:	681b      	ldr	r3, [r3, #0]
24006944:	681b      	ldr	r3, [r3, #0]
24006946:	f003 0310 	and.w	r3, r3, #16
2400694a:	2b00      	cmp	r3, #0
2400694c:	bf14      	ite	ne
2400694e:	2301      	movne	r3, #1
24006950:	2300      	moveq	r3, #0
24006952:	b2db      	uxtb	r3, r3
24006954:	e02a      	b.n	240069ac <HAL_DMA_IRQHandler+0x6e4>
24006956:	bf00      	nop
24006958:	40020010 	.word	0x40020010
2400695c:	40020028 	.word	0x40020028
24006960:	40020040 	.word	0x40020040
24006964:	40020058 	.word	0x40020058
24006968:	40020070 	.word	0x40020070
2400696c:	40020088 	.word	0x40020088
24006970:	400200a0 	.word	0x400200a0
24006974:	400200b8 	.word	0x400200b8
24006978:	40020410 	.word	0x40020410
2400697c:	40020428 	.word	0x40020428
24006980:	40020440 	.word	0x40020440
24006984:	40020458 	.word	0x40020458
24006988:	40020470 	.word	0x40020470
2400698c:	40020488 	.word	0x40020488
24006990:	400204a0 	.word	0x400204a0
24006994:	400204b8 	.word	0x400204b8
24006998:	687b      	ldr	r3, [r7, #4]
2400699a:	681b      	ldr	r3, [r3, #0]
2400699c:	681b      	ldr	r3, [r3, #0]
2400699e:	f003 0302 	and.w	r3, r3, #2
240069a2:	2b00      	cmp	r3, #0
240069a4:	bf14      	ite	ne
240069a6:	2301      	movne	r3, #1
240069a8:	2300      	moveq	r3, #0
240069aa:	b2db      	uxtb	r3, r3
240069ac:	2b00      	cmp	r3, #0
240069ae:	f000 8087 	beq.w	24006ac0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
240069b2:	687b      	ldr	r3, [r7, #4]
240069b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
240069b6:	f003 031f 	and.w	r3, r3, #31
240069ba:	2220      	movs	r2, #32
240069bc:	409a      	lsls	r2, r3
240069be:	6a3b      	ldr	r3, [r7, #32]
240069c0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
240069c2:	687b      	ldr	r3, [r7, #4]
240069c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
240069c8:	b2db      	uxtb	r3, r3
240069ca:	2b04      	cmp	r3, #4
240069cc:	d139      	bne.n	24006a42 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
240069ce:	687b      	ldr	r3, [r7, #4]
240069d0:	681b      	ldr	r3, [r3, #0]
240069d2:	681a      	ldr	r2, [r3, #0]
240069d4:	687b      	ldr	r3, [r7, #4]
240069d6:	681b      	ldr	r3, [r3, #0]
240069d8:	f022 0216 	bic.w	r2, r2, #22
240069dc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
240069de:	687b      	ldr	r3, [r7, #4]
240069e0:	681b      	ldr	r3, [r3, #0]
240069e2:	695a      	ldr	r2, [r3, #20]
240069e4:	687b      	ldr	r3, [r7, #4]
240069e6:	681b      	ldr	r3, [r3, #0]
240069e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
240069ec:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
240069ee:	687b      	ldr	r3, [r7, #4]
240069f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
240069f2:	2b00      	cmp	r3, #0
240069f4:	d103      	bne.n	240069fe <HAL_DMA_IRQHandler+0x736>
240069f6:	687b      	ldr	r3, [r7, #4]
240069f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
240069fa:	2b00      	cmp	r3, #0
240069fc:	d007      	beq.n	24006a0e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
240069fe:	687b      	ldr	r3, [r7, #4]
24006a00:	681b      	ldr	r3, [r3, #0]
24006a02:	681a      	ldr	r2, [r3, #0]
24006a04:	687b      	ldr	r3, [r7, #4]
24006a06:	681b      	ldr	r3, [r3, #0]
24006a08:	f022 0208 	bic.w	r2, r2, #8
24006a0c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
24006a0e:	687b      	ldr	r3, [r7, #4]
24006a10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24006a12:	f003 031f 	and.w	r3, r3, #31
24006a16:	223f      	movs	r2, #63	; 0x3f
24006a18:	409a      	lsls	r2, r3
24006a1a:	6a3b      	ldr	r3, [r7, #32]
24006a1c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
24006a1e:	687b      	ldr	r3, [r7, #4]
24006a20:	2201      	movs	r2, #1
24006a22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
24006a26:	687b      	ldr	r3, [r7, #4]
24006a28:	2200      	movs	r2, #0
24006a2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
24006a2e:	687b      	ldr	r3, [r7, #4]
24006a30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24006a32:	2b00      	cmp	r3, #0
24006a34:	f000 834a 	beq.w	240070cc <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
24006a38:	687b      	ldr	r3, [r7, #4]
24006a3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24006a3c:	6878      	ldr	r0, [r7, #4]
24006a3e:	4798      	blx	r3
          }
          return;
24006a40:	e344      	b.n	240070cc <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
24006a42:	687b      	ldr	r3, [r7, #4]
24006a44:	681b      	ldr	r3, [r3, #0]
24006a46:	681b      	ldr	r3, [r3, #0]
24006a48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
24006a4c:	2b00      	cmp	r3, #0
24006a4e:	d018      	beq.n	24006a82 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
24006a50:	687b      	ldr	r3, [r7, #4]
24006a52:	681b      	ldr	r3, [r3, #0]
24006a54:	681b      	ldr	r3, [r3, #0]
24006a56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
24006a5a:	2b00      	cmp	r3, #0
24006a5c:	d108      	bne.n	24006a70 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
24006a5e:	687b      	ldr	r3, [r7, #4]
24006a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24006a62:	2b00      	cmp	r3, #0
24006a64:	d02c      	beq.n	24006ac0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
24006a66:	687b      	ldr	r3, [r7, #4]
24006a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24006a6a:	6878      	ldr	r0, [r7, #4]
24006a6c:	4798      	blx	r3
24006a6e:	e027      	b.n	24006ac0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
24006a70:	687b      	ldr	r3, [r7, #4]
24006a72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24006a74:	2b00      	cmp	r3, #0
24006a76:	d023      	beq.n	24006ac0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
24006a78:	687b      	ldr	r3, [r7, #4]
24006a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24006a7c:	6878      	ldr	r0, [r7, #4]
24006a7e:	4798      	blx	r3
24006a80:	e01e      	b.n	24006ac0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
24006a82:	687b      	ldr	r3, [r7, #4]
24006a84:	681b      	ldr	r3, [r3, #0]
24006a86:	681b      	ldr	r3, [r3, #0]
24006a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
24006a8c:	2b00      	cmp	r3, #0
24006a8e:	d10f      	bne.n	24006ab0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
24006a90:	687b      	ldr	r3, [r7, #4]
24006a92:	681b      	ldr	r3, [r3, #0]
24006a94:	681a      	ldr	r2, [r3, #0]
24006a96:	687b      	ldr	r3, [r7, #4]
24006a98:	681b      	ldr	r3, [r3, #0]
24006a9a:	f022 0210 	bic.w	r2, r2, #16
24006a9e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
24006aa0:	687b      	ldr	r3, [r7, #4]
24006aa2:	2201      	movs	r2, #1
24006aa4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
24006aa8:	687b      	ldr	r3, [r7, #4]
24006aaa:	2200      	movs	r2, #0
24006aac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
24006ab0:	687b      	ldr	r3, [r7, #4]
24006ab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24006ab4:	2b00      	cmp	r3, #0
24006ab6:	d003      	beq.n	24006ac0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
24006ab8:	687b      	ldr	r3, [r7, #4]
24006aba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24006abc:	6878      	ldr	r0, [r7, #4]
24006abe:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
24006ac0:	687b      	ldr	r3, [r7, #4]
24006ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24006ac4:	2b00      	cmp	r3, #0
24006ac6:	f000 8306 	beq.w	240070d6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
24006aca:	687b      	ldr	r3, [r7, #4]
24006acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24006ace:	f003 0301 	and.w	r3, r3, #1
24006ad2:	2b00      	cmp	r3, #0
24006ad4:	f000 8088 	beq.w	24006be8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
24006ad8:	687b      	ldr	r3, [r7, #4]
24006ada:	2204      	movs	r2, #4
24006adc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
24006ae0:	687b      	ldr	r3, [r7, #4]
24006ae2:	681b      	ldr	r3, [r3, #0]
24006ae4:	4a7a      	ldr	r2, [pc, #488]	; (24006cd0 <HAL_DMA_IRQHandler+0xa08>)
24006ae6:	4293      	cmp	r3, r2
24006ae8:	d04a      	beq.n	24006b80 <HAL_DMA_IRQHandler+0x8b8>
24006aea:	687b      	ldr	r3, [r7, #4]
24006aec:	681b      	ldr	r3, [r3, #0]
24006aee:	4a79      	ldr	r2, [pc, #484]	; (24006cd4 <HAL_DMA_IRQHandler+0xa0c>)
24006af0:	4293      	cmp	r3, r2
24006af2:	d045      	beq.n	24006b80 <HAL_DMA_IRQHandler+0x8b8>
24006af4:	687b      	ldr	r3, [r7, #4]
24006af6:	681b      	ldr	r3, [r3, #0]
24006af8:	4a77      	ldr	r2, [pc, #476]	; (24006cd8 <HAL_DMA_IRQHandler+0xa10>)
24006afa:	4293      	cmp	r3, r2
24006afc:	d040      	beq.n	24006b80 <HAL_DMA_IRQHandler+0x8b8>
24006afe:	687b      	ldr	r3, [r7, #4]
24006b00:	681b      	ldr	r3, [r3, #0]
24006b02:	4a76      	ldr	r2, [pc, #472]	; (24006cdc <HAL_DMA_IRQHandler+0xa14>)
24006b04:	4293      	cmp	r3, r2
24006b06:	d03b      	beq.n	24006b80 <HAL_DMA_IRQHandler+0x8b8>
24006b08:	687b      	ldr	r3, [r7, #4]
24006b0a:	681b      	ldr	r3, [r3, #0]
24006b0c:	4a74      	ldr	r2, [pc, #464]	; (24006ce0 <HAL_DMA_IRQHandler+0xa18>)
24006b0e:	4293      	cmp	r3, r2
24006b10:	d036      	beq.n	24006b80 <HAL_DMA_IRQHandler+0x8b8>
24006b12:	687b      	ldr	r3, [r7, #4]
24006b14:	681b      	ldr	r3, [r3, #0]
24006b16:	4a73      	ldr	r2, [pc, #460]	; (24006ce4 <HAL_DMA_IRQHandler+0xa1c>)
24006b18:	4293      	cmp	r3, r2
24006b1a:	d031      	beq.n	24006b80 <HAL_DMA_IRQHandler+0x8b8>
24006b1c:	687b      	ldr	r3, [r7, #4]
24006b1e:	681b      	ldr	r3, [r3, #0]
24006b20:	4a71      	ldr	r2, [pc, #452]	; (24006ce8 <HAL_DMA_IRQHandler+0xa20>)
24006b22:	4293      	cmp	r3, r2
24006b24:	d02c      	beq.n	24006b80 <HAL_DMA_IRQHandler+0x8b8>
24006b26:	687b      	ldr	r3, [r7, #4]
24006b28:	681b      	ldr	r3, [r3, #0]
24006b2a:	4a70      	ldr	r2, [pc, #448]	; (24006cec <HAL_DMA_IRQHandler+0xa24>)
24006b2c:	4293      	cmp	r3, r2
24006b2e:	d027      	beq.n	24006b80 <HAL_DMA_IRQHandler+0x8b8>
24006b30:	687b      	ldr	r3, [r7, #4]
24006b32:	681b      	ldr	r3, [r3, #0]
24006b34:	4a6e      	ldr	r2, [pc, #440]	; (24006cf0 <HAL_DMA_IRQHandler+0xa28>)
24006b36:	4293      	cmp	r3, r2
24006b38:	d022      	beq.n	24006b80 <HAL_DMA_IRQHandler+0x8b8>
24006b3a:	687b      	ldr	r3, [r7, #4]
24006b3c:	681b      	ldr	r3, [r3, #0]
24006b3e:	4a6d      	ldr	r2, [pc, #436]	; (24006cf4 <HAL_DMA_IRQHandler+0xa2c>)
24006b40:	4293      	cmp	r3, r2
24006b42:	d01d      	beq.n	24006b80 <HAL_DMA_IRQHandler+0x8b8>
24006b44:	687b      	ldr	r3, [r7, #4]
24006b46:	681b      	ldr	r3, [r3, #0]
24006b48:	4a6b      	ldr	r2, [pc, #428]	; (24006cf8 <HAL_DMA_IRQHandler+0xa30>)
24006b4a:	4293      	cmp	r3, r2
24006b4c:	d018      	beq.n	24006b80 <HAL_DMA_IRQHandler+0x8b8>
24006b4e:	687b      	ldr	r3, [r7, #4]
24006b50:	681b      	ldr	r3, [r3, #0]
24006b52:	4a6a      	ldr	r2, [pc, #424]	; (24006cfc <HAL_DMA_IRQHandler+0xa34>)
24006b54:	4293      	cmp	r3, r2
24006b56:	d013      	beq.n	24006b80 <HAL_DMA_IRQHandler+0x8b8>
24006b58:	687b      	ldr	r3, [r7, #4]
24006b5a:	681b      	ldr	r3, [r3, #0]
24006b5c:	4a68      	ldr	r2, [pc, #416]	; (24006d00 <HAL_DMA_IRQHandler+0xa38>)
24006b5e:	4293      	cmp	r3, r2
24006b60:	d00e      	beq.n	24006b80 <HAL_DMA_IRQHandler+0x8b8>
24006b62:	687b      	ldr	r3, [r7, #4]
24006b64:	681b      	ldr	r3, [r3, #0]
24006b66:	4a67      	ldr	r2, [pc, #412]	; (24006d04 <HAL_DMA_IRQHandler+0xa3c>)
24006b68:	4293      	cmp	r3, r2
24006b6a:	d009      	beq.n	24006b80 <HAL_DMA_IRQHandler+0x8b8>
24006b6c:	687b      	ldr	r3, [r7, #4]
24006b6e:	681b      	ldr	r3, [r3, #0]
24006b70:	4a65      	ldr	r2, [pc, #404]	; (24006d08 <HAL_DMA_IRQHandler+0xa40>)
24006b72:	4293      	cmp	r3, r2
24006b74:	d004      	beq.n	24006b80 <HAL_DMA_IRQHandler+0x8b8>
24006b76:	687b      	ldr	r3, [r7, #4]
24006b78:	681b      	ldr	r3, [r3, #0]
24006b7a:	4a64      	ldr	r2, [pc, #400]	; (24006d0c <HAL_DMA_IRQHandler+0xa44>)
24006b7c:	4293      	cmp	r3, r2
24006b7e:	d108      	bne.n	24006b92 <HAL_DMA_IRQHandler+0x8ca>
24006b80:	687b      	ldr	r3, [r7, #4]
24006b82:	681b      	ldr	r3, [r3, #0]
24006b84:	681a      	ldr	r2, [r3, #0]
24006b86:	687b      	ldr	r3, [r7, #4]
24006b88:	681b      	ldr	r3, [r3, #0]
24006b8a:	f022 0201 	bic.w	r2, r2, #1
24006b8e:	601a      	str	r2, [r3, #0]
24006b90:	e007      	b.n	24006ba2 <HAL_DMA_IRQHandler+0x8da>
24006b92:	687b      	ldr	r3, [r7, #4]
24006b94:	681b      	ldr	r3, [r3, #0]
24006b96:	681a      	ldr	r2, [r3, #0]
24006b98:	687b      	ldr	r3, [r7, #4]
24006b9a:	681b      	ldr	r3, [r3, #0]
24006b9c:	f022 0201 	bic.w	r2, r2, #1
24006ba0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
24006ba2:	68fb      	ldr	r3, [r7, #12]
24006ba4:	3301      	adds	r3, #1
24006ba6:	60fb      	str	r3, [r7, #12]
24006ba8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
24006baa:	429a      	cmp	r2, r3
24006bac:	d307      	bcc.n	24006bbe <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
24006bae:	687b      	ldr	r3, [r7, #4]
24006bb0:	681b      	ldr	r3, [r3, #0]
24006bb2:	681b      	ldr	r3, [r3, #0]
24006bb4:	f003 0301 	and.w	r3, r3, #1
24006bb8:	2b00      	cmp	r3, #0
24006bba:	d1f2      	bne.n	24006ba2 <HAL_DMA_IRQHandler+0x8da>
24006bbc:	e000      	b.n	24006bc0 <HAL_DMA_IRQHandler+0x8f8>
            break;
24006bbe:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
24006bc0:	687b      	ldr	r3, [r7, #4]
24006bc2:	681b      	ldr	r3, [r3, #0]
24006bc4:	681b      	ldr	r3, [r3, #0]
24006bc6:	f003 0301 	and.w	r3, r3, #1
24006bca:	2b00      	cmp	r3, #0
24006bcc:	d004      	beq.n	24006bd8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
24006bce:	687b      	ldr	r3, [r7, #4]
24006bd0:	2203      	movs	r2, #3
24006bd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
24006bd6:	e003      	b.n	24006be0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
24006bd8:	687b      	ldr	r3, [r7, #4]
24006bda:	2201      	movs	r2, #1
24006bdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
24006be0:	687b      	ldr	r3, [r7, #4]
24006be2:	2200      	movs	r2, #0
24006be4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
24006be8:	687b      	ldr	r3, [r7, #4]
24006bea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24006bec:	2b00      	cmp	r3, #0
24006bee:	f000 8272 	beq.w	240070d6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
24006bf2:	687b      	ldr	r3, [r7, #4]
24006bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24006bf6:	6878      	ldr	r0, [r7, #4]
24006bf8:	4798      	blx	r3
24006bfa:	e26c      	b.n	240070d6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
24006bfc:	687b      	ldr	r3, [r7, #4]
24006bfe:	681b      	ldr	r3, [r3, #0]
24006c00:	4a43      	ldr	r2, [pc, #268]	; (24006d10 <HAL_DMA_IRQHandler+0xa48>)
24006c02:	4293      	cmp	r3, r2
24006c04:	d022      	beq.n	24006c4c <HAL_DMA_IRQHandler+0x984>
24006c06:	687b      	ldr	r3, [r7, #4]
24006c08:	681b      	ldr	r3, [r3, #0]
24006c0a:	4a42      	ldr	r2, [pc, #264]	; (24006d14 <HAL_DMA_IRQHandler+0xa4c>)
24006c0c:	4293      	cmp	r3, r2
24006c0e:	d01d      	beq.n	24006c4c <HAL_DMA_IRQHandler+0x984>
24006c10:	687b      	ldr	r3, [r7, #4]
24006c12:	681b      	ldr	r3, [r3, #0]
24006c14:	4a40      	ldr	r2, [pc, #256]	; (24006d18 <HAL_DMA_IRQHandler+0xa50>)
24006c16:	4293      	cmp	r3, r2
24006c18:	d018      	beq.n	24006c4c <HAL_DMA_IRQHandler+0x984>
24006c1a:	687b      	ldr	r3, [r7, #4]
24006c1c:	681b      	ldr	r3, [r3, #0]
24006c1e:	4a3f      	ldr	r2, [pc, #252]	; (24006d1c <HAL_DMA_IRQHandler+0xa54>)
24006c20:	4293      	cmp	r3, r2
24006c22:	d013      	beq.n	24006c4c <HAL_DMA_IRQHandler+0x984>
24006c24:	687b      	ldr	r3, [r7, #4]
24006c26:	681b      	ldr	r3, [r3, #0]
24006c28:	4a3d      	ldr	r2, [pc, #244]	; (24006d20 <HAL_DMA_IRQHandler+0xa58>)
24006c2a:	4293      	cmp	r3, r2
24006c2c:	d00e      	beq.n	24006c4c <HAL_DMA_IRQHandler+0x984>
24006c2e:	687b      	ldr	r3, [r7, #4]
24006c30:	681b      	ldr	r3, [r3, #0]
24006c32:	4a3c      	ldr	r2, [pc, #240]	; (24006d24 <HAL_DMA_IRQHandler+0xa5c>)
24006c34:	4293      	cmp	r3, r2
24006c36:	d009      	beq.n	24006c4c <HAL_DMA_IRQHandler+0x984>
24006c38:	687b      	ldr	r3, [r7, #4]
24006c3a:	681b      	ldr	r3, [r3, #0]
24006c3c:	4a3a      	ldr	r2, [pc, #232]	; (24006d28 <HAL_DMA_IRQHandler+0xa60>)
24006c3e:	4293      	cmp	r3, r2
24006c40:	d004      	beq.n	24006c4c <HAL_DMA_IRQHandler+0x984>
24006c42:	687b      	ldr	r3, [r7, #4]
24006c44:	681b      	ldr	r3, [r3, #0]
24006c46:	4a39      	ldr	r2, [pc, #228]	; (24006d2c <HAL_DMA_IRQHandler+0xa64>)
24006c48:	4293      	cmp	r3, r2
24006c4a:	d101      	bne.n	24006c50 <HAL_DMA_IRQHandler+0x988>
24006c4c:	2301      	movs	r3, #1
24006c4e:	e000      	b.n	24006c52 <HAL_DMA_IRQHandler+0x98a>
24006c50:	2300      	movs	r3, #0
24006c52:	2b00      	cmp	r3, #0
24006c54:	f000 823f 	beq.w	240070d6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
24006c58:	687b      	ldr	r3, [r7, #4]
24006c5a:	681b      	ldr	r3, [r3, #0]
24006c5c:	681b      	ldr	r3, [r3, #0]
24006c5e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
24006c60:	687b      	ldr	r3, [r7, #4]
24006c62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24006c64:	f003 031f 	and.w	r3, r3, #31
24006c68:	2204      	movs	r2, #4
24006c6a:	409a      	lsls	r2, r3
24006c6c:	697b      	ldr	r3, [r7, #20]
24006c6e:	4013      	ands	r3, r2
24006c70:	2b00      	cmp	r3, #0
24006c72:	f000 80cd 	beq.w	24006e10 <HAL_DMA_IRQHandler+0xb48>
24006c76:	693b      	ldr	r3, [r7, #16]
24006c78:	f003 0304 	and.w	r3, r3, #4
24006c7c:	2b00      	cmp	r3, #0
24006c7e:	f000 80c7 	beq.w	24006e10 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
24006c82:	687b      	ldr	r3, [r7, #4]
24006c84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24006c86:	f003 031f 	and.w	r3, r3, #31
24006c8a:	2204      	movs	r2, #4
24006c8c:	409a      	lsls	r2, r3
24006c8e:	69fb      	ldr	r3, [r7, #28]
24006c90:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24006c92:	693b      	ldr	r3, [r7, #16]
24006c94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
24006c98:	2b00      	cmp	r3, #0
24006c9a:	d049      	beq.n	24006d30 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
24006c9c:	693b      	ldr	r3, [r7, #16]
24006c9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
24006ca2:	2b00      	cmp	r3, #0
24006ca4:	d109      	bne.n	24006cba <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
24006ca6:	687b      	ldr	r3, [r7, #4]
24006ca8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
24006caa:	2b00      	cmp	r3, #0
24006cac:	f000 8210 	beq.w	240070d0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
24006cb0:	687b      	ldr	r3, [r7, #4]
24006cb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
24006cb4:	6878      	ldr	r0, [r7, #4]
24006cb6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24006cb8:	e20a      	b.n	240070d0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
24006cba:	687b      	ldr	r3, [r7, #4]
24006cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24006cbe:	2b00      	cmp	r3, #0
24006cc0:	f000 8206 	beq.w	240070d0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
24006cc4:	687b      	ldr	r3, [r7, #4]
24006cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24006cc8:	6878      	ldr	r0, [r7, #4]
24006cca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24006ccc:	e200      	b.n	240070d0 <HAL_DMA_IRQHandler+0xe08>
24006cce:	bf00      	nop
24006cd0:	40020010 	.word	0x40020010
24006cd4:	40020028 	.word	0x40020028
24006cd8:	40020040 	.word	0x40020040
24006cdc:	40020058 	.word	0x40020058
24006ce0:	40020070 	.word	0x40020070
24006ce4:	40020088 	.word	0x40020088
24006ce8:	400200a0 	.word	0x400200a0
24006cec:	400200b8 	.word	0x400200b8
24006cf0:	40020410 	.word	0x40020410
24006cf4:	40020428 	.word	0x40020428
24006cf8:	40020440 	.word	0x40020440
24006cfc:	40020458 	.word	0x40020458
24006d00:	40020470 	.word	0x40020470
24006d04:	40020488 	.word	0x40020488
24006d08:	400204a0 	.word	0x400204a0
24006d0c:	400204b8 	.word	0x400204b8
24006d10:	58025408 	.word	0x58025408
24006d14:	5802541c 	.word	0x5802541c
24006d18:	58025430 	.word	0x58025430
24006d1c:	58025444 	.word	0x58025444
24006d20:	58025458 	.word	0x58025458
24006d24:	5802546c 	.word	0x5802546c
24006d28:	58025480 	.word	0x58025480
24006d2c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
24006d30:	693b      	ldr	r3, [r7, #16]
24006d32:	f003 0320 	and.w	r3, r3, #32
24006d36:	2b00      	cmp	r3, #0
24006d38:	d160      	bne.n	24006dfc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
24006d3a:	687b      	ldr	r3, [r7, #4]
24006d3c:	681b      	ldr	r3, [r3, #0]
24006d3e:	4a7f      	ldr	r2, [pc, #508]	; (24006f3c <HAL_DMA_IRQHandler+0xc74>)
24006d40:	4293      	cmp	r3, r2
24006d42:	d04a      	beq.n	24006dda <HAL_DMA_IRQHandler+0xb12>
24006d44:	687b      	ldr	r3, [r7, #4]
24006d46:	681b      	ldr	r3, [r3, #0]
24006d48:	4a7d      	ldr	r2, [pc, #500]	; (24006f40 <HAL_DMA_IRQHandler+0xc78>)
24006d4a:	4293      	cmp	r3, r2
24006d4c:	d045      	beq.n	24006dda <HAL_DMA_IRQHandler+0xb12>
24006d4e:	687b      	ldr	r3, [r7, #4]
24006d50:	681b      	ldr	r3, [r3, #0]
24006d52:	4a7c      	ldr	r2, [pc, #496]	; (24006f44 <HAL_DMA_IRQHandler+0xc7c>)
24006d54:	4293      	cmp	r3, r2
24006d56:	d040      	beq.n	24006dda <HAL_DMA_IRQHandler+0xb12>
24006d58:	687b      	ldr	r3, [r7, #4]
24006d5a:	681b      	ldr	r3, [r3, #0]
24006d5c:	4a7a      	ldr	r2, [pc, #488]	; (24006f48 <HAL_DMA_IRQHandler+0xc80>)
24006d5e:	4293      	cmp	r3, r2
24006d60:	d03b      	beq.n	24006dda <HAL_DMA_IRQHandler+0xb12>
24006d62:	687b      	ldr	r3, [r7, #4]
24006d64:	681b      	ldr	r3, [r3, #0]
24006d66:	4a79      	ldr	r2, [pc, #484]	; (24006f4c <HAL_DMA_IRQHandler+0xc84>)
24006d68:	4293      	cmp	r3, r2
24006d6a:	d036      	beq.n	24006dda <HAL_DMA_IRQHandler+0xb12>
24006d6c:	687b      	ldr	r3, [r7, #4]
24006d6e:	681b      	ldr	r3, [r3, #0]
24006d70:	4a77      	ldr	r2, [pc, #476]	; (24006f50 <HAL_DMA_IRQHandler+0xc88>)
24006d72:	4293      	cmp	r3, r2
24006d74:	d031      	beq.n	24006dda <HAL_DMA_IRQHandler+0xb12>
24006d76:	687b      	ldr	r3, [r7, #4]
24006d78:	681b      	ldr	r3, [r3, #0]
24006d7a:	4a76      	ldr	r2, [pc, #472]	; (24006f54 <HAL_DMA_IRQHandler+0xc8c>)
24006d7c:	4293      	cmp	r3, r2
24006d7e:	d02c      	beq.n	24006dda <HAL_DMA_IRQHandler+0xb12>
24006d80:	687b      	ldr	r3, [r7, #4]
24006d82:	681b      	ldr	r3, [r3, #0]
24006d84:	4a74      	ldr	r2, [pc, #464]	; (24006f58 <HAL_DMA_IRQHandler+0xc90>)
24006d86:	4293      	cmp	r3, r2
24006d88:	d027      	beq.n	24006dda <HAL_DMA_IRQHandler+0xb12>
24006d8a:	687b      	ldr	r3, [r7, #4]
24006d8c:	681b      	ldr	r3, [r3, #0]
24006d8e:	4a73      	ldr	r2, [pc, #460]	; (24006f5c <HAL_DMA_IRQHandler+0xc94>)
24006d90:	4293      	cmp	r3, r2
24006d92:	d022      	beq.n	24006dda <HAL_DMA_IRQHandler+0xb12>
24006d94:	687b      	ldr	r3, [r7, #4]
24006d96:	681b      	ldr	r3, [r3, #0]
24006d98:	4a71      	ldr	r2, [pc, #452]	; (24006f60 <HAL_DMA_IRQHandler+0xc98>)
24006d9a:	4293      	cmp	r3, r2
24006d9c:	d01d      	beq.n	24006dda <HAL_DMA_IRQHandler+0xb12>
24006d9e:	687b      	ldr	r3, [r7, #4]
24006da0:	681b      	ldr	r3, [r3, #0]
24006da2:	4a70      	ldr	r2, [pc, #448]	; (24006f64 <HAL_DMA_IRQHandler+0xc9c>)
24006da4:	4293      	cmp	r3, r2
24006da6:	d018      	beq.n	24006dda <HAL_DMA_IRQHandler+0xb12>
24006da8:	687b      	ldr	r3, [r7, #4]
24006daa:	681b      	ldr	r3, [r3, #0]
24006dac:	4a6e      	ldr	r2, [pc, #440]	; (24006f68 <HAL_DMA_IRQHandler+0xca0>)
24006dae:	4293      	cmp	r3, r2
24006db0:	d013      	beq.n	24006dda <HAL_DMA_IRQHandler+0xb12>
24006db2:	687b      	ldr	r3, [r7, #4]
24006db4:	681b      	ldr	r3, [r3, #0]
24006db6:	4a6d      	ldr	r2, [pc, #436]	; (24006f6c <HAL_DMA_IRQHandler+0xca4>)
24006db8:	4293      	cmp	r3, r2
24006dba:	d00e      	beq.n	24006dda <HAL_DMA_IRQHandler+0xb12>
24006dbc:	687b      	ldr	r3, [r7, #4]
24006dbe:	681b      	ldr	r3, [r3, #0]
24006dc0:	4a6b      	ldr	r2, [pc, #428]	; (24006f70 <HAL_DMA_IRQHandler+0xca8>)
24006dc2:	4293      	cmp	r3, r2
24006dc4:	d009      	beq.n	24006dda <HAL_DMA_IRQHandler+0xb12>
24006dc6:	687b      	ldr	r3, [r7, #4]
24006dc8:	681b      	ldr	r3, [r3, #0]
24006dca:	4a6a      	ldr	r2, [pc, #424]	; (24006f74 <HAL_DMA_IRQHandler+0xcac>)
24006dcc:	4293      	cmp	r3, r2
24006dce:	d004      	beq.n	24006dda <HAL_DMA_IRQHandler+0xb12>
24006dd0:	687b      	ldr	r3, [r7, #4]
24006dd2:	681b      	ldr	r3, [r3, #0]
24006dd4:	4a68      	ldr	r2, [pc, #416]	; (24006f78 <HAL_DMA_IRQHandler+0xcb0>)
24006dd6:	4293      	cmp	r3, r2
24006dd8:	d108      	bne.n	24006dec <HAL_DMA_IRQHandler+0xb24>
24006dda:	687b      	ldr	r3, [r7, #4]
24006ddc:	681b      	ldr	r3, [r3, #0]
24006dde:	681a      	ldr	r2, [r3, #0]
24006de0:	687b      	ldr	r3, [r7, #4]
24006de2:	681b      	ldr	r3, [r3, #0]
24006de4:	f022 0208 	bic.w	r2, r2, #8
24006de8:	601a      	str	r2, [r3, #0]
24006dea:	e007      	b.n	24006dfc <HAL_DMA_IRQHandler+0xb34>
24006dec:	687b      	ldr	r3, [r7, #4]
24006dee:	681b      	ldr	r3, [r3, #0]
24006df0:	681a      	ldr	r2, [r3, #0]
24006df2:	687b      	ldr	r3, [r7, #4]
24006df4:	681b      	ldr	r3, [r3, #0]
24006df6:	f022 0204 	bic.w	r2, r2, #4
24006dfa:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
24006dfc:	687b      	ldr	r3, [r7, #4]
24006dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24006e00:	2b00      	cmp	r3, #0
24006e02:	f000 8165 	beq.w	240070d0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
24006e06:	687b      	ldr	r3, [r7, #4]
24006e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24006e0a:	6878      	ldr	r0, [r7, #4]
24006e0c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24006e0e:	e15f      	b.n	240070d0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
24006e10:	687b      	ldr	r3, [r7, #4]
24006e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24006e14:	f003 031f 	and.w	r3, r3, #31
24006e18:	2202      	movs	r2, #2
24006e1a:	409a      	lsls	r2, r3
24006e1c:	697b      	ldr	r3, [r7, #20]
24006e1e:	4013      	ands	r3, r2
24006e20:	2b00      	cmp	r3, #0
24006e22:	f000 80c5 	beq.w	24006fb0 <HAL_DMA_IRQHandler+0xce8>
24006e26:	693b      	ldr	r3, [r7, #16]
24006e28:	f003 0302 	and.w	r3, r3, #2
24006e2c:	2b00      	cmp	r3, #0
24006e2e:	f000 80bf 	beq.w	24006fb0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
24006e32:	687b      	ldr	r3, [r7, #4]
24006e34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24006e36:	f003 031f 	and.w	r3, r3, #31
24006e3a:	2202      	movs	r2, #2
24006e3c:	409a      	lsls	r2, r3
24006e3e:	69fb      	ldr	r3, [r7, #28]
24006e40:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24006e42:	693b      	ldr	r3, [r7, #16]
24006e44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
24006e48:	2b00      	cmp	r3, #0
24006e4a:	d018      	beq.n	24006e7e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
24006e4c:	693b      	ldr	r3, [r7, #16]
24006e4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
24006e52:	2b00      	cmp	r3, #0
24006e54:	d109      	bne.n	24006e6a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
24006e56:	687b      	ldr	r3, [r7, #4]
24006e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24006e5a:	2b00      	cmp	r3, #0
24006e5c:	f000 813a 	beq.w	240070d4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
24006e60:	687b      	ldr	r3, [r7, #4]
24006e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24006e64:	6878      	ldr	r0, [r7, #4]
24006e66:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24006e68:	e134      	b.n	240070d4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
24006e6a:	687b      	ldr	r3, [r7, #4]
24006e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24006e6e:	2b00      	cmp	r3, #0
24006e70:	f000 8130 	beq.w	240070d4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
24006e74:	687b      	ldr	r3, [r7, #4]
24006e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24006e78:	6878      	ldr	r0, [r7, #4]
24006e7a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24006e7c:	e12a      	b.n	240070d4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
24006e7e:	693b      	ldr	r3, [r7, #16]
24006e80:	f003 0320 	and.w	r3, r3, #32
24006e84:	2b00      	cmp	r3, #0
24006e86:	f040 8089 	bne.w	24006f9c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
24006e8a:	687b      	ldr	r3, [r7, #4]
24006e8c:	681b      	ldr	r3, [r3, #0]
24006e8e:	4a2b      	ldr	r2, [pc, #172]	; (24006f3c <HAL_DMA_IRQHandler+0xc74>)
24006e90:	4293      	cmp	r3, r2
24006e92:	d04a      	beq.n	24006f2a <HAL_DMA_IRQHandler+0xc62>
24006e94:	687b      	ldr	r3, [r7, #4]
24006e96:	681b      	ldr	r3, [r3, #0]
24006e98:	4a29      	ldr	r2, [pc, #164]	; (24006f40 <HAL_DMA_IRQHandler+0xc78>)
24006e9a:	4293      	cmp	r3, r2
24006e9c:	d045      	beq.n	24006f2a <HAL_DMA_IRQHandler+0xc62>
24006e9e:	687b      	ldr	r3, [r7, #4]
24006ea0:	681b      	ldr	r3, [r3, #0]
24006ea2:	4a28      	ldr	r2, [pc, #160]	; (24006f44 <HAL_DMA_IRQHandler+0xc7c>)
24006ea4:	4293      	cmp	r3, r2
24006ea6:	d040      	beq.n	24006f2a <HAL_DMA_IRQHandler+0xc62>
24006ea8:	687b      	ldr	r3, [r7, #4]
24006eaa:	681b      	ldr	r3, [r3, #0]
24006eac:	4a26      	ldr	r2, [pc, #152]	; (24006f48 <HAL_DMA_IRQHandler+0xc80>)
24006eae:	4293      	cmp	r3, r2
24006eb0:	d03b      	beq.n	24006f2a <HAL_DMA_IRQHandler+0xc62>
24006eb2:	687b      	ldr	r3, [r7, #4]
24006eb4:	681b      	ldr	r3, [r3, #0]
24006eb6:	4a25      	ldr	r2, [pc, #148]	; (24006f4c <HAL_DMA_IRQHandler+0xc84>)
24006eb8:	4293      	cmp	r3, r2
24006eba:	d036      	beq.n	24006f2a <HAL_DMA_IRQHandler+0xc62>
24006ebc:	687b      	ldr	r3, [r7, #4]
24006ebe:	681b      	ldr	r3, [r3, #0]
24006ec0:	4a23      	ldr	r2, [pc, #140]	; (24006f50 <HAL_DMA_IRQHandler+0xc88>)
24006ec2:	4293      	cmp	r3, r2
24006ec4:	d031      	beq.n	24006f2a <HAL_DMA_IRQHandler+0xc62>
24006ec6:	687b      	ldr	r3, [r7, #4]
24006ec8:	681b      	ldr	r3, [r3, #0]
24006eca:	4a22      	ldr	r2, [pc, #136]	; (24006f54 <HAL_DMA_IRQHandler+0xc8c>)
24006ecc:	4293      	cmp	r3, r2
24006ece:	d02c      	beq.n	24006f2a <HAL_DMA_IRQHandler+0xc62>
24006ed0:	687b      	ldr	r3, [r7, #4]
24006ed2:	681b      	ldr	r3, [r3, #0]
24006ed4:	4a20      	ldr	r2, [pc, #128]	; (24006f58 <HAL_DMA_IRQHandler+0xc90>)
24006ed6:	4293      	cmp	r3, r2
24006ed8:	d027      	beq.n	24006f2a <HAL_DMA_IRQHandler+0xc62>
24006eda:	687b      	ldr	r3, [r7, #4]
24006edc:	681b      	ldr	r3, [r3, #0]
24006ede:	4a1f      	ldr	r2, [pc, #124]	; (24006f5c <HAL_DMA_IRQHandler+0xc94>)
24006ee0:	4293      	cmp	r3, r2
24006ee2:	d022      	beq.n	24006f2a <HAL_DMA_IRQHandler+0xc62>
24006ee4:	687b      	ldr	r3, [r7, #4]
24006ee6:	681b      	ldr	r3, [r3, #0]
24006ee8:	4a1d      	ldr	r2, [pc, #116]	; (24006f60 <HAL_DMA_IRQHandler+0xc98>)
24006eea:	4293      	cmp	r3, r2
24006eec:	d01d      	beq.n	24006f2a <HAL_DMA_IRQHandler+0xc62>
24006eee:	687b      	ldr	r3, [r7, #4]
24006ef0:	681b      	ldr	r3, [r3, #0]
24006ef2:	4a1c      	ldr	r2, [pc, #112]	; (24006f64 <HAL_DMA_IRQHandler+0xc9c>)
24006ef4:	4293      	cmp	r3, r2
24006ef6:	d018      	beq.n	24006f2a <HAL_DMA_IRQHandler+0xc62>
24006ef8:	687b      	ldr	r3, [r7, #4]
24006efa:	681b      	ldr	r3, [r3, #0]
24006efc:	4a1a      	ldr	r2, [pc, #104]	; (24006f68 <HAL_DMA_IRQHandler+0xca0>)
24006efe:	4293      	cmp	r3, r2
24006f00:	d013      	beq.n	24006f2a <HAL_DMA_IRQHandler+0xc62>
24006f02:	687b      	ldr	r3, [r7, #4]
24006f04:	681b      	ldr	r3, [r3, #0]
24006f06:	4a19      	ldr	r2, [pc, #100]	; (24006f6c <HAL_DMA_IRQHandler+0xca4>)
24006f08:	4293      	cmp	r3, r2
24006f0a:	d00e      	beq.n	24006f2a <HAL_DMA_IRQHandler+0xc62>
24006f0c:	687b      	ldr	r3, [r7, #4]
24006f0e:	681b      	ldr	r3, [r3, #0]
24006f10:	4a17      	ldr	r2, [pc, #92]	; (24006f70 <HAL_DMA_IRQHandler+0xca8>)
24006f12:	4293      	cmp	r3, r2
24006f14:	d009      	beq.n	24006f2a <HAL_DMA_IRQHandler+0xc62>
24006f16:	687b      	ldr	r3, [r7, #4]
24006f18:	681b      	ldr	r3, [r3, #0]
24006f1a:	4a16      	ldr	r2, [pc, #88]	; (24006f74 <HAL_DMA_IRQHandler+0xcac>)
24006f1c:	4293      	cmp	r3, r2
24006f1e:	d004      	beq.n	24006f2a <HAL_DMA_IRQHandler+0xc62>
24006f20:	687b      	ldr	r3, [r7, #4]
24006f22:	681b      	ldr	r3, [r3, #0]
24006f24:	4a14      	ldr	r2, [pc, #80]	; (24006f78 <HAL_DMA_IRQHandler+0xcb0>)
24006f26:	4293      	cmp	r3, r2
24006f28:	d128      	bne.n	24006f7c <HAL_DMA_IRQHandler+0xcb4>
24006f2a:	687b      	ldr	r3, [r7, #4]
24006f2c:	681b      	ldr	r3, [r3, #0]
24006f2e:	681a      	ldr	r2, [r3, #0]
24006f30:	687b      	ldr	r3, [r7, #4]
24006f32:	681b      	ldr	r3, [r3, #0]
24006f34:	f022 0214 	bic.w	r2, r2, #20
24006f38:	601a      	str	r2, [r3, #0]
24006f3a:	e027      	b.n	24006f8c <HAL_DMA_IRQHandler+0xcc4>
24006f3c:	40020010 	.word	0x40020010
24006f40:	40020028 	.word	0x40020028
24006f44:	40020040 	.word	0x40020040
24006f48:	40020058 	.word	0x40020058
24006f4c:	40020070 	.word	0x40020070
24006f50:	40020088 	.word	0x40020088
24006f54:	400200a0 	.word	0x400200a0
24006f58:	400200b8 	.word	0x400200b8
24006f5c:	40020410 	.word	0x40020410
24006f60:	40020428 	.word	0x40020428
24006f64:	40020440 	.word	0x40020440
24006f68:	40020458 	.word	0x40020458
24006f6c:	40020470 	.word	0x40020470
24006f70:	40020488 	.word	0x40020488
24006f74:	400204a0 	.word	0x400204a0
24006f78:	400204b8 	.word	0x400204b8
24006f7c:	687b      	ldr	r3, [r7, #4]
24006f7e:	681b      	ldr	r3, [r3, #0]
24006f80:	681a      	ldr	r2, [r3, #0]
24006f82:	687b      	ldr	r3, [r7, #4]
24006f84:	681b      	ldr	r3, [r3, #0]
24006f86:	f022 020a 	bic.w	r2, r2, #10
24006f8a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
24006f8c:	687b      	ldr	r3, [r7, #4]
24006f8e:	2201      	movs	r2, #1
24006f90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
24006f94:	687b      	ldr	r3, [r7, #4]
24006f96:	2200      	movs	r2, #0
24006f98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
24006f9c:	687b      	ldr	r3, [r7, #4]
24006f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24006fa0:	2b00      	cmp	r3, #0
24006fa2:	f000 8097 	beq.w	240070d4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
24006fa6:	687b      	ldr	r3, [r7, #4]
24006fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24006faa:	6878      	ldr	r0, [r7, #4]
24006fac:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24006fae:	e091      	b.n	240070d4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
24006fb0:	687b      	ldr	r3, [r7, #4]
24006fb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24006fb4:	f003 031f 	and.w	r3, r3, #31
24006fb8:	2208      	movs	r2, #8
24006fba:	409a      	lsls	r2, r3
24006fbc:	697b      	ldr	r3, [r7, #20]
24006fbe:	4013      	ands	r3, r2
24006fc0:	2b00      	cmp	r3, #0
24006fc2:	f000 8088 	beq.w	240070d6 <HAL_DMA_IRQHandler+0xe0e>
24006fc6:	693b      	ldr	r3, [r7, #16]
24006fc8:	f003 0308 	and.w	r3, r3, #8
24006fcc:	2b00      	cmp	r3, #0
24006fce:	f000 8082 	beq.w	240070d6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
24006fd2:	687b      	ldr	r3, [r7, #4]
24006fd4:	681b      	ldr	r3, [r3, #0]
24006fd6:	4a41      	ldr	r2, [pc, #260]	; (240070dc <HAL_DMA_IRQHandler+0xe14>)
24006fd8:	4293      	cmp	r3, r2
24006fda:	d04a      	beq.n	24007072 <HAL_DMA_IRQHandler+0xdaa>
24006fdc:	687b      	ldr	r3, [r7, #4]
24006fde:	681b      	ldr	r3, [r3, #0]
24006fe0:	4a3f      	ldr	r2, [pc, #252]	; (240070e0 <HAL_DMA_IRQHandler+0xe18>)
24006fe2:	4293      	cmp	r3, r2
24006fe4:	d045      	beq.n	24007072 <HAL_DMA_IRQHandler+0xdaa>
24006fe6:	687b      	ldr	r3, [r7, #4]
24006fe8:	681b      	ldr	r3, [r3, #0]
24006fea:	4a3e      	ldr	r2, [pc, #248]	; (240070e4 <HAL_DMA_IRQHandler+0xe1c>)
24006fec:	4293      	cmp	r3, r2
24006fee:	d040      	beq.n	24007072 <HAL_DMA_IRQHandler+0xdaa>
24006ff0:	687b      	ldr	r3, [r7, #4]
24006ff2:	681b      	ldr	r3, [r3, #0]
24006ff4:	4a3c      	ldr	r2, [pc, #240]	; (240070e8 <HAL_DMA_IRQHandler+0xe20>)
24006ff6:	4293      	cmp	r3, r2
24006ff8:	d03b      	beq.n	24007072 <HAL_DMA_IRQHandler+0xdaa>
24006ffa:	687b      	ldr	r3, [r7, #4]
24006ffc:	681b      	ldr	r3, [r3, #0]
24006ffe:	4a3b      	ldr	r2, [pc, #236]	; (240070ec <HAL_DMA_IRQHandler+0xe24>)
24007000:	4293      	cmp	r3, r2
24007002:	d036      	beq.n	24007072 <HAL_DMA_IRQHandler+0xdaa>
24007004:	687b      	ldr	r3, [r7, #4]
24007006:	681b      	ldr	r3, [r3, #0]
24007008:	4a39      	ldr	r2, [pc, #228]	; (240070f0 <HAL_DMA_IRQHandler+0xe28>)
2400700a:	4293      	cmp	r3, r2
2400700c:	d031      	beq.n	24007072 <HAL_DMA_IRQHandler+0xdaa>
2400700e:	687b      	ldr	r3, [r7, #4]
24007010:	681b      	ldr	r3, [r3, #0]
24007012:	4a38      	ldr	r2, [pc, #224]	; (240070f4 <HAL_DMA_IRQHandler+0xe2c>)
24007014:	4293      	cmp	r3, r2
24007016:	d02c      	beq.n	24007072 <HAL_DMA_IRQHandler+0xdaa>
24007018:	687b      	ldr	r3, [r7, #4]
2400701a:	681b      	ldr	r3, [r3, #0]
2400701c:	4a36      	ldr	r2, [pc, #216]	; (240070f8 <HAL_DMA_IRQHandler+0xe30>)
2400701e:	4293      	cmp	r3, r2
24007020:	d027      	beq.n	24007072 <HAL_DMA_IRQHandler+0xdaa>
24007022:	687b      	ldr	r3, [r7, #4]
24007024:	681b      	ldr	r3, [r3, #0]
24007026:	4a35      	ldr	r2, [pc, #212]	; (240070fc <HAL_DMA_IRQHandler+0xe34>)
24007028:	4293      	cmp	r3, r2
2400702a:	d022      	beq.n	24007072 <HAL_DMA_IRQHandler+0xdaa>
2400702c:	687b      	ldr	r3, [r7, #4]
2400702e:	681b      	ldr	r3, [r3, #0]
24007030:	4a33      	ldr	r2, [pc, #204]	; (24007100 <HAL_DMA_IRQHandler+0xe38>)
24007032:	4293      	cmp	r3, r2
24007034:	d01d      	beq.n	24007072 <HAL_DMA_IRQHandler+0xdaa>
24007036:	687b      	ldr	r3, [r7, #4]
24007038:	681b      	ldr	r3, [r3, #0]
2400703a:	4a32      	ldr	r2, [pc, #200]	; (24007104 <HAL_DMA_IRQHandler+0xe3c>)
2400703c:	4293      	cmp	r3, r2
2400703e:	d018      	beq.n	24007072 <HAL_DMA_IRQHandler+0xdaa>
24007040:	687b      	ldr	r3, [r7, #4]
24007042:	681b      	ldr	r3, [r3, #0]
24007044:	4a30      	ldr	r2, [pc, #192]	; (24007108 <HAL_DMA_IRQHandler+0xe40>)
24007046:	4293      	cmp	r3, r2
24007048:	d013      	beq.n	24007072 <HAL_DMA_IRQHandler+0xdaa>
2400704a:	687b      	ldr	r3, [r7, #4]
2400704c:	681b      	ldr	r3, [r3, #0]
2400704e:	4a2f      	ldr	r2, [pc, #188]	; (2400710c <HAL_DMA_IRQHandler+0xe44>)
24007050:	4293      	cmp	r3, r2
24007052:	d00e      	beq.n	24007072 <HAL_DMA_IRQHandler+0xdaa>
24007054:	687b      	ldr	r3, [r7, #4]
24007056:	681b      	ldr	r3, [r3, #0]
24007058:	4a2d      	ldr	r2, [pc, #180]	; (24007110 <HAL_DMA_IRQHandler+0xe48>)
2400705a:	4293      	cmp	r3, r2
2400705c:	d009      	beq.n	24007072 <HAL_DMA_IRQHandler+0xdaa>
2400705e:	687b      	ldr	r3, [r7, #4]
24007060:	681b      	ldr	r3, [r3, #0]
24007062:	4a2c      	ldr	r2, [pc, #176]	; (24007114 <HAL_DMA_IRQHandler+0xe4c>)
24007064:	4293      	cmp	r3, r2
24007066:	d004      	beq.n	24007072 <HAL_DMA_IRQHandler+0xdaa>
24007068:	687b      	ldr	r3, [r7, #4]
2400706a:	681b      	ldr	r3, [r3, #0]
2400706c:	4a2a      	ldr	r2, [pc, #168]	; (24007118 <HAL_DMA_IRQHandler+0xe50>)
2400706e:	4293      	cmp	r3, r2
24007070:	d108      	bne.n	24007084 <HAL_DMA_IRQHandler+0xdbc>
24007072:	687b      	ldr	r3, [r7, #4]
24007074:	681b      	ldr	r3, [r3, #0]
24007076:	681a      	ldr	r2, [r3, #0]
24007078:	687b      	ldr	r3, [r7, #4]
2400707a:	681b      	ldr	r3, [r3, #0]
2400707c:	f022 021c 	bic.w	r2, r2, #28
24007080:	601a      	str	r2, [r3, #0]
24007082:	e007      	b.n	24007094 <HAL_DMA_IRQHandler+0xdcc>
24007084:	687b      	ldr	r3, [r7, #4]
24007086:	681b      	ldr	r3, [r3, #0]
24007088:	681a      	ldr	r2, [r3, #0]
2400708a:	687b      	ldr	r3, [r7, #4]
2400708c:	681b      	ldr	r3, [r3, #0]
2400708e:	f022 020e 	bic.w	r2, r2, #14
24007092:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
24007094:	687b      	ldr	r3, [r7, #4]
24007096:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24007098:	f003 031f 	and.w	r3, r3, #31
2400709c:	2201      	movs	r2, #1
2400709e:	409a      	lsls	r2, r3
240070a0:	69fb      	ldr	r3, [r7, #28]
240070a2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
240070a4:	687b      	ldr	r3, [r7, #4]
240070a6:	2201      	movs	r2, #1
240070a8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
240070aa:	687b      	ldr	r3, [r7, #4]
240070ac:	2201      	movs	r2, #1
240070ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
240070b2:	687b      	ldr	r3, [r7, #4]
240070b4:	2200      	movs	r2, #0
240070b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
240070ba:	687b      	ldr	r3, [r7, #4]
240070bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
240070be:	2b00      	cmp	r3, #0
240070c0:	d009      	beq.n	240070d6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
240070c2:	687b      	ldr	r3, [r7, #4]
240070c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
240070c6:	6878      	ldr	r0, [r7, #4]
240070c8:	4798      	blx	r3
240070ca:	e004      	b.n	240070d6 <HAL_DMA_IRQHandler+0xe0e>
          return;
240070cc:	bf00      	nop
240070ce:	e002      	b.n	240070d6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
240070d0:	bf00      	nop
240070d2:	e000      	b.n	240070d6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
240070d4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
240070d6:	3728      	adds	r7, #40	; 0x28
240070d8:	46bd      	mov	sp, r7
240070da:	bd80      	pop	{r7, pc}
240070dc:	40020010 	.word	0x40020010
240070e0:	40020028 	.word	0x40020028
240070e4:	40020040 	.word	0x40020040
240070e8:	40020058 	.word	0x40020058
240070ec:	40020070 	.word	0x40020070
240070f0:	40020088 	.word	0x40020088
240070f4:	400200a0 	.word	0x400200a0
240070f8:	400200b8 	.word	0x400200b8
240070fc:	40020410 	.word	0x40020410
24007100:	40020428 	.word	0x40020428
24007104:	40020440 	.word	0x40020440
24007108:	40020458 	.word	0x40020458
2400710c:	40020470 	.word	0x40020470
24007110:	40020488 	.word	0x40020488
24007114:	400204a0 	.word	0x400204a0
24007118:	400204b8 	.word	0x400204b8

2400711c <HAL_DMA_RegisterCallback>:
  * @param  pCallback:            pointer to private callback function which has pointer to
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
2400711c:	b480      	push	{r7}
2400711e:	b087      	sub	sp, #28
24007120:	af00      	add	r7, sp, #0
24007122:	60f8      	str	r0, [r7, #12]
24007124:	460b      	mov	r3, r1
24007126:	607a      	str	r2, [r7, #4]
24007128:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
2400712a:	2300      	movs	r3, #0
2400712c:	75fb      	strb	r3, [r7, #23]

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
2400712e:	68fb      	ldr	r3, [r7, #12]
24007130:	2b00      	cmp	r3, #0
24007132:	d101      	bne.n	24007138 <HAL_DMA_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
24007134:	2301      	movs	r3, #1
24007136:	e045      	b.n	240071c4 <HAL_DMA_RegisterCallback+0xa8>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
24007138:	68fb      	ldr	r3, [r7, #12]
2400713a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
2400713e:	2b01      	cmp	r3, #1
24007140:	d101      	bne.n	24007146 <HAL_DMA_RegisterCallback+0x2a>
24007142:	2302      	movs	r3, #2
24007144:	e03e      	b.n	240071c4 <HAL_DMA_RegisterCallback+0xa8>
24007146:	68fb      	ldr	r3, [r7, #12]
24007148:	2201      	movs	r2, #1
2400714a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
2400714e:	68fb      	ldr	r3, [r7, #12]
24007150:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
24007154:	b2db      	uxtb	r3, r3
24007156:	2b01      	cmp	r3, #1
24007158:	d12d      	bne.n	240071b6 <HAL_DMA_RegisterCallback+0x9a>
  {
    switch (CallbackID)
2400715a:	7afb      	ldrb	r3, [r7, #11]
2400715c:	2b05      	cmp	r3, #5
2400715e:	d827      	bhi.n	240071b0 <HAL_DMA_RegisterCallback+0x94>
24007160:	a201      	add	r2, pc, #4	; (adr r2, 24007168 <HAL_DMA_RegisterCallback+0x4c>)
24007162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
24007166:	bf00      	nop
24007168:	24007181 	.word	0x24007181
2400716c:	24007189 	.word	0x24007189
24007170:	24007191 	.word	0x24007191
24007174:	24007199 	.word	0x24007199
24007178:	240071a1 	.word	0x240071a1
2400717c:	240071a9 	.word	0x240071a9
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
24007180:	68fb      	ldr	r3, [r7, #12]
24007182:	687a      	ldr	r2, [r7, #4]
24007184:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
24007186:	e018      	b.n	240071ba <HAL_DMA_RegisterCallback+0x9e>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
24007188:	68fb      	ldr	r3, [r7, #12]
2400718a:	687a      	ldr	r2, [r7, #4]
2400718c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
2400718e:	e014      	b.n	240071ba <HAL_DMA_RegisterCallback+0x9e>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
24007190:	68fb      	ldr	r3, [r7, #12]
24007192:	687a      	ldr	r2, [r7, #4]
24007194:	645a      	str	r2, [r3, #68]	; 0x44
      break;
24007196:	e010      	b.n	240071ba <HAL_DMA_RegisterCallback+0x9e>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
24007198:	68fb      	ldr	r3, [r7, #12]
2400719a:	687a      	ldr	r2, [r7, #4]
2400719c:	649a      	str	r2, [r3, #72]	; 0x48
      break;
2400719e:	e00c      	b.n	240071ba <HAL_DMA_RegisterCallback+0x9e>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
240071a0:	68fb      	ldr	r3, [r7, #12]
240071a2:	687a      	ldr	r2, [r7, #4]
240071a4:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
240071a6:	e008      	b.n	240071ba <HAL_DMA_RegisterCallback+0x9e>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
240071a8:	68fb      	ldr	r3, [r7, #12]
240071aa:	687a      	ldr	r2, [r7, #4]
240071ac:	651a      	str	r2, [r3, #80]	; 0x50
      break;
240071ae:	e004      	b.n	240071ba <HAL_DMA_RegisterCallback+0x9e>

    default:
      status =  HAL_ERROR;
240071b0:	2301      	movs	r3, #1
240071b2:	75fb      	strb	r3, [r7, #23]
      break;
240071b4:	e001      	b.n	240071ba <HAL_DMA_RegisterCallback+0x9e>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
240071b6:	2301      	movs	r3, #1
240071b8:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
240071ba:	68fb      	ldr	r3, [r7, #12]
240071bc:	2200      	movs	r2, #0
240071be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
240071c2:	7dfb      	ldrb	r3, [r7, #23]
}
240071c4:	4618      	mov	r0, r3
240071c6:	371c      	adds	r7, #28
240071c8:	46bd      	mov	sp, r7
240071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
240071ce:	4770      	bx	lr

240071d0 <HAL_DMA_UnRegisterCallback>:
  * @param  CallbackID:           User Callback identifier
  *                               a HAL_DMA_CallbackIDTypeDef ENUM as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_UnRegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID)
{
240071d0:	b480      	push	{r7}
240071d2:	b085      	sub	sp, #20
240071d4:	af00      	add	r7, sp, #0
240071d6:	6078      	str	r0, [r7, #4]
240071d8:	460b      	mov	r3, r1
240071da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
240071dc:	2300      	movs	r3, #0
240071de:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
240071e0:	687b      	ldr	r3, [r7, #4]
240071e2:	2b00      	cmp	r3, #0
240071e4:	d101      	bne.n	240071ea <HAL_DMA_UnRegisterCallback+0x1a>
  {
    return HAL_ERROR;
240071e6:	2301      	movs	r3, #1
240071e8:	e059      	b.n	2400729e <HAL_DMA_UnRegisterCallback+0xce>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
240071ea:	687b      	ldr	r3, [r7, #4]
240071ec:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
240071f0:	2b01      	cmp	r3, #1
240071f2:	d101      	bne.n	240071f8 <HAL_DMA_UnRegisterCallback+0x28>
240071f4:	2302      	movs	r3, #2
240071f6:	e052      	b.n	2400729e <HAL_DMA_UnRegisterCallback+0xce>
240071f8:	687b      	ldr	r3, [r7, #4]
240071fa:	2201      	movs	r2, #1
240071fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
24007200:	687b      	ldr	r3, [r7, #4]
24007202:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
24007206:	b2db      	uxtb	r3, r3
24007208:	2b01      	cmp	r3, #1
2400720a:	d141      	bne.n	24007290 <HAL_DMA_UnRegisterCallback+0xc0>
  {
    switch (CallbackID)
2400720c:	78fb      	ldrb	r3, [r7, #3]
2400720e:	2b06      	cmp	r3, #6
24007210:	d83b      	bhi.n	2400728a <HAL_DMA_UnRegisterCallback+0xba>
24007212:	a201      	add	r2, pc, #4	; (adr r2, 24007218 <HAL_DMA_UnRegisterCallback+0x48>)
24007214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
24007218:	24007235 	.word	0x24007235
2400721c:	2400723d 	.word	0x2400723d
24007220:	24007245 	.word	0x24007245
24007224:	2400724d 	.word	0x2400724d
24007228:	24007255 	.word	0x24007255
2400722c:	2400725d 	.word	0x2400725d
24007230:	24007265 	.word	0x24007265
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = NULL;
24007234:	687b      	ldr	r3, [r7, #4]
24007236:	2200      	movs	r2, #0
24007238:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
2400723a:	e02b      	b.n	24007294 <HAL_DMA_UnRegisterCallback+0xc4>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = NULL;
2400723c:	687b      	ldr	r3, [r7, #4]
2400723e:	2200      	movs	r2, #0
24007240:	641a      	str	r2, [r3, #64]	; 0x40
      break;
24007242:	e027      	b.n	24007294 <HAL_DMA_UnRegisterCallback+0xc4>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = NULL;
24007244:	687b      	ldr	r3, [r7, #4]
24007246:	2200      	movs	r2, #0
24007248:	645a      	str	r2, [r3, #68]	; 0x44
      break;
2400724a:	e023      	b.n	24007294 <HAL_DMA_UnRegisterCallback+0xc4>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = NULL;
2400724c:	687b      	ldr	r3, [r7, #4]
2400724e:	2200      	movs	r2, #0
24007250:	649a      	str	r2, [r3, #72]	; 0x48
      break;
24007252:	e01f      	b.n	24007294 <HAL_DMA_UnRegisterCallback+0xc4>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = NULL;
24007254:	687b      	ldr	r3, [r7, #4]
24007256:	2200      	movs	r2, #0
24007258:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
2400725a:	e01b      	b.n	24007294 <HAL_DMA_UnRegisterCallback+0xc4>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = NULL;
2400725c:	687b      	ldr	r3, [r7, #4]
2400725e:	2200      	movs	r2, #0
24007260:	651a      	str	r2, [r3, #80]	; 0x50
      break;
24007262:	e017      	b.n	24007294 <HAL_DMA_UnRegisterCallback+0xc4>

    case   HAL_DMA_XFER_ALL_CB_ID:
      hdma->XferCpltCallback = NULL;
24007264:	687b      	ldr	r3, [r7, #4]
24007266:	2200      	movs	r2, #0
24007268:	63da      	str	r2, [r3, #60]	; 0x3c
      hdma->XferHalfCpltCallback = NULL;
2400726a:	687b      	ldr	r3, [r7, #4]
2400726c:	2200      	movs	r2, #0
2400726e:	641a      	str	r2, [r3, #64]	; 0x40
      hdma->XferM1CpltCallback = NULL;
24007270:	687b      	ldr	r3, [r7, #4]
24007272:	2200      	movs	r2, #0
24007274:	645a      	str	r2, [r3, #68]	; 0x44
      hdma->XferM1HalfCpltCallback = NULL;
24007276:	687b      	ldr	r3, [r7, #4]
24007278:	2200      	movs	r2, #0
2400727a:	649a      	str	r2, [r3, #72]	; 0x48
      hdma->XferErrorCallback = NULL;
2400727c:	687b      	ldr	r3, [r7, #4]
2400727e:	2200      	movs	r2, #0
24007280:	64da      	str	r2, [r3, #76]	; 0x4c
      hdma->XferAbortCallback = NULL;
24007282:	687b      	ldr	r3, [r7, #4]
24007284:	2200      	movs	r2, #0
24007286:	651a      	str	r2, [r3, #80]	; 0x50
      break;
24007288:	e004      	b.n	24007294 <HAL_DMA_UnRegisterCallback+0xc4>

    default:
      status = HAL_ERROR;
2400728a:	2301      	movs	r3, #1
2400728c:	73fb      	strb	r3, [r7, #15]
      break;
2400728e:	e001      	b.n	24007294 <HAL_DMA_UnRegisterCallback+0xc4>
    }
  }
  else
  {
    status = HAL_ERROR;
24007290:	2301      	movs	r3, #1
24007292:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
24007294:	687b      	ldr	r3, [r7, #4]
24007296:	2200      	movs	r2, #0
24007298:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
2400729c:	7bfb      	ldrb	r3, [r7, #15]
}
2400729e:	4618      	mov	r0, r3
240072a0:	3714      	adds	r7, #20
240072a2:	46bd      	mov	sp, r7
240072a4:	f85d 7b04 	ldr.w	r7, [sp], #4
240072a8:	4770      	bx	lr
240072aa:	bf00      	nop

240072ac <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
240072ac:	b480      	push	{r7}
240072ae:	b083      	sub	sp, #12
240072b0:	af00      	add	r7, sp, #0
240072b2:	6078      	str	r0, [r7, #4]
  return hdma->State;
240072b4:	687b      	ldr	r3, [r7, #4]
240072b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
240072ba:	b2db      	uxtb	r3, r3
}
240072bc:	4618      	mov	r0, r3
240072be:	370c      	adds	r7, #12
240072c0:	46bd      	mov	sp, r7
240072c2:	f85d 7b04 	ldr.w	r7, [sp], #4
240072c6:	4770      	bx	lr

240072c8 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
240072c8:	b480      	push	{r7}
240072ca:	b083      	sub	sp, #12
240072cc:	af00      	add	r7, sp, #0
240072ce:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
240072d0:	687b      	ldr	r3, [r7, #4]
240072d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
240072d4:	4618      	mov	r0, r3
240072d6:	370c      	adds	r7, #12
240072d8:	46bd      	mov	sp, r7
240072da:	f85d 7b04 	ldr.w	r7, [sp], #4
240072de:	4770      	bx	lr

240072e0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
240072e0:	b480      	push	{r7}
240072e2:	b087      	sub	sp, #28
240072e4:	af00      	add	r7, sp, #0
240072e6:	60f8      	str	r0, [r7, #12]
240072e8:	60b9      	str	r1, [r7, #8]
240072ea:	607a      	str	r2, [r7, #4]
240072ec:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
240072ee:	68fb      	ldr	r3, [r7, #12]
240072f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
240072f2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
240072f4:	68fb      	ldr	r3, [r7, #12]
240072f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
240072f8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
240072fa:	68fb      	ldr	r3, [r7, #12]
240072fc:	681b      	ldr	r3, [r3, #0]
240072fe:	4a7f      	ldr	r2, [pc, #508]	; (240074fc <DMA_SetConfig+0x21c>)
24007300:	4293      	cmp	r3, r2
24007302:	d072      	beq.n	240073ea <DMA_SetConfig+0x10a>
24007304:	68fb      	ldr	r3, [r7, #12]
24007306:	681b      	ldr	r3, [r3, #0]
24007308:	4a7d      	ldr	r2, [pc, #500]	; (24007500 <DMA_SetConfig+0x220>)
2400730a:	4293      	cmp	r3, r2
2400730c:	d06d      	beq.n	240073ea <DMA_SetConfig+0x10a>
2400730e:	68fb      	ldr	r3, [r7, #12]
24007310:	681b      	ldr	r3, [r3, #0]
24007312:	4a7c      	ldr	r2, [pc, #496]	; (24007504 <DMA_SetConfig+0x224>)
24007314:	4293      	cmp	r3, r2
24007316:	d068      	beq.n	240073ea <DMA_SetConfig+0x10a>
24007318:	68fb      	ldr	r3, [r7, #12]
2400731a:	681b      	ldr	r3, [r3, #0]
2400731c:	4a7a      	ldr	r2, [pc, #488]	; (24007508 <DMA_SetConfig+0x228>)
2400731e:	4293      	cmp	r3, r2
24007320:	d063      	beq.n	240073ea <DMA_SetConfig+0x10a>
24007322:	68fb      	ldr	r3, [r7, #12]
24007324:	681b      	ldr	r3, [r3, #0]
24007326:	4a79      	ldr	r2, [pc, #484]	; (2400750c <DMA_SetConfig+0x22c>)
24007328:	4293      	cmp	r3, r2
2400732a:	d05e      	beq.n	240073ea <DMA_SetConfig+0x10a>
2400732c:	68fb      	ldr	r3, [r7, #12]
2400732e:	681b      	ldr	r3, [r3, #0]
24007330:	4a77      	ldr	r2, [pc, #476]	; (24007510 <DMA_SetConfig+0x230>)
24007332:	4293      	cmp	r3, r2
24007334:	d059      	beq.n	240073ea <DMA_SetConfig+0x10a>
24007336:	68fb      	ldr	r3, [r7, #12]
24007338:	681b      	ldr	r3, [r3, #0]
2400733a:	4a76      	ldr	r2, [pc, #472]	; (24007514 <DMA_SetConfig+0x234>)
2400733c:	4293      	cmp	r3, r2
2400733e:	d054      	beq.n	240073ea <DMA_SetConfig+0x10a>
24007340:	68fb      	ldr	r3, [r7, #12]
24007342:	681b      	ldr	r3, [r3, #0]
24007344:	4a74      	ldr	r2, [pc, #464]	; (24007518 <DMA_SetConfig+0x238>)
24007346:	4293      	cmp	r3, r2
24007348:	d04f      	beq.n	240073ea <DMA_SetConfig+0x10a>
2400734a:	68fb      	ldr	r3, [r7, #12]
2400734c:	681b      	ldr	r3, [r3, #0]
2400734e:	4a73      	ldr	r2, [pc, #460]	; (2400751c <DMA_SetConfig+0x23c>)
24007350:	4293      	cmp	r3, r2
24007352:	d04a      	beq.n	240073ea <DMA_SetConfig+0x10a>
24007354:	68fb      	ldr	r3, [r7, #12]
24007356:	681b      	ldr	r3, [r3, #0]
24007358:	4a71      	ldr	r2, [pc, #452]	; (24007520 <DMA_SetConfig+0x240>)
2400735a:	4293      	cmp	r3, r2
2400735c:	d045      	beq.n	240073ea <DMA_SetConfig+0x10a>
2400735e:	68fb      	ldr	r3, [r7, #12]
24007360:	681b      	ldr	r3, [r3, #0]
24007362:	4a70      	ldr	r2, [pc, #448]	; (24007524 <DMA_SetConfig+0x244>)
24007364:	4293      	cmp	r3, r2
24007366:	d040      	beq.n	240073ea <DMA_SetConfig+0x10a>
24007368:	68fb      	ldr	r3, [r7, #12]
2400736a:	681b      	ldr	r3, [r3, #0]
2400736c:	4a6e      	ldr	r2, [pc, #440]	; (24007528 <DMA_SetConfig+0x248>)
2400736e:	4293      	cmp	r3, r2
24007370:	d03b      	beq.n	240073ea <DMA_SetConfig+0x10a>
24007372:	68fb      	ldr	r3, [r7, #12]
24007374:	681b      	ldr	r3, [r3, #0]
24007376:	4a6d      	ldr	r2, [pc, #436]	; (2400752c <DMA_SetConfig+0x24c>)
24007378:	4293      	cmp	r3, r2
2400737a:	d036      	beq.n	240073ea <DMA_SetConfig+0x10a>
2400737c:	68fb      	ldr	r3, [r7, #12]
2400737e:	681b      	ldr	r3, [r3, #0]
24007380:	4a6b      	ldr	r2, [pc, #428]	; (24007530 <DMA_SetConfig+0x250>)
24007382:	4293      	cmp	r3, r2
24007384:	d031      	beq.n	240073ea <DMA_SetConfig+0x10a>
24007386:	68fb      	ldr	r3, [r7, #12]
24007388:	681b      	ldr	r3, [r3, #0]
2400738a:	4a6a      	ldr	r2, [pc, #424]	; (24007534 <DMA_SetConfig+0x254>)
2400738c:	4293      	cmp	r3, r2
2400738e:	d02c      	beq.n	240073ea <DMA_SetConfig+0x10a>
24007390:	68fb      	ldr	r3, [r7, #12]
24007392:	681b      	ldr	r3, [r3, #0]
24007394:	4a68      	ldr	r2, [pc, #416]	; (24007538 <DMA_SetConfig+0x258>)
24007396:	4293      	cmp	r3, r2
24007398:	d027      	beq.n	240073ea <DMA_SetConfig+0x10a>
2400739a:	68fb      	ldr	r3, [r7, #12]
2400739c:	681b      	ldr	r3, [r3, #0]
2400739e:	4a67      	ldr	r2, [pc, #412]	; (2400753c <DMA_SetConfig+0x25c>)
240073a0:	4293      	cmp	r3, r2
240073a2:	d022      	beq.n	240073ea <DMA_SetConfig+0x10a>
240073a4:	68fb      	ldr	r3, [r7, #12]
240073a6:	681b      	ldr	r3, [r3, #0]
240073a8:	4a65      	ldr	r2, [pc, #404]	; (24007540 <DMA_SetConfig+0x260>)
240073aa:	4293      	cmp	r3, r2
240073ac:	d01d      	beq.n	240073ea <DMA_SetConfig+0x10a>
240073ae:	68fb      	ldr	r3, [r7, #12]
240073b0:	681b      	ldr	r3, [r3, #0]
240073b2:	4a64      	ldr	r2, [pc, #400]	; (24007544 <DMA_SetConfig+0x264>)
240073b4:	4293      	cmp	r3, r2
240073b6:	d018      	beq.n	240073ea <DMA_SetConfig+0x10a>
240073b8:	68fb      	ldr	r3, [r7, #12]
240073ba:	681b      	ldr	r3, [r3, #0]
240073bc:	4a62      	ldr	r2, [pc, #392]	; (24007548 <DMA_SetConfig+0x268>)
240073be:	4293      	cmp	r3, r2
240073c0:	d013      	beq.n	240073ea <DMA_SetConfig+0x10a>
240073c2:	68fb      	ldr	r3, [r7, #12]
240073c4:	681b      	ldr	r3, [r3, #0]
240073c6:	4a61      	ldr	r2, [pc, #388]	; (2400754c <DMA_SetConfig+0x26c>)
240073c8:	4293      	cmp	r3, r2
240073ca:	d00e      	beq.n	240073ea <DMA_SetConfig+0x10a>
240073cc:	68fb      	ldr	r3, [r7, #12]
240073ce:	681b      	ldr	r3, [r3, #0]
240073d0:	4a5f      	ldr	r2, [pc, #380]	; (24007550 <DMA_SetConfig+0x270>)
240073d2:	4293      	cmp	r3, r2
240073d4:	d009      	beq.n	240073ea <DMA_SetConfig+0x10a>
240073d6:	68fb      	ldr	r3, [r7, #12]
240073d8:	681b      	ldr	r3, [r3, #0]
240073da:	4a5e      	ldr	r2, [pc, #376]	; (24007554 <DMA_SetConfig+0x274>)
240073dc:	4293      	cmp	r3, r2
240073de:	d004      	beq.n	240073ea <DMA_SetConfig+0x10a>
240073e0:	68fb      	ldr	r3, [r7, #12]
240073e2:	681b      	ldr	r3, [r3, #0]
240073e4:	4a5c      	ldr	r2, [pc, #368]	; (24007558 <DMA_SetConfig+0x278>)
240073e6:	4293      	cmp	r3, r2
240073e8:	d101      	bne.n	240073ee <DMA_SetConfig+0x10e>
240073ea:	2301      	movs	r3, #1
240073ec:	e000      	b.n	240073f0 <DMA_SetConfig+0x110>
240073ee:	2300      	movs	r3, #0
240073f0:	2b00      	cmp	r3, #0
240073f2:	d00d      	beq.n	24007410 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
240073f4:	68fb      	ldr	r3, [r7, #12]
240073f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
240073f8:	68fa      	ldr	r2, [r7, #12]
240073fa:	6e92      	ldr	r2, [r2, #104]	; 0x68
240073fc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
240073fe:	68fb      	ldr	r3, [r7, #12]
24007400:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24007402:	2b00      	cmp	r3, #0
24007404:	d004      	beq.n	24007410 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
24007406:	68fb      	ldr	r3, [r7, #12]
24007408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2400740a:	68fa      	ldr	r2, [r7, #12]
2400740c:	6f52      	ldr	r2, [r2, #116]	; 0x74
2400740e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24007410:	68fb      	ldr	r3, [r7, #12]
24007412:	681b      	ldr	r3, [r3, #0]
24007414:	4a39      	ldr	r2, [pc, #228]	; (240074fc <DMA_SetConfig+0x21c>)
24007416:	4293      	cmp	r3, r2
24007418:	d04a      	beq.n	240074b0 <DMA_SetConfig+0x1d0>
2400741a:	68fb      	ldr	r3, [r7, #12]
2400741c:	681b      	ldr	r3, [r3, #0]
2400741e:	4a38      	ldr	r2, [pc, #224]	; (24007500 <DMA_SetConfig+0x220>)
24007420:	4293      	cmp	r3, r2
24007422:	d045      	beq.n	240074b0 <DMA_SetConfig+0x1d0>
24007424:	68fb      	ldr	r3, [r7, #12]
24007426:	681b      	ldr	r3, [r3, #0]
24007428:	4a36      	ldr	r2, [pc, #216]	; (24007504 <DMA_SetConfig+0x224>)
2400742a:	4293      	cmp	r3, r2
2400742c:	d040      	beq.n	240074b0 <DMA_SetConfig+0x1d0>
2400742e:	68fb      	ldr	r3, [r7, #12]
24007430:	681b      	ldr	r3, [r3, #0]
24007432:	4a35      	ldr	r2, [pc, #212]	; (24007508 <DMA_SetConfig+0x228>)
24007434:	4293      	cmp	r3, r2
24007436:	d03b      	beq.n	240074b0 <DMA_SetConfig+0x1d0>
24007438:	68fb      	ldr	r3, [r7, #12]
2400743a:	681b      	ldr	r3, [r3, #0]
2400743c:	4a33      	ldr	r2, [pc, #204]	; (2400750c <DMA_SetConfig+0x22c>)
2400743e:	4293      	cmp	r3, r2
24007440:	d036      	beq.n	240074b0 <DMA_SetConfig+0x1d0>
24007442:	68fb      	ldr	r3, [r7, #12]
24007444:	681b      	ldr	r3, [r3, #0]
24007446:	4a32      	ldr	r2, [pc, #200]	; (24007510 <DMA_SetConfig+0x230>)
24007448:	4293      	cmp	r3, r2
2400744a:	d031      	beq.n	240074b0 <DMA_SetConfig+0x1d0>
2400744c:	68fb      	ldr	r3, [r7, #12]
2400744e:	681b      	ldr	r3, [r3, #0]
24007450:	4a30      	ldr	r2, [pc, #192]	; (24007514 <DMA_SetConfig+0x234>)
24007452:	4293      	cmp	r3, r2
24007454:	d02c      	beq.n	240074b0 <DMA_SetConfig+0x1d0>
24007456:	68fb      	ldr	r3, [r7, #12]
24007458:	681b      	ldr	r3, [r3, #0]
2400745a:	4a2f      	ldr	r2, [pc, #188]	; (24007518 <DMA_SetConfig+0x238>)
2400745c:	4293      	cmp	r3, r2
2400745e:	d027      	beq.n	240074b0 <DMA_SetConfig+0x1d0>
24007460:	68fb      	ldr	r3, [r7, #12]
24007462:	681b      	ldr	r3, [r3, #0]
24007464:	4a2d      	ldr	r2, [pc, #180]	; (2400751c <DMA_SetConfig+0x23c>)
24007466:	4293      	cmp	r3, r2
24007468:	d022      	beq.n	240074b0 <DMA_SetConfig+0x1d0>
2400746a:	68fb      	ldr	r3, [r7, #12]
2400746c:	681b      	ldr	r3, [r3, #0]
2400746e:	4a2c      	ldr	r2, [pc, #176]	; (24007520 <DMA_SetConfig+0x240>)
24007470:	4293      	cmp	r3, r2
24007472:	d01d      	beq.n	240074b0 <DMA_SetConfig+0x1d0>
24007474:	68fb      	ldr	r3, [r7, #12]
24007476:	681b      	ldr	r3, [r3, #0]
24007478:	4a2a      	ldr	r2, [pc, #168]	; (24007524 <DMA_SetConfig+0x244>)
2400747a:	4293      	cmp	r3, r2
2400747c:	d018      	beq.n	240074b0 <DMA_SetConfig+0x1d0>
2400747e:	68fb      	ldr	r3, [r7, #12]
24007480:	681b      	ldr	r3, [r3, #0]
24007482:	4a29      	ldr	r2, [pc, #164]	; (24007528 <DMA_SetConfig+0x248>)
24007484:	4293      	cmp	r3, r2
24007486:	d013      	beq.n	240074b0 <DMA_SetConfig+0x1d0>
24007488:	68fb      	ldr	r3, [r7, #12]
2400748a:	681b      	ldr	r3, [r3, #0]
2400748c:	4a27      	ldr	r2, [pc, #156]	; (2400752c <DMA_SetConfig+0x24c>)
2400748e:	4293      	cmp	r3, r2
24007490:	d00e      	beq.n	240074b0 <DMA_SetConfig+0x1d0>
24007492:	68fb      	ldr	r3, [r7, #12]
24007494:	681b      	ldr	r3, [r3, #0]
24007496:	4a26      	ldr	r2, [pc, #152]	; (24007530 <DMA_SetConfig+0x250>)
24007498:	4293      	cmp	r3, r2
2400749a:	d009      	beq.n	240074b0 <DMA_SetConfig+0x1d0>
2400749c:	68fb      	ldr	r3, [r7, #12]
2400749e:	681b      	ldr	r3, [r3, #0]
240074a0:	4a24      	ldr	r2, [pc, #144]	; (24007534 <DMA_SetConfig+0x254>)
240074a2:	4293      	cmp	r3, r2
240074a4:	d004      	beq.n	240074b0 <DMA_SetConfig+0x1d0>
240074a6:	68fb      	ldr	r3, [r7, #12]
240074a8:	681b      	ldr	r3, [r3, #0]
240074aa:	4a23      	ldr	r2, [pc, #140]	; (24007538 <DMA_SetConfig+0x258>)
240074ac:	4293      	cmp	r3, r2
240074ae:	d101      	bne.n	240074b4 <DMA_SetConfig+0x1d4>
240074b0:	2301      	movs	r3, #1
240074b2:	e000      	b.n	240074b6 <DMA_SetConfig+0x1d6>
240074b4:	2300      	movs	r3, #0
240074b6:	2b00      	cmp	r3, #0
240074b8:	d059      	beq.n	2400756e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
240074ba:	68fb      	ldr	r3, [r7, #12]
240074bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
240074be:	f003 031f 	and.w	r3, r3, #31
240074c2:	223f      	movs	r2, #63	; 0x3f
240074c4:	409a      	lsls	r2, r3
240074c6:	697b      	ldr	r3, [r7, #20]
240074c8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
240074ca:	68fb      	ldr	r3, [r7, #12]
240074cc:	681b      	ldr	r3, [r3, #0]
240074ce:	681a      	ldr	r2, [r3, #0]
240074d0:	68fb      	ldr	r3, [r7, #12]
240074d2:	681b      	ldr	r3, [r3, #0]
240074d4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
240074d8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
240074da:	68fb      	ldr	r3, [r7, #12]
240074dc:	681b      	ldr	r3, [r3, #0]
240074de:	683a      	ldr	r2, [r7, #0]
240074e0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
240074e2:	68fb      	ldr	r3, [r7, #12]
240074e4:	689b      	ldr	r3, [r3, #8]
240074e6:	2b40      	cmp	r3, #64	; 0x40
240074e8:	d138      	bne.n	2400755c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
240074ea:	68fb      	ldr	r3, [r7, #12]
240074ec:	681b      	ldr	r3, [r3, #0]
240074ee:	687a      	ldr	r2, [r7, #4]
240074f0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
240074f2:	68fb      	ldr	r3, [r7, #12]
240074f4:	681b      	ldr	r3, [r3, #0]
240074f6:	68ba      	ldr	r2, [r7, #8]
240074f8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
240074fa:	e086      	b.n	2400760a <DMA_SetConfig+0x32a>
240074fc:	40020010 	.word	0x40020010
24007500:	40020028 	.word	0x40020028
24007504:	40020040 	.word	0x40020040
24007508:	40020058 	.word	0x40020058
2400750c:	40020070 	.word	0x40020070
24007510:	40020088 	.word	0x40020088
24007514:	400200a0 	.word	0x400200a0
24007518:	400200b8 	.word	0x400200b8
2400751c:	40020410 	.word	0x40020410
24007520:	40020428 	.word	0x40020428
24007524:	40020440 	.word	0x40020440
24007528:	40020458 	.word	0x40020458
2400752c:	40020470 	.word	0x40020470
24007530:	40020488 	.word	0x40020488
24007534:	400204a0 	.word	0x400204a0
24007538:	400204b8 	.word	0x400204b8
2400753c:	58025408 	.word	0x58025408
24007540:	5802541c 	.word	0x5802541c
24007544:	58025430 	.word	0x58025430
24007548:	58025444 	.word	0x58025444
2400754c:	58025458 	.word	0x58025458
24007550:	5802546c 	.word	0x5802546c
24007554:	58025480 	.word	0x58025480
24007558:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
2400755c:	68fb      	ldr	r3, [r7, #12]
2400755e:	681b      	ldr	r3, [r3, #0]
24007560:	68ba      	ldr	r2, [r7, #8]
24007562:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
24007564:	68fb      	ldr	r3, [r7, #12]
24007566:	681b      	ldr	r3, [r3, #0]
24007568:	687a      	ldr	r2, [r7, #4]
2400756a:	60da      	str	r2, [r3, #12]
}
2400756c:	e04d      	b.n	2400760a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
2400756e:	68fb      	ldr	r3, [r7, #12]
24007570:	681b      	ldr	r3, [r3, #0]
24007572:	4a29      	ldr	r2, [pc, #164]	; (24007618 <DMA_SetConfig+0x338>)
24007574:	4293      	cmp	r3, r2
24007576:	d022      	beq.n	240075be <DMA_SetConfig+0x2de>
24007578:	68fb      	ldr	r3, [r7, #12]
2400757a:	681b      	ldr	r3, [r3, #0]
2400757c:	4a27      	ldr	r2, [pc, #156]	; (2400761c <DMA_SetConfig+0x33c>)
2400757e:	4293      	cmp	r3, r2
24007580:	d01d      	beq.n	240075be <DMA_SetConfig+0x2de>
24007582:	68fb      	ldr	r3, [r7, #12]
24007584:	681b      	ldr	r3, [r3, #0]
24007586:	4a26      	ldr	r2, [pc, #152]	; (24007620 <DMA_SetConfig+0x340>)
24007588:	4293      	cmp	r3, r2
2400758a:	d018      	beq.n	240075be <DMA_SetConfig+0x2de>
2400758c:	68fb      	ldr	r3, [r7, #12]
2400758e:	681b      	ldr	r3, [r3, #0]
24007590:	4a24      	ldr	r2, [pc, #144]	; (24007624 <DMA_SetConfig+0x344>)
24007592:	4293      	cmp	r3, r2
24007594:	d013      	beq.n	240075be <DMA_SetConfig+0x2de>
24007596:	68fb      	ldr	r3, [r7, #12]
24007598:	681b      	ldr	r3, [r3, #0]
2400759a:	4a23      	ldr	r2, [pc, #140]	; (24007628 <DMA_SetConfig+0x348>)
2400759c:	4293      	cmp	r3, r2
2400759e:	d00e      	beq.n	240075be <DMA_SetConfig+0x2de>
240075a0:	68fb      	ldr	r3, [r7, #12]
240075a2:	681b      	ldr	r3, [r3, #0]
240075a4:	4a21      	ldr	r2, [pc, #132]	; (2400762c <DMA_SetConfig+0x34c>)
240075a6:	4293      	cmp	r3, r2
240075a8:	d009      	beq.n	240075be <DMA_SetConfig+0x2de>
240075aa:	68fb      	ldr	r3, [r7, #12]
240075ac:	681b      	ldr	r3, [r3, #0]
240075ae:	4a20      	ldr	r2, [pc, #128]	; (24007630 <DMA_SetConfig+0x350>)
240075b0:	4293      	cmp	r3, r2
240075b2:	d004      	beq.n	240075be <DMA_SetConfig+0x2de>
240075b4:	68fb      	ldr	r3, [r7, #12]
240075b6:	681b      	ldr	r3, [r3, #0]
240075b8:	4a1e      	ldr	r2, [pc, #120]	; (24007634 <DMA_SetConfig+0x354>)
240075ba:	4293      	cmp	r3, r2
240075bc:	d101      	bne.n	240075c2 <DMA_SetConfig+0x2e2>
240075be:	2301      	movs	r3, #1
240075c0:	e000      	b.n	240075c4 <DMA_SetConfig+0x2e4>
240075c2:	2300      	movs	r3, #0
240075c4:	2b00      	cmp	r3, #0
240075c6:	d020      	beq.n	2400760a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
240075c8:	68fb      	ldr	r3, [r7, #12]
240075ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
240075cc:	f003 031f 	and.w	r3, r3, #31
240075d0:	2201      	movs	r2, #1
240075d2:	409a      	lsls	r2, r3
240075d4:	693b      	ldr	r3, [r7, #16]
240075d6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
240075d8:	68fb      	ldr	r3, [r7, #12]
240075da:	681b      	ldr	r3, [r3, #0]
240075dc:	683a      	ldr	r2, [r7, #0]
240075de:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
240075e0:	68fb      	ldr	r3, [r7, #12]
240075e2:	689b      	ldr	r3, [r3, #8]
240075e4:	2b40      	cmp	r3, #64	; 0x40
240075e6:	d108      	bne.n	240075fa <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
240075e8:	68fb      	ldr	r3, [r7, #12]
240075ea:	681b      	ldr	r3, [r3, #0]
240075ec:	687a      	ldr	r2, [r7, #4]
240075ee:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
240075f0:	68fb      	ldr	r3, [r7, #12]
240075f2:	681b      	ldr	r3, [r3, #0]
240075f4:	68ba      	ldr	r2, [r7, #8]
240075f6:	60da      	str	r2, [r3, #12]
}
240075f8:	e007      	b.n	2400760a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
240075fa:	68fb      	ldr	r3, [r7, #12]
240075fc:	681b      	ldr	r3, [r3, #0]
240075fe:	68ba      	ldr	r2, [r7, #8]
24007600:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
24007602:	68fb      	ldr	r3, [r7, #12]
24007604:	681b      	ldr	r3, [r3, #0]
24007606:	687a      	ldr	r2, [r7, #4]
24007608:	60da      	str	r2, [r3, #12]
}
2400760a:	bf00      	nop
2400760c:	371c      	adds	r7, #28
2400760e:	46bd      	mov	sp, r7
24007610:	f85d 7b04 	ldr.w	r7, [sp], #4
24007614:	4770      	bx	lr
24007616:	bf00      	nop
24007618:	58025408 	.word	0x58025408
2400761c:	5802541c 	.word	0x5802541c
24007620:	58025430 	.word	0x58025430
24007624:	58025444 	.word	0x58025444
24007628:	58025458 	.word	0x58025458
2400762c:	5802546c 	.word	0x5802546c
24007630:	58025480 	.word	0x58025480
24007634:	58025494 	.word	0x58025494

24007638 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
24007638:	b480      	push	{r7}
2400763a:	b085      	sub	sp, #20
2400763c:	af00      	add	r7, sp, #0
2400763e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24007640:	687b      	ldr	r3, [r7, #4]
24007642:	681b      	ldr	r3, [r3, #0]
24007644:	4a42      	ldr	r2, [pc, #264]	; (24007750 <DMA_CalcBaseAndBitshift+0x118>)
24007646:	4293      	cmp	r3, r2
24007648:	d04a      	beq.n	240076e0 <DMA_CalcBaseAndBitshift+0xa8>
2400764a:	687b      	ldr	r3, [r7, #4]
2400764c:	681b      	ldr	r3, [r3, #0]
2400764e:	4a41      	ldr	r2, [pc, #260]	; (24007754 <DMA_CalcBaseAndBitshift+0x11c>)
24007650:	4293      	cmp	r3, r2
24007652:	d045      	beq.n	240076e0 <DMA_CalcBaseAndBitshift+0xa8>
24007654:	687b      	ldr	r3, [r7, #4]
24007656:	681b      	ldr	r3, [r3, #0]
24007658:	4a3f      	ldr	r2, [pc, #252]	; (24007758 <DMA_CalcBaseAndBitshift+0x120>)
2400765a:	4293      	cmp	r3, r2
2400765c:	d040      	beq.n	240076e0 <DMA_CalcBaseAndBitshift+0xa8>
2400765e:	687b      	ldr	r3, [r7, #4]
24007660:	681b      	ldr	r3, [r3, #0]
24007662:	4a3e      	ldr	r2, [pc, #248]	; (2400775c <DMA_CalcBaseAndBitshift+0x124>)
24007664:	4293      	cmp	r3, r2
24007666:	d03b      	beq.n	240076e0 <DMA_CalcBaseAndBitshift+0xa8>
24007668:	687b      	ldr	r3, [r7, #4]
2400766a:	681b      	ldr	r3, [r3, #0]
2400766c:	4a3c      	ldr	r2, [pc, #240]	; (24007760 <DMA_CalcBaseAndBitshift+0x128>)
2400766e:	4293      	cmp	r3, r2
24007670:	d036      	beq.n	240076e0 <DMA_CalcBaseAndBitshift+0xa8>
24007672:	687b      	ldr	r3, [r7, #4]
24007674:	681b      	ldr	r3, [r3, #0]
24007676:	4a3b      	ldr	r2, [pc, #236]	; (24007764 <DMA_CalcBaseAndBitshift+0x12c>)
24007678:	4293      	cmp	r3, r2
2400767a:	d031      	beq.n	240076e0 <DMA_CalcBaseAndBitshift+0xa8>
2400767c:	687b      	ldr	r3, [r7, #4]
2400767e:	681b      	ldr	r3, [r3, #0]
24007680:	4a39      	ldr	r2, [pc, #228]	; (24007768 <DMA_CalcBaseAndBitshift+0x130>)
24007682:	4293      	cmp	r3, r2
24007684:	d02c      	beq.n	240076e0 <DMA_CalcBaseAndBitshift+0xa8>
24007686:	687b      	ldr	r3, [r7, #4]
24007688:	681b      	ldr	r3, [r3, #0]
2400768a:	4a38      	ldr	r2, [pc, #224]	; (2400776c <DMA_CalcBaseAndBitshift+0x134>)
2400768c:	4293      	cmp	r3, r2
2400768e:	d027      	beq.n	240076e0 <DMA_CalcBaseAndBitshift+0xa8>
24007690:	687b      	ldr	r3, [r7, #4]
24007692:	681b      	ldr	r3, [r3, #0]
24007694:	4a36      	ldr	r2, [pc, #216]	; (24007770 <DMA_CalcBaseAndBitshift+0x138>)
24007696:	4293      	cmp	r3, r2
24007698:	d022      	beq.n	240076e0 <DMA_CalcBaseAndBitshift+0xa8>
2400769a:	687b      	ldr	r3, [r7, #4]
2400769c:	681b      	ldr	r3, [r3, #0]
2400769e:	4a35      	ldr	r2, [pc, #212]	; (24007774 <DMA_CalcBaseAndBitshift+0x13c>)
240076a0:	4293      	cmp	r3, r2
240076a2:	d01d      	beq.n	240076e0 <DMA_CalcBaseAndBitshift+0xa8>
240076a4:	687b      	ldr	r3, [r7, #4]
240076a6:	681b      	ldr	r3, [r3, #0]
240076a8:	4a33      	ldr	r2, [pc, #204]	; (24007778 <DMA_CalcBaseAndBitshift+0x140>)
240076aa:	4293      	cmp	r3, r2
240076ac:	d018      	beq.n	240076e0 <DMA_CalcBaseAndBitshift+0xa8>
240076ae:	687b      	ldr	r3, [r7, #4]
240076b0:	681b      	ldr	r3, [r3, #0]
240076b2:	4a32      	ldr	r2, [pc, #200]	; (2400777c <DMA_CalcBaseAndBitshift+0x144>)
240076b4:	4293      	cmp	r3, r2
240076b6:	d013      	beq.n	240076e0 <DMA_CalcBaseAndBitshift+0xa8>
240076b8:	687b      	ldr	r3, [r7, #4]
240076ba:	681b      	ldr	r3, [r3, #0]
240076bc:	4a30      	ldr	r2, [pc, #192]	; (24007780 <DMA_CalcBaseAndBitshift+0x148>)
240076be:	4293      	cmp	r3, r2
240076c0:	d00e      	beq.n	240076e0 <DMA_CalcBaseAndBitshift+0xa8>
240076c2:	687b      	ldr	r3, [r7, #4]
240076c4:	681b      	ldr	r3, [r3, #0]
240076c6:	4a2f      	ldr	r2, [pc, #188]	; (24007784 <DMA_CalcBaseAndBitshift+0x14c>)
240076c8:	4293      	cmp	r3, r2
240076ca:	d009      	beq.n	240076e0 <DMA_CalcBaseAndBitshift+0xa8>
240076cc:	687b      	ldr	r3, [r7, #4]
240076ce:	681b      	ldr	r3, [r3, #0]
240076d0:	4a2d      	ldr	r2, [pc, #180]	; (24007788 <DMA_CalcBaseAndBitshift+0x150>)
240076d2:	4293      	cmp	r3, r2
240076d4:	d004      	beq.n	240076e0 <DMA_CalcBaseAndBitshift+0xa8>
240076d6:	687b      	ldr	r3, [r7, #4]
240076d8:	681b      	ldr	r3, [r3, #0]
240076da:	4a2c      	ldr	r2, [pc, #176]	; (2400778c <DMA_CalcBaseAndBitshift+0x154>)
240076dc:	4293      	cmp	r3, r2
240076de:	d101      	bne.n	240076e4 <DMA_CalcBaseAndBitshift+0xac>
240076e0:	2301      	movs	r3, #1
240076e2:	e000      	b.n	240076e6 <DMA_CalcBaseAndBitshift+0xae>
240076e4:	2300      	movs	r3, #0
240076e6:	2b00      	cmp	r3, #0
240076e8:	d024      	beq.n	24007734 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
240076ea:	687b      	ldr	r3, [r7, #4]
240076ec:	681b      	ldr	r3, [r3, #0]
240076ee:	b2db      	uxtb	r3, r3
240076f0:	3b10      	subs	r3, #16
240076f2:	4a27      	ldr	r2, [pc, #156]	; (24007790 <DMA_CalcBaseAndBitshift+0x158>)
240076f4:	fba2 2303 	umull	r2, r3, r2, r3
240076f8:	091b      	lsrs	r3, r3, #4
240076fa:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
240076fc:	68fb      	ldr	r3, [r7, #12]
240076fe:	f003 0307 	and.w	r3, r3, #7
24007702:	4a24      	ldr	r2, [pc, #144]	; (24007794 <DMA_CalcBaseAndBitshift+0x15c>)
24007704:	5cd3      	ldrb	r3, [r2, r3]
24007706:	461a      	mov	r2, r3
24007708:	687b      	ldr	r3, [r7, #4]
2400770a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
2400770c:	68fb      	ldr	r3, [r7, #12]
2400770e:	2b03      	cmp	r3, #3
24007710:	d908      	bls.n	24007724 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
24007712:	687b      	ldr	r3, [r7, #4]
24007714:	681b      	ldr	r3, [r3, #0]
24007716:	461a      	mov	r2, r3
24007718:	4b1f      	ldr	r3, [pc, #124]	; (24007798 <DMA_CalcBaseAndBitshift+0x160>)
2400771a:	4013      	ands	r3, r2
2400771c:	1d1a      	adds	r2, r3, #4
2400771e:	687b      	ldr	r3, [r7, #4]
24007720:	659a      	str	r2, [r3, #88]	; 0x58
24007722:	e00d      	b.n	24007740 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
24007724:	687b      	ldr	r3, [r7, #4]
24007726:	681b      	ldr	r3, [r3, #0]
24007728:	461a      	mov	r2, r3
2400772a:	4b1b      	ldr	r3, [pc, #108]	; (24007798 <DMA_CalcBaseAndBitshift+0x160>)
2400772c:	4013      	ands	r3, r2
2400772e:	687a      	ldr	r2, [r7, #4]
24007730:	6593      	str	r3, [r2, #88]	; 0x58
24007732:	e005      	b.n	24007740 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
24007734:	687b      	ldr	r3, [r7, #4]
24007736:	681b      	ldr	r3, [r3, #0]
24007738:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
2400773c:	687b      	ldr	r3, [r7, #4]
2400773e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
24007740:	687b      	ldr	r3, [r7, #4]
24007742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
24007744:	4618      	mov	r0, r3
24007746:	3714      	adds	r7, #20
24007748:	46bd      	mov	sp, r7
2400774a:	f85d 7b04 	ldr.w	r7, [sp], #4
2400774e:	4770      	bx	lr
24007750:	40020010 	.word	0x40020010
24007754:	40020028 	.word	0x40020028
24007758:	40020040 	.word	0x40020040
2400775c:	40020058 	.word	0x40020058
24007760:	40020070 	.word	0x40020070
24007764:	40020088 	.word	0x40020088
24007768:	400200a0 	.word	0x400200a0
2400776c:	400200b8 	.word	0x400200b8
24007770:	40020410 	.word	0x40020410
24007774:	40020428 	.word	0x40020428
24007778:	40020440 	.word	0x40020440
2400777c:	40020458 	.word	0x40020458
24007780:	40020470 	.word	0x40020470
24007784:	40020488 	.word	0x40020488
24007788:	400204a0 	.word	0x400204a0
2400778c:	400204b8 	.word	0x400204b8
24007790:	aaaaaaab 	.word	0xaaaaaaab
24007794:	24019ae0 	.word	0x24019ae0
24007798:	fffffc00 	.word	0xfffffc00

2400779c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
2400779c:	b480      	push	{r7}
2400779e:	b085      	sub	sp, #20
240077a0:	af00      	add	r7, sp, #0
240077a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
240077a4:	2300      	movs	r3, #0
240077a6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
240077a8:	687b      	ldr	r3, [r7, #4]
240077aa:	699b      	ldr	r3, [r3, #24]
240077ac:	2b00      	cmp	r3, #0
240077ae:	d120      	bne.n	240077f2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
240077b0:	687b      	ldr	r3, [r7, #4]
240077b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
240077b4:	2b03      	cmp	r3, #3
240077b6:	d858      	bhi.n	2400786a <DMA_CheckFifoParam+0xce>
240077b8:	a201      	add	r2, pc, #4	; (adr r2, 240077c0 <DMA_CheckFifoParam+0x24>)
240077ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
240077be:	bf00      	nop
240077c0:	240077d1 	.word	0x240077d1
240077c4:	240077e3 	.word	0x240077e3
240077c8:	240077d1 	.word	0x240077d1
240077cc:	2400786b 	.word	0x2400786b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
240077d0:	687b      	ldr	r3, [r7, #4]
240077d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
240077d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
240077d8:	2b00      	cmp	r3, #0
240077da:	d048      	beq.n	2400786e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
240077dc:	2301      	movs	r3, #1
240077de:	73fb      	strb	r3, [r7, #15]
        }
        break;
240077e0:	e045      	b.n	2400786e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
240077e2:	687b      	ldr	r3, [r7, #4]
240077e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
240077e6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
240077ea:	d142      	bne.n	24007872 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
240077ec:	2301      	movs	r3, #1
240077ee:	73fb      	strb	r3, [r7, #15]
        }
        break;
240077f0:	e03f      	b.n	24007872 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
240077f2:	687b      	ldr	r3, [r7, #4]
240077f4:	699b      	ldr	r3, [r3, #24]
240077f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
240077fa:	d123      	bne.n	24007844 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
240077fc:	687b      	ldr	r3, [r7, #4]
240077fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24007800:	2b03      	cmp	r3, #3
24007802:	d838      	bhi.n	24007876 <DMA_CheckFifoParam+0xda>
24007804:	a201      	add	r2, pc, #4	; (adr r2, 2400780c <DMA_CheckFifoParam+0x70>)
24007806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2400780a:	bf00      	nop
2400780c:	2400781d 	.word	0x2400781d
24007810:	24007823 	.word	0x24007823
24007814:	2400781d 	.word	0x2400781d
24007818:	24007835 	.word	0x24007835
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
2400781c:	2301      	movs	r3, #1
2400781e:	73fb      	strb	r3, [r7, #15]
        break;
24007820:	e030      	b.n	24007884 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
24007822:	687b      	ldr	r3, [r7, #4]
24007824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24007826:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
2400782a:	2b00      	cmp	r3, #0
2400782c:	d025      	beq.n	2400787a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
2400782e:	2301      	movs	r3, #1
24007830:	73fb      	strb	r3, [r7, #15]
        }
        break;
24007832:	e022      	b.n	2400787a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
24007834:	687b      	ldr	r3, [r7, #4]
24007836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24007838:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
2400783c:	d11f      	bne.n	2400787e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
2400783e:	2301      	movs	r3, #1
24007840:	73fb      	strb	r3, [r7, #15]
        }
        break;
24007842:	e01c      	b.n	2400787e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
24007844:	687b      	ldr	r3, [r7, #4]
24007846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24007848:	2b02      	cmp	r3, #2
2400784a:	d902      	bls.n	24007852 <DMA_CheckFifoParam+0xb6>
2400784c:	2b03      	cmp	r3, #3
2400784e:	d003      	beq.n	24007858 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
24007850:	e018      	b.n	24007884 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
24007852:	2301      	movs	r3, #1
24007854:	73fb      	strb	r3, [r7, #15]
        break;
24007856:	e015      	b.n	24007884 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
24007858:	687b      	ldr	r3, [r7, #4]
2400785a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400785c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
24007860:	2b00      	cmp	r3, #0
24007862:	d00e      	beq.n	24007882 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
24007864:	2301      	movs	r3, #1
24007866:	73fb      	strb	r3, [r7, #15]
    break;
24007868:	e00b      	b.n	24007882 <DMA_CheckFifoParam+0xe6>
        break;
2400786a:	bf00      	nop
2400786c:	e00a      	b.n	24007884 <DMA_CheckFifoParam+0xe8>
        break;
2400786e:	bf00      	nop
24007870:	e008      	b.n	24007884 <DMA_CheckFifoParam+0xe8>
        break;
24007872:	bf00      	nop
24007874:	e006      	b.n	24007884 <DMA_CheckFifoParam+0xe8>
        break;
24007876:	bf00      	nop
24007878:	e004      	b.n	24007884 <DMA_CheckFifoParam+0xe8>
        break;
2400787a:	bf00      	nop
2400787c:	e002      	b.n	24007884 <DMA_CheckFifoParam+0xe8>
        break;
2400787e:	bf00      	nop
24007880:	e000      	b.n	24007884 <DMA_CheckFifoParam+0xe8>
    break;
24007882:	bf00      	nop
    }
  }

  return status;
24007884:	7bfb      	ldrb	r3, [r7, #15]
}
24007886:	4618      	mov	r0, r3
24007888:	3714      	adds	r7, #20
2400788a:	46bd      	mov	sp, r7
2400788c:	f85d 7b04 	ldr.w	r7, [sp], #4
24007890:	4770      	bx	lr
24007892:	bf00      	nop

24007894 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
24007894:	b480      	push	{r7}
24007896:	b085      	sub	sp, #20
24007898:	af00      	add	r7, sp, #0
2400789a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
2400789c:	687b      	ldr	r3, [r7, #4]
2400789e:	681b      	ldr	r3, [r3, #0]
240078a0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
240078a2:	687b      	ldr	r3, [r7, #4]
240078a4:	681b      	ldr	r3, [r3, #0]
240078a6:	4a38      	ldr	r2, [pc, #224]	; (24007988 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
240078a8:	4293      	cmp	r3, r2
240078aa:	d022      	beq.n	240078f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
240078ac:	687b      	ldr	r3, [r7, #4]
240078ae:	681b      	ldr	r3, [r3, #0]
240078b0:	4a36      	ldr	r2, [pc, #216]	; (2400798c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
240078b2:	4293      	cmp	r3, r2
240078b4:	d01d      	beq.n	240078f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
240078b6:	687b      	ldr	r3, [r7, #4]
240078b8:	681b      	ldr	r3, [r3, #0]
240078ba:	4a35      	ldr	r2, [pc, #212]	; (24007990 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
240078bc:	4293      	cmp	r3, r2
240078be:	d018      	beq.n	240078f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
240078c0:	687b      	ldr	r3, [r7, #4]
240078c2:	681b      	ldr	r3, [r3, #0]
240078c4:	4a33      	ldr	r2, [pc, #204]	; (24007994 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
240078c6:	4293      	cmp	r3, r2
240078c8:	d013      	beq.n	240078f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
240078ca:	687b      	ldr	r3, [r7, #4]
240078cc:	681b      	ldr	r3, [r3, #0]
240078ce:	4a32      	ldr	r2, [pc, #200]	; (24007998 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
240078d0:	4293      	cmp	r3, r2
240078d2:	d00e      	beq.n	240078f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
240078d4:	687b      	ldr	r3, [r7, #4]
240078d6:	681b      	ldr	r3, [r3, #0]
240078d8:	4a30      	ldr	r2, [pc, #192]	; (2400799c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
240078da:	4293      	cmp	r3, r2
240078dc:	d009      	beq.n	240078f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
240078de:	687b      	ldr	r3, [r7, #4]
240078e0:	681b      	ldr	r3, [r3, #0]
240078e2:	4a2f      	ldr	r2, [pc, #188]	; (240079a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
240078e4:	4293      	cmp	r3, r2
240078e6:	d004      	beq.n	240078f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
240078e8:	687b      	ldr	r3, [r7, #4]
240078ea:	681b      	ldr	r3, [r3, #0]
240078ec:	4a2d      	ldr	r2, [pc, #180]	; (240079a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
240078ee:	4293      	cmp	r3, r2
240078f0:	d101      	bne.n	240078f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
240078f2:	2301      	movs	r3, #1
240078f4:	e000      	b.n	240078f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
240078f6:	2300      	movs	r3, #0
240078f8:	2b00      	cmp	r3, #0
240078fa:	d01a      	beq.n	24007932 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
240078fc:	687b      	ldr	r3, [r7, #4]
240078fe:	681b      	ldr	r3, [r3, #0]
24007900:	b2db      	uxtb	r3, r3
24007902:	3b08      	subs	r3, #8
24007904:	4a28      	ldr	r2, [pc, #160]	; (240079a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
24007906:	fba2 2303 	umull	r2, r3, r2, r3
2400790a:	091b      	lsrs	r3, r3, #4
2400790c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
2400790e:	68fa      	ldr	r2, [r7, #12]
24007910:	4b26      	ldr	r3, [pc, #152]	; (240079ac <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
24007912:	4413      	add	r3, r2
24007914:	009b      	lsls	r3, r3, #2
24007916:	461a      	mov	r2, r3
24007918:	687b      	ldr	r3, [r7, #4]
2400791a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
2400791c:	687b      	ldr	r3, [r7, #4]
2400791e:	4a24      	ldr	r2, [pc, #144]	; (240079b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
24007920:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
24007922:	68fb      	ldr	r3, [r7, #12]
24007924:	f003 031f 	and.w	r3, r3, #31
24007928:	2201      	movs	r2, #1
2400792a:	409a      	lsls	r2, r3
2400792c:	687b      	ldr	r3, [r7, #4]
2400792e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
24007930:	e024      	b.n	2400797c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
24007932:	687b      	ldr	r3, [r7, #4]
24007934:	681b      	ldr	r3, [r3, #0]
24007936:	b2db      	uxtb	r3, r3
24007938:	3b10      	subs	r3, #16
2400793a:	4a1e      	ldr	r2, [pc, #120]	; (240079b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
2400793c:	fba2 2303 	umull	r2, r3, r2, r3
24007940:	091b      	lsrs	r3, r3, #4
24007942:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
24007944:	68bb      	ldr	r3, [r7, #8]
24007946:	4a1c      	ldr	r2, [pc, #112]	; (240079b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
24007948:	4293      	cmp	r3, r2
2400794a:	d806      	bhi.n	2400795a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
2400794c:	68bb      	ldr	r3, [r7, #8]
2400794e:	4a1b      	ldr	r2, [pc, #108]	; (240079bc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
24007950:	4293      	cmp	r3, r2
24007952:	d902      	bls.n	2400795a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
24007954:	68fb      	ldr	r3, [r7, #12]
24007956:	3308      	adds	r3, #8
24007958:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
2400795a:	68fa      	ldr	r2, [r7, #12]
2400795c:	4b18      	ldr	r3, [pc, #96]	; (240079c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
2400795e:	4413      	add	r3, r2
24007960:	009b      	lsls	r3, r3, #2
24007962:	461a      	mov	r2, r3
24007964:	687b      	ldr	r3, [r7, #4]
24007966:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
24007968:	687b      	ldr	r3, [r7, #4]
2400796a:	4a16      	ldr	r2, [pc, #88]	; (240079c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
2400796c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
2400796e:	68fb      	ldr	r3, [r7, #12]
24007970:	f003 031f 	and.w	r3, r3, #31
24007974:	2201      	movs	r2, #1
24007976:	409a      	lsls	r2, r3
24007978:	687b      	ldr	r3, [r7, #4]
2400797a:	669a      	str	r2, [r3, #104]	; 0x68
}
2400797c:	bf00      	nop
2400797e:	3714      	adds	r7, #20
24007980:	46bd      	mov	sp, r7
24007982:	f85d 7b04 	ldr.w	r7, [sp], #4
24007986:	4770      	bx	lr
24007988:	58025408 	.word	0x58025408
2400798c:	5802541c 	.word	0x5802541c
24007990:	58025430 	.word	0x58025430
24007994:	58025444 	.word	0x58025444
24007998:	58025458 	.word	0x58025458
2400799c:	5802546c 	.word	0x5802546c
240079a0:	58025480 	.word	0x58025480
240079a4:	58025494 	.word	0x58025494
240079a8:	cccccccd 	.word	0xcccccccd
240079ac:	16009600 	.word	0x16009600
240079b0:	58025880 	.word	0x58025880
240079b4:	aaaaaaab 	.word	0xaaaaaaab
240079b8:	400204b8 	.word	0x400204b8
240079bc:	4002040f 	.word	0x4002040f
240079c0:	10008200 	.word	0x10008200
240079c4:	40020880 	.word	0x40020880

240079c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
240079c8:	b480      	push	{r7}
240079ca:	b085      	sub	sp, #20
240079cc:	af00      	add	r7, sp, #0
240079ce:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
240079d0:	687b      	ldr	r3, [r7, #4]
240079d2:	685b      	ldr	r3, [r3, #4]
240079d4:	b2db      	uxtb	r3, r3
240079d6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
240079d8:	68fb      	ldr	r3, [r7, #12]
240079da:	2b00      	cmp	r3, #0
240079dc:	d04a      	beq.n	24007a74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
240079de:	68fb      	ldr	r3, [r7, #12]
240079e0:	2b08      	cmp	r3, #8
240079e2:	d847      	bhi.n	24007a74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
240079e4:	687b      	ldr	r3, [r7, #4]
240079e6:	681b      	ldr	r3, [r3, #0]
240079e8:	4a25      	ldr	r2, [pc, #148]	; (24007a80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
240079ea:	4293      	cmp	r3, r2
240079ec:	d022      	beq.n	24007a34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
240079ee:	687b      	ldr	r3, [r7, #4]
240079f0:	681b      	ldr	r3, [r3, #0]
240079f2:	4a24      	ldr	r2, [pc, #144]	; (24007a84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
240079f4:	4293      	cmp	r3, r2
240079f6:	d01d      	beq.n	24007a34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
240079f8:	687b      	ldr	r3, [r7, #4]
240079fa:	681b      	ldr	r3, [r3, #0]
240079fc:	4a22      	ldr	r2, [pc, #136]	; (24007a88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
240079fe:	4293      	cmp	r3, r2
24007a00:	d018      	beq.n	24007a34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
24007a02:	687b      	ldr	r3, [r7, #4]
24007a04:	681b      	ldr	r3, [r3, #0]
24007a06:	4a21      	ldr	r2, [pc, #132]	; (24007a8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
24007a08:	4293      	cmp	r3, r2
24007a0a:	d013      	beq.n	24007a34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
24007a0c:	687b      	ldr	r3, [r7, #4]
24007a0e:	681b      	ldr	r3, [r3, #0]
24007a10:	4a1f      	ldr	r2, [pc, #124]	; (24007a90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
24007a12:	4293      	cmp	r3, r2
24007a14:	d00e      	beq.n	24007a34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
24007a16:	687b      	ldr	r3, [r7, #4]
24007a18:	681b      	ldr	r3, [r3, #0]
24007a1a:	4a1e      	ldr	r2, [pc, #120]	; (24007a94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
24007a1c:	4293      	cmp	r3, r2
24007a1e:	d009      	beq.n	24007a34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
24007a20:	687b      	ldr	r3, [r7, #4]
24007a22:	681b      	ldr	r3, [r3, #0]
24007a24:	4a1c      	ldr	r2, [pc, #112]	; (24007a98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
24007a26:	4293      	cmp	r3, r2
24007a28:	d004      	beq.n	24007a34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
24007a2a:	687b      	ldr	r3, [r7, #4]
24007a2c:	681b      	ldr	r3, [r3, #0]
24007a2e:	4a1b      	ldr	r2, [pc, #108]	; (24007a9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
24007a30:	4293      	cmp	r3, r2
24007a32:	d101      	bne.n	24007a38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
24007a34:	2301      	movs	r3, #1
24007a36:	e000      	b.n	24007a3a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
24007a38:	2300      	movs	r3, #0
24007a3a:	2b00      	cmp	r3, #0
24007a3c:	d00a      	beq.n	24007a54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
24007a3e:	68fa      	ldr	r2, [r7, #12]
24007a40:	4b17      	ldr	r3, [pc, #92]	; (24007aa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
24007a42:	4413      	add	r3, r2
24007a44:	009b      	lsls	r3, r3, #2
24007a46:	461a      	mov	r2, r3
24007a48:	687b      	ldr	r3, [r7, #4]
24007a4a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
24007a4c:	687b      	ldr	r3, [r7, #4]
24007a4e:	4a15      	ldr	r2, [pc, #84]	; (24007aa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
24007a50:	671a      	str	r2, [r3, #112]	; 0x70
24007a52:	e009      	b.n	24007a68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
24007a54:	68fa      	ldr	r2, [r7, #12]
24007a56:	4b14      	ldr	r3, [pc, #80]	; (24007aa8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
24007a58:	4413      	add	r3, r2
24007a5a:	009b      	lsls	r3, r3, #2
24007a5c:	461a      	mov	r2, r3
24007a5e:	687b      	ldr	r3, [r7, #4]
24007a60:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
24007a62:	687b      	ldr	r3, [r7, #4]
24007a64:	4a11      	ldr	r2, [pc, #68]	; (24007aac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
24007a66:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
24007a68:	68fb      	ldr	r3, [r7, #12]
24007a6a:	3b01      	subs	r3, #1
24007a6c:	2201      	movs	r2, #1
24007a6e:	409a      	lsls	r2, r3
24007a70:	687b      	ldr	r3, [r7, #4]
24007a72:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
24007a74:	bf00      	nop
24007a76:	3714      	adds	r7, #20
24007a78:	46bd      	mov	sp, r7
24007a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
24007a7e:	4770      	bx	lr
24007a80:	58025408 	.word	0x58025408
24007a84:	5802541c 	.word	0x5802541c
24007a88:	58025430 	.word	0x58025430
24007a8c:	58025444 	.word	0x58025444
24007a90:	58025458 	.word	0x58025458
24007a94:	5802546c 	.word	0x5802546c
24007a98:	58025480 	.word	0x58025480
24007a9c:	58025494 	.word	0x58025494
24007aa0:	1600963f 	.word	0x1600963f
24007aa4:	58025940 	.word	0x58025940
24007aa8:	1000823f 	.word	0x1000823f
24007aac:	40020940 	.word	0x40020940

24007ab0 <HAL_DMAEx_MultiBufferStart>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
24007ab0:	b580      	push	{r7, lr}
24007ab2:	b086      	sub	sp, #24
24007ab4:	af00      	add	r7, sp, #0
24007ab6:	60f8      	str	r0, [r7, #12]
24007ab8:	60b9      	str	r1, [r7, #8]
24007aba:	607a      	str	r2, [r7, #4]
24007abc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
24007abe:	2300      	movs	r3, #0
24007ac0:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
24007ac2:	68fb      	ldr	r3, [r7, #12]
24007ac4:	689b      	ldr	r3, [r3, #8]
24007ac6:	2b80      	cmp	r3, #128	; 0x80
24007ac8:	d106      	bne.n	24007ad8 <HAL_DMAEx_MultiBufferStart+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
24007aca:	68fb      	ldr	r3, [r7, #12]
24007acc:	f44f 7280 	mov.w	r2, #256	; 0x100
24007ad0:	655a      	str	r2, [r3, #84]	; 0x54
    status = HAL_ERROR;
24007ad2:	2301      	movs	r3, #1
24007ad4:	75fb      	strb	r3, [r7, #23]
24007ad6:	e1c8      	b.n	24007e6a <HAL_DMAEx_MultiBufferStart+0x3ba>
  }
  else
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
24007ad8:	68fb      	ldr	r3, [r7, #12]
24007ada:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
24007ade:	2b01      	cmp	r3, #1
24007ae0:	d101      	bne.n	24007ae6 <HAL_DMAEx_MultiBufferStart+0x36>
24007ae2:	2302      	movs	r3, #2
24007ae4:	e1c2      	b.n	24007e6c <HAL_DMAEx_MultiBufferStart+0x3bc>
24007ae6:	68fb      	ldr	r3, [r7, #12]
24007ae8:	2201      	movs	r2, #1
24007aea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    if(HAL_DMA_STATE_READY == hdma->State)
24007aee:	68fb      	ldr	r3, [r7, #12]
24007af0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
24007af4:	b2db      	uxtb	r3, r3
24007af6:	2b01      	cmp	r3, #1
24007af8:	f040 81b1 	bne.w	24007e5e <HAL_DMAEx_MultiBufferStart+0x3ae>
    {
      /* Change DMA peripheral state */
      hdma->State = HAL_DMA_STATE_BUSY;
24007afc:	68fb      	ldr	r3, [r7, #12]
24007afe:	2202      	movs	r2, #2
24007b00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Initialize the error code */
      hdma->ErrorCode = HAL_DMA_ERROR_NONE;
24007b04:	68fb      	ldr	r3, [r7, #12]
24007b06:	2200      	movs	r2, #0
24007b08:	655a      	str	r2, [r3, #84]	; 0x54

      if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24007b0a:	68fb      	ldr	r3, [r7, #12]
24007b0c:	681b      	ldr	r3, [r3, #0]
24007b0e:	4a7f      	ldr	r2, [pc, #508]	; (24007d0c <HAL_DMAEx_MultiBufferStart+0x25c>)
24007b10:	4293      	cmp	r3, r2
24007b12:	d04a      	beq.n	24007baa <HAL_DMAEx_MultiBufferStart+0xfa>
24007b14:	68fb      	ldr	r3, [r7, #12]
24007b16:	681b      	ldr	r3, [r3, #0]
24007b18:	4a7d      	ldr	r2, [pc, #500]	; (24007d10 <HAL_DMAEx_MultiBufferStart+0x260>)
24007b1a:	4293      	cmp	r3, r2
24007b1c:	d045      	beq.n	24007baa <HAL_DMAEx_MultiBufferStart+0xfa>
24007b1e:	68fb      	ldr	r3, [r7, #12]
24007b20:	681b      	ldr	r3, [r3, #0]
24007b22:	4a7c      	ldr	r2, [pc, #496]	; (24007d14 <HAL_DMAEx_MultiBufferStart+0x264>)
24007b24:	4293      	cmp	r3, r2
24007b26:	d040      	beq.n	24007baa <HAL_DMAEx_MultiBufferStart+0xfa>
24007b28:	68fb      	ldr	r3, [r7, #12]
24007b2a:	681b      	ldr	r3, [r3, #0]
24007b2c:	4a7a      	ldr	r2, [pc, #488]	; (24007d18 <HAL_DMAEx_MultiBufferStart+0x268>)
24007b2e:	4293      	cmp	r3, r2
24007b30:	d03b      	beq.n	24007baa <HAL_DMAEx_MultiBufferStart+0xfa>
24007b32:	68fb      	ldr	r3, [r7, #12]
24007b34:	681b      	ldr	r3, [r3, #0]
24007b36:	4a79      	ldr	r2, [pc, #484]	; (24007d1c <HAL_DMAEx_MultiBufferStart+0x26c>)
24007b38:	4293      	cmp	r3, r2
24007b3a:	d036      	beq.n	24007baa <HAL_DMAEx_MultiBufferStart+0xfa>
24007b3c:	68fb      	ldr	r3, [r7, #12]
24007b3e:	681b      	ldr	r3, [r3, #0]
24007b40:	4a77      	ldr	r2, [pc, #476]	; (24007d20 <HAL_DMAEx_MultiBufferStart+0x270>)
24007b42:	4293      	cmp	r3, r2
24007b44:	d031      	beq.n	24007baa <HAL_DMAEx_MultiBufferStart+0xfa>
24007b46:	68fb      	ldr	r3, [r7, #12]
24007b48:	681b      	ldr	r3, [r3, #0]
24007b4a:	4a76      	ldr	r2, [pc, #472]	; (24007d24 <HAL_DMAEx_MultiBufferStart+0x274>)
24007b4c:	4293      	cmp	r3, r2
24007b4e:	d02c      	beq.n	24007baa <HAL_DMAEx_MultiBufferStart+0xfa>
24007b50:	68fb      	ldr	r3, [r7, #12]
24007b52:	681b      	ldr	r3, [r3, #0]
24007b54:	4a74      	ldr	r2, [pc, #464]	; (24007d28 <HAL_DMAEx_MultiBufferStart+0x278>)
24007b56:	4293      	cmp	r3, r2
24007b58:	d027      	beq.n	24007baa <HAL_DMAEx_MultiBufferStart+0xfa>
24007b5a:	68fb      	ldr	r3, [r7, #12]
24007b5c:	681b      	ldr	r3, [r3, #0]
24007b5e:	4a73      	ldr	r2, [pc, #460]	; (24007d2c <HAL_DMAEx_MultiBufferStart+0x27c>)
24007b60:	4293      	cmp	r3, r2
24007b62:	d022      	beq.n	24007baa <HAL_DMAEx_MultiBufferStart+0xfa>
24007b64:	68fb      	ldr	r3, [r7, #12]
24007b66:	681b      	ldr	r3, [r3, #0]
24007b68:	4a71      	ldr	r2, [pc, #452]	; (24007d30 <HAL_DMAEx_MultiBufferStart+0x280>)
24007b6a:	4293      	cmp	r3, r2
24007b6c:	d01d      	beq.n	24007baa <HAL_DMAEx_MultiBufferStart+0xfa>
24007b6e:	68fb      	ldr	r3, [r7, #12]
24007b70:	681b      	ldr	r3, [r3, #0]
24007b72:	4a70      	ldr	r2, [pc, #448]	; (24007d34 <HAL_DMAEx_MultiBufferStart+0x284>)
24007b74:	4293      	cmp	r3, r2
24007b76:	d018      	beq.n	24007baa <HAL_DMAEx_MultiBufferStart+0xfa>
24007b78:	68fb      	ldr	r3, [r7, #12]
24007b7a:	681b      	ldr	r3, [r3, #0]
24007b7c:	4a6e      	ldr	r2, [pc, #440]	; (24007d38 <HAL_DMAEx_MultiBufferStart+0x288>)
24007b7e:	4293      	cmp	r3, r2
24007b80:	d013      	beq.n	24007baa <HAL_DMAEx_MultiBufferStart+0xfa>
24007b82:	68fb      	ldr	r3, [r7, #12]
24007b84:	681b      	ldr	r3, [r3, #0]
24007b86:	4a6d      	ldr	r2, [pc, #436]	; (24007d3c <HAL_DMAEx_MultiBufferStart+0x28c>)
24007b88:	4293      	cmp	r3, r2
24007b8a:	d00e      	beq.n	24007baa <HAL_DMAEx_MultiBufferStart+0xfa>
24007b8c:	68fb      	ldr	r3, [r7, #12]
24007b8e:	681b      	ldr	r3, [r3, #0]
24007b90:	4a6b      	ldr	r2, [pc, #428]	; (24007d40 <HAL_DMAEx_MultiBufferStart+0x290>)
24007b92:	4293      	cmp	r3, r2
24007b94:	d009      	beq.n	24007baa <HAL_DMAEx_MultiBufferStart+0xfa>
24007b96:	68fb      	ldr	r3, [r7, #12]
24007b98:	681b      	ldr	r3, [r3, #0]
24007b9a:	4a6a      	ldr	r2, [pc, #424]	; (24007d44 <HAL_DMAEx_MultiBufferStart+0x294>)
24007b9c:	4293      	cmp	r3, r2
24007b9e:	d004      	beq.n	24007baa <HAL_DMAEx_MultiBufferStart+0xfa>
24007ba0:	68fb      	ldr	r3, [r7, #12]
24007ba2:	681b      	ldr	r3, [r3, #0]
24007ba4:	4a68      	ldr	r2, [pc, #416]	; (24007d48 <HAL_DMAEx_MultiBufferStart+0x298>)
24007ba6:	4293      	cmp	r3, r2
24007ba8:	d101      	bne.n	24007bae <HAL_DMAEx_MultiBufferStart+0xfe>
24007baa:	2301      	movs	r3, #1
24007bac:	e000      	b.n	24007bb0 <HAL_DMAEx_MultiBufferStart+0x100>
24007bae:	2300      	movs	r3, #0
24007bb0:	2b00      	cmp	r3, #0
24007bb2:	d018      	beq.n	24007be6 <HAL_DMAEx_MultiBufferStart+0x136>
      {
        /* Enable the Double buffer mode */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
24007bb4:	68fb      	ldr	r3, [r7, #12]
24007bb6:	681b      	ldr	r3, [r3, #0]
24007bb8:	681a      	ldr	r2, [r3, #0]
24007bba:	68fb      	ldr	r3, [r7, #12]
24007bbc:	681b      	ldr	r3, [r3, #0]
24007bbe:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
24007bc2:	601a      	str	r2, [r3, #0]

        /* Configure DMA Stream destination address */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
24007bc4:	68fb      	ldr	r3, [r7, #12]
24007bc6:	681b      	ldr	r3, [r3, #0]
24007bc8:	683a      	ldr	r2, [r7, #0]
24007bca:	611a      	str	r2, [r3, #16]

        /* Calculate the interrupt clear flag register (IFCR) base address  */
        ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
24007bcc:	68fb      	ldr	r3, [r7, #12]
24007bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24007bd0:	3308      	adds	r3, #8
24007bd2:	613b      	str	r3, [r7, #16]

        /* Clear all flags */
        *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
24007bd4:	68fb      	ldr	r3, [r7, #12]
24007bd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24007bd8:	f003 031f 	and.w	r3, r3, #31
24007bdc:	223f      	movs	r2, #63	; 0x3f
24007bde:	409a      	lsls	r2, r3
24007be0:	693b      	ldr	r3, [r7, #16]
24007be2:	601a      	str	r2, [r3, #0]
24007be4:	e018      	b.n	24007c18 <HAL_DMAEx_MultiBufferStart+0x168>
      }
      else /* BDMA instance(s) */
      {
        /* Enable the Double buffer mode */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
24007be6:	68fb      	ldr	r3, [r7, #12]
24007be8:	681b      	ldr	r3, [r3, #0]
24007bea:	6819      	ldr	r1, [r3, #0]
24007bec:	68fb      	ldr	r3, [r7, #12]
24007bee:	681a      	ldr	r2, [r3, #0]
24007bf0:	f248 0320 	movw	r3, #32800	; 0x8020
24007bf4:	430b      	orrs	r3, r1
24007bf6:	6013      	str	r3, [r2, #0]

        /* Configure DMA Stream destination address */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
24007bf8:	68fb      	ldr	r3, [r7, #12]
24007bfa:	681b      	ldr	r3, [r3, #0]
24007bfc:	683a      	ldr	r2, [r7, #0]
24007bfe:	611a      	str	r2, [r3, #16]

        /* Calculate the interrupt clear flag register (IFCR) base address  */
        ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
24007c00:	68fb      	ldr	r3, [r7, #12]
24007c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24007c04:	3304      	adds	r3, #4
24007c06:	613b      	str	r3, [r7, #16]

        /* Clear all flags */
        *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
24007c08:	68fb      	ldr	r3, [r7, #12]
24007c0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24007c0c:	f003 031f 	and.w	r3, r3, #31
24007c10:	2201      	movs	r2, #1
24007c12:	409a      	lsls	r2, r3
24007c14:	693b      	ldr	r3, [r7, #16]
24007c16:	601a      	str	r2, [r3, #0]
      }

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24007c18:	68fb      	ldr	r3, [r7, #12]
24007c1a:	681b      	ldr	r3, [r3, #0]
24007c1c:	4a3b      	ldr	r2, [pc, #236]	; (24007d0c <HAL_DMAEx_MultiBufferStart+0x25c>)
24007c1e:	4293      	cmp	r3, r2
24007c20:	d072      	beq.n	24007d08 <HAL_DMAEx_MultiBufferStart+0x258>
24007c22:	68fb      	ldr	r3, [r7, #12]
24007c24:	681b      	ldr	r3, [r3, #0]
24007c26:	4a3a      	ldr	r2, [pc, #232]	; (24007d10 <HAL_DMAEx_MultiBufferStart+0x260>)
24007c28:	4293      	cmp	r3, r2
24007c2a:	d06d      	beq.n	24007d08 <HAL_DMAEx_MultiBufferStart+0x258>
24007c2c:	68fb      	ldr	r3, [r7, #12]
24007c2e:	681b      	ldr	r3, [r3, #0]
24007c30:	4a38      	ldr	r2, [pc, #224]	; (24007d14 <HAL_DMAEx_MultiBufferStart+0x264>)
24007c32:	4293      	cmp	r3, r2
24007c34:	d068      	beq.n	24007d08 <HAL_DMAEx_MultiBufferStart+0x258>
24007c36:	68fb      	ldr	r3, [r7, #12]
24007c38:	681b      	ldr	r3, [r3, #0]
24007c3a:	4a37      	ldr	r2, [pc, #220]	; (24007d18 <HAL_DMAEx_MultiBufferStart+0x268>)
24007c3c:	4293      	cmp	r3, r2
24007c3e:	d063      	beq.n	24007d08 <HAL_DMAEx_MultiBufferStart+0x258>
24007c40:	68fb      	ldr	r3, [r7, #12]
24007c42:	681b      	ldr	r3, [r3, #0]
24007c44:	4a35      	ldr	r2, [pc, #212]	; (24007d1c <HAL_DMAEx_MultiBufferStart+0x26c>)
24007c46:	4293      	cmp	r3, r2
24007c48:	d05e      	beq.n	24007d08 <HAL_DMAEx_MultiBufferStart+0x258>
24007c4a:	68fb      	ldr	r3, [r7, #12]
24007c4c:	681b      	ldr	r3, [r3, #0]
24007c4e:	4a34      	ldr	r2, [pc, #208]	; (24007d20 <HAL_DMAEx_MultiBufferStart+0x270>)
24007c50:	4293      	cmp	r3, r2
24007c52:	d059      	beq.n	24007d08 <HAL_DMAEx_MultiBufferStart+0x258>
24007c54:	68fb      	ldr	r3, [r7, #12]
24007c56:	681b      	ldr	r3, [r3, #0]
24007c58:	4a32      	ldr	r2, [pc, #200]	; (24007d24 <HAL_DMAEx_MultiBufferStart+0x274>)
24007c5a:	4293      	cmp	r3, r2
24007c5c:	d054      	beq.n	24007d08 <HAL_DMAEx_MultiBufferStart+0x258>
24007c5e:	68fb      	ldr	r3, [r7, #12]
24007c60:	681b      	ldr	r3, [r3, #0]
24007c62:	4a31      	ldr	r2, [pc, #196]	; (24007d28 <HAL_DMAEx_MultiBufferStart+0x278>)
24007c64:	4293      	cmp	r3, r2
24007c66:	d04f      	beq.n	24007d08 <HAL_DMAEx_MultiBufferStart+0x258>
24007c68:	68fb      	ldr	r3, [r7, #12]
24007c6a:	681b      	ldr	r3, [r3, #0]
24007c6c:	4a2f      	ldr	r2, [pc, #188]	; (24007d2c <HAL_DMAEx_MultiBufferStart+0x27c>)
24007c6e:	4293      	cmp	r3, r2
24007c70:	d04a      	beq.n	24007d08 <HAL_DMAEx_MultiBufferStart+0x258>
24007c72:	68fb      	ldr	r3, [r7, #12]
24007c74:	681b      	ldr	r3, [r3, #0]
24007c76:	4a2e      	ldr	r2, [pc, #184]	; (24007d30 <HAL_DMAEx_MultiBufferStart+0x280>)
24007c78:	4293      	cmp	r3, r2
24007c7a:	d045      	beq.n	24007d08 <HAL_DMAEx_MultiBufferStart+0x258>
24007c7c:	68fb      	ldr	r3, [r7, #12]
24007c7e:	681b      	ldr	r3, [r3, #0]
24007c80:	4a2c      	ldr	r2, [pc, #176]	; (24007d34 <HAL_DMAEx_MultiBufferStart+0x284>)
24007c82:	4293      	cmp	r3, r2
24007c84:	d040      	beq.n	24007d08 <HAL_DMAEx_MultiBufferStart+0x258>
24007c86:	68fb      	ldr	r3, [r7, #12]
24007c88:	681b      	ldr	r3, [r3, #0]
24007c8a:	4a2b      	ldr	r2, [pc, #172]	; (24007d38 <HAL_DMAEx_MultiBufferStart+0x288>)
24007c8c:	4293      	cmp	r3, r2
24007c8e:	d03b      	beq.n	24007d08 <HAL_DMAEx_MultiBufferStart+0x258>
24007c90:	68fb      	ldr	r3, [r7, #12]
24007c92:	681b      	ldr	r3, [r3, #0]
24007c94:	4a29      	ldr	r2, [pc, #164]	; (24007d3c <HAL_DMAEx_MultiBufferStart+0x28c>)
24007c96:	4293      	cmp	r3, r2
24007c98:	d036      	beq.n	24007d08 <HAL_DMAEx_MultiBufferStart+0x258>
24007c9a:	68fb      	ldr	r3, [r7, #12]
24007c9c:	681b      	ldr	r3, [r3, #0]
24007c9e:	4a28      	ldr	r2, [pc, #160]	; (24007d40 <HAL_DMAEx_MultiBufferStart+0x290>)
24007ca0:	4293      	cmp	r3, r2
24007ca2:	d031      	beq.n	24007d08 <HAL_DMAEx_MultiBufferStart+0x258>
24007ca4:	68fb      	ldr	r3, [r7, #12]
24007ca6:	681b      	ldr	r3, [r3, #0]
24007ca8:	4a26      	ldr	r2, [pc, #152]	; (24007d44 <HAL_DMAEx_MultiBufferStart+0x294>)
24007caa:	4293      	cmp	r3, r2
24007cac:	d02c      	beq.n	24007d08 <HAL_DMAEx_MultiBufferStart+0x258>
24007cae:	68fb      	ldr	r3, [r7, #12]
24007cb0:	681b      	ldr	r3, [r3, #0]
24007cb2:	4a25      	ldr	r2, [pc, #148]	; (24007d48 <HAL_DMAEx_MultiBufferStart+0x298>)
24007cb4:	4293      	cmp	r3, r2
24007cb6:	d027      	beq.n	24007d08 <HAL_DMAEx_MultiBufferStart+0x258>
24007cb8:	68fb      	ldr	r3, [r7, #12]
24007cba:	681b      	ldr	r3, [r3, #0]
24007cbc:	4a23      	ldr	r2, [pc, #140]	; (24007d4c <HAL_DMAEx_MultiBufferStart+0x29c>)
24007cbe:	4293      	cmp	r3, r2
24007cc0:	d022      	beq.n	24007d08 <HAL_DMAEx_MultiBufferStart+0x258>
24007cc2:	68fb      	ldr	r3, [r7, #12]
24007cc4:	681b      	ldr	r3, [r3, #0]
24007cc6:	4a22      	ldr	r2, [pc, #136]	; (24007d50 <HAL_DMAEx_MultiBufferStart+0x2a0>)
24007cc8:	4293      	cmp	r3, r2
24007cca:	d01d      	beq.n	24007d08 <HAL_DMAEx_MultiBufferStart+0x258>
24007ccc:	68fb      	ldr	r3, [r7, #12]
24007cce:	681b      	ldr	r3, [r3, #0]
24007cd0:	4a20      	ldr	r2, [pc, #128]	; (24007d54 <HAL_DMAEx_MultiBufferStart+0x2a4>)
24007cd2:	4293      	cmp	r3, r2
24007cd4:	d018      	beq.n	24007d08 <HAL_DMAEx_MultiBufferStart+0x258>
24007cd6:	68fb      	ldr	r3, [r7, #12]
24007cd8:	681b      	ldr	r3, [r3, #0]
24007cda:	4a1f      	ldr	r2, [pc, #124]	; (24007d58 <HAL_DMAEx_MultiBufferStart+0x2a8>)
24007cdc:	4293      	cmp	r3, r2
24007cde:	d013      	beq.n	24007d08 <HAL_DMAEx_MultiBufferStart+0x258>
24007ce0:	68fb      	ldr	r3, [r7, #12]
24007ce2:	681b      	ldr	r3, [r3, #0]
24007ce4:	4a1d      	ldr	r2, [pc, #116]	; (24007d5c <HAL_DMAEx_MultiBufferStart+0x2ac>)
24007ce6:	4293      	cmp	r3, r2
24007ce8:	d00e      	beq.n	24007d08 <HAL_DMAEx_MultiBufferStart+0x258>
24007cea:	68fb      	ldr	r3, [r7, #12]
24007cec:	681b      	ldr	r3, [r3, #0]
24007cee:	4a1c      	ldr	r2, [pc, #112]	; (24007d60 <HAL_DMAEx_MultiBufferStart+0x2b0>)
24007cf0:	4293      	cmp	r3, r2
24007cf2:	d009      	beq.n	24007d08 <HAL_DMAEx_MultiBufferStart+0x258>
24007cf4:	68fb      	ldr	r3, [r7, #12]
24007cf6:	681b      	ldr	r3, [r3, #0]
24007cf8:	4a1a      	ldr	r2, [pc, #104]	; (24007d64 <HAL_DMAEx_MultiBufferStart+0x2b4>)
24007cfa:	4293      	cmp	r3, r2
24007cfc:	d004      	beq.n	24007d08 <HAL_DMAEx_MultiBufferStart+0x258>
24007cfe:	68fb      	ldr	r3, [r7, #12]
24007d00:	681b      	ldr	r3, [r3, #0]
24007d02:	4a19      	ldr	r2, [pc, #100]	; (24007d68 <HAL_DMAEx_MultiBufferStart+0x2b8>)
24007d04:	4293      	cmp	r3, r2
24007d06:	d131      	bne.n	24007d6c <HAL_DMAEx_MultiBufferStart+0x2bc>
24007d08:	2301      	movs	r3, #1
24007d0a:	e030      	b.n	24007d6e <HAL_DMAEx_MultiBufferStart+0x2be>
24007d0c:	40020010 	.word	0x40020010
24007d10:	40020028 	.word	0x40020028
24007d14:	40020040 	.word	0x40020040
24007d18:	40020058 	.word	0x40020058
24007d1c:	40020070 	.word	0x40020070
24007d20:	40020088 	.word	0x40020088
24007d24:	400200a0 	.word	0x400200a0
24007d28:	400200b8 	.word	0x400200b8
24007d2c:	40020410 	.word	0x40020410
24007d30:	40020428 	.word	0x40020428
24007d34:	40020440 	.word	0x40020440
24007d38:	40020458 	.word	0x40020458
24007d3c:	40020470 	.word	0x40020470
24007d40:	40020488 	.word	0x40020488
24007d44:	400204a0 	.word	0x400204a0
24007d48:	400204b8 	.word	0x400204b8
24007d4c:	58025408 	.word	0x58025408
24007d50:	5802541c 	.word	0x5802541c
24007d54:	58025430 	.word	0x58025430
24007d58:	58025444 	.word	0x58025444
24007d5c:	58025458 	.word	0x58025458
24007d60:	5802546c 	.word	0x5802546c
24007d64:	58025480 	.word	0x58025480
24007d68:	58025494 	.word	0x58025494
24007d6c:	2300      	movs	r3, #0
24007d6e:	2b00      	cmp	r3, #0
24007d70:	d013      	beq.n	24007d9a <HAL_DMAEx_MultiBufferStart+0x2ea>
      {
        /* Configure the source, destination address and the data length */
        DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
24007d72:	6a3b      	ldr	r3, [r7, #32]
24007d74:	687a      	ldr	r2, [r7, #4]
24007d76:	68b9      	ldr	r1, [r7, #8]
24007d78:	68f8      	ldr	r0, [r7, #12]
24007d7a:	f000 fea3 	bl	24008ac4 <DMA_MultiBufferSetConfig>

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
24007d7e:	68fb      	ldr	r3, [r7, #12]
24007d80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
24007d82:	68fa      	ldr	r2, [r7, #12]
24007d84:	6e92      	ldr	r2, [r2, #104]	; 0x68
24007d86:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
24007d88:	68fb      	ldr	r3, [r7, #12]
24007d8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24007d8c:	2b00      	cmp	r3, #0
24007d8e:	d004      	beq.n	24007d9a <HAL_DMAEx_MultiBufferStart+0x2ea>
        {
          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
24007d90:	68fb      	ldr	r3, [r7, #12]
24007d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24007d94:	68fa      	ldr	r2, [r7, #12]
24007d96:	6f52      	ldr	r2, [r2, #116]	; 0x74
24007d98:	605a      	str	r2, [r3, #4]
        }
      }

      /* Enable the peripheral */
      __HAL_DMA_ENABLE(hdma);
24007d9a:	68fb      	ldr	r3, [r7, #12]
24007d9c:	681b      	ldr	r3, [r3, #0]
24007d9e:	4a35      	ldr	r2, [pc, #212]	; (24007e74 <HAL_DMAEx_MultiBufferStart+0x3c4>)
24007da0:	4293      	cmp	r3, r2
24007da2:	d04a      	beq.n	24007e3a <HAL_DMAEx_MultiBufferStart+0x38a>
24007da4:	68fb      	ldr	r3, [r7, #12]
24007da6:	681b      	ldr	r3, [r3, #0]
24007da8:	4a33      	ldr	r2, [pc, #204]	; (24007e78 <HAL_DMAEx_MultiBufferStart+0x3c8>)
24007daa:	4293      	cmp	r3, r2
24007dac:	d045      	beq.n	24007e3a <HAL_DMAEx_MultiBufferStart+0x38a>
24007dae:	68fb      	ldr	r3, [r7, #12]
24007db0:	681b      	ldr	r3, [r3, #0]
24007db2:	4a32      	ldr	r2, [pc, #200]	; (24007e7c <HAL_DMAEx_MultiBufferStart+0x3cc>)
24007db4:	4293      	cmp	r3, r2
24007db6:	d040      	beq.n	24007e3a <HAL_DMAEx_MultiBufferStart+0x38a>
24007db8:	68fb      	ldr	r3, [r7, #12]
24007dba:	681b      	ldr	r3, [r3, #0]
24007dbc:	4a30      	ldr	r2, [pc, #192]	; (24007e80 <HAL_DMAEx_MultiBufferStart+0x3d0>)
24007dbe:	4293      	cmp	r3, r2
24007dc0:	d03b      	beq.n	24007e3a <HAL_DMAEx_MultiBufferStart+0x38a>
24007dc2:	68fb      	ldr	r3, [r7, #12]
24007dc4:	681b      	ldr	r3, [r3, #0]
24007dc6:	4a2f      	ldr	r2, [pc, #188]	; (24007e84 <HAL_DMAEx_MultiBufferStart+0x3d4>)
24007dc8:	4293      	cmp	r3, r2
24007dca:	d036      	beq.n	24007e3a <HAL_DMAEx_MultiBufferStart+0x38a>
24007dcc:	68fb      	ldr	r3, [r7, #12]
24007dce:	681b      	ldr	r3, [r3, #0]
24007dd0:	4a2d      	ldr	r2, [pc, #180]	; (24007e88 <HAL_DMAEx_MultiBufferStart+0x3d8>)
24007dd2:	4293      	cmp	r3, r2
24007dd4:	d031      	beq.n	24007e3a <HAL_DMAEx_MultiBufferStart+0x38a>
24007dd6:	68fb      	ldr	r3, [r7, #12]
24007dd8:	681b      	ldr	r3, [r3, #0]
24007dda:	4a2c      	ldr	r2, [pc, #176]	; (24007e8c <HAL_DMAEx_MultiBufferStart+0x3dc>)
24007ddc:	4293      	cmp	r3, r2
24007dde:	d02c      	beq.n	24007e3a <HAL_DMAEx_MultiBufferStart+0x38a>
24007de0:	68fb      	ldr	r3, [r7, #12]
24007de2:	681b      	ldr	r3, [r3, #0]
24007de4:	4a2a      	ldr	r2, [pc, #168]	; (24007e90 <HAL_DMAEx_MultiBufferStart+0x3e0>)
24007de6:	4293      	cmp	r3, r2
24007de8:	d027      	beq.n	24007e3a <HAL_DMAEx_MultiBufferStart+0x38a>
24007dea:	68fb      	ldr	r3, [r7, #12]
24007dec:	681b      	ldr	r3, [r3, #0]
24007dee:	4a29      	ldr	r2, [pc, #164]	; (24007e94 <HAL_DMAEx_MultiBufferStart+0x3e4>)
24007df0:	4293      	cmp	r3, r2
24007df2:	d022      	beq.n	24007e3a <HAL_DMAEx_MultiBufferStart+0x38a>
24007df4:	68fb      	ldr	r3, [r7, #12]
24007df6:	681b      	ldr	r3, [r3, #0]
24007df8:	4a27      	ldr	r2, [pc, #156]	; (24007e98 <HAL_DMAEx_MultiBufferStart+0x3e8>)
24007dfa:	4293      	cmp	r3, r2
24007dfc:	d01d      	beq.n	24007e3a <HAL_DMAEx_MultiBufferStart+0x38a>
24007dfe:	68fb      	ldr	r3, [r7, #12]
24007e00:	681b      	ldr	r3, [r3, #0]
24007e02:	4a26      	ldr	r2, [pc, #152]	; (24007e9c <HAL_DMAEx_MultiBufferStart+0x3ec>)
24007e04:	4293      	cmp	r3, r2
24007e06:	d018      	beq.n	24007e3a <HAL_DMAEx_MultiBufferStart+0x38a>
24007e08:	68fb      	ldr	r3, [r7, #12]
24007e0a:	681b      	ldr	r3, [r3, #0]
24007e0c:	4a24      	ldr	r2, [pc, #144]	; (24007ea0 <HAL_DMAEx_MultiBufferStart+0x3f0>)
24007e0e:	4293      	cmp	r3, r2
24007e10:	d013      	beq.n	24007e3a <HAL_DMAEx_MultiBufferStart+0x38a>
24007e12:	68fb      	ldr	r3, [r7, #12]
24007e14:	681b      	ldr	r3, [r3, #0]
24007e16:	4a23      	ldr	r2, [pc, #140]	; (24007ea4 <HAL_DMAEx_MultiBufferStart+0x3f4>)
24007e18:	4293      	cmp	r3, r2
24007e1a:	d00e      	beq.n	24007e3a <HAL_DMAEx_MultiBufferStart+0x38a>
24007e1c:	68fb      	ldr	r3, [r7, #12]
24007e1e:	681b      	ldr	r3, [r3, #0]
24007e20:	4a21      	ldr	r2, [pc, #132]	; (24007ea8 <HAL_DMAEx_MultiBufferStart+0x3f8>)
24007e22:	4293      	cmp	r3, r2
24007e24:	d009      	beq.n	24007e3a <HAL_DMAEx_MultiBufferStart+0x38a>
24007e26:	68fb      	ldr	r3, [r7, #12]
24007e28:	681b      	ldr	r3, [r3, #0]
24007e2a:	4a20      	ldr	r2, [pc, #128]	; (24007eac <HAL_DMAEx_MultiBufferStart+0x3fc>)
24007e2c:	4293      	cmp	r3, r2
24007e2e:	d004      	beq.n	24007e3a <HAL_DMAEx_MultiBufferStart+0x38a>
24007e30:	68fb      	ldr	r3, [r7, #12]
24007e32:	681b      	ldr	r3, [r3, #0]
24007e34:	4a1e      	ldr	r2, [pc, #120]	; (24007eb0 <HAL_DMAEx_MultiBufferStart+0x400>)
24007e36:	4293      	cmp	r3, r2
24007e38:	d108      	bne.n	24007e4c <HAL_DMAEx_MultiBufferStart+0x39c>
24007e3a:	68fb      	ldr	r3, [r7, #12]
24007e3c:	681b      	ldr	r3, [r3, #0]
24007e3e:	681a      	ldr	r2, [r3, #0]
24007e40:	68fb      	ldr	r3, [r7, #12]
24007e42:	681b      	ldr	r3, [r3, #0]
24007e44:	f042 0201 	orr.w	r2, r2, #1
24007e48:	601a      	str	r2, [r3, #0]
24007e4a:	e00e      	b.n	24007e6a <HAL_DMAEx_MultiBufferStart+0x3ba>
24007e4c:	68fb      	ldr	r3, [r7, #12]
24007e4e:	681b      	ldr	r3, [r3, #0]
24007e50:	681a      	ldr	r2, [r3, #0]
24007e52:	68fb      	ldr	r3, [r7, #12]
24007e54:	681b      	ldr	r3, [r3, #0]
24007e56:	f042 0201 	orr.w	r2, r2, #1
24007e5a:	601a      	str	r2, [r3, #0]
24007e5c:	e005      	b.n	24007e6a <HAL_DMAEx_MultiBufferStart+0x3ba>
    }
    else
    {
      /* Set the error code to busy */
      hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
24007e5e:	68fb      	ldr	r3, [r7, #12]
24007e60:	f44f 6200 	mov.w	r2, #2048	; 0x800
24007e64:	655a      	str	r2, [r3, #84]	; 0x54

      /* Return error status */
      status = HAL_ERROR;
24007e66:	2301      	movs	r3, #1
24007e68:	75fb      	strb	r3, [r7, #23]
    }
  }
  return status;
24007e6a:	7dfb      	ldrb	r3, [r7, #23]
}
24007e6c:	4618      	mov	r0, r3
24007e6e:	3718      	adds	r7, #24
24007e70:	46bd      	mov	sp, r7
24007e72:	bd80      	pop	{r7, pc}
24007e74:	40020010 	.word	0x40020010
24007e78:	40020028 	.word	0x40020028
24007e7c:	40020040 	.word	0x40020040
24007e80:	40020058 	.word	0x40020058
24007e84:	40020070 	.word	0x40020070
24007e88:	40020088 	.word	0x40020088
24007e8c:	400200a0 	.word	0x400200a0
24007e90:	400200b8 	.word	0x400200b8
24007e94:	40020410 	.word	0x40020410
24007e98:	40020428 	.word	0x40020428
24007e9c:	40020440 	.word	0x40020440
24007ea0:	40020458 	.word	0x40020458
24007ea4:	40020470 	.word	0x40020470
24007ea8:	40020488 	.word	0x40020488
24007eac:	400204a0 	.word	0x400204a0
24007eb0:	400204b8 	.word	0x400204b8

24007eb4 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
24007eb4:	b580      	push	{r7, lr}
24007eb6:	b086      	sub	sp, #24
24007eb8:	af00      	add	r7, sp, #0
24007eba:	60f8      	str	r0, [r7, #12]
24007ebc:	60b9      	str	r1, [r7, #8]
24007ebe:	607a      	str	r2, [r7, #4]
24007ec0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
24007ec2:	2300      	movs	r3, #0
24007ec4:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
24007ec6:	68fb      	ldr	r3, [r7, #12]
24007ec8:	689b      	ldr	r3, [r3, #8]
24007eca:	2b80      	cmp	r3, #128	; 0x80
24007ecc:	d105      	bne.n	24007eda <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
24007ece:	68fb      	ldr	r3, [r7, #12]
24007ed0:	f44f 7280 	mov.w	r2, #256	; 0x100
24007ed4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
24007ed6:	2301      	movs	r3, #1
24007ed8:	e315      	b.n	24008506 <HAL_DMAEx_MultiBufferStart_IT+0x652>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
24007eda:	68fb      	ldr	r3, [r7, #12]
24007edc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
24007ee0:	2b01      	cmp	r3, #1
24007ee2:	d101      	bne.n	24007ee8 <HAL_DMAEx_MultiBufferStart_IT+0x34>
24007ee4:	2302      	movs	r3, #2
24007ee6:	e30e      	b.n	24008506 <HAL_DMAEx_MultiBufferStart_IT+0x652>
24007ee8:	68fb      	ldr	r3, [r7, #12]
24007eea:	2201      	movs	r2, #1
24007eec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
24007ef0:	68fb      	ldr	r3, [r7, #12]
24007ef2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
24007ef6:	b2db      	uxtb	r3, r3
24007ef8:	2b01      	cmp	r3, #1
24007efa:	f040 82fd 	bne.w	240084f8 <HAL_DMAEx_MultiBufferStart_IT+0x644>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
24007efe:	68fb      	ldr	r3, [r7, #12]
24007f00:	2202      	movs	r2, #2
24007f02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
24007f06:	68fb      	ldr	r3, [r7, #12]
24007f08:	2200      	movs	r2, #0
24007f0a:	655a      	str	r2, [r3, #84]	; 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24007f0c:	68fb      	ldr	r3, [r7, #12]
24007f0e:	681b      	ldr	r3, [r3, #0]
24007f10:	4a82      	ldr	r2, [pc, #520]	; (2400811c <HAL_DMAEx_MultiBufferStart_IT+0x268>)
24007f12:	4293      	cmp	r3, r2
24007f14:	d04a      	beq.n	24007fac <HAL_DMAEx_MultiBufferStart_IT+0xf8>
24007f16:	68fb      	ldr	r3, [r7, #12]
24007f18:	681b      	ldr	r3, [r3, #0]
24007f1a:	4a81      	ldr	r2, [pc, #516]	; (24008120 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
24007f1c:	4293      	cmp	r3, r2
24007f1e:	d045      	beq.n	24007fac <HAL_DMAEx_MultiBufferStart_IT+0xf8>
24007f20:	68fb      	ldr	r3, [r7, #12]
24007f22:	681b      	ldr	r3, [r3, #0]
24007f24:	4a7f      	ldr	r2, [pc, #508]	; (24008124 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
24007f26:	4293      	cmp	r3, r2
24007f28:	d040      	beq.n	24007fac <HAL_DMAEx_MultiBufferStart_IT+0xf8>
24007f2a:	68fb      	ldr	r3, [r7, #12]
24007f2c:	681b      	ldr	r3, [r3, #0]
24007f2e:	4a7e      	ldr	r2, [pc, #504]	; (24008128 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
24007f30:	4293      	cmp	r3, r2
24007f32:	d03b      	beq.n	24007fac <HAL_DMAEx_MultiBufferStart_IT+0xf8>
24007f34:	68fb      	ldr	r3, [r7, #12]
24007f36:	681b      	ldr	r3, [r3, #0]
24007f38:	4a7c      	ldr	r2, [pc, #496]	; (2400812c <HAL_DMAEx_MultiBufferStart_IT+0x278>)
24007f3a:	4293      	cmp	r3, r2
24007f3c:	d036      	beq.n	24007fac <HAL_DMAEx_MultiBufferStart_IT+0xf8>
24007f3e:	68fb      	ldr	r3, [r7, #12]
24007f40:	681b      	ldr	r3, [r3, #0]
24007f42:	4a7b      	ldr	r2, [pc, #492]	; (24008130 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
24007f44:	4293      	cmp	r3, r2
24007f46:	d031      	beq.n	24007fac <HAL_DMAEx_MultiBufferStart_IT+0xf8>
24007f48:	68fb      	ldr	r3, [r7, #12]
24007f4a:	681b      	ldr	r3, [r3, #0]
24007f4c:	4a79      	ldr	r2, [pc, #484]	; (24008134 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
24007f4e:	4293      	cmp	r3, r2
24007f50:	d02c      	beq.n	24007fac <HAL_DMAEx_MultiBufferStart_IT+0xf8>
24007f52:	68fb      	ldr	r3, [r7, #12]
24007f54:	681b      	ldr	r3, [r3, #0]
24007f56:	4a78      	ldr	r2, [pc, #480]	; (24008138 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
24007f58:	4293      	cmp	r3, r2
24007f5a:	d027      	beq.n	24007fac <HAL_DMAEx_MultiBufferStart_IT+0xf8>
24007f5c:	68fb      	ldr	r3, [r7, #12]
24007f5e:	681b      	ldr	r3, [r3, #0]
24007f60:	4a76      	ldr	r2, [pc, #472]	; (2400813c <HAL_DMAEx_MultiBufferStart_IT+0x288>)
24007f62:	4293      	cmp	r3, r2
24007f64:	d022      	beq.n	24007fac <HAL_DMAEx_MultiBufferStart_IT+0xf8>
24007f66:	68fb      	ldr	r3, [r7, #12]
24007f68:	681b      	ldr	r3, [r3, #0]
24007f6a:	4a75      	ldr	r2, [pc, #468]	; (24008140 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
24007f6c:	4293      	cmp	r3, r2
24007f6e:	d01d      	beq.n	24007fac <HAL_DMAEx_MultiBufferStart_IT+0xf8>
24007f70:	68fb      	ldr	r3, [r7, #12]
24007f72:	681b      	ldr	r3, [r3, #0]
24007f74:	4a73      	ldr	r2, [pc, #460]	; (24008144 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
24007f76:	4293      	cmp	r3, r2
24007f78:	d018      	beq.n	24007fac <HAL_DMAEx_MultiBufferStart_IT+0xf8>
24007f7a:	68fb      	ldr	r3, [r7, #12]
24007f7c:	681b      	ldr	r3, [r3, #0]
24007f7e:	4a72      	ldr	r2, [pc, #456]	; (24008148 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
24007f80:	4293      	cmp	r3, r2
24007f82:	d013      	beq.n	24007fac <HAL_DMAEx_MultiBufferStart_IT+0xf8>
24007f84:	68fb      	ldr	r3, [r7, #12]
24007f86:	681b      	ldr	r3, [r3, #0]
24007f88:	4a70      	ldr	r2, [pc, #448]	; (2400814c <HAL_DMAEx_MultiBufferStart_IT+0x298>)
24007f8a:	4293      	cmp	r3, r2
24007f8c:	d00e      	beq.n	24007fac <HAL_DMAEx_MultiBufferStart_IT+0xf8>
24007f8e:	68fb      	ldr	r3, [r7, #12]
24007f90:	681b      	ldr	r3, [r3, #0]
24007f92:	4a6f      	ldr	r2, [pc, #444]	; (24008150 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
24007f94:	4293      	cmp	r3, r2
24007f96:	d009      	beq.n	24007fac <HAL_DMAEx_MultiBufferStart_IT+0xf8>
24007f98:	68fb      	ldr	r3, [r7, #12]
24007f9a:	681b      	ldr	r3, [r3, #0]
24007f9c:	4a6d      	ldr	r2, [pc, #436]	; (24008154 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
24007f9e:	4293      	cmp	r3, r2
24007fa0:	d004      	beq.n	24007fac <HAL_DMAEx_MultiBufferStart_IT+0xf8>
24007fa2:	68fb      	ldr	r3, [r7, #12]
24007fa4:	681b      	ldr	r3, [r3, #0]
24007fa6:	4a6c      	ldr	r2, [pc, #432]	; (24008158 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
24007fa8:	4293      	cmp	r3, r2
24007faa:	d101      	bne.n	24007fb0 <HAL_DMAEx_MultiBufferStart_IT+0xfc>
24007fac:	2301      	movs	r3, #1
24007fae:	e000      	b.n	24007fb2 <HAL_DMAEx_MultiBufferStart_IT+0xfe>
24007fb0:	2300      	movs	r3, #0
24007fb2:	2b00      	cmp	r3, #0
24007fb4:	d018      	beq.n	24007fe8 <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
24007fb6:	68fb      	ldr	r3, [r7, #12]
24007fb8:	681b      	ldr	r3, [r3, #0]
24007fba:	681a      	ldr	r2, [r3, #0]
24007fbc:	68fb      	ldr	r3, [r7, #12]
24007fbe:	681b      	ldr	r3, [r3, #0]
24007fc0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
24007fc4:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
24007fc6:	68fb      	ldr	r3, [r7, #12]
24007fc8:	681b      	ldr	r3, [r3, #0]
24007fca:	683a      	ldr	r2, [r7, #0]
24007fcc:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
24007fce:	68fb      	ldr	r3, [r7, #12]
24007fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24007fd2:	3308      	adds	r3, #8
24007fd4:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
24007fd6:	68fb      	ldr	r3, [r7, #12]
24007fd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24007fda:	f003 031f 	and.w	r3, r3, #31
24007fde:	223f      	movs	r2, #63	; 0x3f
24007fe0:	409a      	lsls	r2, r3
24007fe2:	693b      	ldr	r3, [r7, #16]
24007fe4:	601a      	str	r2, [r3, #0]
24007fe6:	e018      	b.n	2400801a <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
24007fe8:	68fb      	ldr	r3, [r7, #12]
24007fea:	681b      	ldr	r3, [r3, #0]
24007fec:	6819      	ldr	r1, [r3, #0]
24007fee:	68fb      	ldr	r3, [r7, #12]
24007ff0:	681a      	ldr	r2, [r3, #0]
24007ff2:	f248 0320 	movw	r3, #32800	; 0x8020
24007ff6:	430b      	orrs	r3, r1
24007ff8:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
24007ffa:	68fb      	ldr	r3, [r7, #12]
24007ffc:	681b      	ldr	r3, [r3, #0]
24007ffe:	683a      	ldr	r2, [r7, #0]
24008000:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
24008002:	68fb      	ldr	r3, [r7, #12]
24008004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24008006:	3304      	adds	r3, #4
24008008:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
2400800a:	68fb      	ldr	r3, [r7, #12]
2400800c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2400800e:	f003 031f 	and.w	r3, r3, #31
24008012:	2201      	movs	r2, #1
24008014:	409a      	lsls	r2, r3
24008016:	693b      	ldr	r3, [r7, #16]
24008018:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
2400801a:	6a3b      	ldr	r3, [r7, #32]
2400801c:	687a      	ldr	r2, [r7, #4]
2400801e:	68b9      	ldr	r1, [r7, #8]
24008020:	68f8      	ldr	r0, [r7, #12]
24008022:	f000 fd4f 	bl	24008ac4 <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24008026:	68fb      	ldr	r3, [r7, #12]
24008028:	681b      	ldr	r3, [r3, #0]
2400802a:	4a3c      	ldr	r2, [pc, #240]	; (2400811c <HAL_DMAEx_MultiBufferStart_IT+0x268>)
2400802c:	4293      	cmp	r3, r2
2400802e:	d072      	beq.n	24008116 <HAL_DMAEx_MultiBufferStart_IT+0x262>
24008030:	68fb      	ldr	r3, [r7, #12]
24008032:	681b      	ldr	r3, [r3, #0]
24008034:	4a3a      	ldr	r2, [pc, #232]	; (24008120 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
24008036:	4293      	cmp	r3, r2
24008038:	d06d      	beq.n	24008116 <HAL_DMAEx_MultiBufferStart_IT+0x262>
2400803a:	68fb      	ldr	r3, [r7, #12]
2400803c:	681b      	ldr	r3, [r3, #0]
2400803e:	4a39      	ldr	r2, [pc, #228]	; (24008124 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
24008040:	4293      	cmp	r3, r2
24008042:	d068      	beq.n	24008116 <HAL_DMAEx_MultiBufferStart_IT+0x262>
24008044:	68fb      	ldr	r3, [r7, #12]
24008046:	681b      	ldr	r3, [r3, #0]
24008048:	4a37      	ldr	r2, [pc, #220]	; (24008128 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
2400804a:	4293      	cmp	r3, r2
2400804c:	d063      	beq.n	24008116 <HAL_DMAEx_MultiBufferStart_IT+0x262>
2400804e:	68fb      	ldr	r3, [r7, #12]
24008050:	681b      	ldr	r3, [r3, #0]
24008052:	4a36      	ldr	r2, [pc, #216]	; (2400812c <HAL_DMAEx_MultiBufferStart_IT+0x278>)
24008054:	4293      	cmp	r3, r2
24008056:	d05e      	beq.n	24008116 <HAL_DMAEx_MultiBufferStart_IT+0x262>
24008058:	68fb      	ldr	r3, [r7, #12]
2400805a:	681b      	ldr	r3, [r3, #0]
2400805c:	4a34      	ldr	r2, [pc, #208]	; (24008130 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
2400805e:	4293      	cmp	r3, r2
24008060:	d059      	beq.n	24008116 <HAL_DMAEx_MultiBufferStart_IT+0x262>
24008062:	68fb      	ldr	r3, [r7, #12]
24008064:	681b      	ldr	r3, [r3, #0]
24008066:	4a33      	ldr	r2, [pc, #204]	; (24008134 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
24008068:	4293      	cmp	r3, r2
2400806a:	d054      	beq.n	24008116 <HAL_DMAEx_MultiBufferStart_IT+0x262>
2400806c:	68fb      	ldr	r3, [r7, #12]
2400806e:	681b      	ldr	r3, [r3, #0]
24008070:	4a31      	ldr	r2, [pc, #196]	; (24008138 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
24008072:	4293      	cmp	r3, r2
24008074:	d04f      	beq.n	24008116 <HAL_DMAEx_MultiBufferStart_IT+0x262>
24008076:	68fb      	ldr	r3, [r7, #12]
24008078:	681b      	ldr	r3, [r3, #0]
2400807a:	4a30      	ldr	r2, [pc, #192]	; (2400813c <HAL_DMAEx_MultiBufferStart_IT+0x288>)
2400807c:	4293      	cmp	r3, r2
2400807e:	d04a      	beq.n	24008116 <HAL_DMAEx_MultiBufferStart_IT+0x262>
24008080:	68fb      	ldr	r3, [r7, #12]
24008082:	681b      	ldr	r3, [r3, #0]
24008084:	4a2e      	ldr	r2, [pc, #184]	; (24008140 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
24008086:	4293      	cmp	r3, r2
24008088:	d045      	beq.n	24008116 <HAL_DMAEx_MultiBufferStart_IT+0x262>
2400808a:	68fb      	ldr	r3, [r7, #12]
2400808c:	681b      	ldr	r3, [r3, #0]
2400808e:	4a2d      	ldr	r2, [pc, #180]	; (24008144 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
24008090:	4293      	cmp	r3, r2
24008092:	d040      	beq.n	24008116 <HAL_DMAEx_MultiBufferStart_IT+0x262>
24008094:	68fb      	ldr	r3, [r7, #12]
24008096:	681b      	ldr	r3, [r3, #0]
24008098:	4a2b      	ldr	r2, [pc, #172]	; (24008148 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
2400809a:	4293      	cmp	r3, r2
2400809c:	d03b      	beq.n	24008116 <HAL_DMAEx_MultiBufferStart_IT+0x262>
2400809e:	68fb      	ldr	r3, [r7, #12]
240080a0:	681b      	ldr	r3, [r3, #0]
240080a2:	4a2a      	ldr	r2, [pc, #168]	; (2400814c <HAL_DMAEx_MultiBufferStart_IT+0x298>)
240080a4:	4293      	cmp	r3, r2
240080a6:	d036      	beq.n	24008116 <HAL_DMAEx_MultiBufferStart_IT+0x262>
240080a8:	68fb      	ldr	r3, [r7, #12]
240080aa:	681b      	ldr	r3, [r3, #0]
240080ac:	4a28      	ldr	r2, [pc, #160]	; (24008150 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
240080ae:	4293      	cmp	r3, r2
240080b0:	d031      	beq.n	24008116 <HAL_DMAEx_MultiBufferStart_IT+0x262>
240080b2:	68fb      	ldr	r3, [r7, #12]
240080b4:	681b      	ldr	r3, [r3, #0]
240080b6:	4a27      	ldr	r2, [pc, #156]	; (24008154 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
240080b8:	4293      	cmp	r3, r2
240080ba:	d02c      	beq.n	24008116 <HAL_DMAEx_MultiBufferStart_IT+0x262>
240080bc:	68fb      	ldr	r3, [r7, #12]
240080be:	681b      	ldr	r3, [r3, #0]
240080c0:	4a25      	ldr	r2, [pc, #148]	; (24008158 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
240080c2:	4293      	cmp	r3, r2
240080c4:	d027      	beq.n	24008116 <HAL_DMAEx_MultiBufferStart_IT+0x262>
240080c6:	68fb      	ldr	r3, [r7, #12]
240080c8:	681b      	ldr	r3, [r3, #0]
240080ca:	4a24      	ldr	r2, [pc, #144]	; (2400815c <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
240080cc:	4293      	cmp	r3, r2
240080ce:	d022      	beq.n	24008116 <HAL_DMAEx_MultiBufferStart_IT+0x262>
240080d0:	68fb      	ldr	r3, [r7, #12]
240080d2:	681b      	ldr	r3, [r3, #0]
240080d4:	4a22      	ldr	r2, [pc, #136]	; (24008160 <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
240080d6:	4293      	cmp	r3, r2
240080d8:	d01d      	beq.n	24008116 <HAL_DMAEx_MultiBufferStart_IT+0x262>
240080da:	68fb      	ldr	r3, [r7, #12]
240080dc:	681b      	ldr	r3, [r3, #0]
240080de:	4a21      	ldr	r2, [pc, #132]	; (24008164 <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
240080e0:	4293      	cmp	r3, r2
240080e2:	d018      	beq.n	24008116 <HAL_DMAEx_MultiBufferStart_IT+0x262>
240080e4:	68fb      	ldr	r3, [r7, #12]
240080e6:	681b      	ldr	r3, [r3, #0]
240080e8:	4a1f      	ldr	r2, [pc, #124]	; (24008168 <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
240080ea:	4293      	cmp	r3, r2
240080ec:	d013      	beq.n	24008116 <HAL_DMAEx_MultiBufferStart_IT+0x262>
240080ee:	68fb      	ldr	r3, [r7, #12]
240080f0:	681b      	ldr	r3, [r3, #0]
240080f2:	4a1e      	ldr	r2, [pc, #120]	; (2400816c <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
240080f4:	4293      	cmp	r3, r2
240080f6:	d00e      	beq.n	24008116 <HAL_DMAEx_MultiBufferStart_IT+0x262>
240080f8:	68fb      	ldr	r3, [r7, #12]
240080fa:	681b      	ldr	r3, [r3, #0]
240080fc:	4a1c      	ldr	r2, [pc, #112]	; (24008170 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
240080fe:	4293      	cmp	r3, r2
24008100:	d009      	beq.n	24008116 <HAL_DMAEx_MultiBufferStart_IT+0x262>
24008102:	68fb      	ldr	r3, [r7, #12]
24008104:	681b      	ldr	r3, [r3, #0]
24008106:	4a1b      	ldr	r2, [pc, #108]	; (24008174 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
24008108:	4293      	cmp	r3, r2
2400810a:	d004      	beq.n	24008116 <HAL_DMAEx_MultiBufferStart_IT+0x262>
2400810c:	68fb      	ldr	r3, [r7, #12]
2400810e:	681b      	ldr	r3, [r3, #0]
24008110:	4a19      	ldr	r2, [pc, #100]	; (24008178 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
24008112:	4293      	cmp	r3, r2
24008114:	d132      	bne.n	2400817c <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
24008116:	2301      	movs	r3, #1
24008118:	e031      	b.n	2400817e <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
2400811a:	bf00      	nop
2400811c:	40020010 	.word	0x40020010
24008120:	40020028 	.word	0x40020028
24008124:	40020040 	.word	0x40020040
24008128:	40020058 	.word	0x40020058
2400812c:	40020070 	.word	0x40020070
24008130:	40020088 	.word	0x40020088
24008134:	400200a0 	.word	0x400200a0
24008138:	400200b8 	.word	0x400200b8
2400813c:	40020410 	.word	0x40020410
24008140:	40020428 	.word	0x40020428
24008144:	40020440 	.word	0x40020440
24008148:	40020458 	.word	0x40020458
2400814c:	40020470 	.word	0x40020470
24008150:	40020488 	.word	0x40020488
24008154:	400204a0 	.word	0x400204a0
24008158:	400204b8 	.word	0x400204b8
2400815c:	58025408 	.word	0x58025408
24008160:	5802541c 	.word	0x5802541c
24008164:	58025430 	.word	0x58025430
24008168:	58025444 	.word	0x58025444
2400816c:	58025458 	.word	0x58025458
24008170:	5802546c 	.word	0x5802546c
24008174:	58025480 	.word	0x58025480
24008178:	58025494 	.word	0x58025494
2400817c:	2300      	movs	r3, #0
2400817e:	2b00      	cmp	r3, #0
24008180:	d00d      	beq.n	2400819e <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
24008182:	68fb      	ldr	r3, [r7, #12]
24008184:	6e5b      	ldr	r3, [r3, #100]	; 0x64
24008186:	68fa      	ldr	r2, [r7, #12]
24008188:	6e92      	ldr	r2, [r2, #104]	; 0x68
2400818a:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
2400818c:	68fb      	ldr	r3, [r7, #12]
2400818e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24008190:	2b00      	cmp	r3, #0
24008192:	d004      	beq.n	2400819e <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
24008194:	68fb      	ldr	r3, [r7, #12]
24008196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24008198:	68fa      	ldr	r2, [r7, #12]
2400819a:	6f52      	ldr	r2, [r2, #116]	; 0x74
2400819c:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
2400819e:	68fb      	ldr	r3, [r7, #12]
240081a0:	681b      	ldr	r3, [r3, #0]
240081a2:	4a3b      	ldr	r2, [pc, #236]	; (24008290 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>)
240081a4:	4293      	cmp	r3, r2
240081a6:	d04a      	beq.n	2400823e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
240081a8:	68fb      	ldr	r3, [r7, #12]
240081aa:	681b      	ldr	r3, [r3, #0]
240081ac:	4a39      	ldr	r2, [pc, #228]	; (24008294 <HAL_DMAEx_MultiBufferStart_IT+0x3e0>)
240081ae:	4293      	cmp	r3, r2
240081b0:	d045      	beq.n	2400823e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
240081b2:	68fb      	ldr	r3, [r7, #12]
240081b4:	681b      	ldr	r3, [r3, #0]
240081b6:	4a38      	ldr	r2, [pc, #224]	; (24008298 <HAL_DMAEx_MultiBufferStart_IT+0x3e4>)
240081b8:	4293      	cmp	r3, r2
240081ba:	d040      	beq.n	2400823e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
240081bc:	68fb      	ldr	r3, [r7, #12]
240081be:	681b      	ldr	r3, [r3, #0]
240081c0:	4a36      	ldr	r2, [pc, #216]	; (2400829c <HAL_DMAEx_MultiBufferStart_IT+0x3e8>)
240081c2:	4293      	cmp	r3, r2
240081c4:	d03b      	beq.n	2400823e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
240081c6:	68fb      	ldr	r3, [r7, #12]
240081c8:	681b      	ldr	r3, [r3, #0]
240081ca:	4a35      	ldr	r2, [pc, #212]	; (240082a0 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>)
240081cc:	4293      	cmp	r3, r2
240081ce:	d036      	beq.n	2400823e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
240081d0:	68fb      	ldr	r3, [r7, #12]
240081d2:	681b      	ldr	r3, [r3, #0]
240081d4:	4a33      	ldr	r2, [pc, #204]	; (240082a4 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>)
240081d6:	4293      	cmp	r3, r2
240081d8:	d031      	beq.n	2400823e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
240081da:	68fb      	ldr	r3, [r7, #12]
240081dc:	681b      	ldr	r3, [r3, #0]
240081de:	4a32      	ldr	r2, [pc, #200]	; (240082a8 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>)
240081e0:	4293      	cmp	r3, r2
240081e2:	d02c      	beq.n	2400823e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
240081e4:	68fb      	ldr	r3, [r7, #12]
240081e6:	681b      	ldr	r3, [r3, #0]
240081e8:	4a30      	ldr	r2, [pc, #192]	; (240082ac <HAL_DMAEx_MultiBufferStart_IT+0x3f8>)
240081ea:	4293      	cmp	r3, r2
240081ec:	d027      	beq.n	2400823e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
240081ee:	68fb      	ldr	r3, [r7, #12]
240081f0:	681b      	ldr	r3, [r3, #0]
240081f2:	4a2f      	ldr	r2, [pc, #188]	; (240082b0 <HAL_DMAEx_MultiBufferStart_IT+0x3fc>)
240081f4:	4293      	cmp	r3, r2
240081f6:	d022      	beq.n	2400823e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
240081f8:	68fb      	ldr	r3, [r7, #12]
240081fa:	681b      	ldr	r3, [r3, #0]
240081fc:	4a2d      	ldr	r2, [pc, #180]	; (240082b4 <HAL_DMAEx_MultiBufferStart_IT+0x400>)
240081fe:	4293      	cmp	r3, r2
24008200:	d01d      	beq.n	2400823e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
24008202:	68fb      	ldr	r3, [r7, #12]
24008204:	681b      	ldr	r3, [r3, #0]
24008206:	4a2c      	ldr	r2, [pc, #176]	; (240082b8 <HAL_DMAEx_MultiBufferStart_IT+0x404>)
24008208:	4293      	cmp	r3, r2
2400820a:	d018      	beq.n	2400823e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
2400820c:	68fb      	ldr	r3, [r7, #12]
2400820e:	681b      	ldr	r3, [r3, #0]
24008210:	4a2a      	ldr	r2, [pc, #168]	; (240082bc <HAL_DMAEx_MultiBufferStart_IT+0x408>)
24008212:	4293      	cmp	r3, r2
24008214:	d013      	beq.n	2400823e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
24008216:	68fb      	ldr	r3, [r7, #12]
24008218:	681b      	ldr	r3, [r3, #0]
2400821a:	4a29      	ldr	r2, [pc, #164]	; (240082c0 <HAL_DMAEx_MultiBufferStart_IT+0x40c>)
2400821c:	4293      	cmp	r3, r2
2400821e:	d00e      	beq.n	2400823e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
24008220:	68fb      	ldr	r3, [r7, #12]
24008222:	681b      	ldr	r3, [r3, #0]
24008224:	4a27      	ldr	r2, [pc, #156]	; (240082c4 <HAL_DMAEx_MultiBufferStart_IT+0x410>)
24008226:	4293      	cmp	r3, r2
24008228:	d009      	beq.n	2400823e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
2400822a:	68fb      	ldr	r3, [r7, #12]
2400822c:	681b      	ldr	r3, [r3, #0]
2400822e:	4a26      	ldr	r2, [pc, #152]	; (240082c8 <HAL_DMAEx_MultiBufferStart_IT+0x414>)
24008230:	4293      	cmp	r3, r2
24008232:	d004      	beq.n	2400823e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
24008234:	68fb      	ldr	r3, [r7, #12]
24008236:	681b      	ldr	r3, [r3, #0]
24008238:	4a24      	ldr	r2, [pc, #144]	; (240082cc <HAL_DMAEx_MultiBufferStart_IT+0x418>)
2400823a:	4293      	cmp	r3, r2
2400823c:	d101      	bne.n	24008242 <HAL_DMAEx_MultiBufferStart_IT+0x38e>
2400823e:	2301      	movs	r3, #1
24008240:	e000      	b.n	24008244 <HAL_DMAEx_MultiBufferStart_IT+0x390>
24008242:	2300      	movs	r3, #0
24008244:	2b00      	cmp	r3, #0
24008246:	d043      	beq.n	240082d0 <HAL_DMAEx_MultiBufferStart_IT+0x41c>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
24008248:	68fb      	ldr	r3, [r7, #12]
2400824a:	681b      	ldr	r3, [r3, #0]
2400824c:	681b      	ldr	r3, [r3, #0]
2400824e:	f023 021e 	bic.w	r2, r3, #30
24008252:	68fb      	ldr	r3, [r7, #12]
24008254:	681b      	ldr	r3, [r3, #0]
24008256:	f042 0216 	orr.w	r2, r2, #22
2400825a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
2400825c:	68fb      	ldr	r3, [r7, #12]
2400825e:	681b      	ldr	r3, [r3, #0]
24008260:	695a      	ldr	r2, [r3, #20]
24008262:	68fb      	ldr	r3, [r7, #12]
24008264:	681b      	ldr	r3, [r3, #0]
24008266:	f042 0280 	orr.w	r2, r2, #128	; 0x80
2400826a:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
2400826c:	68fb      	ldr	r3, [r7, #12]
2400826e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24008270:	2b00      	cmp	r3, #0
24008272:	d103      	bne.n	2400827c <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
24008274:	68fb      	ldr	r3, [r7, #12]
24008276:	6c9b      	ldr	r3, [r3, #72]	; 0x48
24008278:	2b00      	cmp	r3, #0
2400827a:	d043      	beq.n	24008304 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
2400827c:	68fb      	ldr	r3, [r7, #12]
2400827e:	681b      	ldr	r3, [r3, #0]
24008280:	681a      	ldr	r2, [r3, #0]
24008282:	68fb      	ldr	r3, [r7, #12]
24008284:	681b      	ldr	r3, [r3, #0]
24008286:	f042 0208 	orr.w	r2, r2, #8
2400828a:	601a      	str	r2, [r3, #0]
2400828c:	e03a      	b.n	24008304 <HAL_DMAEx_MultiBufferStart_IT+0x450>
2400828e:	bf00      	nop
24008290:	40020010 	.word	0x40020010
24008294:	40020028 	.word	0x40020028
24008298:	40020040 	.word	0x40020040
2400829c:	40020058 	.word	0x40020058
240082a0:	40020070 	.word	0x40020070
240082a4:	40020088 	.word	0x40020088
240082a8:	400200a0 	.word	0x400200a0
240082ac:	400200b8 	.word	0x400200b8
240082b0:	40020410 	.word	0x40020410
240082b4:	40020428 	.word	0x40020428
240082b8:	40020440 	.word	0x40020440
240082bc:	40020458 	.word	0x40020458
240082c0:	40020470 	.word	0x40020470
240082c4:	40020488 	.word	0x40020488
240082c8:	400204a0 	.word	0x400204a0
240082cc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
240082d0:	68fb      	ldr	r3, [r7, #12]
240082d2:	681b      	ldr	r3, [r3, #0]
240082d4:	681b      	ldr	r3, [r3, #0]
240082d6:	f023 020e 	bic.w	r2, r3, #14
240082da:	68fb      	ldr	r3, [r7, #12]
240082dc:	681b      	ldr	r3, [r3, #0]
240082de:	f042 020a 	orr.w	r2, r2, #10
240082e2:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
240082e4:	68fb      	ldr	r3, [r7, #12]
240082e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
240082e8:	2b00      	cmp	r3, #0
240082ea:	d103      	bne.n	240082f4 <HAL_DMAEx_MultiBufferStart_IT+0x440>
240082ec:	68fb      	ldr	r3, [r7, #12]
240082ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
240082f0:	2b00      	cmp	r3, #0
240082f2:	d007      	beq.n	24008304 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
240082f4:	68fb      	ldr	r3, [r7, #12]
240082f6:	681b      	ldr	r3, [r3, #0]
240082f8:	681a      	ldr	r2, [r3, #0]
240082fa:	68fb      	ldr	r3, [r7, #12]
240082fc:	681b      	ldr	r3, [r3, #0]
240082fe:	f042 0204 	orr.w	r2, r2, #4
24008302:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24008304:	68fb      	ldr	r3, [r7, #12]
24008306:	681b      	ldr	r3, [r3, #0]
24008308:	4a81      	ldr	r2, [pc, #516]	; (24008510 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
2400830a:	4293      	cmp	r3, r2
2400830c:	d072      	beq.n	240083f4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
2400830e:	68fb      	ldr	r3, [r7, #12]
24008310:	681b      	ldr	r3, [r3, #0]
24008312:	4a80      	ldr	r2, [pc, #512]	; (24008514 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
24008314:	4293      	cmp	r3, r2
24008316:	d06d      	beq.n	240083f4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
24008318:	68fb      	ldr	r3, [r7, #12]
2400831a:	681b      	ldr	r3, [r3, #0]
2400831c:	4a7e      	ldr	r2, [pc, #504]	; (24008518 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
2400831e:	4293      	cmp	r3, r2
24008320:	d068      	beq.n	240083f4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
24008322:	68fb      	ldr	r3, [r7, #12]
24008324:	681b      	ldr	r3, [r3, #0]
24008326:	4a7d      	ldr	r2, [pc, #500]	; (2400851c <HAL_DMAEx_MultiBufferStart_IT+0x668>)
24008328:	4293      	cmp	r3, r2
2400832a:	d063      	beq.n	240083f4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
2400832c:	68fb      	ldr	r3, [r7, #12]
2400832e:	681b      	ldr	r3, [r3, #0]
24008330:	4a7b      	ldr	r2, [pc, #492]	; (24008520 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
24008332:	4293      	cmp	r3, r2
24008334:	d05e      	beq.n	240083f4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
24008336:	68fb      	ldr	r3, [r7, #12]
24008338:	681b      	ldr	r3, [r3, #0]
2400833a:	4a7a      	ldr	r2, [pc, #488]	; (24008524 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
2400833c:	4293      	cmp	r3, r2
2400833e:	d059      	beq.n	240083f4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
24008340:	68fb      	ldr	r3, [r7, #12]
24008342:	681b      	ldr	r3, [r3, #0]
24008344:	4a78      	ldr	r2, [pc, #480]	; (24008528 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
24008346:	4293      	cmp	r3, r2
24008348:	d054      	beq.n	240083f4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
2400834a:	68fb      	ldr	r3, [r7, #12]
2400834c:	681b      	ldr	r3, [r3, #0]
2400834e:	4a77      	ldr	r2, [pc, #476]	; (2400852c <HAL_DMAEx_MultiBufferStart_IT+0x678>)
24008350:	4293      	cmp	r3, r2
24008352:	d04f      	beq.n	240083f4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
24008354:	68fb      	ldr	r3, [r7, #12]
24008356:	681b      	ldr	r3, [r3, #0]
24008358:	4a75      	ldr	r2, [pc, #468]	; (24008530 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
2400835a:	4293      	cmp	r3, r2
2400835c:	d04a      	beq.n	240083f4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
2400835e:	68fb      	ldr	r3, [r7, #12]
24008360:	681b      	ldr	r3, [r3, #0]
24008362:	4a74      	ldr	r2, [pc, #464]	; (24008534 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
24008364:	4293      	cmp	r3, r2
24008366:	d045      	beq.n	240083f4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
24008368:	68fb      	ldr	r3, [r7, #12]
2400836a:	681b      	ldr	r3, [r3, #0]
2400836c:	4a72      	ldr	r2, [pc, #456]	; (24008538 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
2400836e:	4293      	cmp	r3, r2
24008370:	d040      	beq.n	240083f4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
24008372:	68fb      	ldr	r3, [r7, #12]
24008374:	681b      	ldr	r3, [r3, #0]
24008376:	4a71      	ldr	r2, [pc, #452]	; (2400853c <HAL_DMAEx_MultiBufferStart_IT+0x688>)
24008378:	4293      	cmp	r3, r2
2400837a:	d03b      	beq.n	240083f4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
2400837c:	68fb      	ldr	r3, [r7, #12]
2400837e:	681b      	ldr	r3, [r3, #0]
24008380:	4a6f      	ldr	r2, [pc, #444]	; (24008540 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
24008382:	4293      	cmp	r3, r2
24008384:	d036      	beq.n	240083f4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
24008386:	68fb      	ldr	r3, [r7, #12]
24008388:	681b      	ldr	r3, [r3, #0]
2400838a:	4a6e      	ldr	r2, [pc, #440]	; (24008544 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
2400838c:	4293      	cmp	r3, r2
2400838e:	d031      	beq.n	240083f4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
24008390:	68fb      	ldr	r3, [r7, #12]
24008392:	681b      	ldr	r3, [r3, #0]
24008394:	4a6c      	ldr	r2, [pc, #432]	; (24008548 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
24008396:	4293      	cmp	r3, r2
24008398:	d02c      	beq.n	240083f4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
2400839a:	68fb      	ldr	r3, [r7, #12]
2400839c:	681b      	ldr	r3, [r3, #0]
2400839e:	4a6b      	ldr	r2, [pc, #428]	; (2400854c <HAL_DMAEx_MultiBufferStart_IT+0x698>)
240083a0:	4293      	cmp	r3, r2
240083a2:	d027      	beq.n	240083f4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
240083a4:	68fb      	ldr	r3, [r7, #12]
240083a6:	681b      	ldr	r3, [r3, #0]
240083a8:	4a69      	ldr	r2, [pc, #420]	; (24008550 <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
240083aa:	4293      	cmp	r3, r2
240083ac:	d022      	beq.n	240083f4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
240083ae:	68fb      	ldr	r3, [r7, #12]
240083b0:	681b      	ldr	r3, [r3, #0]
240083b2:	4a68      	ldr	r2, [pc, #416]	; (24008554 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
240083b4:	4293      	cmp	r3, r2
240083b6:	d01d      	beq.n	240083f4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
240083b8:	68fb      	ldr	r3, [r7, #12]
240083ba:	681b      	ldr	r3, [r3, #0]
240083bc:	4a66      	ldr	r2, [pc, #408]	; (24008558 <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
240083be:	4293      	cmp	r3, r2
240083c0:	d018      	beq.n	240083f4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
240083c2:	68fb      	ldr	r3, [r7, #12]
240083c4:	681b      	ldr	r3, [r3, #0]
240083c6:	4a65      	ldr	r2, [pc, #404]	; (2400855c <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
240083c8:	4293      	cmp	r3, r2
240083ca:	d013      	beq.n	240083f4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
240083cc:	68fb      	ldr	r3, [r7, #12]
240083ce:	681b      	ldr	r3, [r3, #0]
240083d0:	4a63      	ldr	r2, [pc, #396]	; (24008560 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
240083d2:	4293      	cmp	r3, r2
240083d4:	d00e      	beq.n	240083f4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
240083d6:	68fb      	ldr	r3, [r7, #12]
240083d8:	681b      	ldr	r3, [r3, #0]
240083da:	4a62      	ldr	r2, [pc, #392]	; (24008564 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
240083dc:	4293      	cmp	r3, r2
240083de:	d009      	beq.n	240083f4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
240083e0:	68fb      	ldr	r3, [r7, #12]
240083e2:	681b      	ldr	r3, [r3, #0]
240083e4:	4a60      	ldr	r2, [pc, #384]	; (24008568 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
240083e6:	4293      	cmp	r3, r2
240083e8:	d004      	beq.n	240083f4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
240083ea:	68fb      	ldr	r3, [r7, #12]
240083ec:	681b      	ldr	r3, [r3, #0]
240083ee:	4a5f      	ldr	r2, [pc, #380]	; (2400856c <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
240083f0:	4293      	cmp	r3, r2
240083f2:	d101      	bne.n	240083f8 <HAL_DMAEx_MultiBufferStart_IT+0x544>
240083f4:	2301      	movs	r3, #1
240083f6:	e000      	b.n	240083fa <HAL_DMAEx_MultiBufferStart_IT+0x546>
240083f8:	2300      	movs	r3, #0
240083fa:	2b00      	cmp	r3, #0
240083fc:	d01a      	beq.n	24008434 <HAL_DMAEx_MultiBufferStart_IT+0x580>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
240083fe:	68fb      	ldr	r3, [r7, #12]
24008400:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24008402:	681b      	ldr	r3, [r3, #0]
24008404:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
24008408:	2b00      	cmp	r3, #0
2400840a:	d007      	beq.n	2400841c <HAL_DMAEx_MultiBufferStart_IT+0x568>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
2400840c:	68fb      	ldr	r3, [r7, #12]
2400840e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24008410:	681a      	ldr	r2, [r3, #0]
24008412:	68fb      	ldr	r3, [r7, #12]
24008414:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24008416:	f442 7280 	orr.w	r2, r2, #256	; 0x100
2400841a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
2400841c:	68fb      	ldr	r3, [r7, #12]
2400841e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24008420:	2b00      	cmp	r3, #0
24008422:	d007      	beq.n	24008434 <HAL_DMAEx_MultiBufferStart_IT+0x580>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
24008424:	68fb      	ldr	r3, [r7, #12]
24008426:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24008428:	681a      	ldr	r2, [r3, #0]
2400842a:	68fb      	ldr	r3, [r7, #12]
2400842c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
2400842e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
24008432:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
24008434:	68fb      	ldr	r3, [r7, #12]
24008436:	681b      	ldr	r3, [r3, #0]
24008438:	4a35      	ldr	r2, [pc, #212]	; (24008510 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
2400843a:	4293      	cmp	r3, r2
2400843c:	d04a      	beq.n	240084d4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
2400843e:	68fb      	ldr	r3, [r7, #12]
24008440:	681b      	ldr	r3, [r3, #0]
24008442:	4a34      	ldr	r2, [pc, #208]	; (24008514 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
24008444:	4293      	cmp	r3, r2
24008446:	d045      	beq.n	240084d4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
24008448:	68fb      	ldr	r3, [r7, #12]
2400844a:	681b      	ldr	r3, [r3, #0]
2400844c:	4a32      	ldr	r2, [pc, #200]	; (24008518 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
2400844e:	4293      	cmp	r3, r2
24008450:	d040      	beq.n	240084d4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
24008452:	68fb      	ldr	r3, [r7, #12]
24008454:	681b      	ldr	r3, [r3, #0]
24008456:	4a31      	ldr	r2, [pc, #196]	; (2400851c <HAL_DMAEx_MultiBufferStart_IT+0x668>)
24008458:	4293      	cmp	r3, r2
2400845a:	d03b      	beq.n	240084d4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
2400845c:	68fb      	ldr	r3, [r7, #12]
2400845e:	681b      	ldr	r3, [r3, #0]
24008460:	4a2f      	ldr	r2, [pc, #188]	; (24008520 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
24008462:	4293      	cmp	r3, r2
24008464:	d036      	beq.n	240084d4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
24008466:	68fb      	ldr	r3, [r7, #12]
24008468:	681b      	ldr	r3, [r3, #0]
2400846a:	4a2e      	ldr	r2, [pc, #184]	; (24008524 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
2400846c:	4293      	cmp	r3, r2
2400846e:	d031      	beq.n	240084d4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
24008470:	68fb      	ldr	r3, [r7, #12]
24008472:	681b      	ldr	r3, [r3, #0]
24008474:	4a2c      	ldr	r2, [pc, #176]	; (24008528 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
24008476:	4293      	cmp	r3, r2
24008478:	d02c      	beq.n	240084d4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
2400847a:	68fb      	ldr	r3, [r7, #12]
2400847c:	681b      	ldr	r3, [r3, #0]
2400847e:	4a2b      	ldr	r2, [pc, #172]	; (2400852c <HAL_DMAEx_MultiBufferStart_IT+0x678>)
24008480:	4293      	cmp	r3, r2
24008482:	d027      	beq.n	240084d4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
24008484:	68fb      	ldr	r3, [r7, #12]
24008486:	681b      	ldr	r3, [r3, #0]
24008488:	4a29      	ldr	r2, [pc, #164]	; (24008530 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
2400848a:	4293      	cmp	r3, r2
2400848c:	d022      	beq.n	240084d4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
2400848e:	68fb      	ldr	r3, [r7, #12]
24008490:	681b      	ldr	r3, [r3, #0]
24008492:	4a28      	ldr	r2, [pc, #160]	; (24008534 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
24008494:	4293      	cmp	r3, r2
24008496:	d01d      	beq.n	240084d4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
24008498:	68fb      	ldr	r3, [r7, #12]
2400849a:	681b      	ldr	r3, [r3, #0]
2400849c:	4a26      	ldr	r2, [pc, #152]	; (24008538 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
2400849e:	4293      	cmp	r3, r2
240084a0:	d018      	beq.n	240084d4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
240084a2:	68fb      	ldr	r3, [r7, #12]
240084a4:	681b      	ldr	r3, [r3, #0]
240084a6:	4a25      	ldr	r2, [pc, #148]	; (2400853c <HAL_DMAEx_MultiBufferStart_IT+0x688>)
240084a8:	4293      	cmp	r3, r2
240084aa:	d013      	beq.n	240084d4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
240084ac:	68fb      	ldr	r3, [r7, #12]
240084ae:	681b      	ldr	r3, [r3, #0]
240084b0:	4a23      	ldr	r2, [pc, #140]	; (24008540 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
240084b2:	4293      	cmp	r3, r2
240084b4:	d00e      	beq.n	240084d4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
240084b6:	68fb      	ldr	r3, [r7, #12]
240084b8:	681b      	ldr	r3, [r3, #0]
240084ba:	4a22      	ldr	r2, [pc, #136]	; (24008544 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
240084bc:	4293      	cmp	r3, r2
240084be:	d009      	beq.n	240084d4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
240084c0:	68fb      	ldr	r3, [r7, #12]
240084c2:	681b      	ldr	r3, [r3, #0]
240084c4:	4a20      	ldr	r2, [pc, #128]	; (24008548 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
240084c6:	4293      	cmp	r3, r2
240084c8:	d004      	beq.n	240084d4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
240084ca:	68fb      	ldr	r3, [r7, #12]
240084cc:	681b      	ldr	r3, [r3, #0]
240084ce:	4a1f      	ldr	r2, [pc, #124]	; (2400854c <HAL_DMAEx_MultiBufferStart_IT+0x698>)
240084d0:	4293      	cmp	r3, r2
240084d2:	d108      	bne.n	240084e6 <HAL_DMAEx_MultiBufferStart_IT+0x632>
240084d4:	68fb      	ldr	r3, [r7, #12]
240084d6:	681b      	ldr	r3, [r3, #0]
240084d8:	681a      	ldr	r2, [r3, #0]
240084da:	68fb      	ldr	r3, [r7, #12]
240084dc:	681b      	ldr	r3, [r3, #0]
240084de:	f042 0201 	orr.w	r2, r2, #1
240084e2:	601a      	str	r2, [r3, #0]
240084e4:	e00e      	b.n	24008504 <HAL_DMAEx_MultiBufferStart_IT+0x650>
240084e6:	68fb      	ldr	r3, [r7, #12]
240084e8:	681b      	ldr	r3, [r3, #0]
240084ea:	681a      	ldr	r2, [r3, #0]
240084ec:	68fb      	ldr	r3, [r7, #12]
240084ee:	681b      	ldr	r3, [r3, #0]
240084f0:	f042 0201 	orr.w	r2, r2, #1
240084f4:	601a      	str	r2, [r3, #0]
240084f6:	e005      	b.n	24008504 <HAL_DMAEx_MultiBufferStart_IT+0x650>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
240084f8:	68fb      	ldr	r3, [r7, #12]
240084fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
240084fe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
24008500:	2301      	movs	r3, #1
24008502:	75fb      	strb	r3, [r7, #23]
  }
  return status;
24008504:	7dfb      	ldrb	r3, [r7, #23]
}
24008506:	4618      	mov	r0, r3
24008508:	3718      	adds	r7, #24
2400850a:	46bd      	mov	sp, r7
2400850c:	bd80      	pop	{r7, pc}
2400850e:	bf00      	nop
24008510:	40020010 	.word	0x40020010
24008514:	40020028 	.word	0x40020028
24008518:	40020040 	.word	0x40020040
2400851c:	40020058 	.word	0x40020058
24008520:	40020070 	.word	0x40020070
24008524:	40020088 	.word	0x40020088
24008528:	400200a0 	.word	0x400200a0
2400852c:	400200b8 	.word	0x400200b8
24008530:	40020410 	.word	0x40020410
24008534:	40020428 	.word	0x40020428
24008538:	40020440 	.word	0x40020440
2400853c:	40020458 	.word	0x40020458
24008540:	40020470 	.word	0x40020470
24008544:	40020488 	.word	0x40020488
24008548:	400204a0 	.word	0x400204a0
2400854c:	400204b8 	.word	0x400204b8
24008550:	58025408 	.word	0x58025408
24008554:	5802541c 	.word	0x5802541c
24008558:	58025430 	.word	0x58025430
2400855c:	58025444 	.word	0x58025444
24008560:	58025458 	.word	0x58025458
24008564:	5802546c 	.word	0x5802546c
24008568:	58025480 	.word	0x58025480
2400856c:	58025494 	.word	0x58025494

24008570 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
24008570:	b480      	push	{r7}
24008572:	b085      	sub	sp, #20
24008574:	af00      	add	r7, sp, #0
24008576:	60f8      	str	r0, [r7, #12]
24008578:	60b9      	str	r1, [r7, #8]
2400857a:	4613      	mov	r3, r2
2400857c:	71fb      	strb	r3, [r7, #7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
2400857e:	68fb      	ldr	r3, [r7, #12]
24008580:	681b      	ldr	r3, [r3, #0]
24008582:	4a39      	ldr	r2, [pc, #228]	; (24008668 <HAL_DMAEx_ChangeMemory+0xf8>)
24008584:	4293      	cmp	r3, r2
24008586:	d04a      	beq.n	2400861e <HAL_DMAEx_ChangeMemory+0xae>
24008588:	68fb      	ldr	r3, [r7, #12]
2400858a:	681b      	ldr	r3, [r3, #0]
2400858c:	4a37      	ldr	r2, [pc, #220]	; (2400866c <HAL_DMAEx_ChangeMemory+0xfc>)
2400858e:	4293      	cmp	r3, r2
24008590:	d045      	beq.n	2400861e <HAL_DMAEx_ChangeMemory+0xae>
24008592:	68fb      	ldr	r3, [r7, #12]
24008594:	681b      	ldr	r3, [r3, #0]
24008596:	4a36      	ldr	r2, [pc, #216]	; (24008670 <HAL_DMAEx_ChangeMemory+0x100>)
24008598:	4293      	cmp	r3, r2
2400859a:	d040      	beq.n	2400861e <HAL_DMAEx_ChangeMemory+0xae>
2400859c:	68fb      	ldr	r3, [r7, #12]
2400859e:	681b      	ldr	r3, [r3, #0]
240085a0:	4a34      	ldr	r2, [pc, #208]	; (24008674 <HAL_DMAEx_ChangeMemory+0x104>)
240085a2:	4293      	cmp	r3, r2
240085a4:	d03b      	beq.n	2400861e <HAL_DMAEx_ChangeMemory+0xae>
240085a6:	68fb      	ldr	r3, [r7, #12]
240085a8:	681b      	ldr	r3, [r3, #0]
240085aa:	4a33      	ldr	r2, [pc, #204]	; (24008678 <HAL_DMAEx_ChangeMemory+0x108>)
240085ac:	4293      	cmp	r3, r2
240085ae:	d036      	beq.n	2400861e <HAL_DMAEx_ChangeMemory+0xae>
240085b0:	68fb      	ldr	r3, [r7, #12]
240085b2:	681b      	ldr	r3, [r3, #0]
240085b4:	4a31      	ldr	r2, [pc, #196]	; (2400867c <HAL_DMAEx_ChangeMemory+0x10c>)
240085b6:	4293      	cmp	r3, r2
240085b8:	d031      	beq.n	2400861e <HAL_DMAEx_ChangeMemory+0xae>
240085ba:	68fb      	ldr	r3, [r7, #12]
240085bc:	681b      	ldr	r3, [r3, #0]
240085be:	4a30      	ldr	r2, [pc, #192]	; (24008680 <HAL_DMAEx_ChangeMemory+0x110>)
240085c0:	4293      	cmp	r3, r2
240085c2:	d02c      	beq.n	2400861e <HAL_DMAEx_ChangeMemory+0xae>
240085c4:	68fb      	ldr	r3, [r7, #12]
240085c6:	681b      	ldr	r3, [r3, #0]
240085c8:	4a2e      	ldr	r2, [pc, #184]	; (24008684 <HAL_DMAEx_ChangeMemory+0x114>)
240085ca:	4293      	cmp	r3, r2
240085cc:	d027      	beq.n	2400861e <HAL_DMAEx_ChangeMemory+0xae>
240085ce:	68fb      	ldr	r3, [r7, #12]
240085d0:	681b      	ldr	r3, [r3, #0]
240085d2:	4a2d      	ldr	r2, [pc, #180]	; (24008688 <HAL_DMAEx_ChangeMemory+0x118>)
240085d4:	4293      	cmp	r3, r2
240085d6:	d022      	beq.n	2400861e <HAL_DMAEx_ChangeMemory+0xae>
240085d8:	68fb      	ldr	r3, [r7, #12]
240085da:	681b      	ldr	r3, [r3, #0]
240085dc:	4a2b      	ldr	r2, [pc, #172]	; (2400868c <HAL_DMAEx_ChangeMemory+0x11c>)
240085de:	4293      	cmp	r3, r2
240085e0:	d01d      	beq.n	2400861e <HAL_DMAEx_ChangeMemory+0xae>
240085e2:	68fb      	ldr	r3, [r7, #12]
240085e4:	681b      	ldr	r3, [r3, #0]
240085e6:	4a2a      	ldr	r2, [pc, #168]	; (24008690 <HAL_DMAEx_ChangeMemory+0x120>)
240085e8:	4293      	cmp	r3, r2
240085ea:	d018      	beq.n	2400861e <HAL_DMAEx_ChangeMemory+0xae>
240085ec:	68fb      	ldr	r3, [r7, #12]
240085ee:	681b      	ldr	r3, [r3, #0]
240085f0:	4a28      	ldr	r2, [pc, #160]	; (24008694 <HAL_DMAEx_ChangeMemory+0x124>)
240085f2:	4293      	cmp	r3, r2
240085f4:	d013      	beq.n	2400861e <HAL_DMAEx_ChangeMemory+0xae>
240085f6:	68fb      	ldr	r3, [r7, #12]
240085f8:	681b      	ldr	r3, [r3, #0]
240085fa:	4a27      	ldr	r2, [pc, #156]	; (24008698 <HAL_DMAEx_ChangeMemory+0x128>)
240085fc:	4293      	cmp	r3, r2
240085fe:	d00e      	beq.n	2400861e <HAL_DMAEx_ChangeMemory+0xae>
24008600:	68fb      	ldr	r3, [r7, #12]
24008602:	681b      	ldr	r3, [r3, #0]
24008604:	4a25      	ldr	r2, [pc, #148]	; (2400869c <HAL_DMAEx_ChangeMemory+0x12c>)
24008606:	4293      	cmp	r3, r2
24008608:	d009      	beq.n	2400861e <HAL_DMAEx_ChangeMemory+0xae>
2400860a:	68fb      	ldr	r3, [r7, #12]
2400860c:	681b      	ldr	r3, [r3, #0]
2400860e:	4a24      	ldr	r2, [pc, #144]	; (240086a0 <HAL_DMAEx_ChangeMemory+0x130>)
24008610:	4293      	cmp	r3, r2
24008612:	d004      	beq.n	2400861e <HAL_DMAEx_ChangeMemory+0xae>
24008614:	68fb      	ldr	r3, [r7, #12]
24008616:	681b      	ldr	r3, [r3, #0]
24008618:	4a22      	ldr	r2, [pc, #136]	; (240086a4 <HAL_DMAEx_ChangeMemory+0x134>)
2400861a:	4293      	cmp	r3, r2
2400861c:	d101      	bne.n	24008622 <HAL_DMAEx_ChangeMemory+0xb2>
2400861e:	2301      	movs	r3, #1
24008620:	e000      	b.n	24008624 <HAL_DMAEx_ChangeMemory+0xb4>
24008622:	2300      	movs	r3, #0
24008624:	2b00      	cmp	r3, #0
24008626:	d00c      	beq.n	24008642 <HAL_DMAEx_ChangeMemory+0xd2>
  {
    if(memory == MEMORY0)
24008628:	79fb      	ldrb	r3, [r7, #7]
2400862a:	2b00      	cmp	r3, #0
2400862c:	d104      	bne.n	24008638 <HAL_DMAEx_ChangeMemory+0xc8>
    {
      /* change the memory0 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = Address;
2400862e:	68fb      	ldr	r3, [r7, #12]
24008630:	681b      	ldr	r3, [r3, #0]
24008632:	68ba      	ldr	r2, [r7, #8]
24008634:	60da      	str	r2, [r3, #12]
24008636:	e010      	b.n	2400865a <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = Address;
24008638:	68fb      	ldr	r3, [r7, #12]
2400863a:	681b      	ldr	r3, [r3, #0]
2400863c:	68ba      	ldr	r2, [r7, #8]
2400863e:	611a      	str	r2, [r3, #16]
24008640:	e00b      	b.n	2400865a <HAL_DMAEx_ChangeMemory+0xea>
    }
  }
  else /* BDMA instance(s) */
  {
    if(memory == MEMORY0)
24008642:	79fb      	ldrb	r3, [r7, #7]
24008644:	2b00      	cmp	r3, #0
24008646:	d104      	bne.n	24008652 <HAL_DMAEx_ChangeMemory+0xe2>
    {
      /* change the memory0 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = Address;
24008648:	68fb      	ldr	r3, [r7, #12]
2400864a:	681b      	ldr	r3, [r3, #0]
2400864c:	68ba      	ldr	r2, [r7, #8]
2400864e:	60da      	str	r2, [r3, #12]
24008650:	e003      	b.n	2400865a <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = Address;
24008652:	68fb      	ldr	r3, [r7, #12]
24008654:	681b      	ldr	r3, [r3, #0]
24008656:	68ba      	ldr	r2, [r7, #8]
24008658:	611a      	str	r2, [r3, #16]
    }
  }

  return HAL_OK;
2400865a:	2300      	movs	r3, #0
}
2400865c:	4618      	mov	r0, r3
2400865e:	3714      	adds	r7, #20
24008660:	46bd      	mov	sp, r7
24008662:	f85d 7b04 	ldr.w	r7, [sp], #4
24008666:	4770      	bx	lr
24008668:	40020010 	.word	0x40020010
2400866c:	40020028 	.word	0x40020028
24008670:	40020040 	.word	0x40020040
24008674:	40020058 	.word	0x40020058
24008678:	40020070 	.word	0x40020070
2400867c:	40020088 	.word	0x40020088
24008680:	400200a0 	.word	0x400200a0
24008684:	400200b8 	.word	0x400200b8
24008688:	40020410 	.word	0x40020410
2400868c:	40020428 	.word	0x40020428
24008690:	40020440 	.word	0x40020440
24008694:	40020458 	.word	0x40020458
24008698:	40020470 	.word	0x40020470
2400869c:	40020488 	.word	0x40020488
240086a0:	400204a0 	.word	0x400204a0
240086a4:	400204b8 	.word	0x400204b8

240086a8 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA Stream.
  * @param  pSyncConfig : pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
240086a8:	b480      	push	{r7}
240086aa:	b085      	sub	sp, #20
240086ac:	af00      	add	r7, sp, #0
240086ae:	6078      	str	r0, [r7, #4]
240086b0:	6039      	str	r1, [r7, #0]
  uint32_t syncSignalID = 0;
240086b2:	2300      	movs	r3, #0
240086b4:	60fb      	str	r3, [r7, #12]
  uint32_t syncPolarity = 0;
240086b6:	2300      	movs	r3, #0
240086b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  if(pSyncConfig->SyncEnable == ENABLE)
240086ba:	683b      	ldr	r3, [r7, #0]
240086bc:	7a1b      	ldrb	r3, [r3, #8]
240086be:	2b01      	cmp	r3, #1
240086c0:	d154      	bne.n	2400876c <HAL_DMAEx_ConfigMuxSync+0xc4>
  {
    assert_param(IS_DMAMUX_SYNC_POLARITY(pSyncConfig->SyncPolarity));

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
240086c2:	687b      	ldr	r3, [r7, #4]
240086c4:	681b      	ldr	r3, [r3, #0]
240086c6:	4a4b      	ldr	r2, [pc, #300]	; (240087f4 <HAL_DMAEx_ConfigMuxSync+0x14c>)
240086c8:	4293      	cmp	r3, r2
240086ca:	d049      	beq.n	24008760 <HAL_DMAEx_ConfigMuxSync+0xb8>
240086cc:	687b      	ldr	r3, [r7, #4]
240086ce:	681b      	ldr	r3, [r3, #0]
240086d0:	4a49      	ldr	r2, [pc, #292]	; (240087f8 <HAL_DMAEx_ConfigMuxSync+0x150>)
240086d2:	4293      	cmp	r3, r2
240086d4:	d044      	beq.n	24008760 <HAL_DMAEx_ConfigMuxSync+0xb8>
240086d6:	687b      	ldr	r3, [r7, #4]
240086d8:	681b      	ldr	r3, [r3, #0]
240086da:	4a48      	ldr	r2, [pc, #288]	; (240087fc <HAL_DMAEx_ConfigMuxSync+0x154>)
240086dc:	4293      	cmp	r3, r2
240086de:	d03f      	beq.n	24008760 <HAL_DMAEx_ConfigMuxSync+0xb8>
240086e0:	687b      	ldr	r3, [r7, #4]
240086e2:	681b      	ldr	r3, [r3, #0]
240086e4:	4a46      	ldr	r2, [pc, #280]	; (24008800 <HAL_DMAEx_ConfigMuxSync+0x158>)
240086e6:	4293      	cmp	r3, r2
240086e8:	d03a      	beq.n	24008760 <HAL_DMAEx_ConfigMuxSync+0xb8>
240086ea:	687b      	ldr	r3, [r7, #4]
240086ec:	681b      	ldr	r3, [r3, #0]
240086ee:	4a45      	ldr	r2, [pc, #276]	; (24008804 <HAL_DMAEx_ConfigMuxSync+0x15c>)
240086f0:	4293      	cmp	r3, r2
240086f2:	d035      	beq.n	24008760 <HAL_DMAEx_ConfigMuxSync+0xb8>
240086f4:	687b      	ldr	r3, [r7, #4]
240086f6:	681b      	ldr	r3, [r3, #0]
240086f8:	4a43      	ldr	r2, [pc, #268]	; (24008808 <HAL_DMAEx_ConfigMuxSync+0x160>)
240086fa:	4293      	cmp	r3, r2
240086fc:	d030      	beq.n	24008760 <HAL_DMAEx_ConfigMuxSync+0xb8>
240086fe:	687b      	ldr	r3, [r7, #4]
24008700:	681b      	ldr	r3, [r3, #0]
24008702:	4a42      	ldr	r2, [pc, #264]	; (2400880c <HAL_DMAEx_ConfigMuxSync+0x164>)
24008704:	4293      	cmp	r3, r2
24008706:	d02b      	beq.n	24008760 <HAL_DMAEx_ConfigMuxSync+0xb8>
24008708:	687b      	ldr	r3, [r7, #4]
2400870a:	681b      	ldr	r3, [r3, #0]
2400870c:	4a40      	ldr	r2, [pc, #256]	; (24008810 <HAL_DMAEx_ConfigMuxSync+0x168>)
2400870e:	4293      	cmp	r3, r2
24008710:	d026      	beq.n	24008760 <HAL_DMAEx_ConfigMuxSync+0xb8>
24008712:	687b      	ldr	r3, [r7, #4]
24008714:	681b      	ldr	r3, [r3, #0]
24008716:	4a3f      	ldr	r2, [pc, #252]	; (24008814 <HAL_DMAEx_ConfigMuxSync+0x16c>)
24008718:	4293      	cmp	r3, r2
2400871a:	d021      	beq.n	24008760 <HAL_DMAEx_ConfigMuxSync+0xb8>
2400871c:	687b      	ldr	r3, [r7, #4]
2400871e:	681b      	ldr	r3, [r3, #0]
24008720:	4a3d      	ldr	r2, [pc, #244]	; (24008818 <HAL_DMAEx_ConfigMuxSync+0x170>)
24008722:	4293      	cmp	r3, r2
24008724:	d01c      	beq.n	24008760 <HAL_DMAEx_ConfigMuxSync+0xb8>
24008726:	687b      	ldr	r3, [r7, #4]
24008728:	681b      	ldr	r3, [r3, #0]
2400872a:	4a3c      	ldr	r2, [pc, #240]	; (2400881c <HAL_DMAEx_ConfigMuxSync+0x174>)
2400872c:	4293      	cmp	r3, r2
2400872e:	d017      	beq.n	24008760 <HAL_DMAEx_ConfigMuxSync+0xb8>
24008730:	687b      	ldr	r3, [r7, #4]
24008732:	681b      	ldr	r3, [r3, #0]
24008734:	4a3a      	ldr	r2, [pc, #232]	; (24008820 <HAL_DMAEx_ConfigMuxSync+0x178>)
24008736:	4293      	cmp	r3, r2
24008738:	d012      	beq.n	24008760 <HAL_DMAEx_ConfigMuxSync+0xb8>
2400873a:	687b      	ldr	r3, [r7, #4]
2400873c:	681b      	ldr	r3, [r3, #0]
2400873e:	4a39      	ldr	r2, [pc, #228]	; (24008824 <HAL_DMAEx_ConfigMuxSync+0x17c>)
24008740:	4293      	cmp	r3, r2
24008742:	d00d      	beq.n	24008760 <HAL_DMAEx_ConfigMuxSync+0xb8>
24008744:	687b      	ldr	r3, [r7, #4]
24008746:	681b      	ldr	r3, [r3, #0]
24008748:	4a37      	ldr	r2, [pc, #220]	; (24008828 <HAL_DMAEx_ConfigMuxSync+0x180>)
2400874a:	4293      	cmp	r3, r2
2400874c:	d008      	beq.n	24008760 <HAL_DMAEx_ConfigMuxSync+0xb8>
2400874e:	687b      	ldr	r3, [r7, #4]
24008750:	681b      	ldr	r3, [r3, #0]
24008752:	4a36      	ldr	r2, [pc, #216]	; (2400882c <HAL_DMAEx_ConfigMuxSync+0x184>)
24008754:	4293      	cmp	r3, r2
24008756:	d003      	beq.n	24008760 <HAL_DMAEx_ConfigMuxSync+0xb8>
24008758:	687b      	ldr	r3, [r7, #4]
2400875a:	681b      	ldr	r3, [r3, #0]
2400875c:	4a34      	ldr	r2, [pc, #208]	; (24008830 <HAL_DMAEx_ConfigMuxSync+0x188>)
2400875e:	4293      	cmp	r3, r2
    }
    else
    {
      assert_param(IS_BDMA_DMAMUX_SYNC_SIGNAL_ID(pSyncConfig->SyncSignalID));
    }
    syncSignalID = pSyncConfig->SyncSignalID;
24008760:	683b      	ldr	r3, [r7, #0]
24008762:	681b      	ldr	r3, [r3, #0]
24008764:	60fb      	str	r3, [r7, #12]
    syncPolarity = pSyncConfig->SyncPolarity;
24008766:	683b      	ldr	r3, [r7, #0]
24008768:	685b      	ldr	r3, [r3, #4]
2400876a:	60bb      	str	r3, [r7, #8]
  }

  /*Check if the DMA state is ready */
  if(hdma->State == HAL_DMA_STATE_READY)
2400876c:	687b      	ldr	r3, [r7, #4]
2400876e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
24008772:	b2db      	uxtb	r3, r3
24008774:	2b01      	cmp	r3, #1
24008776:	d131      	bne.n	240087dc <HAL_DMAEx_ConfigMuxSync+0x134>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
24008778:	687b      	ldr	r3, [r7, #4]
2400877a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
2400877e:	2b01      	cmp	r3, #1
24008780:	d101      	bne.n	24008786 <HAL_DMAEx_ConfigMuxSync+0xde>
24008782:	2302      	movs	r3, #2
24008784:	e02f      	b.n	240087e6 <HAL_DMAEx_ConfigMuxSync+0x13e>
24008786:	687b      	ldr	r3, [r7, #4]
24008788:	2201      	movs	r2, #1
2400878a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the synchronization and event generation before applying a new config */
    CLEAR_BIT(hdma->DMAmuxChannel->CCR,(DMAMUX_CxCR_SE | DMAMUX_CxCR_EGE));
2400878e:	687b      	ldr	r3, [r7, #4]
24008790:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24008792:	681a      	ldr	r2, [r3, #0]
24008794:	687b      	ldr	r3, [r7, #4]
24008796:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24008798:	f422 3281 	bic.w	r2, r2, #66048	; 0x10200
2400879c:	601a      	str	r2, [r3, #0]

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG( hdma->DMAmuxChannel->CCR, \
2400879e:	687b      	ldr	r3, [r7, #4]
240087a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
240087a2:	681b      	ldr	r3, [r3, #0]
240087a4:	b2d9      	uxtb	r1, r3
240087a6:	68fb      	ldr	r3, [r7, #12]
240087a8:	061a      	lsls	r2, r3, #24
240087aa:	683b      	ldr	r3, [r7, #0]
240087ac:	68db      	ldr	r3, [r3, #12]
240087ae:	3b01      	subs	r3, #1
240087b0:	04db      	lsls	r3, r3, #19
240087b2:	431a      	orrs	r2, r3
240087b4:	68bb      	ldr	r3, [r7, #8]
240087b6:	431a      	orrs	r2, r3
240087b8:	683b      	ldr	r3, [r7, #0]
240087ba:	7a1b      	ldrb	r3, [r3, #8]
240087bc:	041b      	lsls	r3, r3, #16
240087be:	431a      	orrs	r2, r3
240087c0:	683b      	ldr	r3, [r7, #0]
240087c2:	7a5b      	ldrb	r3, [r3, #9]
240087c4:	025b      	lsls	r3, r3, #9
240087c6:	431a      	orrs	r2, r3
240087c8:	687b      	ldr	r3, [r7, #4]
240087ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
240087cc:	430a      	orrs	r2, r1
240087ce:	601a      	str	r2, [r3, #0]
               ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
               syncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)    | \
               ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos));

      /* Process Locked */
    __HAL_UNLOCK(hdma);
240087d0:	687b      	ldr	r3, [r7, #4]
240087d2:	2200      	movs	r2, #0
240087d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
240087d8:	2300      	movs	r3, #0
240087da:	e004      	b.n	240087e6 <HAL_DMAEx_ConfigMuxSync+0x13e>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
240087dc:	687b      	ldr	r3, [r7, #4]
240087de:	f44f 6200 	mov.w	r2, #2048	; 0x800
240087e2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    return HAL_ERROR;
240087e4:	2301      	movs	r3, #1
  }
}
240087e6:	4618      	mov	r0, r3
240087e8:	3714      	adds	r7, #20
240087ea:	46bd      	mov	sp, r7
240087ec:	f85d 7b04 	ldr.w	r7, [sp], #4
240087f0:	4770      	bx	lr
240087f2:	bf00      	nop
240087f4:	40020010 	.word	0x40020010
240087f8:	40020028 	.word	0x40020028
240087fc:	40020040 	.word	0x40020040
24008800:	40020058 	.word	0x40020058
24008804:	40020070 	.word	0x40020070
24008808:	40020088 	.word	0x40020088
2400880c:	400200a0 	.word	0x400200a0
24008810:	400200b8 	.word	0x400200b8
24008814:	40020410 	.word	0x40020410
24008818:	40020428 	.word	0x40020428
2400881c:	40020440 	.word	0x40020440
24008820:	40020458 	.word	0x40020458
24008824:	40020470 	.word	0x40020470
24008828:	40020488 	.word	0x40020488
2400882c:	400204a0 	.word	0x400204a0
24008830:	400204b8 	.word	0x400204b8

24008834 <HAL_DMAEx_ConfigMuxRequestGenerator>:
  *         contains the request generator parameters.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxRequestGenerator (DMA_HandleTypeDef *hdma, HAL_DMA_MuxRequestGeneratorConfigTypeDef *pRequestGeneratorConfig)
{
24008834:	b480      	push	{r7}
24008836:	b085      	sub	sp, #20
24008838:	af00      	add	r7, sp, #0
2400883a:	6078      	str	r0, [r7, #4]
2400883c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  HAL_DMA_StateTypeDef temp_state = hdma->State;
2400883e:	687b      	ldr	r3, [r7, #4]
24008840:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
24008844:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24008846:	687b      	ldr	r3, [r7, #4]
24008848:	681b      	ldr	r3, [r3, #0]
2400884a:	4a46      	ldr	r2, [pc, #280]	; (24008964 <HAL_DMAEx_ConfigMuxRequestGenerator+0x130>)
2400884c:	4293      	cmp	r3, r2
2400884e:	d049      	beq.n	240088e4 <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
24008850:	687b      	ldr	r3, [r7, #4]
24008852:	681b      	ldr	r3, [r3, #0]
24008854:	4a44      	ldr	r2, [pc, #272]	; (24008968 <HAL_DMAEx_ConfigMuxRequestGenerator+0x134>)
24008856:	4293      	cmp	r3, r2
24008858:	d044      	beq.n	240088e4 <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
2400885a:	687b      	ldr	r3, [r7, #4]
2400885c:	681b      	ldr	r3, [r3, #0]
2400885e:	4a43      	ldr	r2, [pc, #268]	; (2400896c <HAL_DMAEx_ConfigMuxRequestGenerator+0x138>)
24008860:	4293      	cmp	r3, r2
24008862:	d03f      	beq.n	240088e4 <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
24008864:	687b      	ldr	r3, [r7, #4]
24008866:	681b      	ldr	r3, [r3, #0]
24008868:	4a41      	ldr	r2, [pc, #260]	; (24008970 <HAL_DMAEx_ConfigMuxRequestGenerator+0x13c>)
2400886a:	4293      	cmp	r3, r2
2400886c:	d03a      	beq.n	240088e4 <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
2400886e:	687b      	ldr	r3, [r7, #4]
24008870:	681b      	ldr	r3, [r3, #0]
24008872:	4a40      	ldr	r2, [pc, #256]	; (24008974 <HAL_DMAEx_ConfigMuxRequestGenerator+0x140>)
24008874:	4293      	cmp	r3, r2
24008876:	d035      	beq.n	240088e4 <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
24008878:	687b      	ldr	r3, [r7, #4]
2400887a:	681b      	ldr	r3, [r3, #0]
2400887c:	4a3e      	ldr	r2, [pc, #248]	; (24008978 <HAL_DMAEx_ConfigMuxRequestGenerator+0x144>)
2400887e:	4293      	cmp	r3, r2
24008880:	d030      	beq.n	240088e4 <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
24008882:	687b      	ldr	r3, [r7, #4]
24008884:	681b      	ldr	r3, [r3, #0]
24008886:	4a3d      	ldr	r2, [pc, #244]	; (2400897c <HAL_DMAEx_ConfigMuxRequestGenerator+0x148>)
24008888:	4293      	cmp	r3, r2
2400888a:	d02b      	beq.n	240088e4 <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
2400888c:	687b      	ldr	r3, [r7, #4]
2400888e:	681b      	ldr	r3, [r3, #0]
24008890:	4a3b      	ldr	r2, [pc, #236]	; (24008980 <HAL_DMAEx_ConfigMuxRequestGenerator+0x14c>)
24008892:	4293      	cmp	r3, r2
24008894:	d026      	beq.n	240088e4 <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
24008896:	687b      	ldr	r3, [r7, #4]
24008898:	681b      	ldr	r3, [r3, #0]
2400889a:	4a3a      	ldr	r2, [pc, #232]	; (24008984 <HAL_DMAEx_ConfigMuxRequestGenerator+0x150>)
2400889c:	4293      	cmp	r3, r2
2400889e:	d021      	beq.n	240088e4 <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
240088a0:	687b      	ldr	r3, [r7, #4]
240088a2:	681b      	ldr	r3, [r3, #0]
240088a4:	4a38      	ldr	r2, [pc, #224]	; (24008988 <HAL_DMAEx_ConfigMuxRequestGenerator+0x154>)
240088a6:	4293      	cmp	r3, r2
240088a8:	d01c      	beq.n	240088e4 <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
240088aa:	687b      	ldr	r3, [r7, #4]
240088ac:	681b      	ldr	r3, [r3, #0]
240088ae:	4a37      	ldr	r2, [pc, #220]	; (2400898c <HAL_DMAEx_ConfigMuxRequestGenerator+0x158>)
240088b0:	4293      	cmp	r3, r2
240088b2:	d017      	beq.n	240088e4 <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
240088b4:	687b      	ldr	r3, [r7, #4]
240088b6:	681b      	ldr	r3, [r3, #0]
240088b8:	4a35      	ldr	r2, [pc, #212]	; (24008990 <HAL_DMAEx_ConfigMuxRequestGenerator+0x15c>)
240088ba:	4293      	cmp	r3, r2
240088bc:	d012      	beq.n	240088e4 <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
240088be:	687b      	ldr	r3, [r7, #4]
240088c0:	681b      	ldr	r3, [r3, #0]
240088c2:	4a34      	ldr	r2, [pc, #208]	; (24008994 <HAL_DMAEx_ConfigMuxRequestGenerator+0x160>)
240088c4:	4293      	cmp	r3, r2
240088c6:	d00d      	beq.n	240088e4 <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
240088c8:	687b      	ldr	r3, [r7, #4]
240088ca:	681b      	ldr	r3, [r3, #0]
240088cc:	4a32      	ldr	r2, [pc, #200]	; (24008998 <HAL_DMAEx_ConfigMuxRequestGenerator+0x164>)
240088ce:	4293      	cmp	r3, r2
240088d0:	d008      	beq.n	240088e4 <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
240088d2:	687b      	ldr	r3, [r7, #4]
240088d4:	681b      	ldr	r3, [r3, #0]
240088d6:	4a31      	ldr	r2, [pc, #196]	; (2400899c <HAL_DMAEx_ConfigMuxRequestGenerator+0x168>)
240088d8:	4293      	cmp	r3, r2
240088da:	d003      	beq.n	240088e4 <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
240088dc:	687b      	ldr	r3, [r7, #4]
240088de:	681b      	ldr	r3, [r3, #0]
240088e0:	4a2f      	ldr	r2, [pc, #188]	; (240089a0 <HAL_DMAEx_ConfigMuxRequestGenerator+0x16c>)
240088e2:	4293      	cmp	r3, r2
  assert_param(IS_DMAMUX_REQUEST_GEN_REQUEST_NUMBER(pRequestGeneratorConfig->RequestNumber));

  /* check if the DMA state is ready
     and DMA is using a DMAMUX request generator block
  */
  if(hdma->DMAmuxRequestGen == 0U)
240088e4:	687b      	ldr	r3, [r7, #4]
240088e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
240088e8:	2b00      	cmp	r3, #0
240088ea:	d105      	bne.n	240088f8 <HAL_DMAEx_ConfigMuxRequestGenerator+0xc4>
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
240088ec:	687b      	ldr	r3, [r7, #4]
240088ee:	2240      	movs	r2, #64	; 0x40
240088f0:	655a      	str	r2, [r3, #84]	; 0x54

    /* error status */
    status = HAL_ERROR;
240088f2:	2301      	movs	r3, #1
240088f4:	73fb      	strb	r3, [r7, #15]
240088f6:	e02e      	b.n	24008956 <HAL_DMAEx_ConfigMuxRequestGenerator+0x122>
  }
  else if(((hdma->DMAmuxRequestGen->RGCR & DMAMUX_RGxCR_GE) == 0U) && (temp_state == HAL_DMA_STATE_READY))
240088f8:	687b      	ldr	r3, [r7, #4]
240088fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
240088fc:	681b      	ldr	r3, [r3, #0]
240088fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
24008902:	2b00      	cmp	r3, #0
24008904:	d121      	bne.n	2400894a <HAL_DMAEx_ConfigMuxRequestGenerator+0x116>
24008906:	7bbb      	ldrb	r3, [r7, #14]
24008908:	2b01      	cmp	r3, #1
2400890a:	d11e      	bne.n	2400894a <HAL_DMAEx_ConfigMuxRequestGenerator+0x116>
  {
    /* RequestGenerator must be disable prior to the configuration i.e GE bit is 0 */

    /* Process Locked */
    __HAL_LOCK(hdma);
2400890c:	687b      	ldr	r3, [r7, #4]
2400890e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
24008912:	2b01      	cmp	r3, #1
24008914:	d101      	bne.n	2400891a <HAL_DMAEx_ConfigMuxRequestGenerator+0xe6>
24008916:	2302      	movs	r3, #2
24008918:	e01e      	b.n	24008958 <HAL_DMAEx_ConfigMuxRequestGenerator+0x124>
2400891a:	687b      	ldr	r3, [r7, #4]
2400891c:	2201      	movs	r2, #1
2400891e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the request generator new parameters */
    hdma->DMAmuxRequestGen->RGCR = pRequestGeneratorConfig->SignalID | \
24008922:	683b      	ldr	r3, [r7, #0]
24008924:	681a      	ldr	r2, [r3, #0]
                                  ((pRequestGeneratorConfig->RequestNumber - 1U) << DMAMUX_RGxCR_GNBREQ_Pos)| \
24008926:	683b      	ldr	r3, [r7, #0]
24008928:	689b      	ldr	r3, [r3, #8]
2400892a:	3b01      	subs	r3, #1
2400892c:	04db      	lsls	r3, r3, #19
    hdma->DMAmuxRequestGen->RGCR = pRequestGeneratorConfig->SignalID | \
2400892e:	ea42 0103 	orr.w	r1, r2, r3
                                  pRequestGeneratorConfig->Polarity;
24008932:	683b      	ldr	r3, [r7, #0]
24008934:	685a      	ldr	r2, [r3, #4]
    hdma->DMAmuxRequestGen->RGCR = pRequestGeneratorConfig->SignalID | \
24008936:	687b      	ldr	r3, [r7, #4]
24008938:	6edb      	ldr	r3, [r3, #108]	; 0x6c
                                  ((pRequestGeneratorConfig->RequestNumber - 1U) << DMAMUX_RGxCR_GNBREQ_Pos)| \
2400893a:	430a      	orrs	r2, r1
    hdma->DMAmuxRequestGen->RGCR = pRequestGeneratorConfig->SignalID | \
2400893c:	601a      	str	r2, [r3, #0]
    /* Process Locked */
    __HAL_UNLOCK(hdma);
2400893e:	687b      	ldr	r3, [r7, #4]
24008940:	2200      	movs	r2, #0
24008942:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
24008946:	2300      	movs	r3, #0
24008948:	e006      	b.n	24008958 <HAL_DMAEx_ConfigMuxRequestGenerator+0x124>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
2400894a:	687b      	ldr	r3, [r7, #4]
2400894c:	f44f 6200 	mov.w	r2, #2048	; 0x800
24008950:	655a      	str	r2, [r3, #84]	; 0x54

    /* error status */
    status = HAL_ERROR;
24008952:	2301      	movs	r3, #1
24008954:	73fb      	strb	r3, [r7, #15]
  }

  return status;
24008956:	7bfb      	ldrb	r3, [r7, #15]
}
24008958:	4618      	mov	r0, r3
2400895a:	3714      	adds	r7, #20
2400895c:	46bd      	mov	sp, r7
2400895e:	f85d 7b04 	ldr.w	r7, [sp], #4
24008962:	4770      	bx	lr
24008964:	40020010 	.word	0x40020010
24008968:	40020028 	.word	0x40020028
2400896c:	40020040 	.word	0x40020040
24008970:	40020058 	.word	0x40020058
24008974:	40020070 	.word	0x40020070
24008978:	40020088 	.word	0x40020088
2400897c:	400200a0 	.word	0x400200a0
24008980:	400200b8 	.word	0x400200b8
24008984:	40020410 	.word	0x40020410
24008988:	40020428 	.word	0x40020428
2400898c:	40020440 	.word	0x40020440
24008990:	40020458 	.word	0x40020458
24008994:	40020470 	.word	0x40020470
24008998:	40020488 	.word	0x40020488
2400899c:	400204a0 	.word	0x400204a0
240089a0:	400204b8 	.word	0x400204b8

240089a4 <HAL_DMAEx_EnableMuxRequestGenerator>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_EnableMuxRequestGenerator (DMA_HandleTypeDef *hdma)
{
240089a4:	b480      	push	{r7}
240089a6:	b083      	sub	sp, #12
240089a8:	af00      	add	r7, sp, #0
240089aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));

  /* check if the DMA state is ready
     and DMA is using a DMAMUX request generator block */
  if((hdma->State != HAL_DMA_STATE_RESET) && (hdma->DMAmuxRequestGen != 0U))
240089ac:	687b      	ldr	r3, [r7, #4]
240089ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
240089b2:	b2db      	uxtb	r3, r3
240089b4:	2b00      	cmp	r3, #0
240089b6:	d00d      	beq.n	240089d4 <HAL_DMAEx_EnableMuxRequestGenerator+0x30>
240089b8:	687b      	ldr	r3, [r7, #4]
240089ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
240089bc:	2b00      	cmp	r3, #0
240089be:	d009      	beq.n	240089d4 <HAL_DMAEx_EnableMuxRequestGenerator+0x30>
  {
    /* Enable the request generator*/
    hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_GE;
240089c0:	687b      	ldr	r3, [r7, #4]
240089c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
240089c4:	681a      	ldr	r2, [r3, #0]
240089c6:	687b      	ldr	r3, [r7, #4]
240089c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
240089ca:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
240089ce:	601a      	str	r2, [r3, #0]

   return HAL_OK;
240089d0:	2300      	movs	r3, #0
240089d2:	e000      	b.n	240089d6 <HAL_DMAEx_EnableMuxRequestGenerator+0x32>
 }
 else
 {
   return HAL_ERROR;
240089d4:	2301      	movs	r3, #1
 }
}
240089d6:	4618      	mov	r0, r3
240089d8:	370c      	adds	r7, #12
240089da:	46bd      	mov	sp, r7
240089dc:	f85d 7b04 	ldr.w	r7, [sp], #4
240089e0:	4770      	bx	lr

240089e2 <HAL_DMAEx_DisableMuxRequestGenerator>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_DisableMuxRequestGenerator (DMA_HandleTypeDef *hdma)
{
240089e2:	b480      	push	{r7}
240089e4:	b083      	sub	sp, #12
240089e6:	af00      	add	r7, sp, #0
240089e8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));

  /* check if the DMA state is ready
     and DMA is using a DMAMUX request generator block */
  if((hdma->State != HAL_DMA_STATE_RESET) && (hdma->DMAmuxRequestGen != 0U))
240089ea:	687b      	ldr	r3, [r7, #4]
240089ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
240089f0:	b2db      	uxtb	r3, r3
240089f2:	2b00      	cmp	r3, #0
240089f4:	d00d      	beq.n	24008a12 <HAL_DMAEx_DisableMuxRequestGenerator+0x30>
240089f6:	687b      	ldr	r3, [r7, #4]
240089f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
240089fa:	2b00      	cmp	r3, #0
240089fc:	d009      	beq.n	24008a12 <HAL_DMAEx_DisableMuxRequestGenerator+0x30>
  {
    /* Disable the request generator*/
    hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_GE;
240089fe:	687b      	ldr	r3, [r7, #4]
24008a00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24008a02:	681a      	ldr	r2, [r3, #0]
24008a04:	687b      	ldr	r3, [r7, #4]
24008a06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24008a08:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
24008a0c:	601a      	str	r2, [r3, #0]

   return HAL_OK;
24008a0e:	2300      	movs	r3, #0
24008a10:	e000      	b.n	24008a14 <HAL_DMAEx_DisableMuxRequestGenerator+0x32>
 }
 else
 {
   return HAL_ERROR;
24008a12:	2301      	movs	r3, #1
 }
}
24008a14:	4618      	mov	r0, r3
24008a16:	370c      	adds	r7, #12
24008a18:	46bd      	mov	sp, r7
24008a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
24008a1e:	4770      	bx	lr

24008a20 <HAL_DMAEx_MUX_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
24008a20:	b580      	push	{r7, lr}
24008a22:	b082      	sub	sp, #8
24008a24:	af00      	add	r7, sp, #0
24008a26:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
24008a28:	687b      	ldr	r3, [r7, #4]
24008a2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
24008a2c:	681a      	ldr	r2, [r3, #0]
24008a2e:	687b      	ldr	r3, [r7, #4]
24008a30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
24008a32:	4013      	ands	r3, r2
24008a34:	2b00      	cmp	r3, #0
24008a36:	d01a      	beq.n	24008a6e <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
24008a38:	687b      	ldr	r3, [r7, #4]
24008a3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24008a3c:	681a      	ldr	r2, [r3, #0]
24008a3e:	687b      	ldr	r3, [r7, #4]
24008a40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24008a42:	f422 7280 	bic.w	r2, r2, #256	; 0x100
24008a46:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
24008a48:	687b      	ldr	r3, [r7, #4]
24008a4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
24008a4c:	687a      	ldr	r2, [r7, #4]
24008a4e:	6e92      	ldr	r2, [r2, #104]	; 0x68
24008a50:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
24008a52:	687b      	ldr	r3, [r7, #4]
24008a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24008a56:	f443 7200 	orr.w	r2, r3, #512	; 0x200
24008a5a:	687b      	ldr	r3, [r7, #4]
24008a5c:	655a      	str	r2, [r3, #84]	; 0x54

    if(hdma->XferErrorCallback != NULL)
24008a5e:	687b      	ldr	r3, [r7, #4]
24008a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24008a62:	2b00      	cmp	r3, #0
24008a64:	d003      	beq.n	24008a6e <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
24008a66:	687b      	ldr	r3, [r7, #4]
24008a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24008a6a:	6878      	ldr	r0, [r7, #4]
24008a6c:	4798      	blx	r3
    }
  }

  if(hdma->DMAmuxRequestGen != 0)
24008a6e:	687b      	ldr	r3, [r7, #4]
24008a70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24008a72:	2b00      	cmp	r3, #0
24008a74:	d022      	beq.n	24008abc <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
   /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
24008a76:	687b      	ldr	r3, [r7, #4]
24008a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24008a7a:	681a      	ldr	r2, [r3, #0]
24008a7c:	687b      	ldr	r3, [r7, #4]
24008a7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
24008a80:	4013      	ands	r3, r2
24008a82:	2b00      	cmp	r3, #0
24008a84:	d01a      	beq.n	24008abc <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
24008a86:	687b      	ldr	r3, [r7, #4]
24008a88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24008a8a:	681a      	ldr	r2, [r3, #0]
24008a8c:	687b      	ldr	r3, [r7, #4]
24008a8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24008a90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
24008a94:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
24008a96:	687b      	ldr	r3, [r7, #4]
24008a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24008a9a:	687a      	ldr	r2, [r7, #4]
24008a9c:	6f52      	ldr	r2, [r2, #116]	; 0x74
24008a9e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
24008aa0:	687b      	ldr	r3, [r7, #4]
24008aa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24008aa4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
24008aa8:	687b      	ldr	r3, [r7, #4]
24008aaa:	655a      	str	r2, [r3, #84]	; 0x54

      if(hdma->XferErrorCallback != NULL)
24008aac:	687b      	ldr	r3, [r7, #4]
24008aae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24008ab0:	2b00      	cmp	r3, #0
24008ab2:	d003      	beq.n	24008abc <HAL_DMAEx_MUX_IRQHandler+0x9c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
24008ab4:	687b      	ldr	r3, [r7, #4]
24008ab6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24008ab8:	6878      	ldr	r0, [r7, #4]
24008aba:	4798      	blx	r3
      }
    }
  }
}
24008abc:	bf00      	nop
24008abe:	3708      	adds	r7, #8
24008ac0:	46bd      	mov	sp, r7
24008ac2:	bd80      	pop	{r7, pc}

24008ac4 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
24008ac4:	b480      	push	{r7}
24008ac6:	b085      	sub	sp, #20
24008ac8:	af00      	add	r7, sp, #0
24008aca:	60f8      	str	r0, [r7, #12]
24008acc:	60b9      	str	r1, [r7, #8]
24008ace:	607a      	str	r2, [r7, #4]
24008ad0:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24008ad2:	68fb      	ldr	r3, [r7, #12]
24008ad4:	681b      	ldr	r3, [r3, #0]
24008ad6:	4a46      	ldr	r2, [pc, #280]	; (24008bf0 <DMA_MultiBufferSetConfig+0x12c>)
24008ad8:	4293      	cmp	r3, r2
24008ada:	d04a      	beq.n	24008b72 <DMA_MultiBufferSetConfig+0xae>
24008adc:	68fb      	ldr	r3, [r7, #12]
24008ade:	681b      	ldr	r3, [r3, #0]
24008ae0:	4a44      	ldr	r2, [pc, #272]	; (24008bf4 <DMA_MultiBufferSetConfig+0x130>)
24008ae2:	4293      	cmp	r3, r2
24008ae4:	d045      	beq.n	24008b72 <DMA_MultiBufferSetConfig+0xae>
24008ae6:	68fb      	ldr	r3, [r7, #12]
24008ae8:	681b      	ldr	r3, [r3, #0]
24008aea:	4a43      	ldr	r2, [pc, #268]	; (24008bf8 <DMA_MultiBufferSetConfig+0x134>)
24008aec:	4293      	cmp	r3, r2
24008aee:	d040      	beq.n	24008b72 <DMA_MultiBufferSetConfig+0xae>
24008af0:	68fb      	ldr	r3, [r7, #12]
24008af2:	681b      	ldr	r3, [r3, #0]
24008af4:	4a41      	ldr	r2, [pc, #260]	; (24008bfc <DMA_MultiBufferSetConfig+0x138>)
24008af6:	4293      	cmp	r3, r2
24008af8:	d03b      	beq.n	24008b72 <DMA_MultiBufferSetConfig+0xae>
24008afa:	68fb      	ldr	r3, [r7, #12]
24008afc:	681b      	ldr	r3, [r3, #0]
24008afe:	4a40      	ldr	r2, [pc, #256]	; (24008c00 <DMA_MultiBufferSetConfig+0x13c>)
24008b00:	4293      	cmp	r3, r2
24008b02:	d036      	beq.n	24008b72 <DMA_MultiBufferSetConfig+0xae>
24008b04:	68fb      	ldr	r3, [r7, #12]
24008b06:	681b      	ldr	r3, [r3, #0]
24008b08:	4a3e      	ldr	r2, [pc, #248]	; (24008c04 <DMA_MultiBufferSetConfig+0x140>)
24008b0a:	4293      	cmp	r3, r2
24008b0c:	d031      	beq.n	24008b72 <DMA_MultiBufferSetConfig+0xae>
24008b0e:	68fb      	ldr	r3, [r7, #12]
24008b10:	681b      	ldr	r3, [r3, #0]
24008b12:	4a3d      	ldr	r2, [pc, #244]	; (24008c08 <DMA_MultiBufferSetConfig+0x144>)
24008b14:	4293      	cmp	r3, r2
24008b16:	d02c      	beq.n	24008b72 <DMA_MultiBufferSetConfig+0xae>
24008b18:	68fb      	ldr	r3, [r7, #12]
24008b1a:	681b      	ldr	r3, [r3, #0]
24008b1c:	4a3b      	ldr	r2, [pc, #236]	; (24008c0c <DMA_MultiBufferSetConfig+0x148>)
24008b1e:	4293      	cmp	r3, r2
24008b20:	d027      	beq.n	24008b72 <DMA_MultiBufferSetConfig+0xae>
24008b22:	68fb      	ldr	r3, [r7, #12]
24008b24:	681b      	ldr	r3, [r3, #0]
24008b26:	4a3a      	ldr	r2, [pc, #232]	; (24008c10 <DMA_MultiBufferSetConfig+0x14c>)
24008b28:	4293      	cmp	r3, r2
24008b2a:	d022      	beq.n	24008b72 <DMA_MultiBufferSetConfig+0xae>
24008b2c:	68fb      	ldr	r3, [r7, #12]
24008b2e:	681b      	ldr	r3, [r3, #0]
24008b30:	4a38      	ldr	r2, [pc, #224]	; (24008c14 <DMA_MultiBufferSetConfig+0x150>)
24008b32:	4293      	cmp	r3, r2
24008b34:	d01d      	beq.n	24008b72 <DMA_MultiBufferSetConfig+0xae>
24008b36:	68fb      	ldr	r3, [r7, #12]
24008b38:	681b      	ldr	r3, [r3, #0]
24008b3a:	4a37      	ldr	r2, [pc, #220]	; (24008c18 <DMA_MultiBufferSetConfig+0x154>)
24008b3c:	4293      	cmp	r3, r2
24008b3e:	d018      	beq.n	24008b72 <DMA_MultiBufferSetConfig+0xae>
24008b40:	68fb      	ldr	r3, [r7, #12]
24008b42:	681b      	ldr	r3, [r3, #0]
24008b44:	4a35      	ldr	r2, [pc, #212]	; (24008c1c <DMA_MultiBufferSetConfig+0x158>)
24008b46:	4293      	cmp	r3, r2
24008b48:	d013      	beq.n	24008b72 <DMA_MultiBufferSetConfig+0xae>
24008b4a:	68fb      	ldr	r3, [r7, #12]
24008b4c:	681b      	ldr	r3, [r3, #0]
24008b4e:	4a34      	ldr	r2, [pc, #208]	; (24008c20 <DMA_MultiBufferSetConfig+0x15c>)
24008b50:	4293      	cmp	r3, r2
24008b52:	d00e      	beq.n	24008b72 <DMA_MultiBufferSetConfig+0xae>
24008b54:	68fb      	ldr	r3, [r7, #12]
24008b56:	681b      	ldr	r3, [r3, #0]
24008b58:	4a32      	ldr	r2, [pc, #200]	; (24008c24 <DMA_MultiBufferSetConfig+0x160>)
24008b5a:	4293      	cmp	r3, r2
24008b5c:	d009      	beq.n	24008b72 <DMA_MultiBufferSetConfig+0xae>
24008b5e:	68fb      	ldr	r3, [r7, #12]
24008b60:	681b      	ldr	r3, [r3, #0]
24008b62:	4a31      	ldr	r2, [pc, #196]	; (24008c28 <DMA_MultiBufferSetConfig+0x164>)
24008b64:	4293      	cmp	r3, r2
24008b66:	d004      	beq.n	24008b72 <DMA_MultiBufferSetConfig+0xae>
24008b68:	68fb      	ldr	r3, [r7, #12]
24008b6a:	681b      	ldr	r3, [r3, #0]
24008b6c:	4a2f      	ldr	r2, [pc, #188]	; (24008c2c <DMA_MultiBufferSetConfig+0x168>)
24008b6e:	4293      	cmp	r3, r2
24008b70:	d101      	bne.n	24008b76 <DMA_MultiBufferSetConfig+0xb2>
24008b72:	2301      	movs	r3, #1
24008b74:	e000      	b.n	24008b78 <DMA_MultiBufferSetConfig+0xb4>
24008b76:	2300      	movs	r3, #0
24008b78:	2b00      	cmp	r3, #0
24008b7a:	d019      	beq.n	24008bb0 <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
24008b7c:	68fb      	ldr	r3, [r7, #12]
24008b7e:	681b      	ldr	r3, [r3, #0]
24008b80:	683a      	ldr	r2, [r7, #0]
24008b82:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
24008b84:	68fb      	ldr	r3, [r7, #12]
24008b86:	689b      	ldr	r3, [r3, #8]
24008b88:	2b40      	cmp	r3, #64	; 0x40
24008b8a:	d108      	bne.n	24008b9e <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
24008b8c:	68fb      	ldr	r3, [r7, #12]
24008b8e:	681b      	ldr	r3, [r3, #0]
24008b90:	687a      	ldr	r2, [r7, #4]
24008b92:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
24008b94:	68fb      	ldr	r3, [r7, #12]
24008b96:	681b      	ldr	r3, [r3, #0]
24008b98:	68ba      	ldr	r2, [r7, #8]
24008b9a:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
24008b9c:	e021      	b.n	24008be2 <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
24008b9e:	68fb      	ldr	r3, [r7, #12]
24008ba0:	681b      	ldr	r3, [r3, #0]
24008ba2:	68ba      	ldr	r2, [r7, #8]
24008ba4:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
24008ba6:	68fb      	ldr	r3, [r7, #12]
24008ba8:	681b      	ldr	r3, [r3, #0]
24008baa:	687a      	ldr	r2, [r7, #4]
24008bac:	60da      	str	r2, [r3, #12]
}
24008bae:	e018      	b.n	24008be2 <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
24008bb0:	68fb      	ldr	r3, [r7, #12]
24008bb2:	681b      	ldr	r3, [r3, #0]
24008bb4:	683a      	ldr	r2, [r7, #0]
24008bb6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
24008bb8:	68fb      	ldr	r3, [r7, #12]
24008bba:	689b      	ldr	r3, [r3, #8]
24008bbc:	2b40      	cmp	r3, #64	; 0x40
24008bbe:	d108      	bne.n	24008bd2 <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
24008bc0:	68fb      	ldr	r3, [r7, #12]
24008bc2:	681b      	ldr	r3, [r3, #0]
24008bc4:	687a      	ldr	r2, [r7, #4]
24008bc6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
24008bc8:	68fb      	ldr	r3, [r7, #12]
24008bca:	681b      	ldr	r3, [r3, #0]
24008bcc:	68ba      	ldr	r2, [r7, #8]
24008bce:	60da      	str	r2, [r3, #12]
}
24008bd0:	e007      	b.n	24008be2 <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
24008bd2:	68fb      	ldr	r3, [r7, #12]
24008bd4:	681b      	ldr	r3, [r3, #0]
24008bd6:	68ba      	ldr	r2, [r7, #8]
24008bd8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
24008bda:	68fb      	ldr	r3, [r7, #12]
24008bdc:	681b      	ldr	r3, [r3, #0]
24008bde:	687a      	ldr	r2, [r7, #4]
24008be0:	60da      	str	r2, [r3, #12]
}
24008be2:	bf00      	nop
24008be4:	3714      	adds	r7, #20
24008be6:	46bd      	mov	sp, r7
24008be8:	f85d 7b04 	ldr.w	r7, [sp], #4
24008bec:	4770      	bx	lr
24008bee:	bf00      	nop
24008bf0:	40020010 	.word	0x40020010
24008bf4:	40020028 	.word	0x40020028
24008bf8:	40020040 	.word	0x40020040
24008bfc:	40020058 	.word	0x40020058
24008c00:	40020070 	.word	0x40020070
24008c04:	40020088 	.word	0x40020088
24008c08:	400200a0 	.word	0x400200a0
24008c0c:	400200b8 	.word	0x400200b8
24008c10:	40020410 	.word	0x40020410
24008c14:	40020428 	.word	0x40020428
24008c18:	40020440 	.word	0x40020440
24008c1c:	40020458 	.word	0x40020458
24008c20:	40020470 	.word	0x40020470
24008c24:	40020488 	.word	0x40020488
24008c28:	400204a0 	.word	0x400204a0
24008c2c:	400204b8 	.word	0x400204b8

24008c30 <HAL_EXTI_SetConfigLine>:
  * @param  hexti Exti handle.
  * @param  pExtiConfig Pointer on EXTI configuration to be set.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_SetConfigLine(EXTI_HandleTypeDef *hexti, EXTI_ConfigTypeDef *pExtiConfig)
{
24008c30:	b480      	push	{r7}
24008c32:	b089      	sub	sp, #36	; 0x24
24008c34:	af00      	add	r7, sp, #0
24008c36:	6078      	str	r0, [r7, #4]
24008c38:	6039      	str	r1, [r7, #0]
  uint32_t maskline;
  uint32_t offset;
  uint32_t pcrlinepos;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
24008c3a:	687b      	ldr	r3, [r7, #4]
24008c3c:	2b00      	cmp	r3, #0
24008c3e:	d002      	beq.n	24008c46 <HAL_EXTI_SetConfigLine+0x16>
24008c40:	683b      	ldr	r3, [r7, #0]
24008c42:	2b00      	cmp	r3, #0
24008c44:	d101      	bne.n	24008c4a <HAL_EXTI_SetConfigLine+0x1a>
  {
    return HAL_ERROR;
24008c46:	2301      	movs	r3, #1
24008c48:	e109      	b.n	24008e5e <HAL_EXTI_SetConfigLine+0x22e>
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(pExtiConfig->Line));
  assert_param(IS_EXTI_MODE(pExtiConfig->Mode));

  /* Assign line number to handle */
  hexti->Line = pExtiConfig->Line;
24008c4a:	683b      	ldr	r3, [r7, #0]
24008c4c:	681a      	ldr	r2, [r3, #0]
24008c4e:	687b      	ldr	r3, [r7, #4]
24008c50:	601a      	str	r2, [r3, #0]

  /* compute line register offset and line mask */
  offset = ((pExtiConfig->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
24008c52:	683b      	ldr	r3, [r7, #0]
24008c54:	681b      	ldr	r3, [r3, #0]
24008c56:	0c1b      	lsrs	r3, r3, #16
24008c58:	f003 0303 	and.w	r3, r3, #3
24008c5c:	613b      	str	r3, [r7, #16]
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
24008c5e:	683b      	ldr	r3, [r7, #0]
24008c60:	681b      	ldr	r3, [r3, #0]
24008c62:	f003 031f 	and.w	r3, r3, #31
24008c66:	60fb      	str	r3, [r7, #12]
  maskline = (1UL << linepos);
24008c68:	2201      	movs	r2, #1
24008c6a:	68fb      	ldr	r3, [r7, #12]
24008c6c:	fa02 f303 	lsl.w	r3, r2, r3
24008c70:	60bb      	str	r3, [r7, #8]

  /* Configure triggers for configurable lines */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00U)
24008c72:	683b      	ldr	r3, [r7, #0]
24008c74:	681b      	ldr	r3, [r3, #0]
24008c76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
24008c7a:	2b00      	cmp	r3, #0
24008c7c:	d064      	beq.n	24008d48 <HAL_EXTI_SetConfigLine+0x118>
  {
    assert_param(IS_EXTI_TRIGGER(pExtiConfig->Trigger));

    /* Configure rising trigger */
    regaddr = (__IO uint32_t *)(&EXTI->RTSR1 + (EXTI_CONFIG_OFFSET * offset));
24008c7e:	693b      	ldr	r3, [r7, #16]
24008c80:	015b      	lsls	r3, r3, #5
24008c82:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
24008c86:	61fb      	str	r3, [r7, #28]
    regval = *regaddr;
24008c88:	69fb      	ldr	r3, [r7, #28]
24008c8a:	681b      	ldr	r3, [r3, #0]
24008c8c:	61bb      	str	r3, [r7, #24]

    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_RISING) != 0x00U)
24008c8e:	683b      	ldr	r3, [r7, #0]
24008c90:	689b      	ldr	r3, [r3, #8]
24008c92:	f003 0301 	and.w	r3, r3, #1
24008c96:	2b00      	cmp	r3, #0
24008c98:	d004      	beq.n	24008ca4 <HAL_EXTI_SetConfigLine+0x74>
    {
      regval |= maskline;
24008c9a:	69ba      	ldr	r2, [r7, #24]
24008c9c:	68bb      	ldr	r3, [r7, #8]
24008c9e:	4313      	orrs	r3, r2
24008ca0:	61bb      	str	r3, [r7, #24]
24008ca2:	e004      	b.n	24008cae <HAL_EXTI_SetConfigLine+0x7e>
    }
    else
    {
      regval &= ~maskline;
24008ca4:	68bb      	ldr	r3, [r7, #8]
24008ca6:	43db      	mvns	r3, r3
24008ca8:	69ba      	ldr	r2, [r7, #24]
24008caa:	4013      	ands	r3, r2
24008cac:	61bb      	str	r3, [r7, #24]
    }

    /* Store rising trigger mode */
    *regaddr = regval;
24008cae:	69fb      	ldr	r3, [r7, #28]
24008cb0:	69ba      	ldr	r2, [r7, #24]
24008cb2:	601a      	str	r2, [r3, #0]

    /* Configure falling trigger */
    regaddr = (__IO uint32_t *)(&EXTI->FTSR1 + (EXTI_CONFIG_OFFSET * offset));
24008cb4:	693b      	ldr	r3, [r7, #16]
24008cb6:	015a      	lsls	r2, r3, #5
24008cb8:	4b6c      	ldr	r3, [pc, #432]	; (24008e6c <HAL_EXTI_SetConfigLine+0x23c>)
24008cba:	4413      	add	r3, r2
24008cbc:	61fb      	str	r3, [r7, #28]
    regval = *regaddr;
24008cbe:	69fb      	ldr	r3, [r7, #28]
24008cc0:	681b      	ldr	r3, [r3, #0]
24008cc2:	61bb      	str	r3, [r7, #24]

    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_FALLING) != 0x00U)
24008cc4:	683b      	ldr	r3, [r7, #0]
24008cc6:	689b      	ldr	r3, [r3, #8]
24008cc8:	f003 0302 	and.w	r3, r3, #2
24008ccc:	2b00      	cmp	r3, #0
24008cce:	d004      	beq.n	24008cda <HAL_EXTI_SetConfigLine+0xaa>
    {
      regval |= maskline;
24008cd0:	69ba      	ldr	r2, [r7, #24]
24008cd2:	68bb      	ldr	r3, [r7, #8]
24008cd4:	4313      	orrs	r3, r2
24008cd6:	61bb      	str	r3, [r7, #24]
24008cd8:	e004      	b.n	24008ce4 <HAL_EXTI_SetConfigLine+0xb4>
    }
    else
    {
      regval &= ~maskline;
24008cda:	68bb      	ldr	r3, [r7, #8]
24008cdc:	43db      	mvns	r3, r3
24008cde:	69ba      	ldr	r2, [r7, #24]
24008ce0:	4013      	ands	r3, r2
24008ce2:	61bb      	str	r3, [r7, #24]
    }

    /* Store falling trigger mode */
    *regaddr = regval;
24008ce4:	69fb      	ldr	r3, [r7, #28]
24008ce6:	69ba      	ldr	r2, [r7, #24]
24008ce8:	601a      	str	r2, [r3, #0]

    /* Configure gpio port selection in case of gpio exti line */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
24008cea:	683b      	ldr	r3, [r7, #0]
24008cec:	681b      	ldr	r3, [r3, #0]
24008cee:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
24008cf2:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
24008cf6:	d127      	bne.n	24008d48 <HAL_EXTI_SetConfigLine+0x118>
    {
      assert_param(IS_EXTI_GPIO_PORT(pExtiConfig->GPIOSel));
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = SYSCFG->EXTICR[(linepos >> 2U) & 0x03UL];
24008cf8:	4a5d      	ldr	r2, [pc, #372]	; (24008e70 <HAL_EXTI_SetConfigLine+0x240>)
24008cfa:	68fb      	ldr	r3, [r7, #12]
24008cfc:	089b      	lsrs	r3, r3, #2
24008cfe:	f003 0303 	and.w	r3, r3, #3
24008d02:	3302      	adds	r3, #2
24008d04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
24008d08:	61bb      	str	r3, [r7, #24]
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03U)));
24008d0a:	68fb      	ldr	r3, [r7, #12]
24008d0c:	f003 0303 	and.w	r3, r3, #3
24008d10:	009b      	lsls	r3, r3, #2
24008d12:	220f      	movs	r2, #15
24008d14:	fa02 f303 	lsl.w	r3, r2, r3
24008d18:	43db      	mvns	r3, r3
24008d1a:	69ba      	ldr	r2, [r7, #24]
24008d1c:	4013      	ands	r3, r2
24008d1e:	61bb      	str	r3, [r7, #24]
      regval |= (pExtiConfig->GPIOSel << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03U)));
24008d20:	683b      	ldr	r3, [r7, #0]
24008d22:	68da      	ldr	r2, [r3, #12]
24008d24:	68fb      	ldr	r3, [r7, #12]
24008d26:	f003 0303 	and.w	r3, r3, #3
24008d2a:	009b      	lsls	r3, r3, #2
24008d2c:	fa02 f303 	lsl.w	r3, r2, r3
24008d30:	69ba      	ldr	r2, [r7, #24]
24008d32:	4313      	orrs	r3, r2
24008d34:	61bb      	str	r3, [r7, #24]
      SYSCFG->EXTICR[(linepos >> 2U) & 0x03UL] = regval;
24008d36:	494e      	ldr	r1, [pc, #312]	; (24008e70 <HAL_EXTI_SetConfigLine+0x240>)
24008d38:	68fb      	ldr	r3, [r7, #12]
24008d3a:	089b      	lsrs	r3, r3, #2
24008d3c:	f003 0303 	and.w	r3, r3, #3
24008d40:	3302      	adds	r3, #2
24008d42:	69ba      	ldr	r2, [r7, #24]
24008d44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
  }

  /* Configure interrupt mode : read current mode */
  regaddr = (__IO uint32_t *)(&EXTI->IMR1 + (EXTI_MODE_OFFSET * offset));
24008d48:	693b      	ldr	r3, [r7, #16]
24008d4a:	011a      	lsls	r2, r3, #4
24008d4c:	4b49      	ldr	r3, [pc, #292]	; (24008e74 <HAL_EXTI_SetConfigLine+0x244>)
24008d4e:	4413      	add	r3, r2
24008d50:	61fb      	str	r3, [r7, #28]
  regval = *regaddr;
24008d52:	69fb      	ldr	r3, [r7, #28]
24008d54:	681b      	ldr	r3, [r3, #0]
24008d56:	61bb      	str	r3, [r7, #24]

  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_INTERRUPT) != 0x00U)
24008d58:	683b      	ldr	r3, [r7, #0]
24008d5a:	685b      	ldr	r3, [r3, #4]
24008d5c:	f003 0301 	and.w	r3, r3, #1
24008d60:	2b00      	cmp	r3, #0
24008d62:	d004      	beq.n	24008d6e <HAL_EXTI_SetConfigLine+0x13e>
  {
    regval |= maskline;
24008d64:	69ba      	ldr	r2, [r7, #24]
24008d66:	68bb      	ldr	r3, [r7, #8]
24008d68:	4313      	orrs	r3, r2
24008d6a:	61bb      	str	r3, [r7, #24]
24008d6c:	e004      	b.n	24008d78 <HAL_EXTI_SetConfigLine+0x148>
  }
  else
  {
    regval &= ~maskline;
24008d6e:	68bb      	ldr	r3, [r7, #8]
24008d70:	43db      	mvns	r3, r3
24008d72:	69ba      	ldr	r2, [r7, #24]
24008d74:	4013      	ands	r3, r2
24008d76:	61bb      	str	r3, [r7, #24]
  }

  /* Store interrupt mode */
  *regaddr = regval;
24008d78:	69fb      	ldr	r3, [r7, #28]
24008d7a:	69ba      	ldr	r2, [r7, #24]
24008d7c:	601a      	str	r2, [r3, #0]

  /* The event mode cannot be configured if the line does not support it */
  assert_param(((pExtiConfig->Line & EXTI_EVENT) == EXTI_EVENT) || ((pExtiConfig->Mode & EXTI_MODE_EVENT) != EXTI_MODE_EVENT));

  /* Configure event mode : read current mode */
  regaddr = (__IO uint32_t *)(&EXTI->EMR1 + (EXTI_MODE_OFFSET * offset));
24008d7e:	693b      	ldr	r3, [r7, #16]
24008d80:	011a      	lsls	r2, r3, #4
24008d82:	4b3d      	ldr	r3, [pc, #244]	; (24008e78 <HAL_EXTI_SetConfigLine+0x248>)
24008d84:	4413      	add	r3, r2
24008d86:	61fb      	str	r3, [r7, #28]
  regval = *regaddr;
24008d88:	69fb      	ldr	r3, [r7, #28]
24008d8a:	681b      	ldr	r3, [r3, #0]
24008d8c:	61bb      	str	r3, [r7, #24]

  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_EVENT) != 0x00U)
24008d8e:	683b      	ldr	r3, [r7, #0]
24008d90:	685b      	ldr	r3, [r3, #4]
24008d92:	f003 0302 	and.w	r3, r3, #2
24008d96:	2b00      	cmp	r3, #0
24008d98:	d004      	beq.n	24008da4 <HAL_EXTI_SetConfigLine+0x174>
  {
    regval |= maskline;
24008d9a:	69ba      	ldr	r2, [r7, #24]
24008d9c:	68bb      	ldr	r3, [r7, #8]
24008d9e:	4313      	orrs	r3, r2
24008da0:	61bb      	str	r3, [r7, #24]
24008da2:	e004      	b.n	24008dae <HAL_EXTI_SetConfigLine+0x17e>
  }
  else
  {
    regval &= ~maskline;
24008da4:	68bb      	ldr	r3, [r7, #8]
24008da6:	43db      	mvns	r3, r3
24008da8:	69ba      	ldr	r2, [r7, #24]
24008daa:	4013      	ands	r3, r2
24008dac:	61bb      	str	r3, [r7, #24]
  }

  /* Store event mode */
  *regaddr = regval;
24008dae:	69fb      	ldr	r3, [r7, #28]
24008db0:	69ba      	ldr	r2, [r7, #24]
24008db2:	601a      	str	r2, [r3, #0]
  /* Store event mode */
  *regaddr = regval;
#endif /* DUAL_CORE */

  /* Configure the D3 PendClear source in case of Wakeup target is Any */
  if ((pExtiConfig->Line & EXTI_TARGET_MASK) == EXTI_TARGET_MSK_ALL)
24008db4:	683b      	ldr	r3, [r7, #0]
24008db6:	681b      	ldr	r3, [r3, #0]
24008db8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
24008dbc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
24008dc0:	d14c      	bne.n	24008e5c <HAL_EXTI_SetConfigLine+0x22c>
  {
    assert_param(IS_EXTI_D3_PENDCLR_SRC(pExtiConfig->PendClearSource));

    /*Calc the PMR register address for the given line */
    regaddr = (__IO uint32_t *)(&EXTI->D3PMR1 + (EXTI_CONFIG_OFFSET * offset));
24008dc2:	693b      	ldr	r3, [r7, #16]
24008dc4:	015a      	lsls	r2, r3, #5
24008dc6:	4b2d      	ldr	r3, [pc, #180]	; (24008e7c <HAL_EXTI_SetConfigLine+0x24c>)
24008dc8:	4413      	add	r3, r2
24008dca:	61fb      	str	r3, [r7, #28]
    regval = *regaddr;
24008dcc:	69fb      	ldr	r3, [r7, #28]
24008dce:	681b      	ldr	r3, [r3, #0]
24008dd0:	61bb      	str	r3, [r7, #24]

    if(pExtiConfig->PendClearSource == EXTI_D3_PENDCLR_SRC_NONE)
24008dd2:	683b      	ldr	r3, [r7, #0]
24008dd4:	691b      	ldr	r3, [r3, #16]
24008dd6:	2b00      	cmp	r3, #0
24008dd8:	d108      	bne.n	24008dec <HAL_EXTI_SetConfigLine+0x1bc>
    {
      /* Clear D3PMRx register for the given line */
      regval &= ~maskline;
24008dda:	68bb      	ldr	r3, [r7, #8]
24008ddc:	43db      	mvns	r3, r3
24008dde:	69ba      	ldr	r2, [r7, #24]
24008de0:	4013      	ands	r3, r2
24008de2:	61bb      	str	r3, [r7, #24]
      /* Store D3PMRx register value */
      *regaddr = regval;
24008de4:	69fb      	ldr	r3, [r7, #28]
24008de6:	69ba      	ldr	r2, [r7, #24]
24008de8:	601a      	str	r2, [r3, #0]
24008dea:	e037      	b.n	24008e5c <HAL_EXTI_SetConfigLine+0x22c>
    }
    else
    {
      /* Set D3PMRx register to 1 for the given line */
      regval |= maskline;
24008dec:	69ba      	ldr	r2, [r7, #24]
24008dee:	68bb      	ldr	r3, [r7, #8]
24008df0:	4313      	orrs	r3, r2
24008df2:	61bb      	str	r3, [r7, #24]
      /* Store D3PMRx register value */
      *regaddr = regval;
24008df4:	69fb      	ldr	r3, [r7, #28]
24008df6:	69ba      	ldr	r2, [r7, #24]
24008df8:	601a      	str	r2, [r3, #0]

      if(linepos < 16UL)
24008dfa:	68fb      	ldr	r3, [r7, #12]
24008dfc:	2b0f      	cmp	r3, #15
24008dfe:	d80a      	bhi.n	24008e16 <HAL_EXTI_SetConfigLine+0x1e6>
      {
        regaddr = (__IO uint32_t *)(&EXTI->D3PCR1L + (EXTI_CONFIG_OFFSET * offset));
24008e00:	693b      	ldr	r3, [r7, #16]
24008e02:	015a      	lsls	r2, r3, #5
24008e04:	4b1e      	ldr	r3, [pc, #120]	; (24008e80 <HAL_EXTI_SetConfigLine+0x250>)
24008e06:	4413      	add	r3, r2
24008e08:	61fb      	str	r3, [r7, #28]
        pcrlinepos = 1UL << linepos;
24008e0a:	2201      	movs	r2, #1
24008e0c:	68fb      	ldr	r3, [r7, #12]
24008e0e:	fa02 f303 	lsl.w	r3, r2, r3
24008e12:	617b      	str	r3, [r7, #20]
24008e14:	e00a      	b.n	24008e2c <HAL_EXTI_SetConfigLine+0x1fc>
      }
      else
      {
        regaddr = (__IO uint32_t *)(&EXTI->D3PCR1H + (EXTI_CONFIG_OFFSET * offset));
24008e16:	693b      	ldr	r3, [r7, #16]
24008e18:	015a      	lsls	r2, r3, #5
24008e1a:	4b1a      	ldr	r3, [pc, #104]	; (24008e84 <HAL_EXTI_SetConfigLine+0x254>)
24008e1c:	4413      	add	r3, r2
24008e1e:	61fb      	str	r3, [r7, #28]
        pcrlinepos = 1UL << (linepos - 16UL);
24008e20:	68fb      	ldr	r3, [r7, #12]
24008e22:	3b10      	subs	r3, #16
24008e24:	2201      	movs	r2, #1
24008e26:	fa02 f303 	lsl.w	r3, r2, r3
24008e2a:	617b      	str	r3, [r7, #20]
      }

      regval = (*regaddr & (~(pcrlinepos * pcrlinepos * 3UL))) | (pcrlinepos * pcrlinepos * (pExtiConfig->PendClearSource - 1UL));
24008e2c:	69fb      	ldr	r3, [r7, #28]
24008e2e:	6819      	ldr	r1, [r3, #0]
24008e30:	697b      	ldr	r3, [r7, #20]
24008e32:	fb03 f203 	mul.w	r2, r3, r3
24008e36:	4613      	mov	r3, r2
24008e38:	005b      	lsls	r3, r3, #1
24008e3a:	4413      	add	r3, r2
24008e3c:	43db      	mvns	r3, r3
24008e3e:	ea01 0203 	and.w	r2, r1, r3
24008e42:	697b      	ldr	r3, [r7, #20]
24008e44:	fb03 f303 	mul.w	r3, r3, r3
24008e48:	6839      	ldr	r1, [r7, #0]
24008e4a:	6909      	ldr	r1, [r1, #16]
24008e4c:	3901      	subs	r1, #1
24008e4e:	fb01 f303 	mul.w	r3, r1, r3
24008e52:	4313      	orrs	r3, r2
24008e54:	61bb      	str	r3, [r7, #24]
      *regaddr = regval;
24008e56:	69fb      	ldr	r3, [r7, #28]
24008e58:	69ba      	ldr	r2, [r7, #24]
24008e5a:	601a      	str	r2, [r3, #0]
    }
  }

  return HAL_OK;
24008e5c:	2300      	movs	r3, #0
}
24008e5e:	4618      	mov	r0, r3
24008e60:	3724      	adds	r7, #36	; 0x24
24008e62:	46bd      	mov	sp, r7
24008e64:	f85d 7b04 	ldr.w	r7, [sp], #4
24008e68:	4770      	bx	lr
24008e6a:	bf00      	nop
24008e6c:	58000004 	.word	0x58000004
24008e70:	58000400 	.word	0x58000400
24008e74:	58000080 	.word	0x58000080
24008e78:	58000084 	.word	0x58000084
24008e7c:	5800000c 	.word	0x5800000c
24008e80:	58000010 	.word	0x58000010
24008e84:	58000014 	.word	0x58000014

24008e88 <HAL_EXTI_GetConfigLine>:
  * @param  hexti Exti handle.
  * @param  pExtiConfig Pointer on structure to store Exti configuration.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetConfigLine(EXTI_HandleTypeDef *hexti, EXTI_ConfigTypeDef *pExtiConfig)
{
24008e88:	b480      	push	{r7}
24008e8a:	b089      	sub	sp, #36	; 0x24
24008e8c:	af00      	add	r7, sp, #0
24008e8e:	6078      	str	r0, [r7, #4]
24008e90:	6039      	str	r1, [r7, #0]
  uint32_t maskline;
  uint32_t offset;
  uint32_t pcrlinepos;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
24008e92:	687b      	ldr	r3, [r7, #4]
24008e94:	2b00      	cmp	r3, #0
24008e96:	d002      	beq.n	24008e9e <HAL_EXTI_GetConfigLine+0x16>
24008e98:	683b      	ldr	r3, [r7, #0]
24008e9a:	2b00      	cmp	r3, #0
24008e9c:	d101      	bne.n	24008ea2 <HAL_EXTI_GetConfigLine+0x1a>
  {
    return HAL_ERROR;
24008e9e:	2301      	movs	r3, #1
24008ea0:	e0c4      	b.n	2400902c <HAL_EXTI_GetConfigLine+0x1a4>

  /* Check the parameter */
  assert_param(IS_EXTI_LINE(hexti->Line));

  /* Store handle line number to configuration structure */
  pExtiConfig->Line = hexti->Line;
24008ea2:	687b      	ldr	r3, [r7, #4]
24008ea4:	681a      	ldr	r2, [r3, #0]
24008ea6:	683b      	ldr	r3, [r7, #0]
24008ea8:	601a      	str	r2, [r3, #0]

  /* compute line register offset and line mask */
  offset = ((pExtiConfig->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
24008eaa:	683b      	ldr	r3, [r7, #0]
24008eac:	681b      	ldr	r3, [r3, #0]
24008eae:	0c1b      	lsrs	r3, r3, #16
24008eb0:	f003 0303 	and.w	r3, r3, #3
24008eb4:	617b      	str	r3, [r7, #20]
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
24008eb6:	683b      	ldr	r3, [r7, #0]
24008eb8:	681b      	ldr	r3, [r3, #0]
24008eba:	f003 031f 	and.w	r3, r3, #31
24008ebe:	613b      	str	r3, [r7, #16]
  maskline = (1UL << linepos);
24008ec0:	2201      	movs	r2, #1
24008ec2:	693b      	ldr	r3, [r7, #16]
24008ec4:	fa02 f303 	lsl.w	r3, r2, r3
24008ec8:	60fb      	str	r3, [r7, #12]

  /* 1] Get core mode : interrupt */
  regaddr = (__IO uint32_t *)(&EXTI->IMR1 + (EXTI_MODE_OFFSET * offset));
24008eca:	697b      	ldr	r3, [r7, #20]
24008ecc:	011a      	lsls	r2, r3, #4
24008ece:	4b5a      	ldr	r3, [pc, #360]	; (24009038 <HAL_EXTI_GetConfigLine+0x1b0>)
24008ed0:	4413      	add	r3, r2
24008ed2:	61fb      	str	r3, [r7, #28]
  regval = *regaddr;
24008ed4:	69fb      	ldr	r3, [r7, #28]
24008ed6:	681b      	ldr	r3, [r3, #0]
24008ed8:	60bb      	str	r3, [r7, #8]

  pExtiConfig->Mode = EXTI_MODE_NONE;
24008eda:	683b      	ldr	r3, [r7, #0]
24008edc:	2200      	movs	r2, #0
24008ede:	605a      	str	r2, [r3, #4]

  /* Check if selected line is enable */
  if ((regval & maskline) != 0x00U)
24008ee0:	68ba      	ldr	r2, [r7, #8]
24008ee2:	68fb      	ldr	r3, [r7, #12]
24008ee4:	4013      	ands	r3, r2
24008ee6:	2b00      	cmp	r3, #0
24008ee8:	d002      	beq.n	24008ef0 <HAL_EXTI_GetConfigLine+0x68>
  {
    pExtiConfig->Mode = EXTI_MODE_INTERRUPT;
24008eea:	683b      	ldr	r3, [r7, #0]
24008eec:	2201      	movs	r2, #1
24008eee:	605a      	str	r2, [r3, #4]
  }

  /* Get event mode */
  regaddr = (__IO uint32_t *)(&EXTI->EMR1 + (EXTI_MODE_OFFSET * offset));
24008ef0:	697b      	ldr	r3, [r7, #20]
24008ef2:	011a      	lsls	r2, r3, #4
24008ef4:	4b51      	ldr	r3, [pc, #324]	; (2400903c <HAL_EXTI_GetConfigLine+0x1b4>)
24008ef6:	4413      	add	r3, r2
24008ef8:	61fb      	str	r3, [r7, #28]
  regval = *regaddr;
24008efa:	69fb      	ldr	r3, [r7, #28]
24008efc:	681b      	ldr	r3, [r3, #0]
24008efe:	60bb      	str	r3, [r7, #8]

  /* Check if selected line is enable */
  if ((regval & maskline) != 0x00U)
24008f00:	68ba      	ldr	r2, [r7, #8]
24008f02:	68fb      	ldr	r3, [r7, #12]
24008f04:	4013      	ands	r3, r2
24008f06:	2b00      	cmp	r3, #0
24008f08:	d005      	beq.n	24008f16 <HAL_EXTI_GetConfigLine+0x8e>
  {
    pExtiConfig->Mode |= EXTI_MODE_EVENT;
24008f0a:	683b      	ldr	r3, [r7, #0]
24008f0c:	685b      	ldr	r3, [r3, #4]
24008f0e:	f043 0202 	orr.w	r2, r3, #2
24008f12:	683b      	ldr	r3, [r7, #0]
24008f14:	605a      	str	r2, [r3, #4]
    pExtiConfig->Mode |= EXTI_MODE_CORE2_EVENT;
  }
#endif /*DUAL_CORE*/

  /* Get default Trigger and GPIOSel configuration */
  pExtiConfig->Trigger = EXTI_TRIGGER_NONE;
24008f16:	683b      	ldr	r3, [r7, #0]
24008f18:	2200      	movs	r2, #0
24008f1a:	609a      	str	r2, [r3, #8]
  pExtiConfig->GPIOSel = 0x00U;
24008f1c:	683b      	ldr	r3, [r7, #0]
24008f1e:	2200      	movs	r2, #0
24008f20:	60da      	str	r2, [r3, #12]

  /* 2] Get trigger for configurable lines : rising */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00U)
24008f22:	683b      	ldr	r3, [r7, #0]
24008f24:	681b      	ldr	r3, [r3, #0]
24008f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
24008f2a:	2b00      	cmp	r3, #0
24008f2c:	d03d      	beq.n	24008faa <HAL_EXTI_GetConfigLine+0x122>
  {
    regaddr = (__IO uint32_t *)(&EXTI->RTSR1 + (EXTI_CONFIG_OFFSET * offset));
24008f2e:	697b      	ldr	r3, [r7, #20]
24008f30:	015b      	lsls	r3, r3, #5
24008f32:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
24008f36:	61fb      	str	r3, [r7, #28]
    regval = *regaddr;
24008f38:	69fb      	ldr	r3, [r7, #28]
24008f3a:	681b      	ldr	r3, [r3, #0]
24008f3c:	60bb      	str	r3, [r7, #8]

    /* Check if configuration of selected line is enable */
    if ((regval & maskline) != 0x00U)
24008f3e:	68ba      	ldr	r2, [r7, #8]
24008f40:	68fb      	ldr	r3, [r7, #12]
24008f42:	4013      	ands	r3, r2
24008f44:	2b00      	cmp	r3, #0
24008f46:	d002      	beq.n	24008f4e <HAL_EXTI_GetConfigLine+0xc6>
    {
      pExtiConfig->Trigger = EXTI_TRIGGER_RISING;
24008f48:	683b      	ldr	r3, [r7, #0]
24008f4a:	2201      	movs	r2, #1
24008f4c:	609a      	str	r2, [r3, #8]
    }

    /* Get falling configuration */
    regaddr = (__IO uint32_t *)(&EXTI->FTSR1 + (EXTI_CONFIG_OFFSET * offset));
24008f4e:	697b      	ldr	r3, [r7, #20]
24008f50:	015a      	lsls	r2, r3, #5
24008f52:	4b3b      	ldr	r3, [pc, #236]	; (24009040 <HAL_EXTI_GetConfigLine+0x1b8>)
24008f54:	4413      	add	r3, r2
24008f56:	61fb      	str	r3, [r7, #28]
    regval = *regaddr;
24008f58:	69fb      	ldr	r3, [r7, #28]
24008f5a:	681b      	ldr	r3, [r3, #0]
24008f5c:	60bb      	str	r3, [r7, #8]

    /* Check if configuration of selected line is enable */
    if ((regval & maskline) != 0x00U)
24008f5e:	68ba      	ldr	r2, [r7, #8]
24008f60:	68fb      	ldr	r3, [r7, #12]
24008f62:	4013      	ands	r3, r2
24008f64:	2b00      	cmp	r3, #0
24008f66:	d005      	beq.n	24008f74 <HAL_EXTI_GetConfigLine+0xec>
    {
      pExtiConfig->Trigger |= EXTI_TRIGGER_FALLING;
24008f68:	683b      	ldr	r3, [r7, #0]
24008f6a:	689b      	ldr	r3, [r3, #8]
24008f6c:	f043 0202 	orr.w	r2, r3, #2
24008f70:	683b      	ldr	r3, [r7, #0]
24008f72:	609a      	str	r2, [r3, #8]
    }

    /* Get Gpio port selection for gpio lines */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
24008f74:	683b      	ldr	r3, [r7, #0]
24008f76:	681b      	ldr	r3, [r3, #0]
24008f78:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
24008f7c:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
24008f80:	d113      	bne.n	24008faa <HAL_EXTI_GetConfigLine+0x122>
    {
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = SYSCFG->EXTICR[(linepos >> 2U) & 0x03UL];
24008f82:	4a30      	ldr	r2, [pc, #192]	; (24009044 <HAL_EXTI_GetConfigLine+0x1bc>)
24008f84:	693b      	ldr	r3, [r7, #16]
24008f86:	089b      	lsrs	r3, r3, #2
24008f88:	f003 0303 	and.w	r3, r3, #3
24008f8c:	3302      	adds	r3, #2
24008f8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
24008f92:	60bb      	str	r3, [r7, #8]
      pExtiConfig->GPIOSel = (regval >> (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u))) & SYSCFG_EXTICR1_EXTI0;
24008f94:	693b      	ldr	r3, [r7, #16]
24008f96:	f003 0303 	and.w	r3, r3, #3
24008f9a:	009b      	lsls	r3, r3, #2
24008f9c:	68ba      	ldr	r2, [r7, #8]
24008f9e:	fa22 f303 	lsr.w	r3, r2, r3
24008fa2:	f003 020f 	and.w	r2, r3, #15
24008fa6:	683b      	ldr	r3, [r7, #0]
24008fa8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get default Pend Clear Source */
  pExtiConfig->PendClearSource = EXTI_D3_PENDCLR_SRC_NONE;
24008faa:	683b      	ldr	r3, [r7, #0]
24008fac:	2200      	movs	r2, #0
24008fae:	611a      	str	r2, [r3, #16]

  /* 3] Get D3 Pend Clear source */
  if ((pExtiConfig->Line & EXTI_TARGET_MASK) == EXTI_TARGET_MSK_ALL)
24008fb0:	683b      	ldr	r3, [r7, #0]
24008fb2:	681b      	ldr	r3, [r3, #0]
24008fb4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
24008fb8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
24008fbc:	d135      	bne.n	2400902a <HAL_EXTI_GetConfigLine+0x1a2>
  {
    regaddr = (__IO uint32_t *)(&EXTI->D3PMR1 + (EXTI_CONFIG_OFFSET * offset));
24008fbe:	697b      	ldr	r3, [r7, #20]
24008fc0:	015a      	lsls	r2, r3, #5
24008fc2:	4b21      	ldr	r3, [pc, #132]	; (24009048 <HAL_EXTI_GetConfigLine+0x1c0>)
24008fc4:	4413      	add	r3, r2
24008fc6:	61fb      	str	r3, [r7, #28]
    if(((*regaddr) & linepos) != 0UL)
24008fc8:	69fb      	ldr	r3, [r7, #28]
24008fca:	681a      	ldr	r2, [r3, #0]
24008fcc:	693b      	ldr	r3, [r7, #16]
24008fce:	4013      	ands	r3, r2
24008fd0:	2b00      	cmp	r3, #0
24008fd2:	d02a      	beq.n	2400902a <HAL_EXTI_GetConfigLine+0x1a2>
    {
      /* if wakeup target is any and PMR set, the read pend clear source from  D3PCRxL/H */
      if(linepos < 16UL)
24008fd4:	693b      	ldr	r3, [r7, #16]
24008fd6:	2b0f      	cmp	r3, #15
24008fd8:	d80a      	bhi.n	24008ff0 <HAL_EXTI_GetConfigLine+0x168>
      {
        regaddr = (__IO uint32_t *)(&EXTI->D3PCR1L + (EXTI_CONFIG_OFFSET * offset));
24008fda:	697b      	ldr	r3, [r7, #20]
24008fdc:	015a      	lsls	r2, r3, #5
24008fde:	4b1b      	ldr	r3, [pc, #108]	; (2400904c <HAL_EXTI_GetConfigLine+0x1c4>)
24008fe0:	4413      	add	r3, r2
24008fe2:	61fb      	str	r3, [r7, #28]
        pcrlinepos = 1UL << linepos;
24008fe4:	2201      	movs	r2, #1
24008fe6:	693b      	ldr	r3, [r7, #16]
24008fe8:	fa02 f303 	lsl.w	r3, r2, r3
24008fec:	61bb      	str	r3, [r7, #24]
24008fee:	e00a      	b.n	24009006 <HAL_EXTI_GetConfigLine+0x17e>
      }
      else
      {
        regaddr = (__IO uint32_t *)(&EXTI->D3PCR1H + (EXTI_CONFIG_OFFSET * offset));
24008ff0:	697b      	ldr	r3, [r7, #20]
24008ff2:	015a      	lsls	r2, r3, #5
24008ff4:	4b16      	ldr	r3, [pc, #88]	; (24009050 <HAL_EXTI_GetConfigLine+0x1c8>)
24008ff6:	4413      	add	r3, r2
24008ff8:	61fb      	str	r3, [r7, #28]
        pcrlinepos = 1UL << (linepos - 16UL);
24008ffa:	693b      	ldr	r3, [r7, #16]
24008ffc:	3b10      	subs	r3, #16
24008ffe:	2201      	movs	r2, #1
24009000:	fa02 f303 	lsl.w	r3, r2, r3
24009004:	61bb      	str	r3, [r7, #24]
      }

      pExtiConfig->PendClearSource = 1UL + ((*regaddr & (pcrlinepos * pcrlinepos * 3UL)) / (pcrlinepos * pcrlinepos));
24009006:	69fb      	ldr	r3, [r7, #28]
24009008:	6819      	ldr	r1, [r3, #0]
2400900a:	69bb      	ldr	r3, [r7, #24]
2400900c:	fb03 f203 	mul.w	r2, r3, r3
24009010:	4613      	mov	r3, r2
24009012:	005b      	lsls	r3, r3, #1
24009014:	4413      	add	r3, r2
24009016:	ea01 0203 	and.w	r2, r1, r3
2400901a:	69bb      	ldr	r3, [r7, #24]
2400901c:	fb03 f303 	mul.w	r3, r3, r3
24009020:	fbb2 f3f3 	udiv	r3, r2, r3
24009024:	1c5a      	adds	r2, r3, #1
24009026:	683b      	ldr	r3, [r7, #0]
24009028:	611a      	str	r2, [r3, #16]
    }
  }

  return HAL_OK;
2400902a:	2300      	movs	r3, #0
}
2400902c:	4618      	mov	r0, r3
2400902e:	3724      	adds	r7, #36	; 0x24
24009030:	46bd      	mov	sp, r7
24009032:	f85d 7b04 	ldr.w	r7, [sp], #4
24009036:	4770      	bx	lr
24009038:	58000080 	.word	0x58000080
2400903c:	58000084 	.word	0x58000084
24009040:	58000004 	.word	0x58000004
24009044:	58000400 	.word	0x58000400
24009048:	5800000c 	.word	0x5800000c
2400904c:	58000010 	.word	0x58000010
24009050:	58000014 	.word	0x58000014

24009054 <HAL_EXTI_ClearConfigLine>:
  * @brief  Clear whole configuration of a dedicated Exti line.
  * @param  hexti Exti handle.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_ClearConfigLine(EXTI_HandleTypeDef *hexti)
{
24009054:	b480      	push	{r7}
24009056:	b089      	sub	sp, #36	; 0x24
24009058:	af00      	add	r7, sp, #0
2400905a:	6078      	str	r0, [r7, #4]
  uint32_t maskline;
  uint32_t offset;
  uint32_t pcrlinepos;

  /* Check null pointer */
  if (hexti == NULL)
2400905c:	687b      	ldr	r3, [r7, #4]
2400905e:	2b00      	cmp	r3, #0
24009060:	d101      	bne.n	24009066 <HAL_EXTI_ClearConfigLine+0x12>
  {
    return HAL_ERROR;
24009062:	2301      	movs	r3, #1
24009064:	e0ab      	b.n	240091be <HAL_EXTI_ClearConfigLine+0x16a>

  /* Check the parameter */
  assert_param(IS_EXTI_LINE(hexti->Line));

  /* compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
24009066:	687b      	ldr	r3, [r7, #4]
24009068:	681b      	ldr	r3, [r3, #0]
2400906a:	0c1b      	lsrs	r3, r3, #16
2400906c:	f003 0303 	and.w	r3, r3, #3
24009070:	617b      	str	r3, [r7, #20]
  linepos = (hexti->Line & EXTI_PIN_MASK);
24009072:	687b      	ldr	r3, [r7, #4]
24009074:	681b      	ldr	r3, [r3, #0]
24009076:	f003 031f 	and.w	r3, r3, #31
2400907a:	613b      	str	r3, [r7, #16]
  maskline = (1UL << linepos);
2400907c:	2201      	movs	r2, #1
2400907e:	693b      	ldr	r3, [r7, #16]
24009080:	fa02 f303 	lsl.w	r3, r2, r3
24009084:	60fb      	str	r3, [r7, #12]

  /* 1] Clear interrupt mode */
  regaddr = (__IO uint32_t *)(&EXTI->IMR1 + (EXTI_MODE_OFFSET * offset));
24009086:	697b      	ldr	r3, [r7, #20]
24009088:	011a      	lsls	r2, r3, #4
2400908a:	4b50      	ldr	r3, [pc, #320]	; (240091cc <HAL_EXTI_ClearConfigLine+0x178>)
2400908c:	4413      	add	r3, r2
2400908e:	61fb      	str	r3, [r7, #28]
  regval = (*regaddr & ~maskline);
24009090:	69fb      	ldr	r3, [r7, #28]
24009092:	681a      	ldr	r2, [r3, #0]
24009094:	68fb      	ldr	r3, [r7, #12]
24009096:	43db      	mvns	r3, r3
24009098:	4013      	ands	r3, r2
2400909a:	60bb      	str	r3, [r7, #8]
  *regaddr = regval;
2400909c:	69fb      	ldr	r3, [r7, #28]
2400909e:	68ba      	ldr	r2, [r7, #8]
240090a0:	601a      	str	r2, [r3, #0]

  /* 2] Clear event mode */
  regaddr = (__IO uint32_t *)(&EXTI->EMR1 + (EXTI_MODE_OFFSET * offset));
240090a2:	697b      	ldr	r3, [r7, #20]
240090a4:	011a      	lsls	r2, r3, #4
240090a6:	4b4a      	ldr	r3, [pc, #296]	; (240091d0 <HAL_EXTI_ClearConfigLine+0x17c>)
240090a8:	4413      	add	r3, r2
240090aa:	61fb      	str	r3, [r7, #28]
  regval = (*regaddr & ~maskline);
240090ac:	69fb      	ldr	r3, [r7, #28]
240090ae:	681a      	ldr	r2, [r3, #0]
240090b0:	68fb      	ldr	r3, [r7, #12]
240090b2:	43db      	mvns	r3, r3
240090b4:	4013      	ands	r3, r2
240090b6:	60bb      	str	r3, [r7, #8]
  *regaddr = regval;
240090b8:	69fb      	ldr	r3, [r7, #28]
240090ba:	68ba      	ldr	r2, [r7, #8]
240090bc:	601a      	str	r2, [r3, #0]
  regval = (*regaddr & ~maskline);
  *regaddr = regval;
#endif /* DUAL_CORE */

  /* 3] Clear triggers in case of configurable lines */
  if ((hexti->Line & EXTI_CONFIG) != 0x00U)
240090be:	687b      	ldr	r3, [r7, #4]
240090c0:	681b      	ldr	r3, [r3, #0]
240090c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
240090c6:	2b00      	cmp	r3, #0
240090c8:	d03f      	beq.n	2400914a <HAL_EXTI_ClearConfigLine+0xf6>
  {
    regaddr = (__IO uint32_t *)(&EXTI->RTSR1 + (EXTI_CONFIG_OFFSET * offset));
240090ca:	697b      	ldr	r3, [r7, #20]
240090cc:	015b      	lsls	r3, r3, #5
240090ce:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
240090d2:	61fb      	str	r3, [r7, #28]
    regval = (*regaddr & ~maskline);
240090d4:	69fb      	ldr	r3, [r7, #28]
240090d6:	681a      	ldr	r2, [r3, #0]
240090d8:	68fb      	ldr	r3, [r7, #12]
240090da:	43db      	mvns	r3, r3
240090dc:	4013      	ands	r3, r2
240090de:	60bb      	str	r3, [r7, #8]
    *regaddr = regval;
240090e0:	69fb      	ldr	r3, [r7, #28]
240090e2:	68ba      	ldr	r2, [r7, #8]
240090e4:	601a      	str	r2, [r3, #0]

    regaddr = (__IO uint32_t *)(&EXTI->FTSR1 + (EXTI_CONFIG_OFFSET * offset));
240090e6:	697b      	ldr	r3, [r7, #20]
240090e8:	015a      	lsls	r2, r3, #5
240090ea:	4b3a      	ldr	r3, [pc, #232]	; (240091d4 <HAL_EXTI_ClearConfigLine+0x180>)
240090ec:	4413      	add	r3, r2
240090ee:	61fb      	str	r3, [r7, #28]
    regval = (*regaddr & ~maskline);
240090f0:	69fb      	ldr	r3, [r7, #28]
240090f2:	681a      	ldr	r2, [r3, #0]
240090f4:	68fb      	ldr	r3, [r7, #12]
240090f6:	43db      	mvns	r3, r3
240090f8:	4013      	ands	r3, r2
240090fa:	60bb      	str	r3, [r7, #8]
    *regaddr = regval;
240090fc:	69fb      	ldr	r3, [r7, #28]
240090fe:	68ba      	ldr	r2, [r7, #8]
24009100:	601a      	str	r2, [r3, #0]

    /* Get Gpio port selection for gpio lines */
    if ((hexti->Line & EXTI_GPIO) == EXTI_GPIO)
24009102:	687b      	ldr	r3, [r7, #4]
24009104:	681b      	ldr	r3, [r3, #0]
24009106:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
2400910a:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
2400910e:	d11c      	bne.n	2400914a <HAL_EXTI_ClearConfigLine+0xf6>
    {
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = SYSCFG->EXTICR[(linepos >> 2U) & 0x03UL];
24009110:	4a31      	ldr	r2, [pc, #196]	; (240091d8 <HAL_EXTI_ClearConfigLine+0x184>)
24009112:	693b      	ldr	r3, [r7, #16]
24009114:	089b      	lsrs	r3, r3, #2
24009116:	f003 0303 	and.w	r3, r3, #3
2400911a:	3302      	adds	r3, #2
2400911c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
24009120:	60bb      	str	r3, [r7, #8]
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03UL)));
24009122:	693b      	ldr	r3, [r7, #16]
24009124:	f003 0303 	and.w	r3, r3, #3
24009128:	009b      	lsls	r3, r3, #2
2400912a:	220f      	movs	r2, #15
2400912c:	fa02 f303 	lsl.w	r3, r2, r3
24009130:	43db      	mvns	r3, r3
24009132:	68ba      	ldr	r2, [r7, #8]
24009134:	4013      	ands	r3, r2
24009136:	60bb      	str	r3, [r7, #8]
      SYSCFG->EXTICR[(linepos >> 2U) & 0x03UL] = regval;
24009138:	4927      	ldr	r1, [pc, #156]	; (240091d8 <HAL_EXTI_ClearConfigLine+0x184>)
2400913a:	693b      	ldr	r3, [r7, #16]
2400913c:	089b      	lsrs	r3, r3, #2
2400913e:	f003 0303 	and.w	r3, r3, #3
24009142:	3302      	adds	r3, #2
24009144:	68ba      	ldr	r2, [r7, #8]
24009146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
  }

  /* 4] Clear D3 Config lines */
  if ((hexti->Line & EXTI_TARGET_MASK) == EXTI_TARGET_MSK_ALL)
2400914a:	687b      	ldr	r3, [r7, #4]
2400914c:	681b      	ldr	r3, [r3, #0]
2400914e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
24009152:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
24009156:	d131      	bne.n	240091bc <HAL_EXTI_ClearConfigLine+0x168>
  {
    regaddr = (__IO uint32_t *)(&EXTI->D3PMR1 + (EXTI_CONFIG_OFFSET * offset));
24009158:	697b      	ldr	r3, [r7, #20]
2400915a:	015a      	lsls	r2, r3, #5
2400915c:	4b1f      	ldr	r3, [pc, #124]	; (240091dc <HAL_EXTI_ClearConfigLine+0x188>)
2400915e:	4413      	add	r3, r2
24009160:	61fb      	str	r3, [r7, #28]
    *regaddr = (*regaddr & ~maskline);
24009162:	69fb      	ldr	r3, [r7, #28]
24009164:	681a      	ldr	r2, [r3, #0]
24009166:	68fb      	ldr	r3, [r7, #12]
24009168:	43db      	mvns	r3, r3
2400916a:	401a      	ands	r2, r3
2400916c:	69fb      	ldr	r3, [r7, #28]
2400916e:	601a      	str	r2, [r3, #0]

    if(linepos < 16UL)
24009170:	693b      	ldr	r3, [r7, #16]
24009172:	2b0f      	cmp	r3, #15
24009174:	d80a      	bhi.n	2400918c <HAL_EXTI_ClearConfigLine+0x138>
    {
      regaddr = (__IO uint32_t *)(&EXTI->D3PCR1L + (EXTI_CONFIG_OFFSET * offset));
24009176:	697b      	ldr	r3, [r7, #20]
24009178:	015a      	lsls	r2, r3, #5
2400917a:	4b19      	ldr	r3, [pc, #100]	; (240091e0 <HAL_EXTI_ClearConfigLine+0x18c>)
2400917c:	4413      	add	r3, r2
2400917e:	61fb      	str	r3, [r7, #28]
      pcrlinepos = 1UL << linepos;
24009180:	2201      	movs	r2, #1
24009182:	693b      	ldr	r3, [r7, #16]
24009184:	fa02 f303 	lsl.w	r3, r2, r3
24009188:	61bb      	str	r3, [r7, #24]
2400918a:	e00a      	b.n	240091a2 <HAL_EXTI_ClearConfigLine+0x14e>
    }
    else
    {
      regaddr = (__IO uint32_t *)(&EXTI->D3PCR1H + (EXTI_CONFIG_OFFSET * offset));
2400918c:	697b      	ldr	r3, [r7, #20]
2400918e:	015a      	lsls	r2, r3, #5
24009190:	4b14      	ldr	r3, [pc, #80]	; (240091e4 <HAL_EXTI_ClearConfigLine+0x190>)
24009192:	4413      	add	r3, r2
24009194:	61fb      	str	r3, [r7, #28]
      pcrlinepos = 1UL << (linepos - 16UL);
24009196:	693b      	ldr	r3, [r7, #16]
24009198:	3b10      	subs	r3, #16
2400919a:	2201      	movs	r2, #1
2400919c:	fa02 f303 	lsl.w	r3, r2, r3
240091a0:	61bb      	str	r3, [r7, #24]
    }

    /*Clear D3 PendClear source */
    *regaddr &= (~(pcrlinepos * pcrlinepos * 3UL));
240091a2:	69fb      	ldr	r3, [r7, #28]
240091a4:	6819      	ldr	r1, [r3, #0]
240091a6:	69bb      	ldr	r3, [r7, #24]
240091a8:	fb03 f203 	mul.w	r2, r3, r3
240091ac:	4613      	mov	r3, r2
240091ae:	005b      	lsls	r3, r3, #1
240091b0:	4413      	add	r3, r2
240091b2:	43db      	mvns	r3, r3
240091b4:	ea01 0203 	and.w	r2, r1, r3
240091b8:	69fb      	ldr	r3, [r7, #28]
240091ba:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
240091bc:	2300      	movs	r3, #0
}
240091be:	4618      	mov	r0, r3
240091c0:	3724      	adds	r7, #36	; 0x24
240091c2:	46bd      	mov	sp, r7
240091c4:	f85d 7b04 	ldr.w	r7, [sp], #4
240091c8:	4770      	bx	lr
240091ca:	bf00      	nop
240091cc:	58000080 	.word	0x58000080
240091d0:	58000084 	.word	0x58000084
240091d4:	58000004 	.word	0x58000004
240091d8:	58000400 	.word	0x58000400
240091dc:	5800000c 	.word	0x5800000c
240091e0:	58000010 	.word	0x58000010
240091e4:	58000014 	.word	0x58000014

240091e8 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
240091e8:	b480      	push	{r7}
240091ea:	b087      	sub	sp, #28
240091ec:	af00      	add	r7, sp, #0
240091ee:	60f8      	str	r0, [r7, #12]
240091f0:	460b      	mov	r3, r1
240091f2:	607a      	str	r2, [r7, #4]
240091f4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
240091f6:	2300      	movs	r3, #0
240091f8:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
240091fa:	68fb      	ldr	r3, [r7, #12]
240091fc:	2b00      	cmp	r3, #0
240091fe:	d101      	bne.n	24009204 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
24009200:	2301      	movs	r3, #1
24009202:	e00a      	b.n	2400921a <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
24009204:	7afb      	ldrb	r3, [r7, #11]
24009206:	2b00      	cmp	r3, #0
24009208:	d103      	bne.n	24009212 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
2400920a:	68fb      	ldr	r3, [r7, #12]
2400920c:	687a      	ldr	r2, [r7, #4]
2400920e:	605a      	str	r2, [r3, #4]
      break;
24009210:	e002      	b.n	24009218 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
24009212:	2301      	movs	r3, #1
24009214:	75fb      	strb	r3, [r7, #23]
      break;
24009216:	bf00      	nop
  }

  return status;
24009218:	7dfb      	ldrb	r3, [r7, #23]
}
2400921a:	4618      	mov	r0, r3
2400921c:	371c      	adds	r7, #28
2400921e:	46bd      	mov	sp, r7
24009220:	f85d 7b04 	ldr.w	r7, [sp], #4
24009224:	4770      	bx	lr

24009226 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
24009226:	b480      	push	{r7}
24009228:	b083      	sub	sp, #12
2400922a:	af00      	add	r7, sp, #0
2400922c:	6078      	str	r0, [r7, #4]
2400922e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
24009230:	687b      	ldr	r3, [r7, #4]
24009232:	2b00      	cmp	r3, #0
24009234:	d101      	bne.n	2400923a <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
24009236:	2301      	movs	r3, #1
24009238:	e003      	b.n	24009242 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
2400923a:	687b      	ldr	r3, [r7, #4]
2400923c:	683a      	ldr	r2, [r7, #0]
2400923e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
24009240:	2300      	movs	r3, #0
  }
}
24009242:	4618      	mov	r0, r3
24009244:	370c      	adds	r7, #12
24009246:	46bd      	mov	sp, r7
24009248:	f85d 7b04 	ldr.w	r7, [sp], #4
2400924c:	4770      	bx	lr
	...

24009250 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
24009250:	b580      	push	{r7, lr}
24009252:	b086      	sub	sp, #24
24009254:	af00      	add	r7, sp, #0
24009256:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
24009258:	687b      	ldr	r3, [r7, #4]
2400925a:	681b      	ldr	r3, [r3, #0]
2400925c:	0c1b      	lsrs	r3, r3, #16
2400925e:	f003 0303 	and.w	r3, r3, #3
24009262:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
24009264:	687b      	ldr	r3, [r7, #4]
24009266:	681b      	ldr	r3, [r3, #0]
24009268:	f003 031f 	and.w	r3, r3, #31
2400926c:	2201      	movs	r2, #1
2400926e:	fa02 f303 	lsl.w	r3, r2, r3
24009272:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
24009274:	697b      	ldr	r3, [r7, #20]
24009276:	011a      	lsls	r2, r3, #4
24009278:	4b0c      	ldr	r3, [pc, #48]	; (240092ac <HAL_EXTI_IRQHandler+0x5c>)
2400927a:	4413      	add	r3, r2
2400927c:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
2400927e:	68fb      	ldr	r3, [r7, #12]
24009280:	681b      	ldr	r3, [r3, #0]
24009282:	693a      	ldr	r2, [r7, #16]
24009284:	4013      	ands	r3, r2
24009286:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
24009288:	68bb      	ldr	r3, [r7, #8]
2400928a:	2b00      	cmp	r3, #0
2400928c:	d009      	beq.n	240092a2 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
2400928e:	68fb      	ldr	r3, [r7, #12]
24009290:	693a      	ldr	r2, [r7, #16]
24009292:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
24009294:	687b      	ldr	r3, [r7, #4]
24009296:	685b      	ldr	r3, [r3, #4]
24009298:	2b00      	cmp	r3, #0
2400929a:	d002      	beq.n	240092a2 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
2400929c:	687b      	ldr	r3, [r7, #4]
2400929e:	685b      	ldr	r3, [r3, #4]
240092a0:	4798      	blx	r3
    }
  }
}
240092a2:	bf00      	nop
240092a4:	3718      	adds	r7, #24
240092a6:	46bd      	mov	sp, r7
240092a8:	bd80      	pop	{r7, pc}
240092aa:	bf00      	nop
240092ac:	58000088 	.word	0x58000088

240092b0 <HAL_EXTI_GetPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval 1 if interrupt is pending else 0.
  */
uint32_t HAL_EXTI_GetPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
240092b0:	b480      	push	{r7}
240092b2:	b089      	sub	sp, #36	; 0x24
240092b4:	af00      	add	r7, sp, #0
240092b6:	6078      	str	r0, [r7, #4]
240092b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
240092ba:	687b      	ldr	r3, [r7, #4]
240092bc:	681b      	ldr	r3, [r3, #0]
240092be:	0c1b      	lsrs	r3, r3, #16
240092c0:	f003 0303 	and.w	r3, r3, #3
240092c4:	61fb      	str	r3, [r7, #28]
  linepos = (hexti->Line & EXTI_PIN_MASK);
240092c6:	687b      	ldr	r3, [r7, #4]
240092c8:	681b      	ldr	r3, [r3, #0]
240092ca:	f003 031f 	and.w	r3, r3, #31
240092ce:	61bb      	str	r3, [r7, #24]
  maskline = (1UL << linepos);
240092d0:	2201      	movs	r2, #1
240092d2:	69bb      	ldr	r3, [r7, #24]
240092d4:	fa02 f303 	lsl.w	r3, r2, r3
240092d8:	617b      	str	r3, [r7, #20]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
240092da:	69fb      	ldr	r3, [r7, #28]
240092dc:	011a      	lsls	r2, r3, #4
240092de:	4b09      	ldr	r3, [pc, #36]	; (24009304 <HAL_EXTI_GetPending+0x54>)
240092e0:	4413      	add	r3, r2
240092e2:	613b      	str	r3, [r7, #16]
#endif /* DUAL_CORE */

  /* return 1 if bit is set else 0 */
  regval = ((*regaddr & maskline) >> linepos);
240092e4:	693b      	ldr	r3, [r7, #16]
240092e6:	681a      	ldr	r2, [r3, #0]
240092e8:	697b      	ldr	r3, [r7, #20]
240092ea:	401a      	ands	r2, r3
240092ec:	69bb      	ldr	r3, [r7, #24]
240092ee:	fa22 f303 	lsr.w	r3, r2, r3
240092f2:	60fb      	str	r3, [r7, #12]
  return regval;
240092f4:	68fb      	ldr	r3, [r7, #12]
}
240092f6:	4618      	mov	r0, r3
240092f8:	3724      	adds	r7, #36	; 0x24
240092fa:	46bd      	mov	sp, r7
240092fc:	f85d 7b04 	ldr.w	r7, [sp], #4
24009300:	4770      	bx	lr
24009302:	bf00      	nop
24009304:	58000088 	.word	0x58000088

24009308 <HAL_EXTI_ClearPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval None.
  */
void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
24009308:	b480      	push	{r7}
2400930a:	b087      	sub	sp, #28
2400930c:	af00      	add	r7, sp, #0
2400930e:	6078      	str	r0, [r7, #4]
24009310:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
24009312:	687b      	ldr	r3, [r7, #4]
24009314:	681b      	ldr	r3, [r3, #0]
24009316:	0c1b      	lsrs	r3, r3, #16
24009318:	f003 0303 	and.w	r3, r3, #3
2400931c:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
2400931e:	687b      	ldr	r3, [r7, #4]
24009320:	681b      	ldr	r3, [r3, #0]
24009322:	f003 031f 	and.w	r3, r3, #31
24009326:	2201      	movs	r2, #1
24009328:	fa02 f303 	lsl.w	r3, r2, r3
2400932c:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
2400932e:	697b      	ldr	r3, [r7, #20]
24009330:	011a      	lsls	r2, r3, #4
24009332:	4b06      	ldr	r3, [pc, #24]	; (2400934c <HAL_EXTI_ClearPending+0x44>)
24009334:	4413      	add	r3, r2
24009336:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Clear Pending bit */
  *regaddr =  maskline;
24009338:	68fb      	ldr	r3, [r7, #12]
2400933a:	693a      	ldr	r2, [r7, #16]
2400933c:	601a      	str	r2, [r3, #0]
}
2400933e:	bf00      	nop
24009340:	371c      	adds	r7, #28
24009342:	46bd      	mov	sp, r7
24009344:	f85d 7b04 	ldr.w	r7, [sp], #4
24009348:	4770      	bx	lr
2400934a:	bf00      	nop
2400934c:	58000088 	.word	0x58000088

24009350 <HAL_EXTI_GenerateSWI>:
  * @brief  Generate a software interrupt for a dedicated line.
  * @param  hexti Exti handle.
  * @retval None.
  */
void HAL_EXTI_GenerateSWI(EXTI_HandleTypeDef *hexti)
{
24009350:	b480      	push	{r7}
24009352:	b087      	sub	sp, #28
24009354:	af00      	add	r7, sp, #0
24009356:	6078      	str	r0, [r7, #4]
  /* Check parameters */
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));

  /* compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
24009358:	687b      	ldr	r3, [r7, #4]
2400935a:	681b      	ldr	r3, [r3, #0]
2400935c:	0c1b      	lsrs	r3, r3, #16
2400935e:	f003 0303 	and.w	r3, r3, #3
24009362:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
24009364:	687b      	ldr	r3, [r7, #4]
24009366:	681b      	ldr	r3, [r3, #0]
24009368:	f003 031f 	and.w	r3, r3, #31
2400936c:	2201      	movs	r2, #1
2400936e:	fa02 f303 	lsl.w	r3, r2, r3
24009372:	613b      	str	r3, [r7, #16]

  regaddr = (__IO uint32_t *)(&EXTI->SWIER1 + (EXTI_CONFIG_OFFSET * offset));
24009374:	697b      	ldr	r3, [r7, #20]
24009376:	015a      	lsls	r2, r3, #5
24009378:	4b05      	ldr	r3, [pc, #20]	; (24009390 <HAL_EXTI_GenerateSWI+0x40>)
2400937a:	4413      	add	r3, r2
2400937c:	60fb      	str	r3, [r7, #12]
  *regaddr = maskline;
2400937e:	68fb      	ldr	r3, [r7, #12]
24009380:	693a      	ldr	r2, [r7, #16]
24009382:	601a      	str	r2, [r3, #0]
}
24009384:	bf00      	nop
24009386:	371c      	adds	r7, #28
24009388:	46bd      	mov	sp, r7
2400938a:	f85d 7b04 	ldr.w	r7, [sp], #4
2400938e:	4770      	bx	lr
24009390:	58000008 	.word	0x58000008

24009394 <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
24009394:	b580      	push	{r7, lr}
24009396:	b08a      	sub	sp, #40	; 0x28
24009398:	af00      	add	r7, sp, #0
2400939a:	60f8      	str	r0, [r7, #12]
2400939c:	60b9      	str	r1, [r7, #8]
2400939e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
240093a0:	68bb      	ldr	r3, [r7, #8]
240093a2:	623b      	str	r3, [r7, #32]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
240093a4:	687b      	ldr	r3, [r7, #4]
240093a6:	61fb      	str	r3, [r7, #28]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
240093a8:	2308      	movs	r3, #8
240093aa:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
240093ac:	4b40      	ldr	r3, [pc, #256]	; (240094b0 <HAL_FLASH_Program+0x11c>)
240093ae:	7d1b      	ldrb	r3, [r3, #20]
240093b0:	2b01      	cmp	r3, #1
240093b2:	d101      	bne.n	240093b8 <HAL_FLASH_Program+0x24>
240093b4:	2302      	movs	r3, #2
240093b6:	e076      	b.n	240094a6 <HAL_FLASH_Program+0x112>
240093b8:	4b3d      	ldr	r3, [pc, #244]	; (240094b0 <HAL_FLASH_Program+0x11c>)
240093ba:	2201      	movs	r2, #1
240093bc:	751a      	strb	r2, [r3, #20]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
240093be:	68bb      	ldr	r3, [r7, #8]
240093c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
240093c4:	d306      	bcc.n	240093d4 <HAL_FLASH_Program+0x40>
240093c6:	68bb      	ldr	r3, [r7, #8]
240093c8:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
240093cc:	d202      	bcs.n	240093d4 <HAL_FLASH_Program+0x40>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
240093ce:	2301      	movs	r3, #1
240093d0:	61bb      	str	r3, [r7, #24]
240093d2:	e00c      	b.n	240093ee <HAL_FLASH_Program+0x5a>
  }
#if defined (DUAL_BANK)
  else if(IS_FLASH_PROGRAM_ADDRESS_BANK2(FlashAddress))
240093d4:	68bb      	ldr	r3, [r7, #8]
240093d6:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
240093da:	d306      	bcc.n	240093ea <HAL_FLASH_Program+0x56>
240093dc:	68bb      	ldr	r3, [r7, #8]
240093de:	f1b3 6f02 	cmp.w	r3, #136314880	; 0x8200000
240093e2:	d202      	bcs.n	240093ea <HAL_FLASH_Program+0x56>
  {
    bank = FLASH_BANK_2;
240093e4:	2302      	movs	r3, #2
240093e6:	61bb      	str	r3, [r7, #24]
240093e8:	e001      	b.n	240093ee <HAL_FLASH_Program+0x5a>
  }
#endif /* DUAL_BANK */
  else
  {
    return HAL_ERROR;
240093ea:	2301      	movs	r3, #1
240093ec:	e05b      	b.n	240094a6 <HAL_FLASH_Program+0x112>
  }

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
240093ee:	4b30      	ldr	r3, [pc, #192]	; (240094b0 <HAL_FLASH_Program+0x11c>)
240093f0:	2200      	movs	r2, #0
240093f2:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
240093f4:	69b9      	ldr	r1, [r7, #24]
240093f6:	f24c 3050 	movw	r0, #50000	; 0xc350
240093fa:	f000 fb33 	bl	24009a64 <FLASH_WaitForLastOperation>
240093fe:	4603      	mov	r3, r0
24009400:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if(status == HAL_OK)
24009404:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
24009408:	2b00      	cmp	r3, #0
2400940a:	d147      	bne.n	2400949c <HAL_FLASH_Program+0x108>
  {
#if defined (DUAL_BANK)
    if(bank == FLASH_BANK_1)
2400940c:	69bb      	ldr	r3, [r7, #24]
2400940e:	2b01      	cmp	r3, #1
24009410:	d106      	bne.n	24009420 <HAL_FLASH_Program+0x8c>
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
24009412:	4b28      	ldr	r3, [pc, #160]	; (240094b4 <HAL_FLASH_Program+0x120>)
24009414:	68db      	ldr	r3, [r3, #12]
24009416:	4a27      	ldr	r2, [pc, #156]	; (240094b4 <HAL_FLASH_Program+0x120>)
24009418:	f043 0302 	orr.w	r3, r3, #2
2400941c:	60d3      	str	r3, [r2, #12]
2400941e:	e007      	b.n	24009430 <HAL_FLASH_Program+0x9c>
      }
    }
    else
    {
      /* Set PG bit */
      SET_BIT(FLASH->CR2, FLASH_CR_PG);
24009420:	4b24      	ldr	r3, [pc, #144]	; (240094b4 <HAL_FLASH_Program+0x120>)
24009422:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
24009426:	4a23      	ldr	r2, [pc, #140]	; (240094b4 <HAL_FLASH_Program+0x120>)
24009428:	f043 0302 	orr.w	r3, r3, #2
2400942c:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
  __ASM volatile ("isb 0xF":::"memory");
24009430:	f3bf 8f6f 	isb	sy
}
24009434:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
24009436:	f3bf 8f4f 	dsb	sy
}
2400943a:	bf00      	nop
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
2400943c:	69fb      	ldr	r3, [r7, #28]
2400943e:	681a      	ldr	r2, [r3, #0]
24009440:	6a3b      	ldr	r3, [r7, #32]
24009442:	601a      	str	r2, [r3, #0]
        dest_addr++;
24009444:	6a3b      	ldr	r3, [r7, #32]
24009446:	3304      	adds	r3, #4
24009448:	623b      	str	r3, [r7, #32]
        src_addr++;
2400944a:	69fb      	ldr	r3, [r7, #28]
2400944c:	3304      	adds	r3, #4
2400944e:	61fb      	str	r3, [r7, #28]
        row_index--;
24009450:	7dfb      	ldrb	r3, [r7, #23]
24009452:	3b01      	subs	r3, #1
24009454:	75fb      	strb	r3, [r7, #23]
     } while (row_index != 0U);
24009456:	7dfb      	ldrb	r3, [r7, #23]
24009458:	2b00      	cmp	r3, #0
2400945a:	d1ef      	bne.n	2400943c <HAL_FLASH_Program+0xa8>
  __ASM volatile ("isb 0xF":::"memory");
2400945c:	f3bf 8f6f 	isb	sy
}
24009460:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
24009462:	f3bf 8f4f 	dsb	sy
}
24009466:	bf00      	nop

    __ISB();
    __DSB();

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
24009468:	69b9      	ldr	r1, [r7, #24]
2400946a:	f24c 3050 	movw	r0, #50000	; 0xc350
2400946e:	f000 faf9 	bl	24009a64 <FLASH_WaitForLastOperation>
24009472:	4603      	mov	r3, r0
24009474:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      CLEAR_BIT(FLASH->OPTCR, FLASH_OPTCR_PG_OTP);
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      if(bank == FLASH_BANK_1)
24009478:	69bb      	ldr	r3, [r7, #24]
2400947a:	2b01      	cmp	r3, #1
2400947c:	d106      	bne.n	2400948c <HAL_FLASH_Program+0xf8>
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
2400947e:	4b0d      	ldr	r3, [pc, #52]	; (240094b4 <HAL_FLASH_Program+0x120>)
24009480:	68db      	ldr	r3, [r3, #12]
24009482:	4a0c      	ldr	r2, [pc, #48]	; (240094b4 <HAL_FLASH_Program+0x120>)
24009484:	f023 0302 	bic.w	r3, r3, #2
24009488:	60d3      	str	r3, [r2, #12]
2400948a:	e007      	b.n	2400949c <HAL_FLASH_Program+0x108>
      }
      else
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR2, FLASH_CR_PG);
2400948c:	4b09      	ldr	r3, [pc, #36]	; (240094b4 <HAL_FLASH_Program+0x120>)
2400948e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
24009492:	4a08      	ldr	r2, [pc, #32]	; (240094b4 <HAL_FLASH_Program+0x120>)
24009494:	f023 0302 	bic.w	r3, r3, #2
24009498:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
    }
#endif /* DUAL_BANK */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
2400949c:	4b04      	ldr	r3, [pc, #16]	; (240094b0 <HAL_FLASH_Program+0x11c>)
2400949e:	2200      	movs	r2, #0
240094a0:	751a      	strb	r2, [r3, #20]

  return status;
240094a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
240094a6:	4618      	mov	r0, r3
240094a8:	3728      	adds	r7, #40	; 0x28
240094aa:	46bd      	mov	sp, r7
240094ac:	bd80      	pop	{r7, pc}
240094ae:	bf00      	nop
240094b0:	24001594 	.word	0x24001594
240094b4:	52002000 	.word	0x52002000

240094b8 <HAL_FLASH_Program_IT>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program_IT(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
240094b8:	b580      	push	{r7, lr}
240094ba:	b088      	sub	sp, #32
240094bc:	af00      	add	r7, sp, #0
240094be:	60f8      	str	r0, [r7, #12]
240094c0:	60b9      	str	r1, [r7, #8]
240094c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t*)FlashAddress;
240094c4:	68bb      	ldr	r3, [r7, #8]
240094c6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
240094c8:	687b      	ldr	r3, [r7, #4]
240094ca:	61bb      	str	r3, [r7, #24]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
240094cc:	2308      	movs	r3, #8
240094ce:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
240094d0:	4b3d      	ldr	r3, [pc, #244]	; (240095c8 <HAL_FLASH_Program_IT+0x110>)
240094d2:	7d1b      	ldrb	r3, [r3, #20]
240094d4:	2b01      	cmp	r3, #1
240094d6:	d101      	bne.n	240094dc <HAL_FLASH_Program_IT+0x24>
240094d8:	2302      	movs	r3, #2
240094da:	e071      	b.n	240095c0 <HAL_FLASH_Program_IT+0x108>
240094dc:	4b3a      	ldr	r3, [pc, #232]	; (240095c8 <HAL_FLASH_Program_IT+0x110>)
240094de:	2201      	movs	r2, #1
240094e0:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
240094e2:	4b39      	ldr	r3, [pc, #228]	; (240095c8 <HAL_FLASH_Program_IT+0x110>)
240094e4:	2200      	movs	r2, #0
240094e6:	619a      	str	r2, [r3, #24]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
240094e8:	68bb      	ldr	r3, [r7, #8]
240094ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
240094ee:	d306      	bcc.n	240094fe <HAL_FLASH_Program_IT+0x46>
240094f0:	68bb      	ldr	r3, [r7, #8]
240094f2:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
240094f6:	d202      	bcs.n	240094fe <HAL_FLASH_Program_IT+0x46>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
240094f8:	2301      	movs	r3, #1
240094fa:	617b      	str	r3, [r7, #20]
240094fc:	e00c      	b.n	24009518 <HAL_FLASH_Program_IT+0x60>
  }
#if defined (DUAL_BANK)
  else if(IS_FLASH_PROGRAM_ADDRESS_BANK2(FlashAddress))
240094fe:	68bb      	ldr	r3, [r7, #8]
24009500:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
24009504:	d306      	bcc.n	24009514 <HAL_FLASH_Program_IT+0x5c>
24009506:	68bb      	ldr	r3, [r7, #8]
24009508:	f1b3 6f02 	cmp.w	r3, #136314880	; 0x8200000
2400950c:	d202      	bcs.n	24009514 <HAL_FLASH_Program_IT+0x5c>
  {
    bank = FLASH_BANK_2;
2400950e:	2302      	movs	r3, #2
24009510:	617b      	str	r3, [r7, #20]
24009512:	e001      	b.n	24009518 <HAL_FLASH_Program_IT+0x60>
  }
#endif /* DUAL_BANK */
  else
  {
    return HAL_ERROR;
24009514:	2301      	movs	r3, #1
24009516:	e053      	b.n	240095c0 <HAL_FLASH_Program_IT+0x108>
  }

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
24009518:	6979      	ldr	r1, [r7, #20]
2400951a:	f24c 3050 	movw	r0, #50000	; 0xc350
2400951e:	f000 faa1 	bl	24009a64 <FLASH_WaitForLastOperation>
24009522:	4603      	mov	r3, r0
24009524:	74bb      	strb	r3, [r7, #18]

  if (status != HAL_OK)
24009526:	7cbb      	ldrb	r3, [r7, #18]
24009528:	2b00      	cmp	r3, #0
2400952a:	d003      	beq.n	24009534 <HAL_FLASH_Program_IT+0x7c>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
2400952c:	4b26      	ldr	r3, [pc, #152]	; (240095c8 <HAL_FLASH_Program_IT+0x110>)
2400952e:	2200      	movs	r2, #0
24009530:	751a      	strb	r2, [r3, #20]
24009532:	e044      	b.n	240095be <HAL_FLASH_Program_IT+0x106>
  }
  else
  {
    pFlash.Address = FlashAddress;
24009534:	4a24      	ldr	r2, [pc, #144]	; (240095c8 <HAL_FLASH_Program_IT+0x110>)
24009536:	68bb      	ldr	r3, [r7, #8]
24009538:	6113      	str	r3, [r2, #16]

#if defined (DUAL_BANK)
    if(bank == FLASH_BANK_1)
2400953a:	697b      	ldr	r3, [r7, #20]
2400953c:	2b01      	cmp	r3, #1
2400953e:	d10f      	bne.n	24009560 <HAL_FLASH_Program_IT+0xa8>
    {
      /* Set internal variables used by the IRQ handler */
      pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAM_BANK1;
24009540:	4b21      	ldr	r3, [pc, #132]	; (240095c8 <HAL_FLASH_Program_IT+0x110>)
24009542:	2203      	movs	r2, #3
24009544:	701a      	strb	r2, [r3, #0]
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
24009546:	4b21      	ldr	r3, [pc, #132]	; (240095cc <HAL_FLASH_Program_IT+0x114>)
24009548:	68db      	ldr	r3, [r3, #12]
2400954a:	4a20      	ldr	r2, [pc, #128]	; (240095cc <HAL_FLASH_Program_IT+0x114>)
2400954c:	f043 0302 	orr.w	r3, r3, #2
24009550:	60d3      	str	r3, [r2, #12]
      }

      /* Enable End of Operation and Error interrupts for Bank 1 */
#if defined (FLASH_CR_OPERRIE)
      __HAL_FLASH_ENABLE_IT_BANK1(FLASH_IT_EOP_BANK1     | FLASH_IT_WRPERR_BANK1 | FLASH_IT_PGSERR_BANK1 | \
24009552:	4b1e      	ldr	r3, [pc, #120]	; (240095cc <HAL_FLASH_Program_IT+0x114>)
24009554:	68db      	ldr	r3, [r3, #12]
24009556:	4a1d      	ldr	r2, [pc, #116]	; (240095cc <HAL_FLASH_Program_IT+0x114>)
24009558:	f443 03de 	orr.w	r3, r3, #7274496	; 0x6f0000
2400955c:	60d3      	str	r3, [r2, #12]
2400955e:	e012      	b.n	24009586 <HAL_FLASH_Program_IT+0xce>
#endif /* FLASH_CR_OPERRIE */
    }
    else
    {
      /* Set internal variables used by the IRQ handler */
      pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAM_BANK2;
24009560:	4b19      	ldr	r3, [pc, #100]	; (240095c8 <HAL_FLASH_Program_IT+0x110>)
24009562:	2206      	movs	r2, #6
24009564:	701a      	strb	r2, [r3, #0]

      /* Set PG bit */
      SET_BIT(FLASH->CR2, FLASH_CR_PG);
24009566:	4b19      	ldr	r3, [pc, #100]	; (240095cc <HAL_FLASH_Program_IT+0x114>)
24009568:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
2400956c:	4a17      	ldr	r2, [pc, #92]	; (240095cc <HAL_FLASH_Program_IT+0x114>)
2400956e:	f043 0302 	orr.w	r3, r3, #2
24009572:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

      /* Enable End of Operation and Error interrupts for Bank2 */
#if defined (FLASH_CR_OPERRIE)
      __HAL_FLASH_ENABLE_IT_BANK2(FLASH_IT_EOP_BANK2     | FLASH_IT_WRPERR_BANK2 | FLASH_IT_PGSERR_BANK2 | \
24009576:	4b15      	ldr	r3, [pc, #84]	; (240095cc <HAL_FLASH_Program_IT+0x114>)
24009578:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
2400957c:	4a13      	ldr	r2, [pc, #76]	; (240095cc <HAL_FLASH_Program_IT+0x114>)
2400957e:	f443 03de 	orr.w	r3, r3, #7274496	; 0x6f0000
24009582:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
  __ASM volatile ("isb 0xF":::"memory");
24009586:	f3bf 8f6f 	isb	sy
}
2400958a:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
2400958c:	f3bf 8f4f 	dsb	sy
}
24009590:	bf00      	nop
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
24009592:	69bb      	ldr	r3, [r7, #24]
24009594:	681a      	ldr	r2, [r3, #0]
24009596:	69fb      	ldr	r3, [r7, #28]
24009598:	601a      	str	r2, [r3, #0]
        dest_addr++;
2400959a:	69fb      	ldr	r3, [r7, #28]
2400959c:	3304      	adds	r3, #4
2400959e:	61fb      	str	r3, [r7, #28]
        src_addr++;
240095a0:	69bb      	ldr	r3, [r7, #24]
240095a2:	3304      	adds	r3, #4
240095a4:	61bb      	str	r3, [r7, #24]
        row_index--;
240095a6:	7cfb      	ldrb	r3, [r7, #19]
240095a8:	3b01      	subs	r3, #1
240095aa:	74fb      	strb	r3, [r7, #19]
      } while (row_index != 0U);
240095ac:	7cfb      	ldrb	r3, [r7, #19]
240095ae:	2b00      	cmp	r3, #0
240095b0:	d1ef      	bne.n	24009592 <HAL_FLASH_Program_IT+0xda>
  __ASM volatile ("isb 0xF":::"memory");
240095b2:	f3bf 8f6f 	isb	sy
}
240095b6:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
240095b8:	f3bf 8f4f 	dsb	sy
}
240095bc:	bf00      	nop

    __ISB();
    __DSB();
  }

  return status;
240095be:	7cbb      	ldrb	r3, [r7, #18]
}
240095c0:	4618      	mov	r0, r3
240095c2:	3720      	adds	r7, #32
240095c4:	46bd      	mov	sp, r7
240095c6:	bd80      	pop	{r7, pc}
240095c8:	24001594 	.word	0x24001594
240095cc:	52002000 	.word	0x52002000

240095d0 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
240095d0:	b580      	push	{r7, lr}
240095d2:	b084      	sub	sp, #16
240095d4:	af00      	add	r7, sp, #0
  uint32_t temp;
  uint32_t errorflag;
  FLASH_ProcedureTypeDef procedure;

  /* Check FLASH Bank1 End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG_BANK1(FLASH_SR_EOP) != RESET)
240095d6:	4b95      	ldr	r3, [pc, #596]	; (2400982c <HAL_FLASH_IRQHandler+0x25c>)
240095d8:	691b      	ldr	r3, [r3, #16]
240095da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
240095de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
240095e2:	d15c      	bne.n	2400969e <HAL_FLASH_IRQHandler+0xce>
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE_BANK1)
240095e4:	4b92      	ldr	r3, [pc, #584]	; (24009830 <HAL_FLASH_IRQHandler+0x260>)
240095e6:	781b      	ldrb	r3, [r3, #0]
240095e8:	b2db      	uxtb	r3, r3
240095ea:	2b01      	cmp	r3, #1
240095ec:	d132      	bne.n	24009654 <HAL_FLASH_IRQHandler+0x84>
    {
      /* Nb of sector to erased can be decreased */
      pFlash.NbSectorsToErase--;
240095ee:	4b90      	ldr	r3, [pc, #576]	; (24009830 <HAL_FLASH_IRQHandler+0x260>)
240095f0:	685b      	ldr	r3, [r3, #4]
240095f2:	3b01      	subs	r3, #1
240095f4:	4a8e      	ldr	r2, [pc, #568]	; (24009830 <HAL_FLASH_IRQHandler+0x260>)
240095f6:	6053      	str	r3, [r2, #4]

      /* Check if there are still sectors to erase */
      if(pFlash.NbSectorsToErase != 0U)
240095f8:	4b8d      	ldr	r3, [pc, #564]	; (24009830 <HAL_FLASH_IRQHandler+0x260>)
240095fa:	685b      	ldr	r3, [r3, #4]
240095fc:	2b00      	cmp	r3, #0
240095fe:	d018      	beq.n	24009632 <HAL_FLASH_IRQHandler+0x62>
      {
        /* Indicate user which sector has been erased */
        HAL_FLASH_EndOfOperationCallback(pFlash.Sector);
24009600:	4b8b      	ldr	r3, [pc, #556]	; (24009830 <HAL_FLASH_IRQHandler+0x260>)
24009602:	68db      	ldr	r3, [r3, #12]
24009604:	4618      	mov	r0, r3
24009606:	f000 f93d 	bl	24009884 <HAL_FLASH_EndOfOperationCallback>

        /* Clear bank 1 End of Operation pending bit */
        __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
2400960a:	4b88      	ldr	r3, [pc, #544]	; (2400982c <HAL_FLASH_IRQHandler+0x25c>)
2400960c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
24009610:	615a      	str	r2, [r3, #20]

        /* Increment sector number */
        pFlash.Sector++;
24009612:	4b87      	ldr	r3, [pc, #540]	; (24009830 <HAL_FLASH_IRQHandler+0x260>)
24009614:	68db      	ldr	r3, [r3, #12]
24009616:	3301      	adds	r3, #1
24009618:	4a85      	ldr	r2, [pc, #532]	; (24009830 <HAL_FLASH_IRQHandler+0x260>)
2400961a:	60d3      	str	r3, [r2, #12]
        temp = pFlash.Sector;
2400961c:	4b84      	ldr	r3, [pc, #528]	; (24009830 <HAL_FLASH_IRQHandler+0x260>)
2400961e:	68db      	ldr	r3, [r3, #12]
24009620:	60fb      	str	r3, [r7, #12]
        FLASH_Erase_Sector(temp, FLASH_BANK_1, pFlash.VoltageForErase);
24009622:	4b83      	ldr	r3, [pc, #524]	; (24009830 <HAL_FLASH_IRQHandler+0x260>)
24009624:	689b      	ldr	r3, [r3, #8]
24009626:	461a      	mov	r2, r3
24009628:	2101      	movs	r1, #1
2400962a:	68f8      	ldr	r0, [r7, #12]
2400962c:	f000 ff9e 	bl	2400a56c <FLASH_Erase_Sector>
24009630:	e035      	b.n	2400969e <HAL_FLASH_IRQHandler+0xce>
      }
      else
      {
        /* No more sectors to Erase, user callback can be called */
        /* Reset Sector and stop Erase sectors procedure */
        pFlash.Sector = 0xFFFFFFFFU;
24009632:	4b7f      	ldr	r3, [pc, #508]	; (24009830 <HAL_FLASH_IRQHandler+0x260>)
24009634:	f04f 32ff 	mov.w	r2, #4294967295
24009638:	60da      	str	r2, [r3, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
2400963a:	4b7d      	ldr	r3, [pc, #500]	; (24009830 <HAL_FLASH_IRQHandler+0x260>)
2400963c:	2200      	movs	r2, #0
2400963e:	701a      	strb	r2, [r3, #0]

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Sector);
24009640:	4b7b      	ldr	r3, [pc, #492]	; (24009830 <HAL_FLASH_IRQHandler+0x260>)
24009642:	68db      	ldr	r3, [r3, #12]
24009644:	4618      	mov	r0, r3
24009646:	f000 f91d 	bl	24009884 <HAL_FLASH_EndOfOperationCallback>

        /* Clear FLASH End of Operation pending bit */
        __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
2400964a:	4b78      	ldr	r3, [pc, #480]	; (2400982c <HAL_FLASH_IRQHandler+0x25c>)
2400964c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
24009650:	615a      	str	r2, [r3, #20]
24009652:	e024      	b.n	2400969e <HAL_FLASH_IRQHandler+0xce>
      }
    }
    else
    {
      procedure = pFlash.ProcedureOnGoing;
24009654:	4b76      	ldr	r3, [pc, #472]	; (24009830 <HAL_FLASH_IRQHandler+0x260>)
24009656:	781b      	ldrb	r3, [r3, #0]
24009658:	72fb      	strb	r3, [r7, #11]

      if((procedure == FLASH_PROC_MASSERASE_BANK1) || (procedure == FLASH_PROC_ALLBANK_MASSERASE))
2400965a:	7afb      	ldrb	r3, [r7, #11]
2400965c:	2b02      	cmp	r3, #2
2400965e:	d002      	beq.n	24009666 <HAL_FLASH_IRQHandler+0x96>
24009660:	7afb      	ldrb	r3, [r7, #11]
24009662:	2b07      	cmp	r3, #7
24009664:	d103      	bne.n	2400966e <HAL_FLASH_IRQHandler+0x9e>
      {
        /* MassErase ended. Return the selected bank */
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(FLASH_BANK_1);
24009666:	2001      	movs	r0, #1
24009668:	f000 f90c 	bl	24009884 <HAL_FLASH_EndOfOperationCallback>
2400966c:	e007      	b.n	2400967e <HAL_FLASH_IRQHandler+0xae>
      }
      else if(procedure == FLASH_PROC_PROGRAM_BANK1)
2400966e:	7afb      	ldrb	r3, [r7, #11]
24009670:	2b03      	cmp	r3, #3
24009672:	d104      	bne.n	2400967e <HAL_FLASH_IRQHandler+0xae>
      {
        /* Program ended. Return the selected address */
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
24009674:	4b6e      	ldr	r3, [pc, #440]	; (24009830 <HAL_FLASH_IRQHandler+0x260>)
24009676:	691b      	ldr	r3, [r3, #16]
24009678:	4618      	mov	r0, r3
2400967a:	f000 f903 	bl	24009884 <HAL_FLASH_EndOfOperationCallback>
      else
      {
        /* Nothing to do */
      }

      if((procedure != FLASH_PROC_SECTERASE_BANK2) && \
2400967e:	7afb      	ldrb	r3, [r7, #11]
24009680:	2b04      	cmp	r3, #4
24009682:	d00c      	beq.n	2400969e <HAL_FLASH_IRQHandler+0xce>
24009684:	7afb      	ldrb	r3, [r7, #11]
24009686:	2b05      	cmp	r3, #5
24009688:	d009      	beq.n	2400969e <HAL_FLASH_IRQHandler+0xce>
         (procedure != FLASH_PROC_MASSERASE_BANK2) && \
2400968a:	7afb      	ldrb	r3, [r7, #11]
2400968c:	2b06      	cmp	r3, #6
2400968e:	d006      	beq.n	2400969e <HAL_FLASH_IRQHandler+0xce>
         (procedure != FLASH_PROC_PROGRAM_BANK2))
      {
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
24009690:	4b67      	ldr	r3, [pc, #412]	; (24009830 <HAL_FLASH_IRQHandler+0x260>)
24009692:	2200      	movs	r2, #0
24009694:	701a      	strb	r2, [r3, #0]
        /* Clear FLASH End of Operation pending bit */
        __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
24009696:	4b65      	ldr	r3, [pc, #404]	; (2400982c <HAL_FLASH_IRQHandler+0x25c>)
24009698:	f44f 3280 	mov.w	r2, #65536	; 0x10000
2400969c:	615a      	str	r2, [r3, #20]
    }
  }

#if defined (DUAL_BANK)
 /* Check FLASH Bank2 End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG_BANK2(FLASH_SR_EOP) != RESET)
2400969e:	4b63      	ldr	r3, [pc, #396]	; (2400982c <HAL_FLASH_IRQHandler+0x25c>)
240096a0:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
240096a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
240096a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
240096ac:	d15f      	bne.n	2400976e <HAL_FLASH_IRQHandler+0x19e>
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE_BANK2)
240096ae:	4b60      	ldr	r3, [pc, #384]	; (24009830 <HAL_FLASH_IRQHandler+0x260>)
240096b0:	781b      	ldrb	r3, [r3, #0]
240096b2:	b2db      	uxtb	r3, r3
240096b4:	2b04      	cmp	r3, #4
240096b6:	d134      	bne.n	24009722 <HAL_FLASH_IRQHandler+0x152>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
240096b8:	4b5d      	ldr	r3, [pc, #372]	; (24009830 <HAL_FLASH_IRQHandler+0x260>)
240096ba:	685b      	ldr	r3, [r3, #4]
240096bc:	3b01      	subs	r3, #1
240096be:	4a5c      	ldr	r2, [pc, #368]	; (24009830 <HAL_FLASH_IRQHandler+0x260>)
240096c0:	6053      	str	r3, [r2, #4]

      /* Check if there are still sectors to erase*/
      if(pFlash.NbSectorsToErase != 0U)
240096c2:	4b5b      	ldr	r3, [pc, #364]	; (24009830 <HAL_FLASH_IRQHandler+0x260>)
240096c4:	685b      	ldr	r3, [r3, #4]
240096c6:	2b00      	cmp	r3, #0
240096c8:	d019      	beq.n	240096fe <HAL_FLASH_IRQHandler+0x12e>
      {
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(pFlash.Sector);
240096ca:	4b59      	ldr	r3, [pc, #356]	; (24009830 <HAL_FLASH_IRQHandler+0x260>)
240096cc:	68db      	ldr	r3, [r3, #12]
240096ce:	4618      	mov	r0, r3
240096d0:	f000 f8d8 	bl	24009884 <HAL_FLASH_EndOfOperationCallback>

        /* Clear bank 2 End of Operation pending bit */
        __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
240096d4:	4b55      	ldr	r3, [pc, #340]	; (2400982c <HAL_FLASH_IRQHandler+0x25c>)
240096d6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
240096da:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

        /*Increment sector number*/
        pFlash.Sector++;
240096de:	4b54      	ldr	r3, [pc, #336]	; (24009830 <HAL_FLASH_IRQHandler+0x260>)
240096e0:	68db      	ldr	r3, [r3, #12]
240096e2:	3301      	adds	r3, #1
240096e4:	4a52      	ldr	r2, [pc, #328]	; (24009830 <HAL_FLASH_IRQHandler+0x260>)
240096e6:	60d3      	str	r3, [r2, #12]
        temp = pFlash.Sector;
240096e8:	4b51      	ldr	r3, [pc, #324]	; (24009830 <HAL_FLASH_IRQHandler+0x260>)
240096ea:	68db      	ldr	r3, [r3, #12]
240096ec:	60fb      	str	r3, [r7, #12]
        FLASH_Erase_Sector(temp, FLASH_BANK_2, pFlash.VoltageForErase);
240096ee:	4b50      	ldr	r3, [pc, #320]	; (24009830 <HAL_FLASH_IRQHandler+0x260>)
240096f0:	689b      	ldr	r3, [r3, #8]
240096f2:	461a      	mov	r2, r3
240096f4:	2102      	movs	r1, #2
240096f6:	68f8      	ldr	r0, [r7, #12]
240096f8:	f000 ff38 	bl	2400a56c <FLASH_Erase_Sector>
240096fc:	e037      	b.n	2400976e <HAL_FLASH_IRQHandler+0x19e>
      }
      else
      {
        /* No more sectors to Erase, user callback can be called */
        /* Reset Sector and stop Erase sectors procedure */
        pFlash.Sector = 0xFFFFFFFFU;
240096fe:	4b4c      	ldr	r3, [pc, #304]	; (24009830 <HAL_FLASH_IRQHandler+0x260>)
24009700:	f04f 32ff 	mov.w	r2, #4294967295
24009704:	60da      	str	r2, [r3, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
24009706:	4b4a      	ldr	r3, [pc, #296]	; (24009830 <HAL_FLASH_IRQHandler+0x260>)
24009708:	2200      	movs	r2, #0
2400970a:	701a      	strb	r2, [r3, #0]

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Sector);
2400970c:	4b48      	ldr	r3, [pc, #288]	; (24009830 <HAL_FLASH_IRQHandler+0x260>)
2400970e:	68db      	ldr	r3, [r3, #12]
24009710:	4618      	mov	r0, r3
24009712:	f000 f8b7 	bl	24009884 <HAL_FLASH_EndOfOperationCallback>

        /* Clear FLASH End of Operation pending bit */
        __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
24009716:	4b45      	ldr	r3, [pc, #276]	; (2400982c <HAL_FLASH_IRQHandler+0x25c>)
24009718:	f44f 3280 	mov.w	r2, #65536	; 0x10000
2400971c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
24009720:	e025      	b.n	2400976e <HAL_FLASH_IRQHandler+0x19e>
      }
    }
    else
    {
      procedure = pFlash.ProcedureOnGoing;
24009722:	4b43      	ldr	r3, [pc, #268]	; (24009830 <HAL_FLASH_IRQHandler+0x260>)
24009724:	781b      	ldrb	r3, [r3, #0]
24009726:	72fb      	strb	r3, [r7, #11]

      if((procedure == FLASH_PROC_MASSERASE_BANK2) || (procedure == FLASH_PROC_ALLBANK_MASSERASE))
24009728:	7afb      	ldrb	r3, [r7, #11]
2400972a:	2b05      	cmp	r3, #5
2400972c:	d002      	beq.n	24009734 <HAL_FLASH_IRQHandler+0x164>
2400972e:	7afb      	ldrb	r3, [r7, #11]
24009730:	2b07      	cmp	r3, #7
24009732:	d103      	bne.n	2400973c <HAL_FLASH_IRQHandler+0x16c>
      {
        /*MassErase ended. Return the selected bank*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(FLASH_BANK_2);
24009734:	2002      	movs	r0, #2
24009736:	f000 f8a5 	bl	24009884 <HAL_FLASH_EndOfOperationCallback>
2400973a:	e007      	b.n	2400974c <HAL_FLASH_IRQHandler+0x17c>
      }
      else if(procedure == FLASH_PROC_PROGRAM_BANK2)
2400973c:	7afb      	ldrb	r3, [r7, #11]
2400973e:	2b06      	cmp	r3, #6
24009740:	d104      	bne.n	2400974c <HAL_FLASH_IRQHandler+0x17c>
      {
        /* Program ended. Return the selected address */
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
24009742:	4b3b      	ldr	r3, [pc, #236]	; (24009830 <HAL_FLASH_IRQHandler+0x260>)
24009744:	691b      	ldr	r3, [r3, #16]
24009746:	4618      	mov	r0, r3
24009748:	f000 f89c 	bl	24009884 <HAL_FLASH_EndOfOperationCallback>
      else
      {
        /* Nothing to do */
      }

      if((procedure != FLASH_PROC_SECTERASE_BANK1) && \
2400974c:	7afb      	ldrb	r3, [r7, #11]
2400974e:	2b01      	cmp	r3, #1
24009750:	d00d      	beq.n	2400976e <HAL_FLASH_IRQHandler+0x19e>
24009752:	7afb      	ldrb	r3, [r7, #11]
24009754:	2b02      	cmp	r3, #2
24009756:	d00a      	beq.n	2400976e <HAL_FLASH_IRQHandler+0x19e>
         (procedure != FLASH_PROC_MASSERASE_BANK1) && \
24009758:	7afb      	ldrb	r3, [r7, #11]
2400975a:	2b03      	cmp	r3, #3
2400975c:	d007      	beq.n	2400976e <HAL_FLASH_IRQHandler+0x19e>
         (procedure != FLASH_PROC_PROGRAM_BANK1))
      {
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
2400975e:	4b34      	ldr	r3, [pc, #208]	; (24009830 <HAL_FLASH_IRQHandler+0x260>)
24009760:	2200      	movs	r2, #0
24009762:	701a      	strb	r2, [r3, #0]
        /* Clear FLASH End of Operation pending bit */
        __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
24009764:	4b31      	ldr	r3, [pc, #196]	; (2400982c <HAL_FLASH_IRQHandler+0x25c>)
24009766:	f44f 3280 	mov.w	r2, #65536	; 0x10000
2400976a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  }
#endif /* DUAL_BANK */

  /* Check FLASH Bank1 operation error flags */
#if defined (FLASH_SR_OPERR)
  errorflag = FLASH->SR1 & (FLASH_FLAG_WRPERR_BANK1 | FLASH_FLAG_PGSERR_BANK1 | FLASH_FLAG_STRBERR_BANK1 | \
2400976e:	4b2f      	ldr	r3, [pc, #188]	; (2400982c <HAL_FLASH_IRQHandler+0x25c>)
24009770:	691b      	ldr	r3, [r3, #16]
24009772:	f403 03dc 	and.w	r3, r3, #7208960	; 0x6e0000
24009776:	607b      	str	r3, [r7, #4]
#else
  errorflag = FLASH->SR1 & (FLASH_FLAG_WRPERR_BANK1 | FLASH_FLAG_PGSERR_BANK1 | FLASH_FLAG_STRBERR_BANK1 | \
                            FLASH_FLAG_INCERR_BANK1);
#endif /* FLASH_SR_OPERR */

  if(errorflag != 0U)
24009778:	687b      	ldr	r3, [r7, #4]
2400977a:	2b00      	cmp	r3, #0
2400977c:	d028      	beq.n	240097d0 <HAL_FLASH_IRQHandler+0x200>
  {
    /* Save the error code */
    pFlash.ErrorCode |= errorflag;
2400977e:	4b2c      	ldr	r3, [pc, #176]	; (24009830 <HAL_FLASH_IRQHandler+0x260>)
24009780:	699a      	ldr	r2, [r3, #24]
24009782:	687b      	ldr	r3, [r7, #4]
24009784:	4313      	orrs	r3, r2
24009786:	4a2a      	ldr	r2, [pc, #168]	; (24009830 <HAL_FLASH_IRQHandler+0x260>)
24009788:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG_BANK1(errorflag);
2400978a:	4a28      	ldr	r2, [pc, #160]	; (2400982c <HAL_FLASH_IRQHandler+0x25c>)
2400978c:	687b      	ldr	r3, [r7, #4]
2400978e:	6153      	str	r3, [r2, #20]

    procedure = pFlash.ProcedureOnGoing;
24009790:	4b27      	ldr	r3, [pc, #156]	; (24009830 <HAL_FLASH_IRQHandler+0x260>)
24009792:	781b      	ldrb	r3, [r3, #0]
24009794:	72fb      	strb	r3, [r7, #11]

    if(procedure == FLASH_PROC_SECTERASE_BANK1)
24009796:	7afb      	ldrb	r3, [r7, #11]
24009798:	2b01      	cmp	r3, #1
2400979a:	d107      	bne.n	240097ac <HAL_FLASH_IRQHandler+0x1dc>
    {
      /* Return the faulty sector */
      temp = pFlash.Sector;
2400979c:	4b24      	ldr	r3, [pc, #144]	; (24009830 <HAL_FLASH_IRQHandler+0x260>)
2400979e:	68db      	ldr	r3, [r3, #12]
240097a0:	60fb      	str	r3, [r7, #12]
      pFlash.Sector = 0xFFFFFFFFU;
240097a2:	4b23      	ldr	r3, [pc, #140]	; (24009830 <HAL_FLASH_IRQHandler+0x260>)
240097a4:	f04f 32ff 	mov.w	r2, #4294967295
240097a8:	60da      	str	r2, [r3, #12]
240097aa:	e00b      	b.n	240097c4 <HAL_FLASH_IRQHandler+0x1f4>
    }
    else if((procedure == FLASH_PROC_MASSERASE_BANK1) || (procedure == FLASH_PROC_ALLBANK_MASSERASE))
240097ac:	7afb      	ldrb	r3, [r7, #11]
240097ae:	2b02      	cmp	r3, #2
240097b0:	d002      	beq.n	240097b8 <HAL_FLASH_IRQHandler+0x1e8>
240097b2:	7afb      	ldrb	r3, [r7, #11]
240097b4:	2b07      	cmp	r3, #7
240097b6:	d102      	bne.n	240097be <HAL_FLASH_IRQHandler+0x1ee>
    {
      /* Return the faulty bank */
      temp = FLASH_BANK_1;
240097b8:	2301      	movs	r3, #1
240097ba:	60fb      	str	r3, [r7, #12]
240097bc:	e002      	b.n	240097c4 <HAL_FLASH_IRQHandler+0x1f4>
    }
    else
    {
      /* Return the faulty address */
      temp = pFlash.Address;
240097be:	4b1c      	ldr	r3, [pc, #112]	; (24009830 <HAL_FLASH_IRQHandler+0x260>)
240097c0:	691b      	ldr	r3, [r3, #16]
240097c2:	60fb      	str	r3, [r7, #12]
    }

    /* Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
240097c4:	4b1a      	ldr	r3, [pc, #104]	; (24009830 <HAL_FLASH_IRQHandler+0x260>)
240097c6:	2200      	movs	r2, #0
240097c8:	701a      	strb	r2, [r3, #0]

    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(temp);
240097ca:	68f8      	ldr	r0, [r7, #12]
240097cc:	f000 f864 	bl	24009898 <HAL_FLASH_OperationErrorCallback>
  }

#if defined (DUAL_BANK)
  /* Check FLASH Bank2 operation error flags */
#if defined (FLASH_SR_OPERR)
  errorflag = FLASH->SR2 & ((FLASH_FLAG_WRPERR_BANK2 | FLASH_FLAG_PGSERR_BANK2 | FLASH_FLAG_STRBERR_BANK2 | \
240097d0:	4b16      	ldr	r3, [pc, #88]	; (2400982c <HAL_FLASH_IRQHandler+0x25c>)
240097d2:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
240097d6:	f403 03dc 	and.w	r3, r3, #7208960	; 0x6e0000
240097da:	607b      	str	r3, [r7, #4]
#else
  errorflag = FLASH->SR2 & ((FLASH_FLAG_WRPERR_BANK2 | FLASH_FLAG_PGSERR_BANK2 | FLASH_FLAG_STRBERR_BANK2 | \
                             FLASH_FLAG_INCERR_BANK2) & 0x7FFFFFFFU);
#endif /* FLASH_SR_OPERR */

  if(errorflag != 0U)
240097dc:	687b      	ldr	r3, [r7, #4]
240097de:	2b00      	cmp	r3, #0
240097e0:	d031      	beq.n	24009846 <HAL_FLASH_IRQHandler+0x276>
  {
    /* Save the error code */
    pFlash.ErrorCode |= (errorflag | 0x80000000U);
240097e2:	4b13      	ldr	r3, [pc, #76]	; (24009830 <HAL_FLASH_IRQHandler+0x260>)
240097e4:	699a      	ldr	r2, [r3, #24]
240097e6:	687b      	ldr	r3, [r7, #4]
240097e8:	4313      	orrs	r3, r2
240097ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
240097ee:	4a10      	ldr	r2, [pc, #64]	; (24009830 <HAL_FLASH_IRQHandler+0x260>)
240097f0:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG_BANK2(errorflag);
240097f2:	4a0e      	ldr	r2, [pc, #56]	; (2400982c <HAL_FLASH_IRQHandler+0x25c>)
240097f4:	687b      	ldr	r3, [r7, #4]
240097f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
240097fa:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

    procedure = pFlash.ProcedureOnGoing;
240097fe:	4b0c      	ldr	r3, [pc, #48]	; (24009830 <HAL_FLASH_IRQHandler+0x260>)
24009800:	781b      	ldrb	r3, [r3, #0]
24009802:	72fb      	strb	r3, [r7, #11]

    if(procedure== FLASH_PROC_SECTERASE_BANK2)
24009804:	7afb      	ldrb	r3, [r7, #11]
24009806:	2b04      	cmp	r3, #4
24009808:	d107      	bne.n	2400981a <HAL_FLASH_IRQHandler+0x24a>
    {
      /*return the faulty sector*/
      temp = pFlash.Sector;
2400980a:	4b09      	ldr	r3, [pc, #36]	; (24009830 <HAL_FLASH_IRQHandler+0x260>)
2400980c:	68db      	ldr	r3, [r3, #12]
2400980e:	60fb      	str	r3, [r7, #12]
      pFlash.Sector = 0xFFFFFFFFU;
24009810:	4b07      	ldr	r3, [pc, #28]	; (24009830 <HAL_FLASH_IRQHandler+0x260>)
24009812:	f04f 32ff 	mov.w	r2, #4294967295
24009816:	60da      	str	r2, [r3, #12]
24009818:	e00f      	b.n	2400983a <HAL_FLASH_IRQHandler+0x26a>
    }
    else if((procedure == FLASH_PROC_MASSERASE_BANK2) || (procedure == FLASH_PROC_ALLBANK_MASSERASE))
2400981a:	7afb      	ldrb	r3, [r7, #11]
2400981c:	2b05      	cmp	r3, #5
2400981e:	d002      	beq.n	24009826 <HAL_FLASH_IRQHandler+0x256>
24009820:	7afb      	ldrb	r3, [r7, #11]
24009822:	2b07      	cmp	r3, #7
24009824:	d106      	bne.n	24009834 <HAL_FLASH_IRQHandler+0x264>
    {
      /*return the faulty bank*/
      temp = FLASH_BANK_2;
24009826:	2302      	movs	r3, #2
24009828:	60fb      	str	r3, [r7, #12]
2400982a:	e006      	b.n	2400983a <HAL_FLASH_IRQHandler+0x26a>
2400982c:	52002000 	.word	0x52002000
24009830:	24001594 	.word	0x24001594
    }
    else
    {
      /*return the faulty address*/
      temp = pFlash.Address;
24009834:	4b11      	ldr	r3, [pc, #68]	; (2400987c <HAL_FLASH_IRQHandler+0x2ac>)
24009836:	691b      	ldr	r3, [r3, #16]
24009838:	60fb      	str	r3, [r7, #12]
    }

    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
2400983a:	4b10      	ldr	r3, [pc, #64]	; (2400987c <HAL_FLASH_IRQHandler+0x2ac>)
2400983c:	2200      	movs	r2, #0
2400983e:	701a      	strb	r2, [r3, #0]

    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(temp);
24009840:	68f8      	ldr	r0, [r7, #12]
24009842:	f000 f829 	bl	24009898 <HAL_FLASH_OperationErrorCallback>
  }
#endif /* DUAL_BANK */

  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
24009846:	4b0d      	ldr	r3, [pc, #52]	; (2400987c <HAL_FLASH_IRQHandler+0x2ac>)
24009848:	781b      	ldrb	r3, [r3, #0]
2400984a:	b2db      	uxtb	r3, r3
2400984c:	2b00      	cmp	r3, #0
2400984e:	d110      	bne.n	24009872 <HAL_FLASH_IRQHandler+0x2a2>
  {
#if defined (FLASH_CR_OPERRIE)
    /* Disable Bank1 Operation and Error source interrupt */
    __HAL_FLASH_DISABLE_IT_BANK1(FLASH_IT_EOP_BANK1    | FLASH_IT_WRPERR_BANK1 | FLASH_IT_PGSERR_BANK1 | \
24009850:	4b0b      	ldr	r3, [pc, #44]	; (24009880 <HAL_FLASH_IRQHandler+0x2b0>)
24009852:	68db      	ldr	r3, [r3, #12]
24009854:	4a0a      	ldr	r2, [pc, #40]	; (24009880 <HAL_FLASH_IRQHandler+0x2b0>)
24009856:	f423 03de 	bic.w	r3, r3, #7274496	; 0x6f0000
2400985a:	60d3      	str	r3, [r2, #12]
                                 FLASH_IT_STRBERR_BANK1 | FLASH_IT_INCERR_BANK1 | FLASH_IT_OPERR_BANK1);

#if defined (DUAL_BANK)
    /* Disable Bank2 Operation and Error source interrupt */
    __HAL_FLASH_DISABLE_IT_BANK2(FLASH_IT_EOP_BANK2    | FLASH_IT_WRPERR_BANK2 | FLASH_IT_PGSERR_BANK2 | \
2400985c:	4b08      	ldr	r3, [pc, #32]	; (24009880 <HAL_FLASH_IRQHandler+0x2b0>)
2400985e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
24009862:	4a07      	ldr	r2, [pc, #28]	; (24009880 <HAL_FLASH_IRQHandler+0x2b0>)
24009864:	f423 03de 	bic.w	r3, r3, #7274496	; 0x6f0000
24009868:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
                                 FLASH_IT_STRBERR_BANK2 | FLASH_IT_INCERR_BANK2);
#endif /* DUAL_BANK */
#endif /* FLASH_CR_OPERRIE */

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
2400986c:	4b03      	ldr	r3, [pc, #12]	; (2400987c <HAL_FLASH_IRQHandler+0x2ac>)
2400986e:	2200      	movs	r2, #0
24009870:	751a      	strb	r2, [r3, #20]
  }
}
24009872:	bf00      	nop
24009874:	3710      	adds	r7, #16
24009876:	46bd      	mov	sp, r7
24009878:	bd80      	pop	{r7, pc}
2400987a:	bf00      	nop
2400987c:	24001594 	.word	0x24001594
24009880:	52002000 	.word	0x52002000

24009884 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFF, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
24009884:	b480      	push	{r7}
24009886:	b083      	sub	sp, #12
24009888:	af00      	add	r7, sp, #0
2400988a:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */
}
2400988c:	bf00      	nop
2400988e:	370c      	adds	r7, #12
24009890:	46bd      	mov	sp, r7
24009892:	f85d 7b04 	ldr.w	r7, [sp], #4
24009896:	4770      	bx	lr

24009898 <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
24009898:	b480      	push	{r7}
2400989a:	b083      	sub	sp, #12
2400989c:	af00      	add	r7, sp, #0
2400989e:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */
}
240098a0:	bf00      	nop
240098a2:	370c      	adds	r7, #12
240098a4:	46bd      	mov	sp, r7
240098a6:	f85d 7b04 	ldr.w	r7, [sp], #4
240098aa:	4770      	bx	lr

240098ac <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
240098ac:	b480      	push	{r7}
240098ae:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
240098b0:	4b18      	ldr	r3, [pc, #96]	; (24009914 <HAL_FLASH_Unlock+0x68>)
240098b2:	68db      	ldr	r3, [r3, #12]
240098b4:	f003 0301 	and.w	r3, r3, #1
240098b8:	2b00      	cmp	r3, #0
240098ba:	d00d      	beq.n	240098d8 <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
240098bc:	4b15      	ldr	r3, [pc, #84]	; (24009914 <HAL_FLASH_Unlock+0x68>)
240098be:	4a16      	ldr	r2, [pc, #88]	; (24009918 <HAL_FLASH_Unlock+0x6c>)
240098c0:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
240098c2:	4b14      	ldr	r3, [pc, #80]	; (24009914 <HAL_FLASH_Unlock+0x68>)
240098c4:	4a15      	ldr	r2, [pc, #84]	; (2400991c <HAL_FLASH_Unlock+0x70>)
240098c6:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
240098c8:	4b12      	ldr	r3, [pc, #72]	; (24009914 <HAL_FLASH_Unlock+0x68>)
240098ca:	68db      	ldr	r3, [r3, #12]
240098cc:	f003 0301 	and.w	r3, r3, #1
240098d0:	2b00      	cmp	r3, #0
240098d2:	d001      	beq.n	240098d8 <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
240098d4:	2301      	movs	r3, #1
240098d6:	e018      	b.n	2400990a <HAL_FLASH_Unlock+0x5e>
    }
  }

#if defined (DUAL_BANK)
  if(READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
240098d8:	4b0e      	ldr	r3, [pc, #56]	; (24009914 <HAL_FLASH_Unlock+0x68>)
240098da:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
240098de:	f003 0301 	and.w	r3, r3, #1
240098e2:	2b00      	cmp	r3, #0
240098e4:	d010      	beq.n	24009908 <HAL_FLASH_Unlock+0x5c>
  {
    /* Authorize the FLASH Bank2 Registers access */
    WRITE_REG(FLASH->KEYR2, FLASH_KEY1);
240098e6:	4b0b      	ldr	r3, [pc, #44]	; (24009914 <HAL_FLASH_Unlock+0x68>)
240098e8:	4a0b      	ldr	r2, [pc, #44]	; (24009918 <HAL_FLASH_Unlock+0x6c>)
240098ea:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    WRITE_REG(FLASH->KEYR2, FLASH_KEY2);
240098ee:	4b09      	ldr	r3, [pc, #36]	; (24009914 <HAL_FLASH_Unlock+0x68>)
240098f0:	4a0a      	ldr	r2, [pc, #40]	; (2400991c <HAL_FLASH_Unlock+0x70>)
240098f2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

    /* Verify Flash Bank2 is unlocked */
    if (READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
240098f6:	4b07      	ldr	r3, [pc, #28]	; (24009914 <HAL_FLASH_Unlock+0x68>)
240098f8:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
240098fc:	f003 0301 	and.w	r3, r3, #1
24009900:	2b00      	cmp	r3, #0
24009902:	d001      	beq.n	24009908 <HAL_FLASH_Unlock+0x5c>
    {
      return HAL_ERROR;
24009904:	2301      	movs	r3, #1
24009906:	e000      	b.n	2400990a <HAL_FLASH_Unlock+0x5e>
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
24009908:	2300      	movs	r3, #0
}
2400990a:	4618      	mov	r0, r3
2400990c:	46bd      	mov	sp, r7
2400990e:	f85d 7b04 	ldr.w	r7, [sp], #4
24009912:	4770      	bx	lr
24009914:	52002000 	.word	0x52002000
24009918:	45670123 	.word	0x45670123
2400991c:	cdef89ab 	.word	0xcdef89ab

24009920 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
24009920:	b480      	push	{r7}
24009922:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Bank1 Control Register access */
  SET_BIT(FLASH->CR1, FLASH_CR_LOCK);
24009924:	4b12      	ldr	r3, [pc, #72]	; (24009970 <HAL_FLASH_Lock+0x50>)
24009926:	68db      	ldr	r3, [r3, #12]
24009928:	4a11      	ldr	r2, [pc, #68]	; (24009970 <HAL_FLASH_Lock+0x50>)
2400992a:	f043 0301 	orr.w	r3, r3, #1
2400992e:	60d3      	str	r3, [r2, #12]

  /* Verify Flash Bank1 is locked */
  if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) == 0U)
24009930:	4b0f      	ldr	r3, [pc, #60]	; (24009970 <HAL_FLASH_Lock+0x50>)
24009932:	68db      	ldr	r3, [r3, #12]
24009934:	f003 0301 	and.w	r3, r3, #1
24009938:	2b00      	cmp	r3, #0
2400993a:	d101      	bne.n	24009940 <HAL_FLASH_Lock+0x20>
  {
    return HAL_ERROR;
2400993c:	2301      	movs	r3, #1
2400993e:	e011      	b.n	24009964 <HAL_FLASH_Lock+0x44>
  }

#if defined (DUAL_BANK)
  /* Set the LOCK Bit to lock the FLASH Bank2 Control Register access */
  SET_BIT(FLASH->CR2, FLASH_CR_LOCK);
24009940:	4b0b      	ldr	r3, [pc, #44]	; (24009970 <HAL_FLASH_Lock+0x50>)
24009942:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
24009946:	4a0a      	ldr	r2, [pc, #40]	; (24009970 <HAL_FLASH_Lock+0x50>)
24009948:	f043 0301 	orr.w	r3, r3, #1
2400994c:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

  /* Verify Flash Bank2 is locked */
  if (READ_BIT(FLASH->CR2, FLASH_CR_LOCK) == 0U)
24009950:	4b07      	ldr	r3, [pc, #28]	; (24009970 <HAL_FLASH_Lock+0x50>)
24009952:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
24009956:	f003 0301 	and.w	r3, r3, #1
2400995a:	2b00      	cmp	r3, #0
2400995c:	d101      	bne.n	24009962 <HAL_FLASH_Lock+0x42>
  {
    return HAL_ERROR;
2400995e:	2301      	movs	r3, #1
24009960:	e000      	b.n	24009964 <HAL_FLASH_Lock+0x44>
  }
#endif /* DUAL_BANK */

  return HAL_OK;
24009962:	2300      	movs	r3, #0
}
24009964:	4618      	mov	r0, r3
24009966:	46bd      	mov	sp, r7
24009968:	f85d 7b04 	ldr.w	r7, [sp], #4
2400996c:	4770      	bx	lr
2400996e:	bf00      	nop
24009970:	52002000 	.word	0x52002000

24009974 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
24009974:	b480      	push	{r7}
24009976:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->OPTCR, FLASH_OPTCR_OPTLOCK) != 0U)
24009978:	4b0c      	ldr	r3, [pc, #48]	; (240099ac <HAL_FLASH_OB_Unlock+0x38>)
2400997a:	699b      	ldr	r3, [r3, #24]
2400997c:	f003 0301 	and.w	r3, r3, #1
24009980:	2b00      	cmp	r3, #0
24009982:	d00d      	beq.n	240099a0 <HAL_FLASH_OB_Unlock+0x2c>
  {
    /* Authorizes the Option Byte registers programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPT_KEY1);
24009984:	4b09      	ldr	r3, [pc, #36]	; (240099ac <HAL_FLASH_OB_Unlock+0x38>)
24009986:	4a0a      	ldr	r2, [pc, #40]	; (240099b0 <HAL_FLASH_OB_Unlock+0x3c>)
24009988:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPT_KEY2);
2400998a:	4b08      	ldr	r3, [pc, #32]	; (240099ac <HAL_FLASH_OB_Unlock+0x38>)
2400998c:	4a09      	ldr	r2, [pc, #36]	; (240099b4 <HAL_FLASH_OB_Unlock+0x40>)
2400998e:	609a      	str	r2, [r3, #8]

    /* Verify that the Option Bytes are unlocked */
    if (READ_BIT(FLASH->OPTCR, FLASH_OPTCR_OPTLOCK) != 0U)
24009990:	4b06      	ldr	r3, [pc, #24]	; (240099ac <HAL_FLASH_OB_Unlock+0x38>)
24009992:	699b      	ldr	r3, [r3, #24]
24009994:	f003 0301 	and.w	r3, r3, #1
24009998:	2b00      	cmp	r3, #0
2400999a:	d001      	beq.n	240099a0 <HAL_FLASH_OB_Unlock+0x2c>
    {
      return HAL_ERROR;
2400999c:	2301      	movs	r3, #1
2400999e:	e000      	b.n	240099a2 <HAL_FLASH_OB_Unlock+0x2e>
    }
  }

  return HAL_OK;
240099a0:	2300      	movs	r3, #0
}
240099a2:	4618      	mov	r0, r3
240099a4:	46bd      	mov	sp, r7
240099a6:	f85d 7b04 	ldr.w	r7, [sp], #4
240099aa:	4770      	bx	lr
240099ac:	52002000 	.word	0x52002000
240099b0:	08192a3b 	.word	0x08192a3b
240099b4:	4c5d6e7f 	.word	0x4c5d6e7f

240099b8 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
240099b8:	b480      	push	{r7}
240099ba:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  SET_BIT(FLASH->OPTCR, FLASH_OPTCR_OPTLOCK);
240099bc:	4b09      	ldr	r3, [pc, #36]	; (240099e4 <HAL_FLASH_OB_Lock+0x2c>)
240099be:	699b      	ldr	r3, [r3, #24]
240099c0:	4a08      	ldr	r2, [pc, #32]	; (240099e4 <HAL_FLASH_OB_Lock+0x2c>)
240099c2:	f043 0301 	orr.w	r3, r3, #1
240099c6:	6193      	str	r3, [r2, #24]

  /* Verify that the Option Bytes are locked */
  if (READ_BIT(FLASH->OPTCR, FLASH_OPTCR_OPTLOCK) == 0U)
240099c8:	4b06      	ldr	r3, [pc, #24]	; (240099e4 <HAL_FLASH_OB_Lock+0x2c>)
240099ca:	699b      	ldr	r3, [r3, #24]
240099cc:	f003 0301 	and.w	r3, r3, #1
240099d0:	2b00      	cmp	r3, #0
240099d2:	d101      	bne.n	240099d8 <HAL_FLASH_OB_Lock+0x20>
  {
    return HAL_ERROR;
240099d4:	2301      	movs	r3, #1
240099d6:	e000      	b.n	240099da <HAL_FLASH_OB_Lock+0x22>
  }

  return HAL_OK;
240099d8:	2300      	movs	r3, #0
}
240099da:	4618      	mov	r0, r3
240099dc:	46bd      	mov	sp, r7
240099de:	f85d 7b04 	ldr.w	r7, [sp], #4
240099e2:	4770      	bx	lr
240099e4:	52002000 	.word	0x52002000

240099e8 <HAL_FLASH_OB_Launch>:
/**
  * @brief  Launch the option bytes loading.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
240099e8:	b580      	push	{r7, lr}
240099ea:	b082      	sub	sp, #8
240099ec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status;

  /* Wait for CRC computation to be completed */
  if (FLASH_CRC_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
240099ee:	2101      	movs	r1, #1
240099f0:	f24c 3050 	movw	r0, #50000	; 0xc350
240099f4:	f000 f90e 	bl	24009c14 <FLASH_CRC_WaitForLastOperation>
240099f8:	4603      	mov	r3, r0
240099fa:	2b00      	cmp	r3, #0
240099fc:	d002      	beq.n	24009a04 <HAL_FLASH_OB_Launch+0x1c>
  {
    status = HAL_ERROR;
240099fe:	2301      	movs	r3, #1
24009a00:	71fb      	strb	r3, [r7, #7]
24009a02:	e00c      	b.n	24009a1e <HAL_FLASH_OB_Launch+0x36>
  }
#if defined (DUAL_BANK)
  else if (FLASH_CRC_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
24009a04:	2102      	movs	r1, #2
24009a06:	f24c 3050 	movw	r0, #50000	; 0xc350
24009a0a:	f000 f903 	bl	24009c14 <FLASH_CRC_WaitForLastOperation>
24009a0e:	4603      	mov	r3, r0
24009a10:	2b00      	cmp	r3, #0
24009a12:	d002      	beq.n	24009a1a <HAL_FLASH_OB_Launch+0x32>
  {
    status = HAL_ERROR;
24009a14:	2301      	movs	r3, #1
24009a16:	71fb      	strb	r3, [r7, #7]
24009a18:	e001      	b.n	24009a1e <HAL_FLASH_OB_Launch+0x36>
  }
#endif /* DUAL_BANK */
  else
  {
    status = HAL_OK;
24009a1a:	2300      	movs	r3, #0
24009a1c:	71fb      	strb	r3, [r7, #7]
  }

  if (status == HAL_OK)
24009a1e:	79fb      	ldrb	r3, [r7, #7]
24009a20:	2b00      	cmp	r3, #0
24009a22:	d10b      	bne.n	24009a3c <HAL_FLASH_OB_Launch+0x54>
  {
    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->OPTCR, FLASH_OPTCR_OPTSTART);
24009a24:	4b08      	ldr	r3, [pc, #32]	; (24009a48 <HAL_FLASH_OB_Launch+0x60>)
24009a26:	699b      	ldr	r3, [r3, #24]
24009a28:	4a07      	ldr	r2, [pc, #28]	; (24009a48 <HAL_FLASH_OB_Launch+0x60>)
24009a2a:	f043 0302 	orr.w	r3, r3, #2
24009a2e:	6193      	str	r3, [r2, #24]

    /* Wait for OB change operation to be completed */
    status = FLASH_OB_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
24009a30:	f24c 3050 	movw	r0, #50000	; 0xc350
24009a34:	f000 f8b2 	bl	24009b9c <FLASH_OB_WaitForLastOperation>
24009a38:	4603      	mov	r3, r0
24009a3a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
24009a3c:	79fb      	ldrb	r3, [r7, #7]
}
24009a3e:	4618      	mov	r0, r3
24009a40:	3708      	adds	r7, #8
24009a42:	46bd      	mov	sp, r7
24009a44:	bd80      	pop	{r7, pc}
24009a46:	bf00      	nop
24009a48:	52002000 	.word	0x52002000

24009a4c <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_DBECC_BANK2: Double Detection ECC on Bank 2
  *            @arg HAL_FLASH_ERROR_CRCRD_BANK2: CRC Read Error on Bank 2
*/

uint32_t HAL_FLASH_GetError(void)
{
24009a4c:	b480      	push	{r7}
24009a4e:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
24009a50:	4b03      	ldr	r3, [pc, #12]	; (24009a60 <HAL_FLASH_GetError+0x14>)
24009a52:	699b      	ldr	r3, [r3, #24]
}
24009a54:	4618      	mov	r0, r3
24009a56:	46bd      	mov	sp, r7
24009a58:	f85d 7b04 	ldr.w	r7, [sp], #4
24009a5c:	4770      	bx	lr
24009a5e:	bf00      	nop
24009a60:	24001594 	.word	0x24001594

24009a64 <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
24009a64:	b580      	push	{r7, lr}
24009a66:	b086      	sub	sp, #24
24009a68:	af00      	add	r7, sp, #0
24009a6a:	6078      	str	r0, [r7, #4]
24009a6c:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
24009a6e:	2304      	movs	r3, #4
24009a70:	617b      	str	r3, [r7, #20]
  uint32_t errorflag = 0;
24009a72:	2300      	movs	r3, #0
24009a74:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = HAL_GetTick();
24009a76:	f7f9 fb15 	bl	240030a4 <HAL_GetTick>
24009a7a:	60f8      	str	r0, [r7, #12]

  assert_param(IS_FLASH_BANK_EXCLUSIVE(Bank));

#if defined (DUAL_BANK)

  if (Bank == FLASH_BANK_2)
24009a7c:	683b      	ldr	r3, [r7, #0]
24009a7e:	2b02      	cmp	r3, #2
24009a80:	d113      	bne.n	24009aaa <FLASH_WaitForLastOperation+0x46>
  {
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
24009a82:	4b41      	ldr	r3, [pc, #260]	; (24009b88 <FLASH_WaitForLastOperation+0x124>)
24009a84:	617b      	str	r3, [r7, #20]
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
24009a86:	e010      	b.n	24009aaa <FLASH_WaitForLastOperation+0x46>
  {
    if(Timeout != HAL_MAX_DELAY)
24009a88:	687b      	ldr	r3, [r7, #4]
24009a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
24009a8e:	d00c      	beq.n	24009aaa <FLASH_WaitForLastOperation+0x46>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
24009a90:	f7f9 fb08 	bl	240030a4 <HAL_GetTick>
24009a94:	4602      	mov	r2, r0
24009a96:	68fb      	ldr	r3, [r7, #12]
24009a98:	1ad3      	subs	r3, r2, r3
24009a9a:	687a      	ldr	r2, [r7, #4]
24009a9c:	429a      	cmp	r2, r3
24009a9e:	d302      	bcc.n	24009aa6 <FLASH_WaitForLastOperation+0x42>
24009aa0:	687b      	ldr	r3, [r7, #4]
24009aa2:	2b00      	cmp	r3, #0
24009aa4:	d101      	bne.n	24009aaa <FLASH_WaitForLastOperation+0x46>
      {
        return HAL_TIMEOUT;
24009aa6:	2303      	movs	r3, #3
24009aa8:	e06a      	b.n	24009b80 <FLASH_WaitForLastOperation+0x11c>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
24009aaa:	697a      	ldr	r2, [r7, #20]
24009aac:	4b37      	ldr	r3, [pc, #220]	; (24009b8c <FLASH_WaitForLastOperation+0x128>)
24009aae:	4013      	ands	r3, r2
24009ab0:	697a      	ldr	r2, [r7, #20]
24009ab2:	429a      	cmp	r2, r3
24009ab4:	d10a      	bne.n	24009acc <FLASH_WaitForLastOperation+0x68>
24009ab6:	4b36      	ldr	r3, [pc, #216]	; (24009b90 <FLASH_WaitForLastOperation+0x12c>)
24009ab8:	691a      	ldr	r2, [r3, #16]
24009aba:	697b      	ldr	r3, [r7, #20]
24009abc:	4013      	ands	r3, r2
24009abe:	697a      	ldr	r2, [r7, #20]
24009ac0:	429a      	cmp	r2, r3
24009ac2:	bf0c      	ite	eq
24009ac4:	2301      	moveq	r3, #1
24009ac6:	2300      	movne	r3, #0
24009ac8:	b2db      	uxtb	r3, r3
24009aca:	e00c      	b.n	24009ae6 <FLASH_WaitForLastOperation+0x82>
24009acc:	4b30      	ldr	r3, [pc, #192]	; (24009b90 <FLASH_WaitForLastOperation+0x12c>)
24009ace:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
24009ad2:	43da      	mvns	r2, r3
24009ad4:	697b      	ldr	r3, [r7, #20]
24009ad6:	4013      	ands	r3, r2
24009ad8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
24009adc:	2b00      	cmp	r3, #0
24009ade:	bf0c      	ite	eq
24009ae0:	2301      	moveq	r3, #1
24009ae2:	2300      	movne	r3, #0
24009ae4:	b2db      	uxtb	r3, r3
24009ae6:	2b00      	cmp	r3, #0
24009ae8:	d1ce      	bne.n	24009a88 <FLASH_WaitForLastOperation+0x24>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
24009aea:	683b      	ldr	r3, [r7, #0]
24009aec:	2b01      	cmp	r3, #1
24009aee:	d105      	bne.n	24009afc <FLASH_WaitForLastOperation+0x98>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
24009af0:	4b27      	ldr	r3, [pc, #156]	; (24009b90 <FLASH_WaitForLastOperation+0x12c>)
24009af2:	691a      	ldr	r2, [r3, #16]
24009af4:	4b27      	ldr	r3, [pc, #156]	; (24009b94 <FLASH_WaitForLastOperation+0x130>)
24009af6:	4013      	ands	r3, r2
24009af8:	613b      	str	r3, [r7, #16]
24009afa:	e007      	b.n	24009b0c <FLASH_WaitForLastOperation+0xa8>
  }
#if defined (DUAL_BANK)
  else
  {
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
24009afc:	4b24      	ldr	r3, [pc, #144]	; (24009b90 <FLASH_WaitForLastOperation+0x12c>)
24009afe:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
24009b02:	4b24      	ldr	r3, [pc, #144]	; (24009b94 <FLASH_WaitForLastOperation+0x130>)
24009b04:	4013      	ands	r3, r2
24009b06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
24009b0a:	613b      	str	r3, [r7, #16]
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
24009b0c:	693b      	ldr	r3, [r7, #16]
24009b0e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
24009b12:	2b00      	cmp	r3, #0
24009b14:	d017      	beq.n	24009b46 <FLASH_WaitForLastOperation+0xe2>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
24009b16:	4b20      	ldr	r3, [pc, #128]	; (24009b98 <FLASH_WaitForLastOperation+0x134>)
24009b18:	699a      	ldr	r2, [r3, #24]
24009b1a:	693b      	ldr	r3, [r7, #16]
24009b1c:	4313      	orrs	r3, r2
24009b1e:	4a1e      	ldr	r2, [pc, #120]	; (24009b98 <FLASH_WaitForLastOperation+0x134>)
24009b20:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
24009b22:	693a      	ldr	r2, [r7, #16]
24009b24:	4b19      	ldr	r3, [pc, #100]	; (24009b8c <FLASH_WaitForLastOperation+0x128>)
24009b26:	4013      	ands	r3, r2
24009b28:	693a      	ldr	r2, [r7, #16]
24009b2a:	429a      	cmp	r2, r3
24009b2c:	d103      	bne.n	24009b36 <FLASH_WaitForLastOperation+0xd2>
24009b2e:	4a18      	ldr	r2, [pc, #96]	; (24009b90 <FLASH_WaitForLastOperation+0x12c>)
24009b30:	693b      	ldr	r3, [r7, #16]
24009b32:	6153      	str	r3, [r2, #20]
24009b34:	e005      	b.n	24009b42 <FLASH_WaitForLastOperation+0xde>
24009b36:	4a16      	ldr	r2, [pc, #88]	; (24009b90 <FLASH_WaitForLastOperation+0x12c>)
24009b38:	693b      	ldr	r3, [r7, #16]
24009b3a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
24009b3e:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

    return HAL_ERROR;
24009b42:	2301      	movs	r3, #1
24009b44:	e01c      	b.n	24009b80 <FLASH_WaitForLastOperation+0x11c>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
24009b46:	683b      	ldr	r3, [r7, #0]
24009b48:	2b01      	cmp	r3, #1
24009b4a:	d10b      	bne.n	24009b64 <FLASH_WaitForLastOperation+0x100>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
24009b4c:	4b10      	ldr	r3, [pc, #64]	; (24009b90 <FLASH_WaitForLastOperation+0x12c>)
24009b4e:	691b      	ldr	r3, [r3, #16]
24009b50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
24009b54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
24009b58:	d111      	bne.n	24009b7e <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
24009b5a:	4b0d      	ldr	r3, [pc, #52]	; (24009b90 <FLASH_WaitForLastOperation+0x12c>)
24009b5c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
24009b60:	615a      	str	r2, [r3, #20]
24009b62:	e00c      	b.n	24009b7e <FLASH_WaitForLastOperation+0x11a>
    }
  }
#if defined (DUAL_BANK)
  else
  {
    if (__HAL_FLASH_GET_FLAG_BANK2(FLASH_FLAG_EOP_BANK2))
24009b64:	4b0a      	ldr	r3, [pc, #40]	; (24009b90 <FLASH_WaitForLastOperation+0x12c>)
24009b66:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
24009b6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
24009b6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
24009b72:	d104      	bne.n	24009b7e <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
24009b74:	4b06      	ldr	r3, [pc, #24]	; (24009b90 <FLASH_WaitForLastOperation+0x12c>)
24009b76:	f44f 3280 	mov.w	r2, #65536	; 0x10000
24009b7a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
24009b7e:	2300      	movs	r3, #0
}
24009b80:	4618      	mov	r0, r3
24009b82:	3718      	adds	r7, #24
24009b84:	46bd      	mov	sp, r7
24009b86:	bd80      	pop	{r7, pc}
24009b88:	80000004 	.word	0x80000004
24009b8c:	1fef000f 	.word	0x1fef000f
24009b90:	52002000 	.word	0x52002000
24009b94:	17ee0000 	.word	0x17ee0000
24009b98:	24001594 	.word	0x24001594

24009b9c <FLASH_OB_WaitForLastOperation>:
  * @brief  Wait for a FLASH Option Bytes change operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_OB_WaitForLastOperation(uint32_t Timeout)
{
24009b9c:	b580      	push	{r7, lr}
24009b9e:	b084      	sub	sp, #16
24009ba0:	af00      	add	r7, sp, #0
24009ba2:	6078      	str	r0, [r7, #4]
  /* Get timeout */
  uint32_t tickstart = HAL_GetTick();
24009ba4:	f7f9 fa7e 	bl	240030a4 <HAL_GetTick>
24009ba8:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH Option Bytes change operation to complete by polling on OPT_BUSY flag to be reset */
  while(READ_BIT(FLASH->OPTSR_CUR, FLASH_OPTSR_OPT_BUSY) != 0U)
24009baa:	e010      	b.n	24009bce <FLASH_OB_WaitForLastOperation+0x32>
  {
    if(Timeout != HAL_MAX_DELAY)
24009bac:	687b      	ldr	r3, [r7, #4]
24009bae:	f1b3 3fff 	cmp.w	r3, #4294967295
24009bb2:	d00c      	beq.n	24009bce <FLASH_OB_WaitForLastOperation+0x32>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
24009bb4:	f7f9 fa76 	bl	240030a4 <HAL_GetTick>
24009bb8:	4602      	mov	r2, r0
24009bba:	68fb      	ldr	r3, [r7, #12]
24009bbc:	1ad3      	subs	r3, r2, r3
24009bbe:	687a      	ldr	r2, [r7, #4]
24009bc0:	429a      	cmp	r2, r3
24009bc2:	d302      	bcc.n	24009bca <FLASH_OB_WaitForLastOperation+0x2e>
24009bc4:	687b      	ldr	r3, [r7, #4]
24009bc6:	2b00      	cmp	r3, #0
24009bc8:	d101      	bne.n	24009bce <FLASH_OB_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
24009bca:	2303      	movs	r3, #3
24009bcc:	e01a      	b.n	24009c04 <FLASH_OB_WaitForLastOperation+0x68>
  while(READ_BIT(FLASH->OPTSR_CUR, FLASH_OPTSR_OPT_BUSY) != 0U)
24009bce:	4b0f      	ldr	r3, [pc, #60]	; (24009c0c <FLASH_OB_WaitForLastOperation+0x70>)
24009bd0:	69db      	ldr	r3, [r3, #28]
24009bd2:	f003 0301 	and.w	r3, r3, #1
24009bd6:	2b00      	cmp	r3, #0
24009bd8:	d1e8      	bne.n	24009bac <FLASH_OB_WaitForLastOperation+0x10>
      }
    }
  }

  /* Check option byte change error */
  if(READ_BIT(FLASH->OPTSR_CUR, FLASH_OPTSR_OPTCHANGEERR) != 0U)
24009bda:	4b0c      	ldr	r3, [pc, #48]	; (24009c0c <FLASH_OB_WaitForLastOperation+0x70>)
24009bdc:	69db      	ldr	r3, [r3, #28]
24009bde:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
24009be2:	2b00      	cmp	r3, #0
24009be4:	d00d      	beq.n	24009c02 <FLASH_OB_WaitForLastOperation+0x66>
  {
    /* Save the error code */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OB_CHANGE;
24009be6:	4b0a      	ldr	r3, [pc, #40]	; (24009c10 <FLASH_OB_WaitForLastOperation+0x74>)
24009be8:	699b      	ldr	r3, [r3, #24]
24009bea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
24009bee:	4a08      	ldr	r2, [pc, #32]	; (24009c10 <FLASH_OB_WaitForLastOperation+0x74>)
24009bf0:	6193      	str	r3, [r2, #24]

    /* Clear the OB error flag */
    FLASH->OPTCCR |= FLASH_OPTCCR_CLR_OPTCHANGEERR;
24009bf2:	4b06      	ldr	r3, [pc, #24]	; (24009c0c <FLASH_OB_WaitForLastOperation+0x70>)
24009bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24009bf6:	4a05      	ldr	r2, [pc, #20]	; (24009c0c <FLASH_OB_WaitForLastOperation+0x70>)
24009bf8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
24009bfc:	6253      	str	r3, [r2, #36]	; 0x24

    return HAL_ERROR;
24009bfe:	2301      	movs	r3, #1
24009c00:	e000      	b.n	24009c04 <FLASH_OB_WaitForLastOperation+0x68>
  }

  /* If there is no error flag set */
  return HAL_OK;
24009c02:	2300      	movs	r3, #0
}
24009c04:	4618      	mov	r0, r3
24009c06:	3710      	adds	r7, #16
24009c08:	46bd      	mov	sp, r7
24009c0a:	bd80      	pop	{r7, pc}
24009c0c:	52002000 	.word	0x52002000
24009c10:	24001594 	.word	0x24001594

24009c14 <FLASH_CRC_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_CRC_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
24009c14:	b580      	push	{r7, lr}
24009c16:	b084      	sub	sp, #16
24009c18:	af00      	add	r7, sp, #0
24009c1a:	6078      	str	r0, [r7, #4]
24009c1c:	6039      	str	r1, [r7, #0]
  uint32_t bsyflag;
  uint32_t tickstart = HAL_GetTick();
24009c1e:	f7f9 fa41 	bl	240030a4 <HAL_GetTick>
24009c22:	60b8      	str	r0, [r7, #8]

  assert_param(IS_FLASH_BANK_EXCLUSIVE(Bank));

  /* Select bsyflag depending on Bank */
  if(Bank == FLASH_BANK_1)
24009c24:	683b      	ldr	r3, [r7, #0]
24009c26:	2b01      	cmp	r3, #1
24009c28:	d102      	bne.n	24009c30 <FLASH_CRC_WaitForLastOperation+0x1c>
  {
    bsyflag = FLASH_FLAG_CRC_BUSY_BANK1;
24009c2a:	2308      	movs	r3, #8
24009c2c:	60fb      	str	r3, [r7, #12]
24009c2e:	e013      	b.n	24009c58 <FLASH_CRC_WaitForLastOperation+0x44>
  }
  else
  {
    bsyflag = FLASH_FLAG_CRC_BUSY_BANK2;
24009c30:	4b31      	ldr	r3, [pc, #196]	; (24009cf8 <FLASH_CRC_WaitForLastOperation+0xe4>)
24009c32:	60fb      	str	r3, [r7, #12]
  }

  /* Wait for the FLASH CRC computation to complete by polling on CRC_BUSY flag to be reset */
  while(__HAL_FLASH_GET_FLAG(bsyflag))
24009c34:	e010      	b.n	24009c58 <FLASH_CRC_WaitForLastOperation+0x44>
  {
    if(Timeout != HAL_MAX_DELAY)
24009c36:	687b      	ldr	r3, [r7, #4]
24009c38:	f1b3 3fff 	cmp.w	r3, #4294967295
24009c3c:	d00c      	beq.n	24009c58 <FLASH_CRC_WaitForLastOperation+0x44>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
24009c3e:	f7f9 fa31 	bl	240030a4 <HAL_GetTick>
24009c42:	4602      	mov	r2, r0
24009c44:	68bb      	ldr	r3, [r7, #8]
24009c46:	1ad3      	subs	r3, r2, r3
24009c48:	687a      	ldr	r2, [r7, #4]
24009c4a:	429a      	cmp	r2, r3
24009c4c:	d302      	bcc.n	24009c54 <FLASH_CRC_WaitForLastOperation+0x40>
24009c4e:	687b      	ldr	r3, [r7, #4]
24009c50:	2b00      	cmp	r3, #0
24009c52:	d101      	bne.n	24009c58 <FLASH_CRC_WaitForLastOperation+0x44>
      {
        return HAL_TIMEOUT;
24009c54:	2303      	movs	r3, #3
24009c56:	e04b      	b.n	24009cf0 <FLASH_CRC_WaitForLastOperation+0xdc>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
24009c58:	68fa      	ldr	r2, [r7, #12]
24009c5a:	4b28      	ldr	r3, [pc, #160]	; (24009cfc <FLASH_CRC_WaitForLastOperation+0xe8>)
24009c5c:	4013      	ands	r3, r2
24009c5e:	68fa      	ldr	r2, [r7, #12]
24009c60:	429a      	cmp	r2, r3
24009c62:	d10a      	bne.n	24009c7a <FLASH_CRC_WaitForLastOperation+0x66>
24009c64:	4b26      	ldr	r3, [pc, #152]	; (24009d00 <FLASH_CRC_WaitForLastOperation+0xec>)
24009c66:	691a      	ldr	r2, [r3, #16]
24009c68:	68fb      	ldr	r3, [r7, #12]
24009c6a:	4013      	ands	r3, r2
24009c6c:	68fa      	ldr	r2, [r7, #12]
24009c6e:	429a      	cmp	r2, r3
24009c70:	bf0c      	ite	eq
24009c72:	2301      	moveq	r3, #1
24009c74:	2300      	movne	r3, #0
24009c76:	b2db      	uxtb	r3, r3
24009c78:	e00c      	b.n	24009c94 <FLASH_CRC_WaitForLastOperation+0x80>
24009c7a:	4b21      	ldr	r3, [pc, #132]	; (24009d00 <FLASH_CRC_WaitForLastOperation+0xec>)
24009c7c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
24009c80:	43da      	mvns	r2, r3
24009c82:	68fb      	ldr	r3, [r7, #12]
24009c84:	4013      	ands	r3, r2
24009c86:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
24009c8a:	2b00      	cmp	r3, #0
24009c8c:	bf0c      	ite	eq
24009c8e:	2301      	moveq	r3, #1
24009c90:	2300      	movne	r3, #0
24009c92:	b2db      	uxtb	r3, r3
24009c94:	2b00      	cmp	r3, #0
24009c96:	d1ce      	bne.n	24009c36 <FLASH_CRC_WaitForLastOperation+0x22>
      }
    }
  }

  /* Check FLASH CRC read error flag  */
  if(Bank == FLASH_BANK_1)
24009c98:	683b      	ldr	r3, [r7, #0]
24009c9a:	2b01      	cmp	r3, #1
24009c9c:	d112      	bne.n	24009cc4 <FLASH_CRC_WaitForLastOperation+0xb0>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_CRCRDERR_BANK1))
24009c9e:	4b18      	ldr	r3, [pc, #96]	; (24009d00 <FLASH_CRC_WaitForLastOperation+0xec>)
24009ca0:	691b      	ldr	r3, [r3, #16]
24009ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
24009ca6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
24009caa:	d120      	bne.n	24009cee <FLASH_CRC_WaitForLastOperation+0xda>
    {
      /* Save the error code */
      pFlash.ErrorCode |= HAL_FLASH_ERROR_CRCRD_BANK1;
24009cac:	4b15      	ldr	r3, [pc, #84]	; (24009d04 <FLASH_CRC_WaitForLastOperation+0xf0>)
24009cae:	699b      	ldr	r3, [r3, #24]
24009cb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
24009cb4:	4a13      	ldr	r2, [pc, #76]	; (24009d04 <FLASH_CRC_WaitForLastOperation+0xf0>)
24009cb6:	6193      	str	r3, [r2, #24]

      /* Clear FLASH CRC read error pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_CRCRDERR_BANK1);
24009cb8:	4b11      	ldr	r3, [pc, #68]	; (24009d00 <FLASH_CRC_WaitForLastOperation+0xec>)
24009cba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
24009cbe:	615a      	str	r2, [r3, #20]

      return HAL_ERROR;
24009cc0:	2301      	movs	r3, #1
24009cc2:	e015      	b.n	24009cf0 <FLASH_CRC_WaitForLastOperation+0xdc>
    }
  }
#if defined (DUAL_BANK)
  else
  {
    if (__HAL_FLASH_GET_FLAG_BANK2(FLASH_FLAG_CRCRDERR_BANK2))
24009cc4:	4b0e      	ldr	r3, [pc, #56]	; (24009d00 <FLASH_CRC_WaitForLastOperation+0xec>)
24009cc6:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
24009cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
24009cce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
24009cd2:	d10c      	bne.n	24009cee <FLASH_CRC_WaitForLastOperation+0xda>
    {
      /* Save the error code */
      pFlash.ErrorCode |= HAL_FLASH_ERROR_CRCRD_BANK2;
24009cd4:	4b0b      	ldr	r3, [pc, #44]	; (24009d04 <FLASH_CRC_WaitForLastOperation+0xf0>)
24009cd6:	699b      	ldr	r3, [r3, #24]
24009cd8:	f043 4310 	orr.w	r3, r3, #2415919104	; 0x90000000
24009cdc:	4a09      	ldr	r2, [pc, #36]	; (24009d04 <FLASH_CRC_WaitForLastOperation+0xf0>)
24009cde:	6193      	str	r3, [r2, #24]

      /* Clear FLASH CRC read error pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_CRCRDERR_BANK2);
24009ce0:	4b07      	ldr	r3, [pc, #28]	; (24009d00 <FLASH_CRC_WaitForLastOperation+0xec>)
24009ce2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
24009ce6:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

      return HAL_ERROR;
24009cea:	2301      	movs	r3, #1
24009cec:	e000      	b.n	24009cf0 <FLASH_CRC_WaitForLastOperation+0xdc>
    }
  }
#endif /* DUAL_BANK */

  /* If there is no error flag set */
  return HAL_OK;
24009cee:	2300      	movs	r3, #0
}
24009cf0:	4618      	mov	r0, r3
24009cf2:	3710      	adds	r7, #16
24009cf4:	46bd      	mov	sp, r7
24009cf6:	bd80      	pop	{r7, pc}
24009cf8:	80000008 	.word	0x80000008
24009cfc:	1fef000f 	.word	0x1fef000f
24009d00:	52002000 	.word	0x52002000
24009d04:	24001594 	.word	0x24001594

24009d08 <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
24009d08:	b580      	push	{r7, lr}
24009d0a:	b084      	sub	sp, #16
24009d0c:	af00      	add	r7, sp, #0
24009d0e:	6078      	str	r0, [r7, #4]
24009d10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
24009d12:	2300      	movs	r3, #0
24009d14:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
24009d16:	4b5e      	ldr	r3, [pc, #376]	; (24009e90 <HAL_FLASHEx_Erase+0x188>)
24009d18:	7d1b      	ldrb	r3, [r3, #20]
24009d1a:	2b01      	cmp	r3, #1
24009d1c:	d101      	bne.n	24009d22 <HAL_FLASHEx_Erase+0x1a>
24009d1e:	2302      	movs	r3, #2
24009d20:	e0b2      	b.n	24009e88 <HAL_FLASHEx_Erase+0x180>
24009d22:	4b5b      	ldr	r3, [pc, #364]	; (24009e90 <HAL_FLASHEx_Erase+0x188>)
24009d24:	2201      	movs	r2, #1
24009d26:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
24009d28:	4b59      	ldr	r3, [pc, #356]	; (24009e90 <HAL_FLASHEx_Erase+0x188>)
24009d2a:	2200      	movs	r2, #0
24009d2c:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
24009d2e:	687b      	ldr	r3, [r7, #4]
24009d30:	685b      	ldr	r3, [r3, #4]
24009d32:	f003 0301 	and.w	r3, r3, #1
24009d36:	2b00      	cmp	r3, #0
24009d38:	d009      	beq.n	24009d4e <HAL_FLASHEx_Erase+0x46>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
24009d3a:	2101      	movs	r1, #1
24009d3c:	f24c 3050 	movw	r0, #50000	; 0xc350
24009d40:	f7ff fe90 	bl	24009a64 <FLASH_WaitForLastOperation>
24009d44:	4603      	mov	r3, r0
24009d46:	2b00      	cmp	r3, #0
24009d48:	d001      	beq.n	24009d4e <HAL_FLASHEx_Erase+0x46>
    {
      status = HAL_ERROR;
24009d4a:	2301      	movs	r3, #1
24009d4c:	73fb      	strb	r3, [r7, #15]
    }
  }

#if defined (DUAL_BANK)
  /* Wait for last operation to be completed on Bank2 */
  if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
24009d4e:	687b      	ldr	r3, [r7, #4]
24009d50:	685b      	ldr	r3, [r3, #4]
24009d52:	f003 0302 	and.w	r3, r3, #2
24009d56:	2b00      	cmp	r3, #0
24009d58:	d009      	beq.n	24009d6e <HAL_FLASHEx_Erase+0x66>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
24009d5a:	2102      	movs	r1, #2
24009d5c:	f24c 3050 	movw	r0, #50000	; 0xc350
24009d60:	f7ff fe80 	bl	24009a64 <FLASH_WaitForLastOperation>
24009d64:	4603      	mov	r3, r0
24009d66:	2b00      	cmp	r3, #0
24009d68:	d001      	beq.n	24009d6e <HAL_FLASHEx_Erase+0x66>
    {
      status = HAL_ERROR;
24009d6a:	2301      	movs	r3, #1
24009d6c:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* DUAL_BANK */

  if(status == HAL_OK)
24009d6e:	7bfb      	ldrb	r3, [r7, #15]
24009d70:	2b00      	cmp	r3, #0
24009d72:	f040 8085 	bne.w	24009e80 <HAL_FLASHEx_Erase+0x178>
  {
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
24009d76:	687b      	ldr	r3, [r7, #4]
24009d78:	681b      	ldr	r3, [r3, #0]
24009d7a:	2b01      	cmp	r3, #1
24009d7c:	d136      	bne.n	24009dec <HAL_FLASHEx_Erase+0xe4>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
24009d7e:	687b      	ldr	r3, [r7, #4]
24009d80:	691a      	ldr	r2, [r3, #16]
24009d82:	687b      	ldr	r3, [r7, #4]
24009d84:	685b      	ldr	r3, [r3, #4]
24009d86:	4619      	mov	r1, r3
24009d88:	4610      	mov	r0, r2
24009d8a:	f000 fb85 	bl	2400a498 <FLASH_MassErase>

      /* Wait for last operation to be completed on Bank 1 */
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
24009d8e:	687b      	ldr	r3, [r7, #4]
24009d90:	685b      	ldr	r3, [r3, #4]
24009d92:	f003 0301 	and.w	r3, r3, #1
24009d96:	2b00      	cmp	r3, #0
24009d98:	d00f      	beq.n	24009dba <HAL_FLASHEx_Erase+0xb2>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
24009d9a:	2101      	movs	r1, #1
24009d9c:	f24c 3050 	movw	r0, #50000	; 0xc350
24009da0:	f7ff fe60 	bl	24009a64 <FLASH_WaitForLastOperation>
24009da4:	4603      	mov	r3, r0
24009da6:	2b00      	cmp	r3, #0
24009da8:	d001      	beq.n	24009dae <HAL_FLASHEx_Erase+0xa6>
        {
          status = HAL_ERROR;
24009daa:	2301      	movs	r3, #1
24009dac:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank1 BER Bit */
        FLASH->CR1 &= (~FLASH_CR_BER);
24009dae:	4b39      	ldr	r3, [pc, #228]	; (24009e94 <HAL_FLASHEx_Erase+0x18c>)
24009db0:	68db      	ldr	r3, [r3, #12]
24009db2:	4a38      	ldr	r2, [pc, #224]	; (24009e94 <HAL_FLASHEx_Erase+0x18c>)
24009db4:	f023 0308 	bic.w	r3, r3, #8
24009db8:	60d3      	str	r3, [r2, #12]
      }
#if defined (DUAL_BANK)
      /* Wait for last operation to be completed on Bank 2 */
      if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
24009dba:	687b      	ldr	r3, [r7, #4]
24009dbc:	685b      	ldr	r3, [r3, #4]
24009dbe:	f003 0302 	and.w	r3, r3, #2
24009dc2:	2b00      	cmp	r3, #0
24009dc4:	d05c      	beq.n	24009e80 <HAL_FLASHEx_Erase+0x178>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
24009dc6:	2102      	movs	r1, #2
24009dc8:	f24c 3050 	movw	r0, #50000	; 0xc350
24009dcc:	f7ff fe4a 	bl	24009a64 <FLASH_WaitForLastOperation>
24009dd0:	4603      	mov	r3, r0
24009dd2:	2b00      	cmp	r3, #0
24009dd4:	d001      	beq.n	24009dda <HAL_FLASHEx_Erase+0xd2>
        {
          status = HAL_ERROR;
24009dd6:	2301      	movs	r3, #1
24009dd8:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank2 BER Bit */
        FLASH->CR2 &= (~FLASH_CR_BER);
24009dda:	4b2e      	ldr	r3, [pc, #184]	; (24009e94 <HAL_FLASHEx_Erase+0x18c>)
24009ddc:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
24009de0:	4a2c      	ldr	r2, [pc, #176]	; (24009e94 <HAL_FLASHEx_Erase+0x18c>)
24009de2:	f023 0308 	bic.w	r3, r3, #8
24009de6:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
24009dea:	e049      	b.n	24009e80 <HAL_FLASHEx_Erase+0x178>
#endif /* DUAL_BANK */
    }
    else
    {
      /*Initialization of SectorError variable*/
      *SectorError = 0xFFFFFFFFU;
24009dec:	683b      	ldr	r3, [r7, #0]
24009dee:	f04f 32ff 	mov.w	r2, #4294967295
24009df2:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
24009df4:	687b      	ldr	r3, [r7, #4]
24009df6:	689b      	ldr	r3, [r3, #8]
24009df8:	60bb      	str	r3, [r7, #8]
24009dfa:	e039      	b.n	24009e70 <HAL_FLASHEx_Erase+0x168>
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
24009dfc:	687b      	ldr	r3, [r7, #4]
24009dfe:	6859      	ldr	r1, [r3, #4]
24009e00:	687b      	ldr	r3, [r7, #4]
24009e02:	691b      	ldr	r3, [r3, #16]
24009e04:	461a      	mov	r2, r3
24009e06:	68b8      	ldr	r0, [r7, #8]
24009e08:	f000 fbb0 	bl	2400a56c <FLASH_Erase_Sector>

        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
24009e0c:	687b      	ldr	r3, [r7, #4]
24009e0e:	685b      	ldr	r3, [r3, #4]
24009e10:	f003 0301 	and.w	r3, r3, #1
24009e14:	2b00      	cmp	r3, #0
24009e16:	d00c      	beq.n	24009e32 <HAL_FLASHEx_Erase+0x12a>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
24009e18:	2101      	movs	r1, #1
24009e1a:	f24c 3050 	movw	r0, #50000	; 0xc350
24009e1e:	f7ff fe21 	bl	24009a64 <FLASH_WaitForLastOperation>
24009e22:	4603      	mov	r3, r0
24009e24:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
24009e26:	4b1b      	ldr	r3, [pc, #108]	; (24009e94 <HAL_FLASHEx_Erase+0x18c>)
24009e28:	68da      	ldr	r2, [r3, #12]
24009e2a:	491a      	ldr	r1, [pc, #104]	; (24009e94 <HAL_FLASHEx_Erase+0x18c>)
24009e2c:	4b1a      	ldr	r3, [pc, #104]	; (24009e98 <HAL_FLASHEx_Erase+0x190>)
24009e2e:	4013      	ands	r3, r2
24009e30:	60cb      	str	r3, [r1, #12]
        }
#if defined (DUAL_BANK)
        if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
24009e32:	687b      	ldr	r3, [r7, #4]
24009e34:	685b      	ldr	r3, [r3, #4]
24009e36:	f003 0302 	and.w	r3, r3, #2
24009e3a:	2b00      	cmp	r3, #0
24009e3c:	d00e      	beq.n	24009e5c <HAL_FLASHEx_Erase+0x154>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2);
24009e3e:	2102      	movs	r1, #2
24009e40:	f24c 3050 	movw	r0, #50000	; 0xc350
24009e44:	f7ff fe0e 	bl	24009a64 <FLASH_WaitForLastOperation>
24009e48:	4603      	mov	r3, r0
24009e4a:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
24009e4c:	4b11      	ldr	r3, [pc, #68]	; (24009e94 <HAL_FLASHEx_Erase+0x18c>)
24009e4e:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
24009e52:	4910      	ldr	r1, [pc, #64]	; (24009e94 <HAL_FLASHEx_Erase+0x18c>)
24009e54:	4b10      	ldr	r3, [pc, #64]	; (24009e98 <HAL_FLASHEx_Erase+0x190>)
24009e56:	4013      	ands	r3, r2
24009e58:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
        }
#endif /* DUAL_BANK */

        if(status != HAL_OK)
24009e5c:	7bfb      	ldrb	r3, [r7, #15]
24009e5e:	2b00      	cmp	r3, #0
24009e60:	d003      	beq.n	24009e6a <HAL_FLASHEx_Erase+0x162>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
24009e62:	683b      	ldr	r3, [r7, #0]
24009e64:	68ba      	ldr	r2, [r7, #8]
24009e66:	601a      	str	r2, [r3, #0]
          break;
24009e68:	e00a      	b.n	24009e80 <HAL_FLASHEx_Erase+0x178>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
24009e6a:	68bb      	ldr	r3, [r7, #8]
24009e6c:	3301      	adds	r3, #1
24009e6e:	60bb      	str	r3, [r7, #8]
24009e70:	687b      	ldr	r3, [r7, #4]
24009e72:	68da      	ldr	r2, [r3, #12]
24009e74:	687b      	ldr	r3, [r7, #4]
24009e76:	689b      	ldr	r3, [r3, #8]
24009e78:	4413      	add	r3, r2
24009e7a:	68ba      	ldr	r2, [r7, #8]
24009e7c:	429a      	cmp	r2, r3
24009e7e:	d3bd      	bcc.n	24009dfc <HAL_FLASHEx_Erase+0xf4>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
24009e80:	4b03      	ldr	r3, [pc, #12]	; (24009e90 <HAL_FLASHEx_Erase+0x188>)
24009e82:	2200      	movs	r2, #0
24009e84:	751a      	strb	r2, [r3, #20]

  return status;
24009e86:	7bfb      	ldrb	r3, [r7, #15]
}
24009e88:	4618      	mov	r0, r3
24009e8a:	3710      	adds	r7, #16
24009e8c:	46bd      	mov	sp, r7
24009e8e:	bd80      	pop	{r7, pc}
24009e90:	24001594 	.word	0x24001594
24009e94:	52002000 	.word	0x52002000
24009e98:	fffff8fb 	.word	0xfffff8fb

24009e9c <HAL_FLASHEx_Erase_IT>:
  *         contains the configuration information for the erasing.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
{
24009e9c:	b580      	push	{r7, lr}
24009e9e:	b084      	sub	sp, #16
24009ea0:	af00      	add	r7, sp, #0
24009ea2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
24009ea4:	2300      	movs	r3, #0
24009ea6:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
24009ea8:	4b48      	ldr	r3, [pc, #288]	; (24009fcc <HAL_FLASHEx_Erase_IT+0x130>)
24009eaa:	7d1b      	ldrb	r3, [r3, #20]
24009eac:	2b01      	cmp	r3, #1
24009eae:	d101      	bne.n	24009eb4 <HAL_FLASHEx_Erase_IT+0x18>
24009eb0:	2302      	movs	r3, #2
24009eb2:	e087      	b.n	24009fc4 <HAL_FLASHEx_Erase_IT+0x128>
24009eb4:	4b45      	ldr	r3, [pc, #276]	; (24009fcc <HAL_FLASHEx_Erase_IT+0x130>)
24009eb6:	2201      	movs	r2, #1
24009eb8:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
24009eba:	4b44      	ldr	r3, [pc, #272]	; (24009fcc <HAL_FLASHEx_Erase_IT+0x130>)
24009ebc:	2200      	movs	r2, #0
24009ebe:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank 1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
24009ec0:	687b      	ldr	r3, [r7, #4]
24009ec2:	685b      	ldr	r3, [r3, #4]
24009ec4:	f003 0301 	and.w	r3, r3, #1
24009ec8:	2b00      	cmp	r3, #0
24009eca:	d009      	beq.n	24009ee0 <HAL_FLASHEx_Erase_IT+0x44>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
24009ecc:	2101      	movs	r1, #1
24009ece:	f24c 3050 	movw	r0, #50000	; 0xc350
24009ed2:	f7ff fdc7 	bl	24009a64 <FLASH_WaitForLastOperation>
24009ed6:	4603      	mov	r3, r0
24009ed8:	2b00      	cmp	r3, #0
24009eda:	d001      	beq.n	24009ee0 <HAL_FLASHEx_Erase_IT+0x44>
    {
      status = HAL_ERROR;
24009edc:	2301      	movs	r3, #1
24009ede:	73fb      	strb	r3, [r7, #15]
    }
  }

#if defined (DUAL_BANK)
  /* Wait for last operation to be completed on Bank 2 */
  if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
24009ee0:	687b      	ldr	r3, [r7, #4]
24009ee2:	685b      	ldr	r3, [r3, #4]
24009ee4:	f003 0302 	and.w	r3, r3, #2
24009ee8:	2b00      	cmp	r3, #0
24009eea:	d009      	beq.n	24009f00 <HAL_FLASHEx_Erase_IT+0x64>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
24009eec:	2102      	movs	r1, #2
24009eee:	f24c 3050 	movw	r0, #50000	; 0xc350
24009ef2:	f7ff fdb7 	bl	24009a64 <FLASH_WaitForLastOperation>
24009ef6:	4603      	mov	r3, r0
24009ef8:	2b00      	cmp	r3, #0
24009efa:	d001      	beq.n	24009f00 <HAL_FLASHEx_Erase_IT+0x64>
    {
      status = HAL_ERROR;
24009efc:	2301      	movs	r3, #1
24009efe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* DUAL_BANK */

  if (status != HAL_OK)
24009f00:	7bfb      	ldrb	r3, [r7, #15]
24009f02:	2b00      	cmp	r3, #0
24009f04:	d003      	beq.n	24009f0e <HAL_FLASHEx_Erase_IT+0x72>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
24009f06:	4b31      	ldr	r3, [pc, #196]	; (24009fcc <HAL_FLASHEx_Erase_IT+0x130>)
24009f08:	2200      	movs	r2, #0
24009f0a:	751a      	strb	r2, [r3, #20]
24009f0c:	e059      	b.n	24009fc2 <HAL_FLASHEx_Erase_IT+0x126>
  }
  else
  {
    if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
24009f0e:	687b      	ldr	r3, [r7, #4]
24009f10:	685b      	ldr	r3, [r3, #4]
24009f12:	f003 0301 	and.w	r3, r3, #1
24009f16:	2b00      	cmp	r3, #0
24009f18:	d005      	beq.n	24009f26 <HAL_FLASHEx_Erase_IT+0x8a>
    {
      /* Enable End of Operation and Error interrupts for Bank 1 */
#if defined (FLASH_CR_OPERRIE)
      __HAL_FLASH_ENABLE_IT_BANK1(FLASH_IT_EOP_BANK1     | FLASH_IT_WRPERR_BANK1 | FLASH_IT_PGSERR_BANK1 | \
24009f1a:	4b2d      	ldr	r3, [pc, #180]	; (24009fd0 <HAL_FLASHEx_Erase_IT+0x134>)
24009f1c:	68db      	ldr	r3, [r3, #12]
24009f1e:	4a2c      	ldr	r2, [pc, #176]	; (24009fd0 <HAL_FLASHEx_Erase_IT+0x134>)
24009f20:	f443 03de 	orr.w	r3, r3, #7274496	; 0x6f0000
24009f24:	60d3      	str	r3, [r2, #12]
      __HAL_FLASH_ENABLE_IT_BANK1(FLASH_IT_EOP_BANK1     | FLASH_IT_WRPERR_BANK1 | FLASH_IT_PGSERR_BANK1 | \
                                  FLASH_IT_STRBERR_BANK1 | FLASH_IT_INCERR_BANK1);
#endif /* FLASH_CR_OPERRIE */
    }
#if defined (DUAL_BANK)
    if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
24009f26:	687b      	ldr	r3, [r7, #4]
24009f28:	685b      	ldr	r3, [r3, #4]
24009f2a:	f003 0302 	and.w	r3, r3, #2
24009f2e:	2b00      	cmp	r3, #0
24009f30:	d007      	beq.n	24009f42 <HAL_FLASHEx_Erase_IT+0xa6>
    {
      /* Enable End of Operation and Error interrupts for Bank 2 */
#if defined (FLASH_CR_OPERRIE)
      __HAL_FLASH_ENABLE_IT_BANK2(FLASH_IT_EOP_BANK2     | FLASH_IT_WRPERR_BANK2 | FLASH_IT_PGSERR_BANK2 | \
24009f32:	4b27      	ldr	r3, [pc, #156]	; (24009fd0 <HAL_FLASHEx_Erase_IT+0x134>)
24009f34:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
24009f38:	4a25      	ldr	r2, [pc, #148]	; (24009fd0 <HAL_FLASHEx_Erase_IT+0x134>)
24009f3a:	f443 03de 	orr.w	r3, r3, #7274496	; 0x6f0000
24009f3e:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
                                  FLASH_IT_STRBERR_BANK2 | FLASH_IT_INCERR_BANK2);
#endif /* FLASH_CR_OPERRIE */
    }
#endif /* DUAL_BANK */

    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
24009f42:	687b      	ldr	r3, [r7, #4]
24009f44:	681b      	ldr	r3, [r3, #0]
24009f46:	2b01      	cmp	r3, #1
24009f48:	d11b      	bne.n	24009f82 <HAL_FLASHEx_Erase_IT+0xe6>
    {
      /*Mass erase to be done*/
      if(pEraseInit->Banks == FLASH_BANK_1)
24009f4a:	687b      	ldr	r3, [r7, #4]
24009f4c:	685b      	ldr	r3, [r3, #4]
24009f4e:	2b01      	cmp	r3, #1
24009f50:	d103      	bne.n	24009f5a <HAL_FLASHEx_Erase_IT+0xbe>
      {
        pFlash.ProcedureOnGoing = FLASH_PROC_MASSERASE_BANK1;
24009f52:	4b1e      	ldr	r3, [pc, #120]	; (24009fcc <HAL_FLASHEx_Erase_IT+0x130>)
24009f54:	2202      	movs	r2, #2
24009f56:	701a      	strb	r2, [r3, #0]
24009f58:	e00a      	b.n	24009f70 <HAL_FLASHEx_Erase_IT+0xd4>
      }
#if defined (DUAL_BANK)
      else if(pEraseInit->Banks == FLASH_BANK_2)
24009f5a:	687b      	ldr	r3, [r7, #4]
24009f5c:	685b      	ldr	r3, [r3, #4]
24009f5e:	2b02      	cmp	r3, #2
24009f60:	d103      	bne.n	24009f6a <HAL_FLASHEx_Erase_IT+0xce>
      {
        pFlash.ProcedureOnGoing = FLASH_PROC_MASSERASE_BANK2;
24009f62:	4b1a      	ldr	r3, [pc, #104]	; (24009fcc <HAL_FLASHEx_Erase_IT+0x130>)
24009f64:	2205      	movs	r2, #5
24009f66:	701a      	strb	r2, [r3, #0]
24009f68:	e002      	b.n	24009f70 <HAL_FLASHEx_Erase_IT+0xd4>
      }
#endif /* DUAL_BANK */
      else
      {
        pFlash.ProcedureOnGoing = FLASH_PROC_ALLBANK_MASSERASE;
24009f6a:	4b18      	ldr	r3, [pc, #96]	; (24009fcc <HAL_FLASHEx_Erase_IT+0x130>)
24009f6c:	2207      	movs	r2, #7
24009f6e:	701a      	strb	r2, [r3, #0]
      }

      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
24009f70:	687b      	ldr	r3, [r7, #4]
24009f72:	691a      	ldr	r2, [r3, #16]
24009f74:	687b      	ldr	r3, [r7, #4]
24009f76:	685b      	ldr	r3, [r3, #4]
24009f78:	4619      	mov	r1, r3
24009f7a:	4610      	mov	r0, r2
24009f7c:	f000 fa8c 	bl	2400a498 <FLASH_MassErase>
24009f80:	e01f      	b.n	24009fc2 <HAL_FLASHEx_Erase_IT+0x126>
    }
    else
    {
      /* Erase by sector to be done */
#if defined (DUAL_BANK)
      if(pEraseInit->Banks == FLASH_BANK_1)
24009f82:	687b      	ldr	r3, [r7, #4]
24009f84:	685b      	ldr	r3, [r3, #4]
24009f86:	2b01      	cmp	r3, #1
24009f88:	d103      	bne.n	24009f92 <HAL_FLASHEx_Erase_IT+0xf6>
      {
        pFlash.ProcedureOnGoing = FLASH_PROC_SECTERASE_BANK1;
24009f8a:	4b10      	ldr	r3, [pc, #64]	; (24009fcc <HAL_FLASHEx_Erase_IT+0x130>)
24009f8c:	2201      	movs	r2, #1
24009f8e:	701a      	strb	r2, [r3, #0]
24009f90:	e002      	b.n	24009f98 <HAL_FLASHEx_Erase_IT+0xfc>
      }
      else
      {
        pFlash.ProcedureOnGoing = FLASH_PROC_SECTERASE_BANK2;
24009f92:	4b0e      	ldr	r3, [pc, #56]	; (24009fcc <HAL_FLASHEx_Erase_IT+0x130>)
24009f94:	2204      	movs	r2, #4
24009f96:	701a      	strb	r2, [r3, #0]
      }
#else
      pFlash.ProcedureOnGoing = FLASH_PROC_SECTERASE_BANK1;
#endif /* DUAL_BANK */

      pFlash.NbSectorsToErase = pEraseInit->NbSectors;
24009f98:	687b      	ldr	r3, [r7, #4]
24009f9a:	68db      	ldr	r3, [r3, #12]
24009f9c:	4a0b      	ldr	r2, [pc, #44]	; (24009fcc <HAL_FLASHEx_Erase_IT+0x130>)
24009f9e:	6053      	str	r3, [r2, #4]
      pFlash.Sector = pEraseInit->Sector;
24009fa0:	687b      	ldr	r3, [r7, #4]
24009fa2:	689b      	ldr	r3, [r3, #8]
24009fa4:	4a09      	ldr	r2, [pc, #36]	; (24009fcc <HAL_FLASHEx_Erase_IT+0x130>)
24009fa6:	60d3      	str	r3, [r2, #12]
      pFlash.VoltageForErase = pEraseInit->VoltageRange;
24009fa8:	687b      	ldr	r3, [r7, #4]
24009faa:	691b      	ldr	r3, [r3, #16]
24009fac:	4a07      	ldr	r2, [pc, #28]	; (24009fcc <HAL_FLASHEx_Erase_IT+0x130>)
24009fae:	6093      	str	r3, [r2, #8]

      /* Erase first sector and wait for IT */
      FLASH_Erase_Sector(pEraseInit->Sector, pEraseInit->Banks, pEraseInit->VoltageRange);
24009fb0:	687b      	ldr	r3, [r7, #4]
24009fb2:	6898      	ldr	r0, [r3, #8]
24009fb4:	687b      	ldr	r3, [r7, #4]
24009fb6:	6859      	ldr	r1, [r3, #4]
24009fb8:	687b      	ldr	r3, [r7, #4]
24009fba:	691b      	ldr	r3, [r3, #16]
24009fbc:	461a      	mov	r2, r3
24009fbe:	f000 fad5 	bl	2400a56c <FLASH_Erase_Sector>
    }
  }

  return status;
24009fc2:	7bfb      	ldrb	r3, [r7, #15]
}
24009fc4:	4618      	mov	r0, r3
24009fc6:	3710      	adds	r7, #16
24009fc8:	46bd      	mov	sp, r7
24009fca:	bd80      	pop	{r7, pc}
24009fcc:	24001594 	.word	0x24001594
24009fd0:	52002000 	.word	0x52002000

24009fd4 <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
24009fd4:	b580      	push	{r7, lr}
24009fd6:	b084      	sub	sp, #16
24009fd8:	af00      	add	r7, sp, #0
24009fda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
24009fdc:	4b4e      	ldr	r3, [pc, #312]	; (2400a118 <HAL_FLASHEx_OBProgram+0x144>)
24009fde:	7d1b      	ldrb	r3, [r3, #20]
24009fe0:	2b01      	cmp	r3, #1
24009fe2:	d101      	bne.n	24009fe8 <HAL_FLASHEx_OBProgram+0x14>
24009fe4:	2302      	movs	r3, #2
24009fe6:	e092      	b.n	2400a10e <HAL_FLASHEx_OBProgram+0x13a>
24009fe8:	4b4b      	ldr	r3, [pc, #300]	; (2400a118 <HAL_FLASHEx_OBProgram+0x144>)
24009fea:	2201      	movs	r2, #1
24009fec:	751a      	strb	r2, [r3, #20]

  /* Reset Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
24009fee:	4b4a      	ldr	r3, [pc, #296]	; (2400a118 <HAL_FLASHEx_OBProgram+0x144>)
24009ff0:	2200      	movs	r2, #0
24009ff2:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
24009ff4:	2101      	movs	r1, #1
24009ff6:	f24c 3050 	movw	r0, #50000	; 0xc350
24009ffa:	f7ff fd33 	bl	24009a64 <FLASH_WaitForLastOperation>
24009ffe:	4603      	mov	r3, r0
2400a000:	2b00      	cmp	r3, #0
2400a002:	d002      	beq.n	2400a00a <HAL_FLASHEx_OBProgram+0x36>
  {
    status = HAL_ERROR;
2400a004:	2301      	movs	r3, #1
2400a006:	73fb      	strb	r3, [r7, #15]
2400a008:	e00c      	b.n	2400a024 <HAL_FLASHEx_OBProgram+0x50>
  }
#if defined (DUAL_BANK)
  else if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
2400a00a:	2102      	movs	r1, #2
2400a00c:	f24c 3050 	movw	r0, #50000	; 0xc350
2400a010:	f7ff fd28 	bl	24009a64 <FLASH_WaitForLastOperation>
2400a014:	4603      	mov	r3, r0
2400a016:	2b00      	cmp	r3, #0
2400a018:	d002      	beq.n	2400a020 <HAL_FLASHEx_OBProgram+0x4c>
  {
    status = HAL_ERROR;
2400a01a:	2301      	movs	r3, #1
2400a01c:	73fb      	strb	r3, [r7, #15]
2400a01e:	e001      	b.n	2400a024 <HAL_FLASHEx_OBProgram+0x50>
  }
#endif /* DUAL_BANK */
  else
  {
    status = HAL_OK;
2400a020:	2300      	movs	r3, #0
2400a022:	73fb      	strb	r3, [r7, #15]
  }

  if(status == HAL_OK)
2400a024:	7bfb      	ldrb	r3, [r7, #15]
2400a026:	2b00      	cmp	r3, #0
2400a028:	d16d      	bne.n	2400a106 <HAL_FLASHEx_OBProgram+0x132>
  {
    /*Write protection configuration*/
    if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
2400a02a:	687b      	ldr	r3, [r7, #4]
2400a02c:	681b      	ldr	r3, [r3, #0]
2400a02e:	f003 0301 	and.w	r3, r3, #1
2400a032:	2b00      	cmp	r3, #0
2400a034:	d014      	beq.n	2400a060 <HAL_FLASHEx_OBProgram+0x8c>
    {
      assert_param(IS_WRPSTATE(pOBInit->WRPState));

      if(pOBInit->WRPState == OB_WRPSTATE_ENABLE)
2400a036:	687b      	ldr	r3, [r7, #4]
2400a038:	685b      	ldr	r3, [r3, #4]
2400a03a:	2b01      	cmp	r3, #1
2400a03c:	d108      	bne.n	2400a050 <HAL_FLASHEx_OBProgram+0x7c>
      {
        /*Enable of Write protection on the selected Sector*/
        FLASH_OB_EnableWRP(pOBInit->WRPSector,pOBInit->Banks);
2400a03e:	687b      	ldr	r3, [r7, #4]
2400a040:	689a      	ldr	r2, [r3, #8]
2400a042:	687b      	ldr	r3, [r7, #4]
2400a044:	69db      	ldr	r3, [r3, #28]
2400a046:	4619      	mov	r1, r3
2400a048:	4610      	mov	r0, r2
2400a04a:	f000 facd 	bl	2400a5e8 <FLASH_OB_EnableWRP>
2400a04e:	e007      	b.n	2400a060 <HAL_FLASHEx_OBProgram+0x8c>
      }
      else
      {
        /*Disable of Write protection on the selected Sector*/
        FLASH_OB_DisableWRP(pOBInit->WRPSector, pOBInit->Banks);
2400a050:	687b      	ldr	r3, [r7, #4]
2400a052:	689a      	ldr	r2, [r3, #8]
2400a054:	687b      	ldr	r3, [r7, #4]
2400a056:	69db      	ldr	r3, [r3, #28]
2400a058:	4619      	mov	r1, r3
2400a05a:	4610      	mov	r0, r2
2400a05c:	f000 faee 	bl	2400a63c <FLASH_OB_DisableWRP>
      }
    }

    /* Read protection configuration */
    if((pOBInit->OptionType & OPTIONBYTE_RDP) != 0U)
2400a060:	687b      	ldr	r3, [r7, #4]
2400a062:	681b      	ldr	r3, [r3, #0]
2400a064:	f003 0302 	and.w	r3, r3, #2
2400a068:	2b00      	cmp	r3, #0
2400a06a:	d004      	beq.n	2400a076 <HAL_FLASHEx_OBProgram+0xa2>
    {
      /* Configure the Read protection level */
      FLASH_OB_RDPConfig(pOBInit->RDPLevel);
2400a06c:	687b      	ldr	r3, [r7, #4]
2400a06e:	68db      	ldr	r3, [r3, #12]
2400a070:	4618      	mov	r0, r3
2400a072:	f000 fb39 	bl	2400a6e8 <FLASH_OB_RDPConfig>
    }

    /* User Configuration */
    if((pOBInit->OptionType & OPTIONBYTE_USER) != 0U)
2400a076:	687b      	ldr	r3, [r7, #4]
2400a078:	681b      	ldr	r3, [r3, #0]
2400a07a:	f003 0304 	and.w	r3, r3, #4
2400a07e:	2b00      	cmp	r3, #0
2400a080:	d007      	beq.n	2400a092 <HAL_FLASHEx_OBProgram+0xbe>
    {
      /* Configure the user option bytes */
      FLASH_OB_UserConfig(pOBInit->USERType, pOBInit->USERConfig);
2400a082:	687b      	ldr	r3, [r7, #4]
2400a084:	695a      	ldr	r2, [r3, #20]
2400a086:	687b      	ldr	r3, [r7, #4]
2400a088:	699b      	ldr	r3, [r3, #24]
2400a08a:	4619      	mov	r1, r3
2400a08c:	4610      	mov	r0, r2
2400a08e:	f000 fb5b 	bl	2400a748 <FLASH_OB_UserConfig>
    }

    /* PCROP Configuration */
    if((pOBInit->OptionType & OPTIONBYTE_PCROP) != 0U)
2400a092:	687b      	ldr	r3, [r7, #4]
2400a094:	681b      	ldr	r3, [r3, #0]
2400a096:	f003 0308 	and.w	r3, r3, #8
2400a09a:	2b00      	cmp	r3, #0
2400a09c:	d009      	beq.n	2400a0b2 <HAL_FLASHEx_OBProgram+0xde>
    {
      assert_param(IS_FLASH_BANK(pOBInit->Banks));

      /*Configure the Proprietary code readout protection */
      FLASH_OB_PCROPConfig(pOBInit->PCROPConfig, pOBInit->PCROPStartAddr, pOBInit->PCROPEndAddr, pOBInit->Banks);
2400a09e:	687b      	ldr	r3, [r7, #4]
2400a0a0:	6a18      	ldr	r0, [r3, #32]
2400a0a2:	687b      	ldr	r3, [r7, #4]
2400a0a4:	6a59      	ldr	r1, [r3, #36]	; 0x24
2400a0a6:	687b      	ldr	r3, [r7, #4]
2400a0a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
2400a0aa:	687b      	ldr	r3, [r7, #4]
2400a0ac:	69db      	ldr	r3, [r3, #28]
2400a0ae:	f000 fc03 	bl	2400a8b8 <FLASH_OB_PCROPConfig>
    }

    /* BOR Level configuration */
    if((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
2400a0b2:	687b      	ldr	r3, [r7, #4]
2400a0b4:	681b      	ldr	r3, [r3, #0]
2400a0b6:	f003 0310 	and.w	r3, r3, #16
2400a0ba:	2b00      	cmp	r3, #0
2400a0bc:	d004      	beq.n	2400a0c8 <HAL_FLASHEx_OBProgram+0xf4>
    {
      FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
2400a0be:	687b      	ldr	r3, [r7, #4]
2400a0c0:	691b      	ldr	r3, [r3, #16]
2400a0c2:	4618      	mov	r0, r3
2400a0c4:	f000 fc70 	bl	2400a9a8 <FLASH_OB_BOR_LevelConfig>
    {
      FLASH_OB_CM4BootAddConfig(pOBInit->CM4BootConfig, pOBInit->CM4BootAddr0, pOBInit->CM4BootAddr1);
    }
#else /* Single Core*/
    /* Boot Address  configuration */
    if((pOBInit->OptionType & OPTIONBYTE_BOOTADD) == OPTIONBYTE_BOOTADD)
2400a0c8:	687b      	ldr	r3, [r7, #4]
2400a0ca:	681b      	ldr	r3, [r3, #0]
2400a0cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
2400a0d0:	2b00      	cmp	r3, #0
2400a0d2:	d008      	beq.n	2400a0e6 <HAL_FLASHEx_OBProgram+0x112>
    {
      FLASH_OB_BootAddConfig(pOBInit->BootConfig, pOBInit->BootAddr0, pOBInit->BootAddr1);
2400a0d4:	687b      	ldr	r3, [r7, #4]
2400a0d6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
2400a0d8:	687b      	ldr	r3, [r7, #4]
2400a0da:	6b19      	ldr	r1, [r3, #48]	; 0x30
2400a0dc:	687b      	ldr	r3, [r7, #4]
2400a0de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2400a0e0:	461a      	mov	r2, r3
2400a0e2:	f000 fc83 	bl	2400a9ec <FLASH_OB_BootAddConfig>
    }
#endif /*DUAL_CORE*/

    /* Secure area configuration */
    if((pOBInit->OptionType & OPTIONBYTE_SECURE_AREA) == OPTIONBYTE_SECURE_AREA)
2400a0e6:	687b      	ldr	r3, [r7, #4]
2400a0e8:	681b      	ldr	r3, [r3, #0]
2400a0ea:	f003 0320 	and.w	r3, r3, #32
2400a0ee:	2b00      	cmp	r3, #0
2400a0f0:	d009      	beq.n	2400a106 <HAL_FLASHEx_OBProgram+0x132>
    {
      FLASH_OB_SecureAreaConfig(pOBInit->SecureAreaConfig, pOBInit->SecureAreaStartAddr, pOBInit->SecureAreaEndAddr,pOBInit->Banks);
2400a0f2:	687b      	ldr	r3, [r7, #4]
2400a0f4:	6b98      	ldr	r0, [r3, #56]	; 0x38
2400a0f6:	687b      	ldr	r3, [r7, #4]
2400a0f8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
2400a0fa:	687b      	ldr	r3, [r7, #4]
2400a0fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
2400a0fe:	687b      	ldr	r3, [r7, #4]
2400a100:	69db      	ldr	r3, [r3, #28]
2400a102:	f000 fcb9 	bl	2400aa78 <FLASH_OB_SecureAreaConfig>
    }
#endif /* FLASH_OPTSR2_CPUFREQ_BOOST */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
2400a106:	4b04      	ldr	r3, [pc, #16]	; (2400a118 <HAL_FLASHEx_OBProgram+0x144>)
2400a108:	2200      	movs	r2, #0
2400a10a:	751a      	strb	r2, [r3, #20]

  return status;
2400a10c:	7bfb      	ldrb	r3, [r7, #15]
}
2400a10e:	4618      	mov	r0, r3
2400a110:	3710      	adds	r7, #16
2400a112:	46bd      	mov	sp, r7
2400a114:	bd80      	pop	{r7, pc}
2400a116:	bf00      	nop
2400a118:	24001594 	.word	0x24001594

2400a11c <HAL_FLASHEx_OBGetConfig>:
  *         as this parameter is use to get the given Bank WRP, PCROP and secured area configuration.
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
2400a11c:	b580      	push	{r7, lr}
2400a11e:	b082      	sub	sp, #8
2400a120:	af00      	add	r7, sp, #0
2400a122:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = (OPTIONBYTE_USER | OPTIONBYTE_RDP | OPTIONBYTE_BOR);
2400a124:	687b      	ldr	r3, [r7, #4]
2400a126:	2216      	movs	r2, #22
2400a128:	601a      	str	r2, [r3, #0]

  /* Get Read protection level */
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
2400a12a:	f000 faf1 	bl	2400a710 <FLASH_OB_GetRDP>
2400a12e:	4602      	mov	r2, r0
2400a130:	687b      	ldr	r3, [r7, #4]
2400a132:	60da      	str	r2, [r3, #12]

  /* Get the user option bytes */
  pOBInit->USERConfig = FLASH_OB_GetUser();
2400a134:	f000 fbaa 	bl	2400a88c <FLASH_OB_GetUser>
2400a138:	4602      	mov	r2, r0
2400a13a:	687b      	ldr	r3, [r7, #4]
2400a13c:	619a      	str	r2, [r3, #24]

  /*Get BOR Level*/
  pOBInit->BORLevel = FLASH_OB_GetBOR();
2400a13e:	f000 fc47 	bl	2400a9d0 <FLASH_OB_GetBOR>
2400a142:	4602      	mov	r2, r0
2400a144:	687b      	ldr	r3, [r7, #4]
2400a146:	611a      	str	r2, [r3, #16]

#if defined (DUAL_BANK)
  if ((pOBInit->Banks == FLASH_BANK_1) || (pOBInit->Banks == FLASH_BANK_2))
2400a148:	687b      	ldr	r3, [r7, #4]
2400a14a:	69db      	ldr	r3, [r3, #28]
2400a14c:	2b01      	cmp	r3, #1
2400a14e:	d003      	beq.n	2400a158 <HAL_FLASHEx_OBGetConfig+0x3c>
2400a150:	687b      	ldr	r3, [r7, #4]
2400a152:	69db      	ldr	r3, [r3, #28]
2400a154:	2b02      	cmp	r3, #2
2400a156:	d129      	bne.n	2400a1ac <HAL_FLASHEx_OBGetConfig+0x90>
#else
  if (pOBInit->Banks == FLASH_BANK_1)
#endif /* DUAL_BANK */
  {
    pOBInit->OptionType |= (OPTIONBYTE_WRP | OPTIONBYTE_PCROP | OPTIONBYTE_SECURE_AREA);
2400a158:	687b      	ldr	r3, [r7, #4]
2400a15a:	681b      	ldr	r3, [r3, #0]
2400a15c:	f043 0229 	orr.w	r2, r3, #41	; 0x29
2400a160:	687b      	ldr	r3, [r7, #4]
2400a162:	601a      	str	r2, [r3, #0]

    /* Get write protection on the selected area */
    FLASH_OB_GetWRP(&(pOBInit->WRPState), &(pOBInit->WRPSector), pOBInit->Banks);
2400a164:	687b      	ldr	r3, [r7, #4]
2400a166:	1d18      	adds	r0, r3, #4
2400a168:	687b      	ldr	r3, [r7, #4]
2400a16a:	f103 0108 	add.w	r1, r3, #8
2400a16e:	687b      	ldr	r3, [r7, #4]
2400a170:	69db      	ldr	r3, [r3, #28]
2400a172:	461a      	mov	r2, r3
2400a174:	f000 fa8a 	bl	2400a68c <FLASH_OB_GetWRP>

    /* Get the Proprietary code readout protection */
    FLASH_OB_GetPCROP(&(pOBInit->PCROPConfig), &(pOBInit->PCROPStartAddr), &(pOBInit->PCROPEndAddr), pOBInit->Banks);
2400a178:	687b      	ldr	r3, [r7, #4]
2400a17a:	f103 0020 	add.w	r0, r3, #32
2400a17e:	687b      	ldr	r3, [r7, #4]
2400a180:	f103 0124 	add.w	r1, r3, #36	; 0x24
2400a184:	687b      	ldr	r3, [r7, #4]
2400a186:	f103 0228 	add.w	r2, r3, #40	; 0x28
2400a18a:	687b      	ldr	r3, [r7, #4]
2400a18c:	69db      	ldr	r3, [r3, #28]
2400a18e:	f000 fbc9 	bl	2400a924 <FLASH_OB_GetPCROP>

    /*Get Bank Secure area*/
    FLASH_OB_GetSecureArea(&(pOBInit->SecureAreaConfig), &(pOBInit->SecureAreaStartAddr), &(pOBInit->SecureAreaEndAddr), pOBInit->Banks);
2400a192:	687b      	ldr	r3, [r7, #4]
2400a194:	f103 0038 	add.w	r0, r3, #56	; 0x38
2400a198:	687b      	ldr	r3, [r7, #4]
2400a19a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
2400a19e:	687b      	ldr	r3, [r7, #4]
2400a1a0:	f103 0240 	add.w	r2, r3, #64	; 0x40
2400a1a4:	687b      	ldr	r3, [r7, #4]
2400a1a6:	69db      	ldr	r3, [r3, #28]
2400a1a8:	f000 fca0 	bl	2400aaec <FLASH_OB_GetSecureArea>
  }

  /*Get Boot Address*/
  FLASH_OB_GetBootAdd(&(pOBInit->BootAddr0), &(pOBInit->BootAddr1));
2400a1ac:	687b      	ldr	r3, [r7, #4]
2400a1ae:	f103 0230 	add.w	r2, r3, #48	; 0x30
2400a1b2:	687b      	ldr	r3, [r7, #4]
2400a1b4:	3334      	adds	r3, #52	; 0x34
2400a1b6:	4619      	mov	r1, r3
2400a1b8:	4610      	mov	r0, r2
2400a1ba:	f000 fc41 	bl	2400aa40 <FLASH_OB_GetBootAdd>
  pOBInit->OptionType |= OPTIONBYTE_CM7_BOOTADD | OPTIONBYTE_CM4_BOOTADD;

  /*Get CM4 Boot Address*/
  FLASH_OB_GetCM4BootAdd(&(pOBInit->CM4BootAddr0), &(pOBInit->CM4BootAddr1));
#else
  pOBInit->OptionType |= OPTIONBYTE_BOOTADD;
2400a1be:	687b      	ldr	r3, [r7, #4]
2400a1c0:	681b      	ldr	r3, [r3, #0]
2400a1c2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
2400a1c6:	687b      	ldr	r3, [r7, #4]
2400a1c8:	601a      	str	r2, [r3, #0]
  pOBInit->OptionType |= OPTIONBYTE_FREQ_BOOST;

  /* Get CPU Frequency Boost */
  pOBInit->FreqBoostState = FLASH_OB_CPUFreq_GetBoost();
#endif /* FLASH_OPTSR2_CPUFREQ_BOOST */
}
2400a1ca:	bf00      	nop
2400a1cc:	3708      	adds	r7, #8
2400a1ce:	46bd      	mov	sp, r7
2400a1d0:	bd80      	pop	{r7, pc}
	...

2400a1d4 <HAL_FLASHEx_Unlock_Bank1>:
/**
  * @brief  Unlock the FLASH Bank1 control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Unlock_Bank1(void)
{
2400a1d4:	b480      	push	{r7}
2400a1d6:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
2400a1d8:	4b0c      	ldr	r3, [pc, #48]	; (2400a20c <HAL_FLASHEx_Unlock_Bank1+0x38>)
2400a1da:	68db      	ldr	r3, [r3, #12]
2400a1dc:	f003 0301 	and.w	r3, r3, #1
2400a1e0:	2b00      	cmp	r3, #0
2400a1e2:	d00d      	beq.n	2400a200 <HAL_FLASHEx_Unlock_Bank1+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
2400a1e4:	4b09      	ldr	r3, [pc, #36]	; (2400a20c <HAL_FLASHEx_Unlock_Bank1+0x38>)
2400a1e6:	4a0a      	ldr	r2, [pc, #40]	; (2400a210 <HAL_FLASHEx_Unlock_Bank1+0x3c>)
2400a1e8:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
2400a1ea:	4b08      	ldr	r3, [pc, #32]	; (2400a20c <HAL_FLASHEx_Unlock_Bank1+0x38>)
2400a1ec:	4a09      	ldr	r2, [pc, #36]	; (2400a214 <HAL_FLASHEx_Unlock_Bank1+0x40>)
2400a1ee:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
2400a1f0:	4b06      	ldr	r3, [pc, #24]	; (2400a20c <HAL_FLASHEx_Unlock_Bank1+0x38>)
2400a1f2:	68db      	ldr	r3, [r3, #12]
2400a1f4:	f003 0301 	and.w	r3, r3, #1
2400a1f8:	2b00      	cmp	r3, #0
2400a1fa:	d001      	beq.n	2400a200 <HAL_FLASHEx_Unlock_Bank1+0x2c>
    {
      return HAL_ERROR;
2400a1fc:	2301      	movs	r3, #1
2400a1fe:	e000      	b.n	2400a202 <HAL_FLASHEx_Unlock_Bank1+0x2e>
    }
  }

  return HAL_OK;
2400a200:	2300      	movs	r3, #0
}
2400a202:	4618      	mov	r0, r3
2400a204:	46bd      	mov	sp, r7
2400a206:	f85d 7b04 	ldr.w	r7, [sp], #4
2400a20a:	4770      	bx	lr
2400a20c:	52002000 	.word	0x52002000
2400a210:	45670123 	.word	0x45670123
2400a214:	cdef89ab 	.word	0xcdef89ab

2400a218 <HAL_FLASHEx_Lock_Bank1>:
/**
  * @brief  Locks the FLASH Bank1 control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Lock_Bank1(void)
{
2400a218:	b480      	push	{r7}
2400a21a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Bank1 Registers access */
  SET_BIT(FLASH->CR1, FLASH_CR_LOCK);
2400a21c:	4b05      	ldr	r3, [pc, #20]	; (2400a234 <HAL_FLASHEx_Lock_Bank1+0x1c>)
2400a21e:	68db      	ldr	r3, [r3, #12]
2400a220:	4a04      	ldr	r2, [pc, #16]	; (2400a234 <HAL_FLASHEx_Lock_Bank1+0x1c>)
2400a222:	f043 0301 	orr.w	r3, r3, #1
2400a226:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
2400a228:	2300      	movs	r3, #0
}
2400a22a:	4618      	mov	r0, r3
2400a22c:	46bd      	mov	sp, r7
2400a22e:	f85d 7b04 	ldr.w	r7, [sp], #4
2400a232:	4770      	bx	lr
2400a234:	52002000 	.word	0x52002000

2400a238 <HAL_FLASHEx_Unlock_Bank2>:
/**
  * @brief  Unlock the FLASH Bank2 control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Unlock_Bank2(void)
{
2400a238:	b480      	push	{r7}
2400a23a:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
2400a23c:	4b0e      	ldr	r3, [pc, #56]	; (2400a278 <HAL_FLASHEx_Unlock_Bank2+0x40>)
2400a23e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
2400a242:	f003 0301 	and.w	r3, r3, #1
2400a246:	2b00      	cmp	r3, #0
2400a248:	d010      	beq.n	2400a26c <HAL_FLASHEx_Unlock_Bank2+0x34>
  {
    /* Authorize the FLASH Bank2 Registers access */
    WRITE_REG(FLASH->KEYR2, FLASH_KEY1);
2400a24a:	4b0b      	ldr	r3, [pc, #44]	; (2400a278 <HAL_FLASHEx_Unlock_Bank2+0x40>)
2400a24c:	4a0b      	ldr	r2, [pc, #44]	; (2400a27c <HAL_FLASHEx_Unlock_Bank2+0x44>)
2400a24e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    WRITE_REG(FLASH->KEYR2, FLASH_KEY2);
2400a252:	4b09      	ldr	r3, [pc, #36]	; (2400a278 <HAL_FLASHEx_Unlock_Bank2+0x40>)
2400a254:	4a0a      	ldr	r2, [pc, #40]	; (2400a280 <HAL_FLASHEx_Unlock_Bank2+0x48>)
2400a256:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
2400a25a:	4b07      	ldr	r3, [pc, #28]	; (2400a278 <HAL_FLASHEx_Unlock_Bank2+0x40>)
2400a25c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
2400a260:	f003 0301 	and.w	r3, r3, #1
2400a264:	2b00      	cmp	r3, #0
2400a266:	d001      	beq.n	2400a26c <HAL_FLASHEx_Unlock_Bank2+0x34>
    {
      return HAL_ERROR;
2400a268:	2301      	movs	r3, #1
2400a26a:	e000      	b.n	2400a26e <HAL_FLASHEx_Unlock_Bank2+0x36>
    }
  }

  return HAL_OK;
2400a26c:	2300      	movs	r3, #0
}
2400a26e:	4618      	mov	r0, r3
2400a270:	46bd      	mov	sp, r7
2400a272:	f85d 7b04 	ldr.w	r7, [sp], #4
2400a276:	4770      	bx	lr
2400a278:	52002000 	.word	0x52002000
2400a27c:	45670123 	.word	0x45670123
2400a280:	cdef89ab 	.word	0xcdef89ab

2400a284 <HAL_FLASHEx_Lock_Bank2>:
/**
  * @brief  Locks the FLASH Bank2 control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Lock_Bank2(void)
{
2400a284:	b480      	push	{r7}
2400a286:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Bank2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR_LOCK);
2400a288:	4b06      	ldr	r3, [pc, #24]	; (2400a2a4 <HAL_FLASHEx_Lock_Bank2+0x20>)
2400a28a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
2400a28e:	4a05      	ldr	r2, [pc, #20]	; (2400a2a4 <HAL_FLASHEx_Lock_Bank2+0x20>)
2400a290:	f043 0301 	orr.w	r3, r3, #1
2400a294:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
  return HAL_OK;
2400a298:	2300      	movs	r3, #0
}
2400a29a:	4618      	mov	r0, r3
2400a29c:	46bd      	mov	sp, r7
2400a29e:	f85d 7b04 	ldr.w	r7, [sp], #4
2400a2a2:	4770      	bx	lr
2400a2a4:	52002000 	.word	0x52002000

2400a2a8 <HAL_FLASHEx_ComputeCRC>:
  *         A special error flag (CRC read error: CRCRDERR) can be used to
  *         detect such a case.
  * @retval HAL Status
*/
HAL_StatusTypeDef HAL_FLASHEx_ComputeCRC(FLASH_CRCInitTypeDef *pCRCInit, uint32_t *CRC_Result)
{
2400a2a8:	b580      	push	{r7, lr}
2400a2aa:	b084      	sub	sp, #16
2400a2ac:	af00      	add	r7, sp, #0
2400a2ae:	6078      	str	r0, [r7, #4]
2400a2b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK_EXCLUSIVE(pCRCInit->Bank));
  assert_param(IS_FLASH_TYPECRC(pCRCInit->TypeCRC));

  /* Wait for OB change operation to be completed */
  status = FLASH_OB_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
2400a2b2:	f24c 3050 	movw	r0, #50000	; 0xc350
2400a2b6:	f7ff fc71 	bl	24009b9c <FLASH_OB_WaitForLastOperation>
2400a2ba:	4603      	mov	r3, r0
2400a2bc:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
2400a2be:	7bfb      	ldrb	r3, [r7, #15]
2400a2c0:	2b00      	cmp	r3, #0
2400a2c2:	f040 80e0 	bne.w	2400a486 <HAL_FLASHEx_ComputeCRC+0x1de>
  {
    if (pCRCInit->Bank == FLASH_BANK_1)
2400a2c6:	687b      	ldr	r3, [r7, #4]
2400a2c8:	689b      	ldr	r3, [r3, #8]
2400a2ca:	2b01      	cmp	r3, #1
2400a2cc:	d166      	bne.n	2400a39c <HAL_FLASHEx_ComputeCRC+0xf4>
    {
      /* Enable CRC feature */
      FLASH->CR1 |= FLASH_CR_CRC_EN;
2400a2ce:	4b70      	ldr	r3, [pc, #448]	; (2400a490 <HAL_FLASHEx_ComputeCRC+0x1e8>)
2400a2d0:	68db      	ldr	r3, [r3, #12]
2400a2d2:	4a6f      	ldr	r2, [pc, #444]	; (2400a490 <HAL_FLASHEx_ComputeCRC+0x1e8>)
2400a2d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
2400a2d8:	60d3      	str	r3, [r2, #12]

      /* Clear CRC flags in Status Register: CRC end of calculation and CRC read error */
      FLASH->CCR1 |= (FLASH_CCR_CLR_CRCEND | FLASH_CCR_CLR_CRCRDERR);
2400a2da:	4b6d      	ldr	r3, [pc, #436]	; (2400a490 <HAL_FLASHEx_ComputeCRC+0x1e8>)
2400a2dc:	695b      	ldr	r3, [r3, #20]
2400a2de:	4a6c      	ldr	r2, [pc, #432]	; (2400a490 <HAL_FLASHEx_ComputeCRC+0x1e8>)
2400a2e0:	f043 53c0 	orr.w	r3, r3, #402653184	; 0x18000000
2400a2e4:	6153      	str	r3, [r2, #20]

      /* Clear current CRC result, program burst size and define memory area on which CRC has to be computed */
      FLASH->CRCCR1 |= FLASH_CRCCR_CLEAN_CRC | pCRCInit->BurstSize | pCRCInit->TypeCRC;
2400a2e6:	4b6a      	ldr	r3, [pc, #424]	; (2400a490 <HAL_FLASHEx_ComputeCRC+0x1e8>)
2400a2e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
2400a2ea:	687b      	ldr	r3, [r7, #4]
2400a2ec:	6859      	ldr	r1, [r3, #4]
2400a2ee:	687b      	ldr	r3, [r7, #4]
2400a2f0:	681b      	ldr	r3, [r3, #0]
2400a2f2:	430b      	orrs	r3, r1
2400a2f4:	4313      	orrs	r3, r2
2400a2f6:	4a66      	ldr	r2, [pc, #408]	; (2400a490 <HAL_FLASHEx_ComputeCRC+0x1e8>)
2400a2f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2400a2fc:	6513      	str	r3, [r2, #80]	; 0x50

      if (pCRCInit->TypeCRC == FLASH_CRC_SECTORS)
2400a2fe:	687b      	ldr	r3, [r7, #4]
2400a300:	681b      	ldr	r3, [r3, #0]
2400a302:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2400a306:	d119      	bne.n	2400a33c <HAL_FLASHEx_ComputeCRC+0x94>
      {
        /* Clear sectors list */
        FLASH->CRCCR1 |= FLASH_CRCCR_CLEAN_SECT;
2400a308:	4b61      	ldr	r3, [pc, #388]	; (2400a490 <HAL_FLASHEx_ComputeCRC+0x1e8>)
2400a30a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2400a30c:	4a60      	ldr	r2, [pc, #384]	; (2400a490 <HAL_FLASHEx_ComputeCRC+0x1e8>)
2400a30e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
2400a312:	6513      	str	r3, [r2, #80]	; 0x50

        /* Select CRC sectors */
        for(sector_index = pCRCInit->Sector; sector_index < (pCRCInit->NbSectors + pCRCInit->Sector); sector_index++)
2400a314:	687b      	ldr	r3, [r7, #4]
2400a316:	68db      	ldr	r3, [r3, #12]
2400a318:	60bb      	str	r3, [r7, #8]
2400a31a:	e006      	b.n	2400a32a <HAL_FLASHEx_ComputeCRC+0x82>
        {
          FLASH_CRC_AddSector(sector_index, FLASH_BANK_1);
2400a31c:	2101      	movs	r1, #1
2400a31e:	68b8      	ldr	r0, [r7, #8]
2400a320:	f000 fc26 	bl	2400ab70 <FLASH_CRC_AddSector>
        for(sector_index = pCRCInit->Sector; sector_index < (pCRCInit->NbSectors + pCRCInit->Sector); sector_index++)
2400a324:	68bb      	ldr	r3, [r7, #8]
2400a326:	3301      	adds	r3, #1
2400a328:	60bb      	str	r3, [r7, #8]
2400a32a:	687b      	ldr	r3, [r7, #4]
2400a32c:	691a      	ldr	r2, [r3, #16]
2400a32e:	687b      	ldr	r3, [r7, #4]
2400a330:	68db      	ldr	r3, [r3, #12]
2400a332:	4413      	add	r3, r2
2400a334:	68ba      	ldr	r2, [r7, #8]
2400a336:	429a      	cmp	r2, r3
2400a338:	d3f0      	bcc.n	2400a31c <HAL_FLASHEx_ComputeCRC+0x74>
2400a33a:	e013      	b.n	2400a364 <HAL_FLASHEx_ComputeCRC+0xbc>
        }
      }
      else if (pCRCInit->TypeCRC == FLASH_CRC_BANK)
2400a33c:	687b      	ldr	r3, [r7, #4]
2400a33e:	681b      	ldr	r3, [r3, #0]
2400a340:	4a54      	ldr	r2, [pc, #336]	; (2400a494 <HAL_FLASHEx_ComputeCRC+0x1ec>)
2400a342:	4293      	cmp	r3, r2
2400a344:	d106      	bne.n	2400a354 <HAL_FLASHEx_ComputeCRC+0xac>
      {
        /* Enable Bank 1 CRC select bit */
        FLASH->CRCCR1 |= FLASH_CRCCR_ALL_BANK;
2400a346:	4b52      	ldr	r3, [pc, #328]	; (2400a490 <HAL_FLASHEx_ComputeCRC+0x1e8>)
2400a348:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2400a34a:	4a51      	ldr	r2, [pc, #324]	; (2400a490 <HAL_FLASHEx_ComputeCRC+0x1e8>)
2400a34c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
2400a350:	6513      	str	r3, [r2, #80]	; 0x50
2400a352:	e007      	b.n	2400a364 <HAL_FLASHEx_ComputeCRC+0xbc>
      }
      else
      {
        /* Select CRC start and end addresses */
        FLASH_CRC_SelectAddress(pCRCInit->CRCStartAddr, pCRCInit->CRCEndAddr, FLASH_BANK_1);
2400a354:	687b      	ldr	r3, [r7, #4]
2400a356:	6958      	ldr	r0, [r3, #20]
2400a358:	687b      	ldr	r3, [r7, #4]
2400a35a:	699b      	ldr	r3, [r3, #24]
2400a35c:	2201      	movs	r2, #1
2400a35e:	4619      	mov	r1, r3
2400a360:	f000 fc38 	bl	2400abd4 <FLASH_CRC_SelectAddress>
      }

      /* Start the CRC calculation */
      FLASH->CRCCR1 |= FLASH_CRCCR_START_CRC;
2400a364:	4b4a      	ldr	r3, [pc, #296]	; (2400a490 <HAL_FLASHEx_ComputeCRC+0x1e8>)
2400a366:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2400a368:	4a49      	ldr	r2, [pc, #292]	; (2400a490 <HAL_FLASHEx_ComputeCRC+0x1e8>)
2400a36a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2400a36e:	6513      	str	r3, [r2, #80]	; 0x50

      /* Wait on CRC busy flag */
      status = FLASH_CRC_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
2400a370:	2101      	movs	r1, #1
2400a372:	f24c 3050 	movw	r0, #50000	; 0xc350
2400a376:	f7ff fc4d 	bl	24009c14 <FLASH_CRC_WaitForLastOperation>
2400a37a:	4603      	mov	r3, r0
2400a37c:	73fb      	strb	r3, [r7, #15]

      /* Return CRC result */
      (*CRC_Result) = FLASH->CRCDATA;
2400a37e:	4b44      	ldr	r3, [pc, #272]	; (2400a490 <HAL_FLASHEx_ComputeCRC+0x1e8>)
2400a380:	6dda      	ldr	r2, [r3, #92]	; 0x5c
2400a382:	683b      	ldr	r3, [r7, #0]
2400a384:	601a      	str	r2, [r3, #0]

      /* Disable CRC feature */
      FLASH->CR1 &= (~FLASH_CR_CRC_EN);
2400a386:	4b42      	ldr	r3, [pc, #264]	; (2400a490 <HAL_FLASHEx_ComputeCRC+0x1e8>)
2400a388:	68db      	ldr	r3, [r3, #12]
2400a38a:	4a41      	ldr	r2, [pc, #260]	; (2400a490 <HAL_FLASHEx_ComputeCRC+0x1e8>)
2400a38c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
2400a390:	60d3      	str	r3, [r2, #12]

      /* Clear CRC flags */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_CRCEND_BANK1 | FLASH_FLAG_CRCRDERR_BANK1);
2400a392:	4b3f      	ldr	r3, [pc, #252]	; (2400a490 <HAL_FLASHEx_ComputeCRC+0x1e8>)
2400a394:	f04f 52c0 	mov.w	r2, #402653184	; 0x18000000
2400a398:	615a      	str	r2, [r3, #20]
2400a39a:	e074      	b.n	2400a486 <HAL_FLASHEx_ComputeCRC+0x1de>
    }
#if defined (DUAL_BANK)
    else
    {
      /* Enable CRC feature */
      FLASH->CR2 |= FLASH_CR_CRC_EN;
2400a39c:	4b3c      	ldr	r3, [pc, #240]	; (2400a490 <HAL_FLASHEx_ComputeCRC+0x1e8>)
2400a39e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
2400a3a2:	4a3b      	ldr	r2, [pc, #236]	; (2400a490 <HAL_FLASHEx_ComputeCRC+0x1e8>)
2400a3a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
2400a3a8:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

      /* Clear CRC flags in Status Register: CRC end of calculation and CRC read error */
      FLASH->CCR2 |= (FLASH_CCR_CLR_CRCEND | FLASH_CCR_CLR_CRCRDERR);
2400a3ac:	4b38      	ldr	r3, [pc, #224]	; (2400a490 <HAL_FLASHEx_ComputeCRC+0x1e8>)
2400a3ae:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
2400a3b2:	4a37      	ldr	r2, [pc, #220]	; (2400a490 <HAL_FLASHEx_ComputeCRC+0x1e8>)
2400a3b4:	f043 53c0 	orr.w	r3, r3, #402653184	; 0x18000000
2400a3b8:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

      /* Clear current CRC result, program burst size and define memory area on which CRC has to be computed */
      FLASH->CRCCR2 |= FLASH_CRCCR_CLEAN_CRC | pCRCInit->BurstSize | pCRCInit->TypeCRC;
2400a3bc:	4b34      	ldr	r3, [pc, #208]	; (2400a490 <HAL_FLASHEx_ComputeCRC+0x1e8>)
2400a3be:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
2400a3c2:	687b      	ldr	r3, [r7, #4]
2400a3c4:	6859      	ldr	r1, [r3, #4]
2400a3c6:	687b      	ldr	r3, [r7, #4]
2400a3c8:	681b      	ldr	r3, [r3, #0]
2400a3ca:	430b      	orrs	r3, r1
2400a3cc:	4313      	orrs	r3, r2
2400a3ce:	4a30      	ldr	r2, [pc, #192]	; (2400a490 <HAL_FLASHEx_ComputeCRC+0x1e8>)
2400a3d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2400a3d4:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150

      if (pCRCInit->TypeCRC == FLASH_CRC_SECTORS)
2400a3d8:	687b      	ldr	r3, [r7, #4]
2400a3da:	681b      	ldr	r3, [r3, #0]
2400a3dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2400a3e0:	d11b      	bne.n	2400a41a <HAL_FLASHEx_ComputeCRC+0x172>
      {
        /* Clear sectors list */
        FLASH->CRCCR2 |= FLASH_CRCCR_CLEAN_SECT;
2400a3e2:	4b2b      	ldr	r3, [pc, #172]	; (2400a490 <HAL_FLASHEx_ComputeCRC+0x1e8>)
2400a3e4:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
2400a3e8:	4a29      	ldr	r2, [pc, #164]	; (2400a490 <HAL_FLASHEx_ComputeCRC+0x1e8>)
2400a3ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
2400a3ee:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150

        /* Add CRC sectors */
        for(sector_index = pCRCInit->Sector; sector_index < (pCRCInit->NbSectors + pCRCInit->Sector); sector_index++)
2400a3f2:	687b      	ldr	r3, [r7, #4]
2400a3f4:	68db      	ldr	r3, [r3, #12]
2400a3f6:	60bb      	str	r3, [r7, #8]
2400a3f8:	e006      	b.n	2400a408 <HAL_FLASHEx_ComputeCRC+0x160>
        {
          FLASH_CRC_AddSector(sector_index, FLASH_BANK_2);
2400a3fa:	2102      	movs	r1, #2
2400a3fc:	68b8      	ldr	r0, [r7, #8]
2400a3fe:	f000 fbb7 	bl	2400ab70 <FLASH_CRC_AddSector>
        for(sector_index = pCRCInit->Sector; sector_index < (pCRCInit->NbSectors + pCRCInit->Sector); sector_index++)
2400a402:	68bb      	ldr	r3, [r7, #8]
2400a404:	3301      	adds	r3, #1
2400a406:	60bb      	str	r3, [r7, #8]
2400a408:	687b      	ldr	r3, [r7, #4]
2400a40a:	691a      	ldr	r2, [r3, #16]
2400a40c:	687b      	ldr	r3, [r7, #4]
2400a40e:	68db      	ldr	r3, [r3, #12]
2400a410:	4413      	add	r3, r2
2400a412:	68ba      	ldr	r2, [r7, #8]
2400a414:	429a      	cmp	r2, r3
2400a416:	d3f0      	bcc.n	2400a3fa <HAL_FLASHEx_ComputeCRC+0x152>
2400a418:	e015      	b.n	2400a446 <HAL_FLASHEx_ComputeCRC+0x19e>
        }
      }
      else if (pCRCInit->TypeCRC == FLASH_CRC_BANK)
2400a41a:	687b      	ldr	r3, [r7, #4]
2400a41c:	681b      	ldr	r3, [r3, #0]
2400a41e:	4a1d      	ldr	r2, [pc, #116]	; (2400a494 <HAL_FLASHEx_ComputeCRC+0x1ec>)
2400a420:	4293      	cmp	r3, r2
2400a422:	d108      	bne.n	2400a436 <HAL_FLASHEx_ComputeCRC+0x18e>
      {
        /* Enable Bank 2 CRC select bit */
        FLASH->CRCCR2 |= FLASH_CRCCR_ALL_BANK;
2400a424:	4b1a      	ldr	r3, [pc, #104]	; (2400a490 <HAL_FLASHEx_ComputeCRC+0x1e8>)
2400a426:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
2400a42a:	4a19      	ldr	r2, [pc, #100]	; (2400a490 <HAL_FLASHEx_ComputeCRC+0x1e8>)
2400a42c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
2400a430:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
2400a434:	e007      	b.n	2400a446 <HAL_FLASHEx_ComputeCRC+0x19e>
      }
      else
      {
        /* Select CRC start and end addresses */
        FLASH_CRC_SelectAddress(pCRCInit->CRCStartAddr, pCRCInit->CRCEndAddr, FLASH_BANK_2);
2400a436:	687b      	ldr	r3, [r7, #4]
2400a438:	6958      	ldr	r0, [r3, #20]
2400a43a:	687b      	ldr	r3, [r7, #4]
2400a43c:	699b      	ldr	r3, [r3, #24]
2400a43e:	2202      	movs	r2, #2
2400a440:	4619      	mov	r1, r3
2400a442:	f000 fbc7 	bl	2400abd4 <FLASH_CRC_SelectAddress>
      }

      /* Start the CRC calculation */
      FLASH->CRCCR2 |= FLASH_CRCCR_START_CRC;
2400a446:	4b12      	ldr	r3, [pc, #72]	; (2400a490 <HAL_FLASHEx_ComputeCRC+0x1e8>)
2400a448:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
2400a44c:	4a10      	ldr	r2, [pc, #64]	; (2400a490 <HAL_FLASHEx_ComputeCRC+0x1e8>)
2400a44e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2400a452:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150

      /* Wait on CRC busy flag */
      status = FLASH_CRC_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2);
2400a456:	2102      	movs	r1, #2
2400a458:	f24c 3050 	movw	r0, #50000	; 0xc350
2400a45c:	f7ff fbda 	bl	24009c14 <FLASH_CRC_WaitForLastOperation>
2400a460:	4603      	mov	r3, r0
2400a462:	73fb      	strb	r3, [r7, #15]

      /* Return CRC result */
      (*CRC_Result) = FLASH->CRCDATA;
2400a464:	4b0a      	ldr	r3, [pc, #40]	; (2400a490 <HAL_FLASHEx_ComputeCRC+0x1e8>)
2400a466:	6dda      	ldr	r2, [r3, #92]	; 0x5c
2400a468:	683b      	ldr	r3, [r7, #0]
2400a46a:	601a      	str	r2, [r3, #0]

      /* Disable CRC feature */
      FLASH->CR2 &= (~FLASH_CR_CRC_EN);
2400a46c:	4b08      	ldr	r3, [pc, #32]	; (2400a490 <HAL_FLASHEx_ComputeCRC+0x1e8>)
2400a46e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
2400a472:	4a07      	ldr	r2, [pc, #28]	; (2400a490 <HAL_FLASHEx_ComputeCRC+0x1e8>)
2400a474:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
2400a478:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

      /* Clear CRC flags */
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_CRCEND_BANK2 | FLASH_FLAG_CRCRDERR_BANK2);
2400a47c:	4b04      	ldr	r3, [pc, #16]	; (2400a490 <HAL_FLASHEx_ComputeCRC+0x1e8>)
2400a47e:	f04f 52c0 	mov.w	r2, #402653184	; 0x18000000
2400a482:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    }
#endif /* DUAL_BANK */
  }

  return status;
2400a486:	7bfb      	ldrb	r3, [r7, #15]
}
2400a488:	4618      	mov	r0, r3
2400a48a:	3710      	adds	r7, #16
2400a48c:	46bd      	mov	sp, r7
2400a48e:	bd80      	pop	{r7, pc}
2400a490:	52002000 	.word	0x52002000
2400a494:	00400100 	.word	0x00400100

2400a498 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
2400a498:	b480      	push	{r7}
2400a49a:	b083      	sub	sp, #12
2400a49c:	af00      	add	r7, sp, #0
2400a49e:	6078      	str	r0, [r7, #4]
2400a4a0:	6039      	str	r1, [r7, #0]
#endif /* FLASH_CR_PSIZE */
  assert_param(IS_FLASH_BANK(Banks));

#if defined (DUAL_BANK)
  /* Flash Mass Erase */
  if((Banks & FLASH_BANK_BOTH) == FLASH_BANK_BOTH)
2400a4a2:	683b      	ldr	r3, [r7, #0]
2400a4a4:	f003 0303 	and.w	r3, r3, #3
2400a4a8:	2b03      	cmp	r3, #3
2400a4aa:	d122      	bne.n	2400a4f2 <FLASH_MassErase+0x5a>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange for Bank1 and Bank2 */
    FLASH->CR1 &= (~FLASH_CR_PSIZE);
2400a4ac:	4b2e      	ldr	r3, [pc, #184]	; (2400a568 <FLASH_MassErase+0xd0>)
2400a4ae:	68db      	ldr	r3, [r3, #12]
2400a4b0:	4a2d      	ldr	r2, [pc, #180]	; (2400a568 <FLASH_MassErase+0xd0>)
2400a4b2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
2400a4b6:	60d3      	str	r3, [r2, #12]
    FLASH->CR2 &= (~FLASH_CR_PSIZE);
2400a4b8:	4b2b      	ldr	r3, [pc, #172]	; (2400a568 <FLASH_MassErase+0xd0>)
2400a4ba:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
2400a4be:	4a2a      	ldr	r2, [pc, #168]	; (2400a568 <FLASH_MassErase+0xd0>)
2400a4c0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
2400a4c4:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    /* Set voltage range */
    FLASH->CR1 |= VoltageRange;
2400a4c8:	4b27      	ldr	r3, [pc, #156]	; (2400a568 <FLASH_MassErase+0xd0>)
2400a4ca:	68da      	ldr	r2, [r3, #12]
2400a4cc:	4926      	ldr	r1, [pc, #152]	; (2400a568 <FLASH_MassErase+0xd0>)
2400a4ce:	687b      	ldr	r3, [r7, #4]
2400a4d0:	4313      	orrs	r3, r2
2400a4d2:	60cb      	str	r3, [r1, #12]
    FLASH->CR2 |= VoltageRange;
2400a4d4:	4b24      	ldr	r3, [pc, #144]	; (2400a568 <FLASH_MassErase+0xd0>)
2400a4d6:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
2400a4da:	4923      	ldr	r1, [pc, #140]	; (2400a568 <FLASH_MassErase+0xd0>)
2400a4dc:	687b      	ldr	r3, [r7, #4]
2400a4de:	4313      	orrs	r3, r2
2400a4e0:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
#endif /* FLASH_CR_PSIZE */

    /* Set Mass Erase Bit */
    FLASH->OPTCR |= FLASH_OPTCR_MER;
2400a4e4:	4b20      	ldr	r3, [pc, #128]	; (2400a568 <FLASH_MassErase+0xd0>)
2400a4e6:	699b      	ldr	r3, [r3, #24]
2400a4e8:	4a1f      	ldr	r2, [pc, #124]	; (2400a568 <FLASH_MassErase+0xd0>)
2400a4ea:	f043 0310 	orr.w	r3, r3, #16
2400a4ee:	6193      	str	r3, [r2, #24]
      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
    }
#endif /* DUAL_BANK */
  }
}
2400a4f0:	e033      	b.n	2400a55a <FLASH_MassErase+0xc2>
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
2400a4f2:	683b      	ldr	r3, [r7, #0]
2400a4f4:	f003 0301 	and.w	r3, r3, #1
2400a4f8:	2b00      	cmp	r3, #0
2400a4fa:	d011      	beq.n	2400a520 <FLASH_MassErase+0x88>
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
2400a4fc:	4b1a      	ldr	r3, [pc, #104]	; (2400a568 <FLASH_MassErase+0xd0>)
2400a4fe:	68db      	ldr	r3, [r3, #12]
2400a500:	4a19      	ldr	r2, [pc, #100]	; (2400a568 <FLASH_MassErase+0xd0>)
2400a502:	f023 0330 	bic.w	r3, r3, #48	; 0x30
2400a506:	60d3      	str	r3, [r2, #12]
      FLASH->CR1 |=  VoltageRange;
2400a508:	4b17      	ldr	r3, [pc, #92]	; (2400a568 <FLASH_MassErase+0xd0>)
2400a50a:	68da      	ldr	r2, [r3, #12]
2400a50c:	4916      	ldr	r1, [pc, #88]	; (2400a568 <FLASH_MassErase+0xd0>)
2400a50e:	687b      	ldr	r3, [r7, #4]
2400a510:	4313      	orrs	r3, r2
2400a512:	60cb      	str	r3, [r1, #12]
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
2400a514:	4b14      	ldr	r3, [pc, #80]	; (2400a568 <FLASH_MassErase+0xd0>)
2400a516:	68db      	ldr	r3, [r3, #12]
2400a518:	4a13      	ldr	r2, [pc, #76]	; (2400a568 <FLASH_MassErase+0xd0>)
2400a51a:	f043 0388 	orr.w	r3, r3, #136	; 0x88
2400a51e:	60d3      	str	r3, [r2, #12]
    if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
2400a520:	683b      	ldr	r3, [r7, #0]
2400a522:	f003 0302 	and.w	r3, r3, #2
2400a526:	2b00      	cmp	r3, #0
2400a528:	d017      	beq.n	2400a55a <FLASH_MassErase+0xc2>
      FLASH->CR2 &= (~FLASH_CR_PSIZE);
2400a52a:	4b0f      	ldr	r3, [pc, #60]	; (2400a568 <FLASH_MassErase+0xd0>)
2400a52c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
2400a530:	4a0d      	ldr	r2, [pc, #52]	; (2400a568 <FLASH_MassErase+0xd0>)
2400a532:	f023 0330 	bic.w	r3, r3, #48	; 0x30
2400a536:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
      FLASH->CR2 |= VoltageRange;
2400a53a:	4b0b      	ldr	r3, [pc, #44]	; (2400a568 <FLASH_MassErase+0xd0>)
2400a53c:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
2400a540:	4909      	ldr	r1, [pc, #36]	; (2400a568 <FLASH_MassErase+0xd0>)
2400a542:	687b      	ldr	r3, [r7, #4]
2400a544:	4313      	orrs	r3, r2
2400a546:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
2400a54a:	4b07      	ldr	r3, [pc, #28]	; (2400a568 <FLASH_MassErase+0xd0>)
2400a54c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
2400a550:	4a05      	ldr	r2, [pc, #20]	; (2400a568 <FLASH_MassErase+0xd0>)
2400a552:	f043 0388 	orr.w	r3, r3, #136	; 0x88
2400a556:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
}
2400a55a:	bf00      	nop
2400a55c:	370c      	adds	r7, #12
2400a55e:	46bd      	mov	sp, r7
2400a560:	f85d 7b04 	ldr.w	r7, [sp], #4
2400a564:	4770      	bx	lr
2400a566:	bf00      	nop
2400a568:	52002000 	.word	0x52002000

2400a56c <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
2400a56c:	b480      	push	{r7}
2400a56e:	b085      	sub	sp, #20
2400a570:	af00      	add	r7, sp, #0
2400a572:	60f8      	str	r0, [r7, #12]
2400a574:	60b9      	str	r1, [r7, #8]
2400a576:	607a      	str	r2, [r7, #4]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
2400a578:	68bb      	ldr	r3, [r7, #8]
2400a57a:	f003 0301 	and.w	r3, r3, #1
2400a57e:	2b00      	cmp	r3, #0
2400a580:	d010      	beq.n	2400a5a4 <FLASH_Erase_Sector+0x38>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
2400a582:	4b18      	ldr	r3, [pc, #96]	; (2400a5e4 <FLASH_Erase_Sector+0x78>)
2400a584:	68db      	ldr	r3, [r3, #12]
2400a586:	4a17      	ldr	r2, [pc, #92]	; (2400a5e4 <FLASH_Erase_Sector+0x78>)
2400a588:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
2400a58c:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
2400a58e:	4b15      	ldr	r3, [pc, #84]	; (2400a5e4 <FLASH_Erase_Sector+0x78>)
2400a590:	68da      	ldr	r2, [r3, #12]
2400a592:	68fb      	ldr	r3, [r7, #12]
2400a594:	0219      	lsls	r1, r3, #8
2400a596:	687b      	ldr	r3, [r7, #4]
2400a598:	430b      	orrs	r3, r1
2400a59a:	4313      	orrs	r3, r2
2400a59c:	4a11      	ldr	r2, [pc, #68]	; (2400a5e4 <FLASH_Erase_Sector+0x78>)
2400a59e:	f043 0384 	orr.w	r3, r3, #132	; 0x84
2400a5a2:	60d3      	str	r3, [r2, #12]
    FLASH->CR1 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }

#if defined (DUAL_BANK)
  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
2400a5a4:	68bb      	ldr	r3, [r7, #8]
2400a5a6:	f003 0302 	and.w	r3, r3, #2
2400a5aa:	2b00      	cmp	r3, #0
2400a5ac:	d014      	beq.n	2400a5d8 <FLASH_Erase_Sector+0x6c>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank2 */
    FLASH->CR2 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
2400a5ae:	4b0d      	ldr	r3, [pc, #52]	; (2400a5e4 <FLASH_Erase_Sector+0x78>)
2400a5b0:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
2400a5b4:	4a0b      	ldr	r2, [pc, #44]	; (2400a5e4 <FLASH_Erase_Sector+0x78>)
2400a5b6:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
2400a5ba:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | VoltageRange  | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
2400a5be:	4b09      	ldr	r3, [pc, #36]	; (2400a5e4 <FLASH_Erase_Sector+0x78>)
2400a5c0:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
2400a5c4:	68fb      	ldr	r3, [r7, #12]
2400a5c6:	0219      	lsls	r1, r3, #8
2400a5c8:	687b      	ldr	r3, [r7, #4]
2400a5ca:	430b      	orrs	r3, r1
2400a5cc:	4313      	orrs	r3, r2
2400a5ce:	4a05      	ldr	r2, [pc, #20]	; (2400a5e4 <FLASH_Erase_Sector+0x78>)
2400a5d0:	f043 0384 	orr.w	r3, r3, #132	; 0x84
2400a5d4:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
#endif /* DUAL_BANK */
}
2400a5d8:	bf00      	nop
2400a5da:	3714      	adds	r7, #20
2400a5dc:	46bd      	mov	sp, r7
2400a5de:	f85d 7b04 	ldr.w	r7, [sp], #4
2400a5e2:	4770      	bx	lr
2400a5e4:	52002000 	.word	0x52002000

2400a5e8 <FLASH_OB_EnableWRP>:
  *            @arg FLASH_BANK_BOTH: enable WRP on both bank1 and bank2 specified sectors
  *
  * @retval HAL FLASH State
  */
static void FLASH_OB_EnableWRP(uint32_t WRPSector, uint32_t Banks)
{
2400a5e8:	b480      	push	{r7}
2400a5ea:	b083      	sub	sp, #12
2400a5ec:	af00      	add	r7, sp, #0
2400a5ee:	6078      	str	r0, [r7, #4]
2400a5f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
2400a5f2:	683b      	ldr	r3, [r7, #0]
2400a5f4:	f003 0301 	and.w	r3, r3, #1
2400a5f8:	2b00      	cmp	r3, #0
2400a5fa:	d007      	beq.n	2400a60c <FLASH_OB_EnableWRP+0x24>
  {
    /* Enable Write Protection for bank 1 */
    FLASH->WPSN_PRG1 &= (~(WRPSector & FLASH_WPSN_WRPSN));
2400a5fc:	4b0e      	ldr	r3, [pc, #56]	; (2400a638 <FLASH_OB_EnableWRP+0x50>)
2400a5fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
2400a600:	687b      	ldr	r3, [r7, #4]
2400a602:	b2db      	uxtb	r3, r3
2400a604:	43db      	mvns	r3, r3
2400a606:	490c      	ldr	r1, [pc, #48]	; (2400a638 <FLASH_OB_EnableWRP+0x50>)
2400a608:	4013      	ands	r3, r2
2400a60a:	63cb      	str	r3, [r1, #60]	; 0x3c
  }

#if defined (DUAL_BANK)
  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
2400a60c:	683b      	ldr	r3, [r7, #0]
2400a60e:	f003 0302 	and.w	r3, r3, #2
2400a612:	2b00      	cmp	r3, #0
2400a614:	d009      	beq.n	2400a62a <FLASH_OB_EnableWRP+0x42>
  {
    /* Enable Write Protection for bank 2 */
    FLASH->WPSN_PRG2 &= (~(WRPSector & FLASH_WPSN_WRPSN));
2400a616:	4b08      	ldr	r3, [pc, #32]	; (2400a638 <FLASH_OB_EnableWRP+0x50>)
2400a618:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
2400a61c:	687b      	ldr	r3, [r7, #4]
2400a61e:	b2db      	uxtb	r3, r3
2400a620:	43db      	mvns	r3, r3
2400a622:	4905      	ldr	r1, [pc, #20]	; (2400a638 <FLASH_OB_EnableWRP+0x50>)
2400a624:	4013      	ands	r3, r2
2400a626:	f8c1 313c 	str.w	r3, [r1, #316]	; 0x13c
  }
#endif /* DUAL_BANK */
}
2400a62a:	bf00      	nop
2400a62c:	370c      	adds	r7, #12
2400a62e:	46bd      	mov	sp, r7
2400a630:	f85d 7b04 	ldr.w	r7, [sp], #4
2400a634:	4770      	bx	lr
2400a636:	bf00      	nop
2400a638:	52002000 	.word	0x52002000

2400a63c <FLASH_OB_DisableWRP>:
  *            @arg FLASH_BANK_BOTH: disable WRP on both bank1 and bank2 specified sectors
  *
  * @retval HAL FLASH State
  */
static void FLASH_OB_DisableWRP(uint32_t WRPSector, uint32_t Banks)
{
2400a63c:	b480      	push	{r7}
2400a63e:	b083      	sub	sp, #12
2400a640:	af00      	add	r7, sp, #0
2400a642:	6078      	str	r0, [r7, #4]
2400a644:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
2400a646:	683b      	ldr	r3, [r7, #0]
2400a648:	f003 0301 	and.w	r3, r3, #1
2400a64c:	2b00      	cmp	r3, #0
2400a64e:	d006      	beq.n	2400a65e <FLASH_OB_DisableWRP+0x22>
  {
    /* Disable Write Protection for bank 1 */
    FLASH->WPSN_PRG1 |= (WRPSector & FLASH_WPSN_WRPSN);
2400a650:	4b0d      	ldr	r3, [pc, #52]	; (2400a688 <FLASH_OB_DisableWRP+0x4c>)
2400a652:	6bda      	ldr	r2, [r3, #60]	; 0x3c
2400a654:	687b      	ldr	r3, [r7, #4]
2400a656:	b2db      	uxtb	r3, r3
2400a658:	490b      	ldr	r1, [pc, #44]	; (2400a688 <FLASH_OB_DisableWRP+0x4c>)
2400a65a:	4313      	orrs	r3, r2
2400a65c:	63cb      	str	r3, [r1, #60]	; 0x3c
  }

#if defined (DUAL_BANK)
  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
2400a65e:	683b      	ldr	r3, [r7, #0]
2400a660:	f003 0302 	and.w	r3, r3, #2
2400a664:	2b00      	cmp	r3, #0
2400a666:	d008      	beq.n	2400a67a <FLASH_OB_DisableWRP+0x3e>
  {
    /* Disable Write Protection for bank 2 */
    FLASH->WPSN_PRG2 |= (WRPSector & FLASH_WPSN_WRPSN);
2400a668:	4b07      	ldr	r3, [pc, #28]	; (2400a688 <FLASH_OB_DisableWRP+0x4c>)
2400a66a:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
2400a66e:	687b      	ldr	r3, [r7, #4]
2400a670:	b2db      	uxtb	r3, r3
2400a672:	4905      	ldr	r1, [pc, #20]	; (2400a688 <FLASH_OB_DisableWRP+0x4c>)
2400a674:	4313      	orrs	r3, r2
2400a676:	f8c1 313c 	str.w	r3, [r1, #316]	; 0x13c
  }
#endif /* DUAL_BANK */
}
2400a67a:	bf00      	nop
2400a67c:	370c      	adds	r7, #12
2400a67e:	46bd      	mov	sp, r7
2400a680:	f85d 7b04 	ldr.w	r7, [sp], #4
2400a684:	4770      	bx	lr
2400a686:	bf00      	nop
2400a688:	52002000 	.word	0x52002000

2400a68c <FLASH_OB_GetWRP>:
  *            @arg FLASH_BANK_BOTH: note allowed in this functions
  *
  * @retval HAL FLASH State
  */
static void FLASH_OB_GetWRP(uint32_t *WRPState, uint32_t *WRPSector, uint32_t Bank)
{
2400a68c:	b480      	push	{r7}
2400a68e:	b087      	sub	sp, #28
2400a690:	af00      	add	r7, sp, #0
2400a692:	60f8      	str	r0, [r7, #12]
2400a694:	60b9      	str	r1, [r7, #8]
2400a696:	607a      	str	r2, [r7, #4]
  uint32_t regvalue = 0U;
2400a698:	2300      	movs	r3, #0
2400a69a:	617b      	str	r3, [r7, #20]

  if(Bank == FLASH_BANK_1)
2400a69c:	687b      	ldr	r3, [r7, #4]
2400a69e:	2b01      	cmp	r3, #1
2400a6a0:	d102      	bne.n	2400a6a8 <FLASH_OB_GetWRP+0x1c>
  {
    regvalue = FLASH->WPSN_CUR1;
2400a6a2:	4b10      	ldr	r3, [pc, #64]	; (2400a6e4 <FLASH_OB_GetWRP+0x58>)
2400a6a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400a6a6:	617b      	str	r3, [r7, #20]
  }

#if defined (DUAL_BANK)
  if(Bank == FLASH_BANK_2)
2400a6a8:	687b      	ldr	r3, [r7, #4]
2400a6aa:	2b02      	cmp	r3, #2
2400a6ac:	d103      	bne.n	2400a6b6 <FLASH_OB_GetWRP+0x2a>
  {
    regvalue = FLASH->WPSN_CUR2;
2400a6ae:	4b0d      	ldr	r3, [pc, #52]	; (2400a6e4 <FLASH_OB_GetWRP+0x58>)
2400a6b0:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
2400a6b4:	617b      	str	r3, [r7, #20]
  }
#endif /* DUAL_BANK */

  (*WRPSector) = (~regvalue) & FLASH_WPSN_WRPSN;
2400a6b6:	697b      	ldr	r3, [r7, #20]
2400a6b8:	43db      	mvns	r3, r3
2400a6ba:	b2da      	uxtb	r2, r3
2400a6bc:	68bb      	ldr	r3, [r7, #8]
2400a6be:	601a      	str	r2, [r3, #0]

  if(*WRPSector == 0U)
2400a6c0:	68bb      	ldr	r3, [r7, #8]
2400a6c2:	681b      	ldr	r3, [r3, #0]
2400a6c4:	2b00      	cmp	r3, #0
2400a6c6:	d103      	bne.n	2400a6d0 <FLASH_OB_GetWRP+0x44>
  {
    (*WRPState) = OB_WRPSTATE_DISABLE;
2400a6c8:	68fb      	ldr	r3, [r7, #12]
2400a6ca:	2200      	movs	r2, #0
2400a6cc:	601a      	str	r2, [r3, #0]
  }
  else
  {
    (*WRPState) = OB_WRPSTATE_ENABLE;
  }
}
2400a6ce:	e002      	b.n	2400a6d6 <FLASH_OB_GetWRP+0x4a>
    (*WRPState) = OB_WRPSTATE_ENABLE;
2400a6d0:	68fb      	ldr	r3, [r7, #12]
2400a6d2:	2201      	movs	r2, #1
2400a6d4:	601a      	str	r2, [r3, #0]
}
2400a6d6:	bf00      	nop
2400a6d8:	371c      	adds	r7, #28
2400a6da:	46bd      	mov	sp, r7
2400a6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
2400a6e0:	4770      	bx	lr
2400a6e2:	bf00      	nop
2400a6e4:	52002000 	.word	0x52002000

2400a6e8 <FLASH_OB_RDPConfig>:
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  *
  * @retval HAL status
  */
static void FLASH_OB_RDPConfig(uint32_t RDPLevel)
{
2400a6e8:	b480      	push	{r7}
2400a6ea:	b083      	sub	sp, #12
2400a6ec:	af00      	add	r7, sp, #0
2400a6ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(RDPLevel));

  /* Configure the RDP level in the option bytes register */
  MODIFY_REG(FLASH->OPTSR_PRG, FLASH_OPTSR_RDP, RDPLevel);
2400a6f0:	4b06      	ldr	r3, [pc, #24]	; (2400a70c <FLASH_OB_RDPConfig+0x24>)
2400a6f2:	6a1b      	ldr	r3, [r3, #32]
2400a6f4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
2400a6f8:	4904      	ldr	r1, [pc, #16]	; (2400a70c <FLASH_OB_RDPConfig+0x24>)
2400a6fa:	687b      	ldr	r3, [r7, #4]
2400a6fc:	4313      	orrs	r3, r2
2400a6fe:	620b      	str	r3, [r1, #32]
}
2400a700:	bf00      	nop
2400a702:	370c      	adds	r7, #12
2400a704:	46bd      	mov	sp, r7
2400a706:	f85d 7b04 	ldr.w	r7, [sp], #4
2400a70a:	4770      	bx	lr
2400a70c:	52002000 	.word	0x52002000

2400a710 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint32_t FLASH_OB_GetRDP(void)
{
2400a710:	b480      	push	{r7}
2400a712:	b083      	sub	sp, #12
2400a714:	af00      	add	r7, sp, #0
  uint32_t rdp_level = READ_BIT(FLASH->OPTSR_CUR, FLASH_OPTSR_RDP);
2400a716:	4b0b      	ldr	r3, [pc, #44]	; (2400a744 <FLASH_OB_GetRDP+0x34>)
2400a718:	69db      	ldr	r3, [r3, #28]
2400a71a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
2400a71e:	607b      	str	r3, [r7, #4]
  
  if ((rdp_level != OB_RDP_LEVEL_0) && (rdp_level != OB_RDP_LEVEL_2))
2400a720:	687b      	ldr	r3, [r7, #4]
2400a722:	f5b3 4f2a 	cmp.w	r3, #43520	; 0xaa00
2400a726:	d006      	beq.n	2400a736 <FLASH_OB_GetRDP+0x26>
2400a728:	687b      	ldr	r3, [r7, #4]
2400a72a:	f5b3 4f4c 	cmp.w	r3, #52224	; 0xcc00
2400a72e:	d002      	beq.n	2400a736 <FLASH_OB_GetRDP+0x26>
  {
    return (OB_RDP_LEVEL_1);
2400a730:	f44f 43aa 	mov.w	r3, #21760	; 0x5500
2400a734:	e000      	b.n	2400a738 <FLASH_OB_GetRDP+0x28>
  }
  else
  {
    return rdp_level;
2400a736:	687b      	ldr	r3, [r7, #4]
  }
}
2400a738:	4618      	mov	r0, r3
2400a73a:	370c      	adds	r7, #12
2400a73c:	46bd      	mov	sp, r7
2400a73e:	f85d 7b04 	ldr.w	r7, [sp], #4
2400a742:	4770      	bx	lr
2400a744:	52002000 	.word	0x52002000

2400a748 <FLASH_OB_UserConfig>:
  *
  * @retval HAL status
  */
#endif /*DUAL_CORE*/
static void FLASH_OB_UserConfig(uint32_t UserType, uint32_t UserConfig)
{
2400a748:	b480      	push	{r7}
2400a74a:	b085      	sub	sp, #20
2400a74c:	af00      	add	r7, sp, #0
2400a74e:	6078      	str	r0, [r7, #4]
2400a750:	6039      	str	r1, [r7, #0]
  uint32_t optr_reg_val = 0;
2400a752:	2300      	movs	r3, #0
2400a754:	60fb      	str	r3, [r7, #12]
  uint32_t optr_reg_mask = 0;
2400a756:	2300      	movs	r3, #0
2400a758:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_OB_USER_TYPE(UserType));

  if((UserType & OB_USER_IWDG1_SW) != 0U)
2400a75a:	687b      	ldr	r3, [r7, #4]
2400a75c:	f003 0301 	and.w	r3, r3, #1
2400a760:	2b00      	cmp	r3, #0
2400a762:	d009      	beq.n	2400a778 <FLASH_OB_UserConfig+0x30>
  {
    /* IWDG_HW option byte should be modified */
    assert_param(IS_OB_IWDG1_SOURCE(UserConfig & FLASH_OPTSR_IWDG1_SW));

    /* Set value and mask for IWDG_HW option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_IWDG1_SW);
2400a764:	683b      	ldr	r3, [r7, #0]
2400a766:	f003 0310 	and.w	r3, r3, #16
2400a76a:	68fa      	ldr	r2, [r7, #12]
2400a76c:	4313      	orrs	r3, r2
2400a76e:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_IWDG1_SW;
2400a770:	68bb      	ldr	r3, [r7, #8]
2400a772:	f043 0310 	orr.w	r3, r3, #16
2400a776:	60bb      	str	r3, [r7, #8]
    /* Set value and mask for IWDG2_SW option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_IWDG2_SW);
    optr_reg_mask |= FLASH_OPTSR_IWDG2_SW;
  }
#endif /*DUAL_CORE*/
  if((UserType & OB_USER_NRST_STOP_D1) != 0U)
2400a778:	687b      	ldr	r3, [r7, #4]
2400a77a:	f003 0302 	and.w	r3, r3, #2
2400a77e:	2b00      	cmp	r3, #0
2400a780:	d009      	beq.n	2400a796 <FLASH_OB_UserConfig+0x4e>
  {
    /* NRST_STOP option byte should be modified */
    assert_param(IS_OB_STOP_D1_RESET(UserConfig & FLASH_OPTSR_NRST_STOP_D1));

    /* Set value and mask for NRST_STOP option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_NRST_STOP_D1);
2400a782:	683b      	ldr	r3, [r7, #0]
2400a784:	f003 0340 	and.w	r3, r3, #64	; 0x40
2400a788:	68fa      	ldr	r2, [r7, #12]
2400a78a:	4313      	orrs	r3, r2
2400a78c:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_NRST_STOP_D1;
2400a78e:	68bb      	ldr	r3, [r7, #8]
2400a790:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400a794:	60bb      	str	r3, [r7, #8]
  }

  if((UserType & OB_USER_NRST_STDBY_D1) != 0U)
2400a796:	687b      	ldr	r3, [r7, #4]
2400a798:	f003 0304 	and.w	r3, r3, #4
2400a79c:	2b00      	cmp	r3, #0
2400a79e:	d009      	beq.n	2400a7b4 <FLASH_OB_UserConfig+0x6c>
  {
    /* NRST_STDBY option byte should be modified */
    assert_param(IS_OB_STDBY_D1_RESET(UserConfig & FLASH_OPTSR_NRST_STBY_D1));

    /* Set value and mask for NRST_STDBY option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_NRST_STBY_D1);
2400a7a0:	683b      	ldr	r3, [r7, #0]
2400a7a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
2400a7a6:	68fa      	ldr	r2, [r7, #12]
2400a7a8:	4313      	orrs	r3, r2
2400a7aa:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_NRST_STBY_D1;
2400a7ac:	68bb      	ldr	r3, [r7, #8]
2400a7ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
2400a7b2:	60bb      	str	r3, [r7, #8]
  }

  if((UserType & OB_USER_IWDG_STOP) != 0U)
2400a7b4:	687b      	ldr	r3, [r7, #4]
2400a7b6:	f003 0308 	and.w	r3, r3, #8
2400a7ba:	2b00      	cmp	r3, #0
2400a7bc:	d009      	beq.n	2400a7d2 <FLASH_OB_UserConfig+0x8a>
  {
    /* IWDG_STOP option byte should be modified */
    assert_param(IS_OB_USER_IWDG_STOP(UserConfig & FLASH_OPTSR_FZ_IWDG_STOP));

    /* Set value and mask for IWDG_STOP option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_FZ_IWDG_STOP);
2400a7be:	683b      	ldr	r3, [r7, #0]
2400a7c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2400a7c4:	68fa      	ldr	r2, [r7, #12]
2400a7c6:	4313      	orrs	r3, r2
2400a7c8:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_FZ_IWDG_STOP;
2400a7ca:	68bb      	ldr	r3, [r7, #8]
2400a7cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2400a7d0:	60bb      	str	r3, [r7, #8]
  }

  if((UserType & OB_USER_IWDG_STDBY) != 0U)
2400a7d2:	687b      	ldr	r3, [r7, #4]
2400a7d4:	f003 0310 	and.w	r3, r3, #16
2400a7d8:	2b00      	cmp	r3, #0
2400a7da:	d009      	beq.n	2400a7f0 <FLASH_OB_UserConfig+0xa8>
  {
    /* IWDG_STDBY option byte should be modified */
    assert_param(IS_OB_USER_IWDG_STDBY(UserConfig & FLASH_OPTSR_FZ_IWDG_SDBY));

    /* Set value and mask for IWDG_STDBY option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_FZ_IWDG_SDBY);
2400a7dc:	683b      	ldr	r3, [r7, #0]
2400a7de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
2400a7e2:	68fa      	ldr	r2, [r7, #12]
2400a7e4:	4313      	orrs	r3, r2
2400a7e6:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_FZ_IWDG_SDBY;
2400a7e8:	68bb      	ldr	r3, [r7, #8]
2400a7ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
2400a7ee:	60bb      	str	r3, [r7, #8]
  }

  if((UserType & OB_USER_ST_RAM_SIZE) != 0U)
2400a7f0:	687b      	ldr	r3, [r7, #4]
2400a7f2:	f003 0320 	and.w	r3, r3, #32
2400a7f6:	2b00      	cmp	r3, #0
2400a7f8:	d009      	beq.n	2400a80e <FLASH_OB_UserConfig+0xc6>
  {
    /* ST_RAM_SIZE option byte should be modified */
    assert_param(IS_OB_USER_ST_RAM_SIZE(UserConfig & FLASH_OPTSR_ST_RAM_SIZE));

    /* Set value and mask for ST_RAM_SIZE option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_ST_RAM_SIZE);
2400a7fa:	683b      	ldr	r3, [r7, #0]
2400a7fc:	f403 13c0 	and.w	r3, r3, #1572864	; 0x180000
2400a800:	68fa      	ldr	r2, [r7, #12]
2400a802:	4313      	orrs	r3, r2
2400a804:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_ST_RAM_SIZE;
2400a806:	68bb      	ldr	r3, [r7, #8]
2400a808:	f443 13c0 	orr.w	r3, r3, #1572864	; 0x180000
2400a80c:	60bb      	str	r3, [r7, #8]
  }

  if((UserType & OB_USER_SECURITY) != 0U)
2400a80e:	687b      	ldr	r3, [r7, #4]
2400a810:	f003 0340 	and.w	r3, r3, #64	; 0x40
2400a814:	2b00      	cmp	r3, #0
2400a816:	d009      	beq.n	2400a82c <FLASH_OB_UserConfig+0xe4>
  {
    /* SECURITY option byte should be modified */
    assert_param(IS_OB_USER_SECURITY(UserConfig & FLASH_OPTSR_SECURITY));

    /* Set value and mask for SECURITY option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_SECURITY);
2400a818:	683b      	ldr	r3, [r7, #0]
2400a81a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
2400a81e:	68fa      	ldr	r2, [r7, #12]
2400a820:	4313      	orrs	r3, r2
2400a822:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_SECURITY;
2400a824:	68bb      	ldr	r3, [r7, #8]
2400a826:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
2400a82a:	60bb      	str	r3, [r7, #8]
    optr_reg_mask |= FLASH_OPTSR_NRST_STBY_D2;
  }
#endif /* FLASH_OPTSR_NRST_STOP_D2 */

#if defined (DUAL_BANK)
  if((UserType & OB_USER_SWAP_BANK) != 0U)
2400a82c:	687b      	ldr	r3, [r7, #4]
2400a82e:	f403 7380 	and.w	r3, r3, #256	; 0x100
2400a832:	2b00      	cmp	r3, #0
2400a834:	d009      	beq.n	2400a84a <FLASH_OB_UserConfig+0x102>
  {
    /* SWAP_BANK_OPT option byte should be modified */
    assert_param(IS_OB_USER_SWAP_BANK(UserConfig & FLASH_OPTSR_SWAP_BANK_OPT));

    /* Set value and mask for SWAP_BANK_OPT option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_SWAP_BANK_OPT);
2400a836:	683b      	ldr	r3, [r7, #0]
2400a838:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
2400a83c:	68fa      	ldr	r2, [r7, #12]
2400a83e:	4313      	orrs	r3, r2
2400a840:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_SWAP_BANK_OPT;
2400a842:	68bb      	ldr	r3, [r7, #8]
2400a844:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
2400a848:	60bb      	str	r3, [r7, #8]
  }
#endif /* DUAL_BANK */

  if((UserType & OB_USER_IOHSLV) != 0U)
2400a84a:	687b      	ldr	r3, [r7, #4]
2400a84c:	f003 0380 	and.w	r3, r3, #128	; 0x80
2400a850:	2b00      	cmp	r3, #0
2400a852:	d009      	beq.n	2400a868 <FLASH_OB_UserConfig+0x120>
  {
    /* IOHSLV_OPT option byte should be modified */
    assert_param(IS_OB_USER_IOHSLV(UserConfig & FLASH_OPTSR_IO_HSLV));

    /* Set value and mask for IOHSLV_OPT option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_IO_HSLV);
2400a854:	683b      	ldr	r3, [r7, #0]
2400a856:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
2400a85a:	68fa      	ldr	r2, [r7, #12]
2400a85c:	4313      	orrs	r3, r2
2400a85e:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_IO_HSLV;
2400a860:	68bb      	ldr	r3, [r7, #8]
2400a862:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
2400a866:	60bb      	str	r3, [r7, #8]
    optr_reg_mask |= FLASH_OPTSR_VDDMMC_HSLV;
  }
#endif /* FLASH_OPTSR_VDDMMC_HSLV */

  /* Configure the option bytes register */
  MODIFY_REG(FLASH->OPTSR_PRG, optr_reg_mask, optr_reg_val);
2400a868:	4b07      	ldr	r3, [pc, #28]	; (2400a888 <FLASH_OB_UserConfig+0x140>)
2400a86a:	6a1a      	ldr	r2, [r3, #32]
2400a86c:	68bb      	ldr	r3, [r7, #8]
2400a86e:	43db      	mvns	r3, r3
2400a870:	401a      	ands	r2, r3
2400a872:	4905      	ldr	r1, [pc, #20]	; (2400a888 <FLASH_OB_UserConfig+0x140>)
2400a874:	68fb      	ldr	r3, [r7, #12]
2400a876:	4313      	orrs	r3, r2
2400a878:	620b      	str	r3, [r1, #32]
}
2400a87a:	bf00      	nop
2400a87c:	3714      	adds	r7, #20
2400a87e:	46bd      	mov	sp, r7
2400a880:	f85d 7b04 	ldr.w	r7, [sp], #4
2400a884:	4770      	bx	lr
2400a886:	bf00      	nop
2400a888:	52002000 	.word	0x52002000

2400a88c <FLASH_OB_GetUser>:
  *         FZ_IWDG_STOP(Bit 17), FZ_IWDG_SDBY(Bit 18), ST_RAM_SIZE(Bit[19:20]),
  *         SECURITY(Bit 21), IO_HSLV (Bit 29) and SWAP_BANK_OPT(Bit 31).
  */
#endif /*DUAL_CORE*/
static uint32_t FLASH_OB_GetUser(void)
{
2400a88c:	b480      	push	{r7}
2400a88e:	b083      	sub	sp, #12
2400a890:	af00      	add	r7, sp, #0
  uint32_t userConfig = READ_REG(FLASH->OPTSR_CUR);
2400a892:	4b07      	ldr	r3, [pc, #28]	; (2400a8b0 <FLASH_OB_GetUser+0x24>)
2400a894:	69db      	ldr	r3, [r3, #28]
2400a896:	607b      	str	r3, [r7, #4]
  userConfig &= (~(FLASH_OPTSR_BOR_LEV | FLASH_OPTSR_RDP));
2400a898:	687a      	ldr	r2, [r7, #4]
2400a89a:	4b06      	ldr	r3, [pc, #24]	; (2400a8b4 <FLASH_OB_GetUser+0x28>)
2400a89c:	4013      	ands	r3, r2
2400a89e:	607b      	str	r3, [r7, #4]

  return userConfig;
2400a8a0:	687b      	ldr	r3, [r7, #4]
}
2400a8a2:	4618      	mov	r0, r3
2400a8a4:	370c      	adds	r7, #12
2400a8a6:	46bd      	mov	sp, r7
2400a8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
2400a8ac:	4770      	bx	lr
2400a8ae:	bf00      	nop
2400a8b0:	52002000 	.word	0x52002000
2400a8b4:	ffff00f3 	.word	0xffff00f3

2400a8b8 <FLASH_OB_PCROPConfig>:
  *            @arg FLASH_BANK_BOTH: PCROP on specified bank1 and bank2 area (same config will be applied on both banks)
  *
  * @retval None
  */
static void FLASH_OB_PCROPConfig(uint32_t PCROPConfig, uint32_t PCROPStartAddr, uint32_t PCROPEndAddr, uint32_t Banks)
{
2400a8b8:	b480      	push	{r7}
2400a8ba:	b085      	sub	sp, #20
2400a8bc:	af00      	add	r7, sp, #0
2400a8be:	60f8      	str	r0, [r7, #12]
2400a8c0:	60b9      	str	r1, [r7, #8]
2400a8c2:	607a      	str	r2, [r7, #4]
2400a8c4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_OB_PCROP_RDP(PCROPConfig));

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
2400a8c6:	683b      	ldr	r3, [r7, #0]
2400a8c8:	f003 0301 	and.w	r3, r3, #1
2400a8cc:	2b00      	cmp	r3, #0
2400a8ce:	d00d      	beq.n	2400a8ec <FLASH_OB_PCROPConfig+0x34>
  {
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK1(PCROPStartAddr));
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK1(PCROPEndAddr));

    /* Configure the Proprietary code readout protection */
    FLASH->PRAR_PRG1 = ((PCROPStartAddr - FLASH_BANK1_BASE) >> 8)                                 | \
2400a8d0:	68bb      	ldr	r3, [r7, #8]
2400a8d2:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
2400a8d6:	0a1a      	lsrs	r2, r3, #8
                       (((PCROPEndAddr - FLASH_BANK1_BASE) >> 8) << FLASH_PRAR_PROT_AREA_END_Pos) | \
2400a8d8:	687b      	ldr	r3, [r7, #4]
2400a8da:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
2400a8de:	0a1b      	lsrs	r3, r3, #8
2400a8e0:	041b      	lsls	r3, r3, #16
    FLASH->PRAR_PRG1 = ((PCROPStartAddr - FLASH_BANK1_BASE) >> 8)                                 | \
2400a8e2:	431a      	orrs	r2, r3
2400a8e4:	490e      	ldr	r1, [pc, #56]	; (2400a920 <FLASH_OB_PCROPConfig+0x68>)
                       (((PCROPEndAddr - FLASH_BANK1_BASE) >> 8) << FLASH_PRAR_PROT_AREA_END_Pos) | \
2400a8e6:	68fb      	ldr	r3, [r7, #12]
2400a8e8:	4313      	orrs	r3, r2
    FLASH->PRAR_PRG1 = ((PCROPStartAddr - FLASH_BANK1_BASE) >> 8)                                 | \
2400a8ea:	62cb      	str	r3, [r1, #44]	; 0x2c
                       PCROPConfig;
  }

#if defined (DUAL_BANK)
  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
2400a8ec:	683b      	ldr	r3, [r7, #0]
2400a8ee:	f003 0302 	and.w	r3, r3, #2
2400a8f2:	2b00      	cmp	r3, #0
2400a8f4:	d00e      	beq.n	2400a914 <FLASH_OB_PCROPConfig+0x5c>
  {
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK2(PCROPStartAddr));
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK2(PCROPEndAddr));

    /* Configure the Proprietary code readout protection */
    FLASH->PRAR_PRG2 = ((PCROPStartAddr - FLASH_BANK2_BASE) >> 8)                                 | \
2400a8f6:	68bb      	ldr	r3, [r7, #8]
2400a8f8:	f1a3 6301 	sub.w	r3, r3, #135266304	; 0x8100000
2400a8fc:	0a1a      	lsrs	r2, r3, #8
                       (((PCROPEndAddr - FLASH_BANK2_BASE) >> 8) << FLASH_PRAR_PROT_AREA_END_Pos) | \
2400a8fe:	687b      	ldr	r3, [r7, #4]
2400a900:	f1a3 6301 	sub.w	r3, r3, #135266304	; 0x8100000
2400a904:	0a1b      	lsrs	r3, r3, #8
2400a906:	041b      	lsls	r3, r3, #16
    FLASH->PRAR_PRG2 = ((PCROPStartAddr - FLASH_BANK2_BASE) >> 8)                                 | \
2400a908:	431a      	orrs	r2, r3
2400a90a:	4905      	ldr	r1, [pc, #20]	; (2400a920 <FLASH_OB_PCROPConfig+0x68>)
                       (((PCROPEndAddr - FLASH_BANK2_BASE) >> 8) << FLASH_PRAR_PROT_AREA_END_Pos) | \
2400a90c:	68fb      	ldr	r3, [r7, #12]
2400a90e:	4313      	orrs	r3, r2
    FLASH->PRAR_PRG2 = ((PCROPStartAddr - FLASH_BANK2_BASE) >> 8)                                 | \
2400a910:	f8c1 312c 	str.w	r3, [r1, #300]	; 0x12c
                       PCROPConfig;
  }
#endif /* DUAL_BANK */
}
2400a914:	bf00      	nop
2400a916:	3714      	adds	r7, #20
2400a918:	46bd      	mov	sp, r7
2400a91a:	f85d 7b04 	ldr.w	r7, [sp], #4
2400a91e:	4770      	bx	lr
2400a920:	52002000 	.word	0x52002000

2400a924 <FLASH_OB_GetPCROP>:
  *            @arg FLASH_BANK_BOTH: is  not allowed here
  *
  * @retval None
  */
static void FLASH_OB_GetPCROP(uint32_t *PCROPConfig, uint32_t *PCROPStartAddr, uint32_t *PCROPEndAddr, uint32_t Bank)
{
2400a924:	b480      	push	{r7}
2400a926:	b087      	sub	sp, #28
2400a928:	af00      	add	r7, sp, #0
2400a92a:	60f8      	str	r0, [r7, #12]
2400a92c:	60b9      	str	r1, [r7, #8]
2400a92e:	607a      	str	r2, [r7, #4]
2400a930:	603b      	str	r3, [r7, #0]
  uint32_t regvalue = 0;
2400a932:	2300      	movs	r3, #0
2400a934:	617b      	str	r3, [r7, #20]
  uint32_t bankBase = 0;
2400a936:	2300      	movs	r3, #0
2400a938:	613b      	str	r3, [r7, #16]

  if(Bank == FLASH_BANK_1)
2400a93a:	683b      	ldr	r3, [r7, #0]
2400a93c:	2b01      	cmp	r3, #1
2400a93e:	d105      	bne.n	2400a94c <FLASH_OB_GetPCROP+0x28>
  {
    regvalue = FLASH->PRAR_CUR1;
2400a940:	4b17      	ldr	r3, [pc, #92]	; (2400a9a0 <FLASH_OB_GetPCROP+0x7c>)
2400a942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2400a944:	617b      	str	r3, [r7, #20]
    bankBase = FLASH_BANK1_BASE;
2400a946:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
2400a94a:	613b      	str	r3, [r7, #16]
  }

#if defined (DUAL_BANK)
  if(Bank == FLASH_BANK_2)
2400a94c:	683b      	ldr	r3, [r7, #0]
2400a94e:	2b02      	cmp	r3, #2
2400a950:	d106      	bne.n	2400a960 <FLASH_OB_GetPCROP+0x3c>
  {
    regvalue = FLASH->PRAR_CUR2;
2400a952:	4b13      	ldr	r3, [pc, #76]	; (2400a9a0 <FLASH_OB_GetPCROP+0x7c>)
2400a954:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
2400a958:	617b      	str	r3, [r7, #20]
    bankBase = FLASH_BANK2_BASE;
2400a95a:	f04f 6301 	mov.w	r3, #135266304	; 0x8100000
2400a95e:	613b      	str	r3, [r7, #16]
  }
#endif /* DUAL_BANK */

  (*PCROPConfig) =  (regvalue & FLASH_PRAR_DMEP);
2400a960:	697b      	ldr	r3, [r7, #20]
2400a962:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
2400a966:	68fb      	ldr	r3, [r7, #12]
2400a968:	601a      	str	r2, [r3, #0]

  (*PCROPStartAddr) = ((regvalue & FLASH_PRAR_PROT_AREA_START) << 8) + bankBase;
2400a96a:	697b      	ldr	r3, [r7, #20]
2400a96c:	021a      	lsls	r2, r3, #8
2400a96e:	4b0d      	ldr	r3, [pc, #52]	; (2400a9a4 <FLASH_OB_GetPCROP+0x80>)
2400a970:	4013      	ands	r3, r2
2400a972:	693a      	ldr	r2, [r7, #16]
2400a974:	441a      	add	r2, r3
2400a976:	68bb      	ldr	r3, [r7, #8]
2400a978:	601a      	str	r2, [r3, #0]
  (*PCROPEndAddr) = (regvalue & FLASH_PRAR_PROT_AREA_END) >> FLASH_PRAR_PROT_AREA_END_Pos;
2400a97a:	697b      	ldr	r3, [r7, #20]
2400a97c:	0c1b      	lsrs	r3, r3, #16
2400a97e:	f3c3 020b 	ubfx	r2, r3, #0, #12
2400a982:	687b      	ldr	r3, [r7, #4]
2400a984:	601a      	str	r2, [r3, #0]
  (*PCROPEndAddr) = ((*PCROPEndAddr) << 8) + bankBase;
2400a986:	687b      	ldr	r3, [r7, #4]
2400a988:	681b      	ldr	r3, [r3, #0]
2400a98a:	021a      	lsls	r2, r3, #8
2400a98c:	693b      	ldr	r3, [r7, #16]
2400a98e:	441a      	add	r2, r3
2400a990:	687b      	ldr	r3, [r7, #4]
2400a992:	601a      	str	r2, [r3, #0]
}
2400a994:	bf00      	nop
2400a996:	371c      	adds	r7, #28
2400a998:	46bd      	mov	sp, r7
2400a99a:	f85d 7b04 	ldr.w	r7, [sp], #4
2400a99e:	4770      	bx	lr
2400a9a0:	52002000 	.word	0x52002000
2400a9a4:	000fff00 	.word	0x000fff00

2400a9a8 <FLASH_OB_BOR_LevelConfig>:
  *            @arg OB_BOR_LEVEL2: Reset level threshold is set to 2.4V
  *            @arg OB_BOR_LEVEL3: Reset level threshold is set to 2.7V
  * @retval None
  */
static void FLASH_OB_BOR_LevelConfig(uint32_t Level)
{
2400a9a8:	b480      	push	{r7}
2400a9aa:	b083      	sub	sp, #12
2400a9ac:	af00      	add	r7, sp, #0
2400a9ae:	6078      	str	r0, [r7, #4]
  assert_param(IS_OB_BOR_LEVEL(Level));

  /* Configure BOR_LEV option byte */
  MODIFY_REG(FLASH->OPTSR_PRG, FLASH_OPTSR_BOR_LEV, Level);
2400a9b0:	4b06      	ldr	r3, [pc, #24]	; (2400a9cc <FLASH_OB_BOR_LevelConfig+0x24>)
2400a9b2:	6a1b      	ldr	r3, [r3, #32]
2400a9b4:	f023 020c 	bic.w	r2, r3, #12
2400a9b8:	4904      	ldr	r1, [pc, #16]	; (2400a9cc <FLASH_OB_BOR_LevelConfig+0x24>)
2400a9ba:	687b      	ldr	r3, [r7, #4]
2400a9bc:	4313      	orrs	r3, r2
2400a9be:	620b      	str	r3, [r1, #32]
}
2400a9c0:	bf00      	nop
2400a9c2:	370c      	adds	r7, #12
2400a9c4:	46bd      	mov	sp, r7
2400a9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
2400a9ca:	4770      	bx	lr
2400a9cc:	52002000 	.word	0x52002000

2400a9d0 <FLASH_OB_GetBOR>:
  *            @arg OB_BOR_LEVEL1: Reset level threshold is set to 2.1V
  *            @arg OB_BOR_LEVEL2: Reset level threshold is set to 2.4V
  *            @arg OB_BOR_LEVEL3: Reset level threshold is set to 2.7V
  */
static uint32_t FLASH_OB_GetBOR(void)
{
2400a9d0:	b480      	push	{r7}
2400a9d2:	af00      	add	r7, sp, #0
  return (FLASH->OPTSR_CUR & FLASH_OPTSR_BOR_LEV);
2400a9d4:	4b04      	ldr	r3, [pc, #16]	; (2400a9e8 <FLASH_OB_GetBOR+0x18>)
2400a9d6:	69db      	ldr	r3, [r3, #28]
2400a9d8:	f003 030c 	and.w	r3, r3, #12
}
2400a9dc:	4618      	mov	r0, r3
2400a9de:	46bd      	mov	sp, r7
2400a9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
2400a9e4:	4770      	bx	lr
2400a9e6:	bf00      	nop
2400a9e8:	52002000 	.word	0x52002000

2400a9ec <FLASH_OB_BootAddConfig>:
  * @param  BootAddress0 Specifies the Boot Address 0
  * @param  BootAddress1 Specifies the Boot Address 1
  * @retval HAL Status
  */
static void FLASH_OB_BootAddConfig(uint32_t BootOption, uint32_t BootAddress0, uint32_t BootAddress1)
{
2400a9ec:	b480      	push	{r7}
2400a9ee:	b085      	sub	sp, #20
2400a9f0:	af00      	add	r7, sp, #0
2400a9f2:	60f8      	str	r0, [r7, #12]
2400a9f4:	60b9      	str	r1, [r7, #8]
2400a9f6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_OB_BOOT_ADD_OPTION(BootOption));

  if((BootOption & OB_BOOT_ADD0) == OB_BOOT_ADD0)
2400a9f8:	68fb      	ldr	r3, [r7, #12]
2400a9fa:	f003 0301 	and.w	r3, r3, #1
2400a9fe:	2b00      	cmp	r3, #0
2400aa00:	d008      	beq.n	2400aa14 <FLASH_OB_BootAddConfig+0x28>

    /* Configure CM7 BOOT ADD0 */
#if defined(DUAL_CORE)
    MODIFY_REG(FLASH->BOOT7_PRG, FLASH_BOOT7_BCM7_ADD0, (BootAddress0 >> 16));
#else /* Single Core*/
    MODIFY_REG(FLASH->BOOT_PRG, FLASH_BOOT_ADD0, (BootAddress0 >> 16));
2400aa02:	4b0d      	ldr	r3, [pc, #52]	; (2400aa38 <FLASH_OB_BootAddConfig+0x4c>)
2400aa04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
2400aa06:	4b0d      	ldr	r3, [pc, #52]	; (2400aa3c <FLASH_OB_BootAddConfig+0x50>)
2400aa08:	4013      	ands	r3, r2
2400aa0a:	68ba      	ldr	r2, [r7, #8]
2400aa0c:	0c12      	lsrs	r2, r2, #16
2400aa0e:	490a      	ldr	r1, [pc, #40]	; (2400aa38 <FLASH_OB_BootAddConfig+0x4c>)
2400aa10:	4313      	orrs	r3, r2
2400aa12:	644b      	str	r3, [r1, #68]	; 0x44
#endif /* DUAL_CORE */
  }

  if((BootOption & OB_BOOT_ADD1) == OB_BOOT_ADD1)
2400aa14:	68fb      	ldr	r3, [r7, #12]
2400aa16:	f003 0302 	and.w	r3, r3, #2
2400aa1a:	2b00      	cmp	r3, #0
2400aa1c:	d006      	beq.n	2400aa2c <FLASH_OB_BootAddConfig+0x40>

    /* Configure CM7 BOOT ADD1 */
#if defined(DUAL_CORE)
    MODIFY_REG(FLASH->BOOT7_PRG, FLASH_BOOT7_BCM7_ADD1, BootAddress1);
#else /* Single Core*/
    MODIFY_REG(FLASH->BOOT_PRG, FLASH_BOOT_ADD1, BootAddress1);
2400aa1e:	4b06      	ldr	r3, [pc, #24]	; (2400aa38 <FLASH_OB_BootAddConfig+0x4c>)
2400aa20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400aa22:	b29a      	uxth	r2, r3
2400aa24:	4904      	ldr	r1, [pc, #16]	; (2400aa38 <FLASH_OB_BootAddConfig+0x4c>)
2400aa26:	687b      	ldr	r3, [r7, #4]
2400aa28:	4313      	orrs	r3, r2
2400aa2a:	644b      	str	r3, [r1, #68]	; 0x44
#endif /* DUAL_CORE */
  }
}
2400aa2c:	bf00      	nop
2400aa2e:	3714      	adds	r7, #20
2400aa30:	46bd      	mov	sp, r7
2400aa32:	f85d 7b04 	ldr.w	r7, [sp], #4
2400aa36:	4770      	bx	lr
2400aa38:	52002000 	.word	0x52002000
2400aa3c:	ffff0000 	.word	0xffff0000

2400aa40 <FLASH_OB_GetBootAdd>:
  * @param  BootAddress0 Specifies the Boot Address 0.
  * @param  BootAddress1 Specifies the Boot Address 1.
  * @retval HAL Status
  */
static void FLASH_OB_GetBootAdd(uint32_t *BootAddress0, uint32_t *BootAddress1)
{
2400aa40:	b480      	push	{r7}
2400aa42:	b085      	sub	sp, #20
2400aa44:	af00      	add	r7, sp, #0
2400aa46:	6078      	str	r0, [r7, #4]
2400aa48:	6039      	str	r1, [r7, #0]
  regvalue = FLASH->BOOT7_CUR;

  (*BootAddress0) = (regvalue & FLASH_BOOT7_BCM7_ADD0) << 16;
  (*BootAddress1) = (regvalue & FLASH_BOOT7_BCM7_ADD1);
#else /* Single Core */
  regvalue = FLASH->BOOT_CUR;
2400aa4a:	4b09      	ldr	r3, [pc, #36]	; (2400aa70 <FLASH_OB_GetBootAdd+0x30>)
2400aa4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2400aa4e:	60fb      	str	r3, [r7, #12]

  (*BootAddress0) = (regvalue & FLASH_BOOT_ADD0) << 16;
2400aa50:	68fb      	ldr	r3, [r7, #12]
2400aa52:	041a      	lsls	r2, r3, #16
2400aa54:	687b      	ldr	r3, [r7, #4]
2400aa56:	601a      	str	r2, [r3, #0]
  (*BootAddress1) = (regvalue & FLASH_BOOT_ADD1);
2400aa58:	68fa      	ldr	r2, [r7, #12]
2400aa5a:	4b06      	ldr	r3, [pc, #24]	; (2400aa74 <FLASH_OB_GetBootAdd+0x34>)
2400aa5c:	4013      	ands	r3, r2
2400aa5e:	683a      	ldr	r2, [r7, #0]
2400aa60:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE */
}
2400aa62:	bf00      	nop
2400aa64:	3714      	adds	r7, #20
2400aa66:	46bd      	mov	sp, r7
2400aa68:	f85d 7b04 	ldr.w	r7, [sp], #4
2400aa6c:	4770      	bx	lr
2400aa6e:	bf00      	nop
2400aa70:	52002000 	.word	0x52002000
2400aa74:	ffff0000 	.word	0xffff0000

2400aa78 <FLASH_OB_SecureAreaConfig>:
  *            @arg FLASH_BANK_2: Secure area on specified bank2 area
  *            @arg FLASH_BANK_BOTH: Secure area on specified bank1 and bank2 area (same config will be applied on both banks)
  * @retval None
  */
static void FLASH_OB_SecureAreaConfig(uint32_t SecureAreaConfig, uint32_t SecureAreaStartAddr, uint32_t SecureAreaEndAddr, uint32_t Banks)
{
2400aa78:	b480      	push	{r7}
2400aa7a:	b085      	sub	sp, #20
2400aa7c:	af00      	add	r7, sp, #0
2400aa7e:	60f8      	str	r0, [r7, #12]
2400aa80:	60b9      	str	r1, [r7, #8]
2400aa82:	607a      	str	r2, [r7, #4]
2400aa84:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_OB_SECURE_RDP(SecureAreaConfig));

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
2400aa86:	683b      	ldr	r3, [r7, #0]
2400aa88:	f003 0301 	and.w	r3, r3, #1
2400aa8c:	2b00      	cmp	r3, #0
2400aa8e:	d00f      	beq.n	2400aab0 <FLASH_OB_SecureAreaConfig+0x38>
    /* Check the parameters */
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK1(SecureAreaStartAddr));
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK1(SecureAreaEndAddr));

    /* Configure the secure area */
    FLASH->SCAR_PRG1 = ((SecureAreaStartAddr - FLASH_BANK1_BASE) >> 8)                                | \
2400aa90:	68bb      	ldr	r3, [r7, #8]
2400aa92:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
2400aa96:	0a1a      	lsrs	r2, r3, #8
                       (((SecureAreaEndAddr - FLASH_BANK1_BASE) >> 8) << FLASH_SCAR_SEC_AREA_END_Pos) | \
2400aa98:	687b      	ldr	r3, [r7, #4]
2400aa9a:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
2400aa9e:	0a1b      	lsrs	r3, r3, #8
2400aaa0:	041b      	lsls	r3, r3, #16
    FLASH->SCAR_PRG1 = ((SecureAreaStartAddr - FLASH_BANK1_BASE) >> 8)                                | \
2400aaa2:	431a      	orrs	r2, r3
                       (SecureAreaConfig & FLASH_SCAR_DMES);
2400aaa4:	68fb      	ldr	r3, [r7, #12]
2400aaa6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
    FLASH->SCAR_PRG1 = ((SecureAreaStartAddr - FLASH_BANK1_BASE) >> 8)                                | \
2400aaaa:	490f      	ldr	r1, [pc, #60]	; (2400aae8 <FLASH_OB_SecureAreaConfig+0x70>)
                       (((SecureAreaEndAddr - FLASH_BANK1_BASE) >> 8) << FLASH_SCAR_SEC_AREA_END_Pos) | \
2400aaac:	4313      	orrs	r3, r2
    FLASH->SCAR_PRG1 = ((SecureAreaStartAddr - FLASH_BANK1_BASE) >> 8)                                | \
2400aaae:	634b      	str	r3, [r1, #52]	; 0x34
  }

#if defined (DUAL_BANK)
  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
2400aab0:	683b      	ldr	r3, [r7, #0]
2400aab2:	f003 0302 	and.w	r3, r3, #2
2400aab6:	2b00      	cmp	r3, #0
2400aab8:	d010      	beq.n	2400aadc <FLASH_OB_SecureAreaConfig+0x64>
    /* Check the parameters */
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK2(SecureAreaStartAddr));
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK2(SecureAreaEndAddr));

    /* Configure the secure area */
    FLASH->SCAR_PRG2 = ((SecureAreaStartAddr - FLASH_BANK2_BASE) >> 8)                                | \
2400aaba:	68bb      	ldr	r3, [r7, #8]
2400aabc:	f1a3 6301 	sub.w	r3, r3, #135266304	; 0x8100000
2400aac0:	0a1a      	lsrs	r2, r3, #8
                       (((SecureAreaEndAddr - FLASH_BANK2_BASE) >> 8) << FLASH_SCAR_SEC_AREA_END_Pos) | \
2400aac2:	687b      	ldr	r3, [r7, #4]
2400aac4:	f1a3 6301 	sub.w	r3, r3, #135266304	; 0x8100000
2400aac8:	0a1b      	lsrs	r3, r3, #8
2400aaca:	041b      	lsls	r3, r3, #16
    FLASH->SCAR_PRG2 = ((SecureAreaStartAddr - FLASH_BANK2_BASE) >> 8)                                | \
2400aacc:	431a      	orrs	r2, r3
                       (SecureAreaConfig & FLASH_SCAR_DMES);
2400aace:	68fb      	ldr	r3, [r7, #12]
2400aad0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
    FLASH->SCAR_PRG2 = ((SecureAreaStartAddr - FLASH_BANK2_BASE) >> 8)                                | \
2400aad4:	4904      	ldr	r1, [pc, #16]	; (2400aae8 <FLASH_OB_SecureAreaConfig+0x70>)
                       (((SecureAreaEndAddr - FLASH_BANK2_BASE) >> 8) << FLASH_SCAR_SEC_AREA_END_Pos) | \
2400aad6:	4313      	orrs	r3, r2
    FLASH->SCAR_PRG2 = ((SecureAreaStartAddr - FLASH_BANK2_BASE) >> 8)                                | \
2400aad8:	f8c1 3134 	str.w	r3, [r1, #308]	; 0x134
  }
#endif /* DUAL_BANK */
}
2400aadc:	bf00      	nop
2400aade:	3714      	adds	r7, #20
2400aae0:	46bd      	mov	sp, r7
2400aae2:	f85d 7b04 	ldr.w	r7, [sp], #4
2400aae6:	4770      	bx	lr
2400aae8:	52002000 	.word	0x52002000

2400aaec <FLASH_OB_GetSecureArea>:
  * @param  SecureAreaEndAddr gives the secure area end address
  * @param  Bank Specifies the Bank
  * @retval None
  */
static void FLASH_OB_GetSecureArea(uint32_t *SecureAreaConfig, uint32_t *SecureAreaStartAddr, uint32_t *SecureAreaEndAddr, uint32_t Bank)
{
2400aaec:	b480      	push	{r7}
2400aaee:	b087      	sub	sp, #28
2400aaf0:	af00      	add	r7, sp, #0
2400aaf2:	60f8      	str	r0, [r7, #12]
2400aaf4:	60b9      	str	r1, [r7, #8]
2400aaf6:	607a      	str	r2, [r7, #4]
2400aaf8:	603b      	str	r3, [r7, #0]
  uint32_t regvalue = 0;
2400aafa:	2300      	movs	r3, #0
2400aafc:	617b      	str	r3, [r7, #20]
  uint32_t bankBase = 0;
2400aafe:	2300      	movs	r3, #0
2400ab00:	613b      	str	r3, [r7, #16]

  /* Check Bank parameter value */
  if(Bank == FLASH_BANK_1)
2400ab02:	683b      	ldr	r3, [r7, #0]
2400ab04:	2b01      	cmp	r3, #1
2400ab06:	d105      	bne.n	2400ab14 <FLASH_OB_GetSecureArea+0x28>
  {
    regvalue = FLASH->SCAR_CUR1;
2400ab08:	4b17      	ldr	r3, [pc, #92]	; (2400ab68 <FLASH_OB_GetSecureArea+0x7c>)
2400ab0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2400ab0c:	617b      	str	r3, [r7, #20]
    bankBase = FLASH_BANK1_BASE;
2400ab0e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
2400ab12:	613b      	str	r3, [r7, #16]
  }

#if defined (DUAL_BANK)
  if(Bank == FLASH_BANK_2)
2400ab14:	683b      	ldr	r3, [r7, #0]
2400ab16:	2b02      	cmp	r3, #2
2400ab18:	d106      	bne.n	2400ab28 <FLASH_OB_GetSecureArea+0x3c>
  {
    regvalue = FLASH->SCAR_CUR2;
2400ab1a:	4b13      	ldr	r3, [pc, #76]	; (2400ab68 <FLASH_OB_GetSecureArea+0x7c>)
2400ab1c:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
2400ab20:	617b      	str	r3, [r7, #20]
    bankBase = FLASH_BANK2_BASE;
2400ab22:	f04f 6301 	mov.w	r3, #135266304	; 0x8100000
2400ab26:	613b      	str	r3, [r7, #16]
  }
#endif /* DUAL_BANK */

  /* Get the secure area settings */
  (*SecureAreaConfig) = (regvalue & FLASH_SCAR_DMES);
2400ab28:	697b      	ldr	r3, [r7, #20]
2400ab2a:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
2400ab2e:	68fb      	ldr	r3, [r7, #12]
2400ab30:	601a      	str	r2, [r3, #0]
  (*SecureAreaStartAddr) = ((regvalue & FLASH_SCAR_SEC_AREA_START) << 8) + bankBase;
2400ab32:	697b      	ldr	r3, [r7, #20]
2400ab34:	021a      	lsls	r2, r3, #8
2400ab36:	4b0d      	ldr	r3, [pc, #52]	; (2400ab6c <FLASH_OB_GetSecureArea+0x80>)
2400ab38:	4013      	ands	r3, r2
2400ab3a:	693a      	ldr	r2, [r7, #16]
2400ab3c:	441a      	add	r2, r3
2400ab3e:	68bb      	ldr	r3, [r7, #8]
2400ab40:	601a      	str	r2, [r3, #0]
  (*SecureAreaEndAddr) = (regvalue & FLASH_SCAR_SEC_AREA_END) >> FLASH_SCAR_SEC_AREA_END_Pos;
2400ab42:	697b      	ldr	r3, [r7, #20]
2400ab44:	0c1b      	lsrs	r3, r3, #16
2400ab46:	f3c3 020b 	ubfx	r2, r3, #0, #12
2400ab4a:	687b      	ldr	r3, [r7, #4]
2400ab4c:	601a      	str	r2, [r3, #0]
  (*SecureAreaEndAddr) = ((*SecureAreaEndAddr) << 8) + bankBase;
2400ab4e:	687b      	ldr	r3, [r7, #4]
2400ab50:	681b      	ldr	r3, [r3, #0]
2400ab52:	021a      	lsls	r2, r3, #8
2400ab54:	693b      	ldr	r3, [r7, #16]
2400ab56:	441a      	add	r2, r3
2400ab58:	687b      	ldr	r3, [r7, #4]
2400ab5a:	601a      	str	r2, [r3, #0]
}
2400ab5c:	bf00      	nop
2400ab5e:	371c      	adds	r7, #28
2400ab60:	46bd      	mov	sp, r7
2400ab62:	f85d 7b04 	ldr.w	r7, [sp], #4
2400ab66:	4770      	bx	lr
2400ab68:	52002000 	.word	0x52002000
2400ab6c:	000fff00 	.word	0x000fff00

2400ab70 <FLASH_CRC_AddSector>:
  * @param  Sector Specifies the CRC sector number
  * @param  Bank Specifies the Bank
  * @retval None
  */
static void FLASH_CRC_AddSector(uint32_t Sector, uint32_t Bank)
{
2400ab70:	b480      	push	{r7}
2400ab72:	b083      	sub	sp, #12
2400ab74:	af00      	add	r7, sp, #0
2400ab76:	6078      	str	r0, [r7, #4]
2400ab78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));

  if (Bank == FLASH_BANK_1)
2400ab7a:	683b      	ldr	r3, [r7, #0]
2400ab7c:	2b01      	cmp	r3, #1
2400ab7e:	d10e      	bne.n	2400ab9e <FLASH_CRC_AddSector+0x2e>
  {
    /* Clear CRC sector */
    FLASH->CRCCR1 &= (~FLASH_CRCCR_CRC_SECT);
2400ab80:	4b13      	ldr	r3, [pc, #76]	; (2400abd0 <FLASH_CRC_AddSector+0x60>)
2400ab82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2400ab84:	4a12      	ldr	r2, [pc, #72]	; (2400abd0 <FLASH_CRC_AddSector+0x60>)
2400ab86:	f023 0307 	bic.w	r3, r3, #7
2400ab8a:	6513      	str	r3, [r2, #80]	; 0x50

    /* Select CRC Sector and activate ADD_SECT bit */
    FLASH->CRCCR1 |= Sector | FLASH_CRCCR_ADD_SECT;
2400ab8c:	4b10      	ldr	r3, [pc, #64]	; (2400abd0 <FLASH_CRC_AddSector+0x60>)
2400ab8e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
2400ab90:	687b      	ldr	r3, [r7, #4]
2400ab92:	4313      	orrs	r3, r2
2400ab94:	4a0e      	ldr	r2, [pc, #56]	; (2400abd0 <FLASH_CRC_AddSector+0x60>)
2400ab96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
2400ab9a:	6513      	str	r3, [r2, #80]	; 0x50

    /* Select CRC Sector and activate ADD_SECT bit */
    FLASH->CRCCR2 |= Sector | FLASH_CRCCR_ADD_SECT;
  }
#endif /* DUAL_BANK */
}
2400ab9c:	e011      	b.n	2400abc2 <FLASH_CRC_AddSector+0x52>
    FLASH->CRCCR2 &= (~FLASH_CRCCR_CRC_SECT);
2400ab9e:	4b0c      	ldr	r3, [pc, #48]	; (2400abd0 <FLASH_CRC_AddSector+0x60>)
2400aba0:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
2400aba4:	4a0a      	ldr	r2, [pc, #40]	; (2400abd0 <FLASH_CRC_AddSector+0x60>)
2400aba6:	f023 0307 	bic.w	r3, r3, #7
2400abaa:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
    FLASH->CRCCR2 |= Sector | FLASH_CRCCR_ADD_SECT;
2400abae:	4b08      	ldr	r3, [pc, #32]	; (2400abd0 <FLASH_CRC_AddSector+0x60>)
2400abb0:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
2400abb4:	687b      	ldr	r3, [r7, #4]
2400abb6:	4313      	orrs	r3, r2
2400abb8:	4a05      	ldr	r2, [pc, #20]	; (2400abd0 <FLASH_CRC_AddSector+0x60>)
2400abba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
2400abbe:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
}
2400abc2:	bf00      	nop
2400abc4:	370c      	adds	r7, #12
2400abc6:	46bd      	mov	sp, r7
2400abc8:	f85d 7b04 	ldr.w	r7, [sp], #4
2400abcc:	4770      	bx	lr
2400abce:	bf00      	nop
2400abd0:	52002000 	.word	0x52002000

2400abd4 <FLASH_CRC_SelectAddress>:
  * @param  CRCEndAddr Specifies the CRC end address
  * @param  Bank Specifies the Bank
  * @retval None
  */
static void FLASH_CRC_SelectAddress(uint32_t CRCStartAddr, uint32_t CRCEndAddr, uint32_t Bank)
{
2400abd4:	b480      	push	{r7}
2400abd6:	b085      	sub	sp, #20
2400abd8:	af00      	add	r7, sp, #0
2400abda:	60f8      	str	r0, [r7, #12]
2400abdc:	60b9      	str	r1, [r7, #8]
2400abde:	607a      	str	r2, [r7, #4]
  if (Bank == FLASH_BANK_1)
2400abe0:	687b      	ldr	r3, [r7, #4]
2400abe2:	2b01      	cmp	r3, #1
2400abe4:	d106      	bne.n	2400abf4 <FLASH_CRC_SelectAddress+0x20>
  {
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK1(CRCStartAddr));
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK1(CRCEndAddr));

    /* Write CRC Start and End addresses */
    FLASH->CRCSADD1 = CRCStartAddr;
2400abe6:	4a0a      	ldr	r2, [pc, #40]	; (2400ac10 <FLASH_CRC_SelectAddress+0x3c>)
2400abe8:	68fb      	ldr	r3, [r7, #12]
2400abea:	6553      	str	r3, [r2, #84]	; 0x54
    FLASH->CRCEADD1 = CRCEndAddr;
2400abec:	4a08      	ldr	r2, [pc, #32]	; (2400ac10 <FLASH_CRC_SelectAddress+0x3c>)
2400abee:	68bb      	ldr	r3, [r7, #8]
2400abf0:	6593      	str	r3, [r2, #88]	; 0x58
    /* Write CRC Start and End addresses */
    FLASH->CRCSADD2 = CRCStartAddr;
    FLASH->CRCEADD2 = CRCEndAddr;
  }
#endif /* DUAL_BANK */
}
2400abf2:	e007      	b.n	2400ac04 <FLASH_CRC_SelectAddress+0x30>
    FLASH->CRCSADD2 = CRCStartAddr;
2400abf4:	4a06      	ldr	r2, [pc, #24]	; (2400ac10 <FLASH_CRC_SelectAddress+0x3c>)
2400abf6:	68fb      	ldr	r3, [r7, #12]
2400abf8:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
    FLASH->CRCEADD2 = CRCEndAddr;
2400abfc:	4a04      	ldr	r2, [pc, #16]	; (2400ac10 <FLASH_CRC_SelectAddress+0x3c>)
2400abfe:	68bb      	ldr	r3, [r7, #8]
2400ac00:	f8c2 3158 	str.w	r3, [r2, #344]	; 0x158
}
2400ac04:	bf00      	nop
2400ac06:	3714      	adds	r7, #20
2400ac08:	46bd      	mov	sp, r7
2400ac0a:	f85d 7b04 	ldr.w	r7, [sp], #4
2400ac0e:	4770      	bx	lr
2400ac10:	52002000 	.word	0x52002000

2400ac14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
2400ac14:	b480      	push	{r7}
2400ac16:	b089      	sub	sp, #36	; 0x24
2400ac18:	af00      	add	r7, sp, #0
2400ac1a:	6078      	str	r0, [r7, #4]
2400ac1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
2400ac1e:	2300      	movs	r3, #0
2400ac20:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
2400ac22:	4b89      	ldr	r3, [pc, #548]	; (2400ae48 <HAL_GPIO_Init+0x234>)
2400ac24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
2400ac26:	e194      	b.n	2400af52 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
2400ac28:	683b      	ldr	r3, [r7, #0]
2400ac2a:	681a      	ldr	r2, [r3, #0]
2400ac2c:	2101      	movs	r1, #1
2400ac2e:	69fb      	ldr	r3, [r7, #28]
2400ac30:	fa01 f303 	lsl.w	r3, r1, r3
2400ac34:	4013      	ands	r3, r2
2400ac36:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
2400ac38:	693b      	ldr	r3, [r7, #16]
2400ac3a:	2b00      	cmp	r3, #0
2400ac3c:	f000 8186 	beq.w	2400af4c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
2400ac40:	683b      	ldr	r3, [r7, #0]
2400ac42:	685b      	ldr	r3, [r3, #4]
2400ac44:	f003 0303 	and.w	r3, r3, #3
2400ac48:	2b01      	cmp	r3, #1
2400ac4a:	d005      	beq.n	2400ac58 <HAL_GPIO_Init+0x44>
2400ac4c:	683b      	ldr	r3, [r7, #0]
2400ac4e:	685b      	ldr	r3, [r3, #4]
2400ac50:	f003 0303 	and.w	r3, r3, #3
2400ac54:	2b02      	cmp	r3, #2
2400ac56:	d130      	bne.n	2400acba <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
2400ac58:	687b      	ldr	r3, [r7, #4]
2400ac5a:	689b      	ldr	r3, [r3, #8]
2400ac5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
2400ac5e:	69fb      	ldr	r3, [r7, #28]
2400ac60:	005b      	lsls	r3, r3, #1
2400ac62:	2203      	movs	r2, #3
2400ac64:	fa02 f303 	lsl.w	r3, r2, r3
2400ac68:	43db      	mvns	r3, r3
2400ac6a:	69ba      	ldr	r2, [r7, #24]
2400ac6c:	4013      	ands	r3, r2
2400ac6e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
2400ac70:	683b      	ldr	r3, [r7, #0]
2400ac72:	68da      	ldr	r2, [r3, #12]
2400ac74:	69fb      	ldr	r3, [r7, #28]
2400ac76:	005b      	lsls	r3, r3, #1
2400ac78:	fa02 f303 	lsl.w	r3, r2, r3
2400ac7c:	69ba      	ldr	r2, [r7, #24]
2400ac7e:	4313      	orrs	r3, r2
2400ac80:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
2400ac82:	687b      	ldr	r3, [r7, #4]
2400ac84:	69ba      	ldr	r2, [r7, #24]
2400ac86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
2400ac88:	687b      	ldr	r3, [r7, #4]
2400ac8a:	685b      	ldr	r3, [r3, #4]
2400ac8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
2400ac8e:	2201      	movs	r2, #1
2400ac90:	69fb      	ldr	r3, [r7, #28]
2400ac92:	fa02 f303 	lsl.w	r3, r2, r3
2400ac96:	43db      	mvns	r3, r3
2400ac98:	69ba      	ldr	r2, [r7, #24]
2400ac9a:	4013      	ands	r3, r2
2400ac9c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
2400ac9e:	683b      	ldr	r3, [r7, #0]
2400aca0:	685b      	ldr	r3, [r3, #4]
2400aca2:	091b      	lsrs	r3, r3, #4
2400aca4:	f003 0201 	and.w	r2, r3, #1
2400aca8:	69fb      	ldr	r3, [r7, #28]
2400acaa:	fa02 f303 	lsl.w	r3, r2, r3
2400acae:	69ba      	ldr	r2, [r7, #24]
2400acb0:	4313      	orrs	r3, r2
2400acb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
2400acb4:	687b      	ldr	r3, [r7, #4]
2400acb6:	69ba      	ldr	r2, [r7, #24]
2400acb8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
2400acba:	683b      	ldr	r3, [r7, #0]
2400acbc:	685b      	ldr	r3, [r3, #4]
2400acbe:	f003 0303 	and.w	r3, r3, #3
2400acc2:	2b03      	cmp	r3, #3
2400acc4:	d017      	beq.n	2400acf6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
2400acc6:	687b      	ldr	r3, [r7, #4]
2400acc8:	68db      	ldr	r3, [r3, #12]
2400acca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
2400accc:	69fb      	ldr	r3, [r7, #28]
2400acce:	005b      	lsls	r3, r3, #1
2400acd0:	2203      	movs	r2, #3
2400acd2:	fa02 f303 	lsl.w	r3, r2, r3
2400acd6:	43db      	mvns	r3, r3
2400acd8:	69ba      	ldr	r2, [r7, #24]
2400acda:	4013      	ands	r3, r2
2400acdc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
2400acde:	683b      	ldr	r3, [r7, #0]
2400ace0:	689a      	ldr	r2, [r3, #8]
2400ace2:	69fb      	ldr	r3, [r7, #28]
2400ace4:	005b      	lsls	r3, r3, #1
2400ace6:	fa02 f303 	lsl.w	r3, r2, r3
2400acea:	69ba      	ldr	r2, [r7, #24]
2400acec:	4313      	orrs	r3, r2
2400acee:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
2400acf0:	687b      	ldr	r3, [r7, #4]
2400acf2:	69ba      	ldr	r2, [r7, #24]
2400acf4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
2400acf6:	683b      	ldr	r3, [r7, #0]
2400acf8:	685b      	ldr	r3, [r3, #4]
2400acfa:	f003 0303 	and.w	r3, r3, #3
2400acfe:	2b02      	cmp	r3, #2
2400ad00:	d123      	bne.n	2400ad4a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
2400ad02:	69fb      	ldr	r3, [r7, #28]
2400ad04:	08da      	lsrs	r2, r3, #3
2400ad06:	687b      	ldr	r3, [r7, #4]
2400ad08:	3208      	adds	r2, #8
2400ad0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2400ad0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
2400ad10:	69fb      	ldr	r3, [r7, #28]
2400ad12:	f003 0307 	and.w	r3, r3, #7
2400ad16:	009b      	lsls	r3, r3, #2
2400ad18:	220f      	movs	r2, #15
2400ad1a:	fa02 f303 	lsl.w	r3, r2, r3
2400ad1e:	43db      	mvns	r3, r3
2400ad20:	69ba      	ldr	r2, [r7, #24]
2400ad22:	4013      	ands	r3, r2
2400ad24:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
2400ad26:	683b      	ldr	r3, [r7, #0]
2400ad28:	691a      	ldr	r2, [r3, #16]
2400ad2a:	69fb      	ldr	r3, [r7, #28]
2400ad2c:	f003 0307 	and.w	r3, r3, #7
2400ad30:	009b      	lsls	r3, r3, #2
2400ad32:	fa02 f303 	lsl.w	r3, r2, r3
2400ad36:	69ba      	ldr	r2, [r7, #24]
2400ad38:	4313      	orrs	r3, r2
2400ad3a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
2400ad3c:	69fb      	ldr	r3, [r7, #28]
2400ad3e:	08da      	lsrs	r2, r3, #3
2400ad40:	687b      	ldr	r3, [r7, #4]
2400ad42:	3208      	adds	r2, #8
2400ad44:	69b9      	ldr	r1, [r7, #24]
2400ad46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
2400ad4a:	687b      	ldr	r3, [r7, #4]
2400ad4c:	681b      	ldr	r3, [r3, #0]
2400ad4e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
2400ad50:	69fb      	ldr	r3, [r7, #28]
2400ad52:	005b      	lsls	r3, r3, #1
2400ad54:	2203      	movs	r2, #3
2400ad56:	fa02 f303 	lsl.w	r3, r2, r3
2400ad5a:	43db      	mvns	r3, r3
2400ad5c:	69ba      	ldr	r2, [r7, #24]
2400ad5e:	4013      	ands	r3, r2
2400ad60:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
2400ad62:	683b      	ldr	r3, [r7, #0]
2400ad64:	685b      	ldr	r3, [r3, #4]
2400ad66:	f003 0203 	and.w	r2, r3, #3
2400ad6a:	69fb      	ldr	r3, [r7, #28]
2400ad6c:	005b      	lsls	r3, r3, #1
2400ad6e:	fa02 f303 	lsl.w	r3, r2, r3
2400ad72:	69ba      	ldr	r2, [r7, #24]
2400ad74:	4313      	orrs	r3, r2
2400ad76:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
2400ad78:	687b      	ldr	r3, [r7, #4]
2400ad7a:	69ba      	ldr	r2, [r7, #24]
2400ad7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
2400ad7e:	683b      	ldr	r3, [r7, #0]
2400ad80:	685b      	ldr	r3, [r3, #4]
2400ad82:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
2400ad86:	2b00      	cmp	r3, #0
2400ad88:	f000 80e0 	beq.w	2400af4c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
2400ad8c:	4b2f      	ldr	r3, [pc, #188]	; (2400ae4c <HAL_GPIO_Init+0x238>)
2400ad8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
2400ad92:	4a2e      	ldr	r2, [pc, #184]	; (2400ae4c <HAL_GPIO_Init+0x238>)
2400ad94:	f043 0302 	orr.w	r3, r3, #2
2400ad98:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
2400ad9c:	4b2b      	ldr	r3, [pc, #172]	; (2400ae4c <HAL_GPIO_Init+0x238>)
2400ad9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
2400ada2:	f003 0302 	and.w	r3, r3, #2
2400ada6:	60fb      	str	r3, [r7, #12]
2400ada8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
2400adaa:	4a29      	ldr	r2, [pc, #164]	; (2400ae50 <HAL_GPIO_Init+0x23c>)
2400adac:	69fb      	ldr	r3, [r7, #28]
2400adae:	089b      	lsrs	r3, r3, #2
2400adb0:	3302      	adds	r3, #2
2400adb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
2400adb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
2400adb8:	69fb      	ldr	r3, [r7, #28]
2400adba:	f003 0303 	and.w	r3, r3, #3
2400adbe:	009b      	lsls	r3, r3, #2
2400adc0:	220f      	movs	r2, #15
2400adc2:	fa02 f303 	lsl.w	r3, r2, r3
2400adc6:	43db      	mvns	r3, r3
2400adc8:	69ba      	ldr	r2, [r7, #24]
2400adca:	4013      	ands	r3, r2
2400adcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
2400adce:	687b      	ldr	r3, [r7, #4]
2400add0:	4a20      	ldr	r2, [pc, #128]	; (2400ae54 <HAL_GPIO_Init+0x240>)
2400add2:	4293      	cmp	r3, r2
2400add4:	d052      	beq.n	2400ae7c <HAL_GPIO_Init+0x268>
2400add6:	687b      	ldr	r3, [r7, #4]
2400add8:	4a1f      	ldr	r2, [pc, #124]	; (2400ae58 <HAL_GPIO_Init+0x244>)
2400adda:	4293      	cmp	r3, r2
2400addc:	d031      	beq.n	2400ae42 <HAL_GPIO_Init+0x22e>
2400adde:	687b      	ldr	r3, [r7, #4]
2400ade0:	4a1e      	ldr	r2, [pc, #120]	; (2400ae5c <HAL_GPIO_Init+0x248>)
2400ade2:	4293      	cmp	r3, r2
2400ade4:	d02b      	beq.n	2400ae3e <HAL_GPIO_Init+0x22a>
2400ade6:	687b      	ldr	r3, [r7, #4]
2400ade8:	4a1d      	ldr	r2, [pc, #116]	; (2400ae60 <HAL_GPIO_Init+0x24c>)
2400adea:	4293      	cmp	r3, r2
2400adec:	d025      	beq.n	2400ae3a <HAL_GPIO_Init+0x226>
2400adee:	687b      	ldr	r3, [r7, #4]
2400adf0:	4a1c      	ldr	r2, [pc, #112]	; (2400ae64 <HAL_GPIO_Init+0x250>)
2400adf2:	4293      	cmp	r3, r2
2400adf4:	d01f      	beq.n	2400ae36 <HAL_GPIO_Init+0x222>
2400adf6:	687b      	ldr	r3, [r7, #4]
2400adf8:	4a1b      	ldr	r2, [pc, #108]	; (2400ae68 <HAL_GPIO_Init+0x254>)
2400adfa:	4293      	cmp	r3, r2
2400adfc:	d019      	beq.n	2400ae32 <HAL_GPIO_Init+0x21e>
2400adfe:	687b      	ldr	r3, [r7, #4]
2400ae00:	4a1a      	ldr	r2, [pc, #104]	; (2400ae6c <HAL_GPIO_Init+0x258>)
2400ae02:	4293      	cmp	r3, r2
2400ae04:	d013      	beq.n	2400ae2e <HAL_GPIO_Init+0x21a>
2400ae06:	687b      	ldr	r3, [r7, #4]
2400ae08:	4a19      	ldr	r2, [pc, #100]	; (2400ae70 <HAL_GPIO_Init+0x25c>)
2400ae0a:	4293      	cmp	r3, r2
2400ae0c:	d00d      	beq.n	2400ae2a <HAL_GPIO_Init+0x216>
2400ae0e:	687b      	ldr	r3, [r7, #4]
2400ae10:	4a18      	ldr	r2, [pc, #96]	; (2400ae74 <HAL_GPIO_Init+0x260>)
2400ae12:	4293      	cmp	r3, r2
2400ae14:	d007      	beq.n	2400ae26 <HAL_GPIO_Init+0x212>
2400ae16:	687b      	ldr	r3, [r7, #4]
2400ae18:	4a17      	ldr	r2, [pc, #92]	; (2400ae78 <HAL_GPIO_Init+0x264>)
2400ae1a:	4293      	cmp	r3, r2
2400ae1c:	d101      	bne.n	2400ae22 <HAL_GPIO_Init+0x20e>
2400ae1e:	2309      	movs	r3, #9
2400ae20:	e02d      	b.n	2400ae7e <HAL_GPIO_Init+0x26a>
2400ae22:	230a      	movs	r3, #10
2400ae24:	e02b      	b.n	2400ae7e <HAL_GPIO_Init+0x26a>
2400ae26:	2308      	movs	r3, #8
2400ae28:	e029      	b.n	2400ae7e <HAL_GPIO_Init+0x26a>
2400ae2a:	2307      	movs	r3, #7
2400ae2c:	e027      	b.n	2400ae7e <HAL_GPIO_Init+0x26a>
2400ae2e:	2306      	movs	r3, #6
2400ae30:	e025      	b.n	2400ae7e <HAL_GPIO_Init+0x26a>
2400ae32:	2305      	movs	r3, #5
2400ae34:	e023      	b.n	2400ae7e <HAL_GPIO_Init+0x26a>
2400ae36:	2304      	movs	r3, #4
2400ae38:	e021      	b.n	2400ae7e <HAL_GPIO_Init+0x26a>
2400ae3a:	2303      	movs	r3, #3
2400ae3c:	e01f      	b.n	2400ae7e <HAL_GPIO_Init+0x26a>
2400ae3e:	2302      	movs	r3, #2
2400ae40:	e01d      	b.n	2400ae7e <HAL_GPIO_Init+0x26a>
2400ae42:	2301      	movs	r3, #1
2400ae44:	e01b      	b.n	2400ae7e <HAL_GPIO_Init+0x26a>
2400ae46:	bf00      	nop
2400ae48:	58000080 	.word	0x58000080
2400ae4c:	58024400 	.word	0x58024400
2400ae50:	58000400 	.word	0x58000400
2400ae54:	58020000 	.word	0x58020000
2400ae58:	58020400 	.word	0x58020400
2400ae5c:	58020800 	.word	0x58020800
2400ae60:	58020c00 	.word	0x58020c00
2400ae64:	58021000 	.word	0x58021000
2400ae68:	58021400 	.word	0x58021400
2400ae6c:	58021800 	.word	0x58021800
2400ae70:	58021c00 	.word	0x58021c00
2400ae74:	58022000 	.word	0x58022000
2400ae78:	58022400 	.word	0x58022400
2400ae7c:	2300      	movs	r3, #0
2400ae7e:	69fa      	ldr	r2, [r7, #28]
2400ae80:	f002 0203 	and.w	r2, r2, #3
2400ae84:	0092      	lsls	r2, r2, #2
2400ae86:	4093      	lsls	r3, r2
2400ae88:	69ba      	ldr	r2, [r7, #24]
2400ae8a:	4313      	orrs	r3, r2
2400ae8c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
2400ae8e:	4938      	ldr	r1, [pc, #224]	; (2400af70 <HAL_GPIO_Init+0x35c>)
2400ae90:	69fb      	ldr	r3, [r7, #28]
2400ae92:	089b      	lsrs	r3, r3, #2
2400ae94:	3302      	adds	r3, #2
2400ae96:	69ba      	ldr	r2, [r7, #24]
2400ae98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
2400ae9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
2400aea0:	681b      	ldr	r3, [r3, #0]
2400aea2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
2400aea4:	693b      	ldr	r3, [r7, #16]
2400aea6:	43db      	mvns	r3, r3
2400aea8:	69ba      	ldr	r2, [r7, #24]
2400aeaa:	4013      	ands	r3, r2
2400aeac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
2400aeae:	683b      	ldr	r3, [r7, #0]
2400aeb0:	685b      	ldr	r3, [r3, #4]
2400aeb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
2400aeb6:	2b00      	cmp	r3, #0
2400aeb8:	d003      	beq.n	2400aec2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
2400aeba:	69ba      	ldr	r2, [r7, #24]
2400aebc:	693b      	ldr	r3, [r7, #16]
2400aebe:	4313      	orrs	r3, r2
2400aec0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
2400aec2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
2400aec6:	69bb      	ldr	r3, [r7, #24]
2400aec8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
2400aeca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
2400aece:	685b      	ldr	r3, [r3, #4]
2400aed0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
2400aed2:	693b      	ldr	r3, [r7, #16]
2400aed4:	43db      	mvns	r3, r3
2400aed6:	69ba      	ldr	r2, [r7, #24]
2400aed8:	4013      	ands	r3, r2
2400aeda:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
2400aedc:	683b      	ldr	r3, [r7, #0]
2400aede:	685b      	ldr	r3, [r3, #4]
2400aee0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
2400aee4:	2b00      	cmp	r3, #0
2400aee6:	d003      	beq.n	2400aef0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
2400aee8:	69ba      	ldr	r2, [r7, #24]
2400aeea:	693b      	ldr	r3, [r7, #16]
2400aeec:	4313      	orrs	r3, r2
2400aeee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
2400aef0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
2400aef4:	69bb      	ldr	r3, [r7, #24]
2400aef6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
2400aef8:	697b      	ldr	r3, [r7, #20]
2400aefa:	685b      	ldr	r3, [r3, #4]
2400aefc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
2400aefe:	693b      	ldr	r3, [r7, #16]
2400af00:	43db      	mvns	r3, r3
2400af02:	69ba      	ldr	r2, [r7, #24]
2400af04:	4013      	ands	r3, r2
2400af06:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
2400af08:	683b      	ldr	r3, [r7, #0]
2400af0a:	685b      	ldr	r3, [r3, #4]
2400af0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2400af10:	2b00      	cmp	r3, #0
2400af12:	d003      	beq.n	2400af1c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
2400af14:	69ba      	ldr	r2, [r7, #24]
2400af16:	693b      	ldr	r3, [r7, #16]
2400af18:	4313      	orrs	r3, r2
2400af1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
2400af1c:	697b      	ldr	r3, [r7, #20]
2400af1e:	69ba      	ldr	r2, [r7, #24]
2400af20:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
2400af22:	697b      	ldr	r3, [r7, #20]
2400af24:	681b      	ldr	r3, [r3, #0]
2400af26:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
2400af28:	693b      	ldr	r3, [r7, #16]
2400af2a:	43db      	mvns	r3, r3
2400af2c:	69ba      	ldr	r2, [r7, #24]
2400af2e:	4013      	ands	r3, r2
2400af30:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
2400af32:	683b      	ldr	r3, [r7, #0]
2400af34:	685b      	ldr	r3, [r3, #4]
2400af36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
2400af3a:	2b00      	cmp	r3, #0
2400af3c:	d003      	beq.n	2400af46 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
2400af3e:	69ba      	ldr	r2, [r7, #24]
2400af40:	693b      	ldr	r3, [r7, #16]
2400af42:	4313      	orrs	r3, r2
2400af44:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
2400af46:	697b      	ldr	r3, [r7, #20]
2400af48:	69ba      	ldr	r2, [r7, #24]
2400af4a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
2400af4c:	69fb      	ldr	r3, [r7, #28]
2400af4e:	3301      	adds	r3, #1
2400af50:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
2400af52:	683b      	ldr	r3, [r7, #0]
2400af54:	681a      	ldr	r2, [r3, #0]
2400af56:	69fb      	ldr	r3, [r7, #28]
2400af58:	fa22 f303 	lsr.w	r3, r2, r3
2400af5c:	2b00      	cmp	r3, #0
2400af5e:	f47f ae63 	bne.w	2400ac28 <HAL_GPIO_Init+0x14>
  }
}
2400af62:	bf00      	nop
2400af64:	bf00      	nop
2400af66:	3724      	adds	r7, #36	; 0x24
2400af68:	46bd      	mov	sp, r7
2400af6a:	f85d 7b04 	ldr.w	r7, [sp], #4
2400af6e:	4770      	bx	lr
2400af70:	58000400 	.word	0x58000400

2400af74 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
2400af74:	b480      	push	{r7}
2400af76:	b087      	sub	sp, #28
2400af78:	af00      	add	r7, sp, #0
2400af7a:	6078      	str	r0, [r7, #4]
2400af7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
2400af7e:	2300      	movs	r3, #0
2400af80:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
2400af82:	4b75      	ldr	r3, [pc, #468]	; (2400b158 <HAL_GPIO_DeInit+0x1e4>)
2400af84:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
2400af86:	e0d9      	b.n	2400b13c <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
2400af88:	2201      	movs	r2, #1
2400af8a:	697b      	ldr	r3, [r7, #20]
2400af8c:	fa02 f303 	lsl.w	r3, r2, r3
2400af90:	683a      	ldr	r2, [r7, #0]
2400af92:	4013      	ands	r3, r2
2400af94:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
2400af96:	68fb      	ldr	r3, [r7, #12]
2400af98:	2b00      	cmp	r3, #0
2400af9a:	f000 80cc 	beq.w	2400b136 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
2400af9e:	4a6f      	ldr	r2, [pc, #444]	; (2400b15c <HAL_GPIO_DeInit+0x1e8>)
2400afa0:	697b      	ldr	r3, [r7, #20]
2400afa2:	089b      	lsrs	r3, r3, #2
2400afa4:	3302      	adds	r3, #2
2400afa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
2400afaa:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
2400afac:	697b      	ldr	r3, [r7, #20]
2400afae:	f003 0303 	and.w	r3, r3, #3
2400afb2:	009b      	lsls	r3, r3, #2
2400afb4:	220f      	movs	r2, #15
2400afb6:	fa02 f303 	lsl.w	r3, r2, r3
2400afba:	68ba      	ldr	r2, [r7, #8]
2400afbc:	4013      	ands	r3, r2
2400afbe:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
2400afc0:	687b      	ldr	r3, [r7, #4]
2400afc2:	4a67      	ldr	r2, [pc, #412]	; (2400b160 <HAL_GPIO_DeInit+0x1ec>)
2400afc4:	4293      	cmp	r3, r2
2400afc6:	d037      	beq.n	2400b038 <HAL_GPIO_DeInit+0xc4>
2400afc8:	687b      	ldr	r3, [r7, #4]
2400afca:	4a66      	ldr	r2, [pc, #408]	; (2400b164 <HAL_GPIO_DeInit+0x1f0>)
2400afcc:	4293      	cmp	r3, r2
2400afce:	d031      	beq.n	2400b034 <HAL_GPIO_DeInit+0xc0>
2400afd0:	687b      	ldr	r3, [r7, #4]
2400afd2:	4a65      	ldr	r2, [pc, #404]	; (2400b168 <HAL_GPIO_DeInit+0x1f4>)
2400afd4:	4293      	cmp	r3, r2
2400afd6:	d02b      	beq.n	2400b030 <HAL_GPIO_DeInit+0xbc>
2400afd8:	687b      	ldr	r3, [r7, #4]
2400afda:	4a64      	ldr	r2, [pc, #400]	; (2400b16c <HAL_GPIO_DeInit+0x1f8>)
2400afdc:	4293      	cmp	r3, r2
2400afde:	d025      	beq.n	2400b02c <HAL_GPIO_DeInit+0xb8>
2400afe0:	687b      	ldr	r3, [r7, #4]
2400afe2:	4a63      	ldr	r2, [pc, #396]	; (2400b170 <HAL_GPIO_DeInit+0x1fc>)
2400afe4:	4293      	cmp	r3, r2
2400afe6:	d01f      	beq.n	2400b028 <HAL_GPIO_DeInit+0xb4>
2400afe8:	687b      	ldr	r3, [r7, #4]
2400afea:	4a62      	ldr	r2, [pc, #392]	; (2400b174 <HAL_GPIO_DeInit+0x200>)
2400afec:	4293      	cmp	r3, r2
2400afee:	d019      	beq.n	2400b024 <HAL_GPIO_DeInit+0xb0>
2400aff0:	687b      	ldr	r3, [r7, #4]
2400aff2:	4a61      	ldr	r2, [pc, #388]	; (2400b178 <HAL_GPIO_DeInit+0x204>)
2400aff4:	4293      	cmp	r3, r2
2400aff6:	d013      	beq.n	2400b020 <HAL_GPIO_DeInit+0xac>
2400aff8:	687b      	ldr	r3, [r7, #4]
2400affa:	4a60      	ldr	r2, [pc, #384]	; (2400b17c <HAL_GPIO_DeInit+0x208>)
2400affc:	4293      	cmp	r3, r2
2400affe:	d00d      	beq.n	2400b01c <HAL_GPIO_DeInit+0xa8>
2400b000:	687b      	ldr	r3, [r7, #4]
2400b002:	4a5f      	ldr	r2, [pc, #380]	; (2400b180 <HAL_GPIO_DeInit+0x20c>)
2400b004:	4293      	cmp	r3, r2
2400b006:	d007      	beq.n	2400b018 <HAL_GPIO_DeInit+0xa4>
2400b008:	687b      	ldr	r3, [r7, #4]
2400b00a:	4a5e      	ldr	r2, [pc, #376]	; (2400b184 <HAL_GPIO_DeInit+0x210>)
2400b00c:	4293      	cmp	r3, r2
2400b00e:	d101      	bne.n	2400b014 <HAL_GPIO_DeInit+0xa0>
2400b010:	2309      	movs	r3, #9
2400b012:	e012      	b.n	2400b03a <HAL_GPIO_DeInit+0xc6>
2400b014:	230a      	movs	r3, #10
2400b016:	e010      	b.n	2400b03a <HAL_GPIO_DeInit+0xc6>
2400b018:	2308      	movs	r3, #8
2400b01a:	e00e      	b.n	2400b03a <HAL_GPIO_DeInit+0xc6>
2400b01c:	2307      	movs	r3, #7
2400b01e:	e00c      	b.n	2400b03a <HAL_GPIO_DeInit+0xc6>
2400b020:	2306      	movs	r3, #6
2400b022:	e00a      	b.n	2400b03a <HAL_GPIO_DeInit+0xc6>
2400b024:	2305      	movs	r3, #5
2400b026:	e008      	b.n	2400b03a <HAL_GPIO_DeInit+0xc6>
2400b028:	2304      	movs	r3, #4
2400b02a:	e006      	b.n	2400b03a <HAL_GPIO_DeInit+0xc6>
2400b02c:	2303      	movs	r3, #3
2400b02e:	e004      	b.n	2400b03a <HAL_GPIO_DeInit+0xc6>
2400b030:	2302      	movs	r3, #2
2400b032:	e002      	b.n	2400b03a <HAL_GPIO_DeInit+0xc6>
2400b034:	2301      	movs	r3, #1
2400b036:	e000      	b.n	2400b03a <HAL_GPIO_DeInit+0xc6>
2400b038:	2300      	movs	r3, #0
2400b03a:	697a      	ldr	r2, [r7, #20]
2400b03c:	f002 0203 	and.w	r2, r2, #3
2400b040:	0092      	lsls	r2, r2, #2
2400b042:	4093      	lsls	r3, r2
2400b044:	68ba      	ldr	r2, [r7, #8]
2400b046:	429a      	cmp	r2, r3
2400b048:	d136      	bne.n	2400b0b8 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
2400b04a:	693b      	ldr	r3, [r7, #16]
2400b04c:	681a      	ldr	r2, [r3, #0]
2400b04e:	68fb      	ldr	r3, [r7, #12]
2400b050:	43db      	mvns	r3, r3
2400b052:	401a      	ands	r2, r3
2400b054:	693b      	ldr	r3, [r7, #16]
2400b056:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
2400b058:	693b      	ldr	r3, [r7, #16]
2400b05a:	685a      	ldr	r2, [r3, #4]
2400b05c:	68fb      	ldr	r3, [r7, #12]
2400b05e:	43db      	mvns	r3, r3
2400b060:	401a      	ands	r2, r3
2400b062:	693b      	ldr	r3, [r7, #16]
2400b064:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
2400b066:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
2400b06a:	685a      	ldr	r2, [r3, #4]
2400b06c:	68fb      	ldr	r3, [r7, #12]
2400b06e:	43db      	mvns	r3, r3
2400b070:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
2400b074:	4013      	ands	r3, r2
2400b076:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
2400b078:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
2400b07c:	681a      	ldr	r2, [r3, #0]
2400b07e:	68fb      	ldr	r3, [r7, #12]
2400b080:	43db      	mvns	r3, r3
2400b082:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
2400b086:	4013      	ands	r3, r2
2400b088:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
2400b08a:	697b      	ldr	r3, [r7, #20]
2400b08c:	f003 0303 	and.w	r3, r3, #3
2400b090:	009b      	lsls	r3, r3, #2
2400b092:	220f      	movs	r2, #15
2400b094:	fa02 f303 	lsl.w	r3, r2, r3
2400b098:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
2400b09a:	4a30      	ldr	r2, [pc, #192]	; (2400b15c <HAL_GPIO_DeInit+0x1e8>)
2400b09c:	697b      	ldr	r3, [r7, #20]
2400b09e:	089b      	lsrs	r3, r3, #2
2400b0a0:	3302      	adds	r3, #2
2400b0a2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
2400b0a6:	68bb      	ldr	r3, [r7, #8]
2400b0a8:	43da      	mvns	r2, r3
2400b0aa:	482c      	ldr	r0, [pc, #176]	; (2400b15c <HAL_GPIO_DeInit+0x1e8>)
2400b0ac:	697b      	ldr	r3, [r7, #20]
2400b0ae:	089b      	lsrs	r3, r3, #2
2400b0b0:	400a      	ands	r2, r1
2400b0b2:	3302      	adds	r3, #2
2400b0b4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
2400b0b8:	687b      	ldr	r3, [r7, #4]
2400b0ba:	681a      	ldr	r2, [r3, #0]
2400b0bc:	697b      	ldr	r3, [r7, #20]
2400b0be:	005b      	lsls	r3, r3, #1
2400b0c0:	2103      	movs	r1, #3
2400b0c2:	fa01 f303 	lsl.w	r3, r1, r3
2400b0c6:	431a      	orrs	r2, r3
2400b0c8:	687b      	ldr	r3, [r7, #4]
2400b0ca:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
2400b0cc:	697b      	ldr	r3, [r7, #20]
2400b0ce:	08da      	lsrs	r2, r3, #3
2400b0d0:	687b      	ldr	r3, [r7, #4]
2400b0d2:	3208      	adds	r2, #8
2400b0d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
2400b0d8:	697b      	ldr	r3, [r7, #20]
2400b0da:	f003 0307 	and.w	r3, r3, #7
2400b0de:	009b      	lsls	r3, r3, #2
2400b0e0:	220f      	movs	r2, #15
2400b0e2:	fa02 f303 	lsl.w	r3, r2, r3
2400b0e6:	43db      	mvns	r3, r3
2400b0e8:	697a      	ldr	r2, [r7, #20]
2400b0ea:	08d2      	lsrs	r2, r2, #3
2400b0ec:	4019      	ands	r1, r3
2400b0ee:	687b      	ldr	r3, [r7, #4]
2400b0f0:	3208      	adds	r2, #8
2400b0f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
2400b0f6:	687b      	ldr	r3, [r7, #4]
2400b0f8:	68da      	ldr	r2, [r3, #12]
2400b0fa:	697b      	ldr	r3, [r7, #20]
2400b0fc:	005b      	lsls	r3, r3, #1
2400b0fe:	2103      	movs	r1, #3
2400b100:	fa01 f303 	lsl.w	r3, r1, r3
2400b104:	43db      	mvns	r3, r3
2400b106:	401a      	ands	r2, r3
2400b108:	687b      	ldr	r3, [r7, #4]
2400b10a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
2400b10c:	687b      	ldr	r3, [r7, #4]
2400b10e:	685a      	ldr	r2, [r3, #4]
2400b110:	2101      	movs	r1, #1
2400b112:	697b      	ldr	r3, [r7, #20]
2400b114:	fa01 f303 	lsl.w	r3, r1, r3
2400b118:	43db      	mvns	r3, r3
2400b11a:	401a      	ands	r2, r3
2400b11c:	687b      	ldr	r3, [r7, #4]
2400b11e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
2400b120:	687b      	ldr	r3, [r7, #4]
2400b122:	689a      	ldr	r2, [r3, #8]
2400b124:	697b      	ldr	r3, [r7, #20]
2400b126:	005b      	lsls	r3, r3, #1
2400b128:	2103      	movs	r1, #3
2400b12a:	fa01 f303 	lsl.w	r3, r1, r3
2400b12e:	43db      	mvns	r3, r3
2400b130:	401a      	ands	r2, r3
2400b132:	687b      	ldr	r3, [r7, #4]
2400b134:	609a      	str	r2, [r3, #8]
    }

    position++;
2400b136:	697b      	ldr	r3, [r7, #20]
2400b138:	3301      	adds	r3, #1
2400b13a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
2400b13c:	683a      	ldr	r2, [r7, #0]
2400b13e:	697b      	ldr	r3, [r7, #20]
2400b140:	fa22 f303 	lsr.w	r3, r2, r3
2400b144:	2b00      	cmp	r3, #0
2400b146:	f47f af1f 	bne.w	2400af88 <HAL_GPIO_DeInit+0x14>
  }
}
2400b14a:	bf00      	nop
2400b14c:	bf00      	nop
2400b14e:	371c      	adds	r7, #28
2400b150:	46bd      	mov	sp, r7
2400b152:	f85d 7b04 	ldr.w	r7, [sp], #4
2400b156:	4770      	bx	lr
2400b158:	58000080 	.word	0x58000080
2400b15c:	58000400 	.word	0x58000400
2400b160:	58020000 	.word	0x58020000
2400b164:	58020400 	.word	0x58020400
2400b168:	58020800 	.word	0x58020800
2400b16c:	58020c00 	.word	0x58020c00
2400b170:	58021000 	.word	0x58021000
2400b174:	58021400 	.word	0x58021400
2400b178:	58021800 	.word	0x58021800
2400b17c:	58021c00 	.word	0x58021c00
2400b180:	58022000 	.word	0x58022000
2400b184:	58022400 	.word	0x58022400

2400b188 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
2400b188:	b480      	push	{r7}
2400b18a:	b085      	sub	sp, #20
2400b18c:	af00      	add	r7, sp, #0
2400b18e:	6078      	str	r0, [r7, #4]
2400b190:	460b      	mov	r3, r1
2400b192:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
2400b194:	687b      	ldr	r3, [r7, #4]
2400b196:	691a      	ldr	r2, [r3, #16]
2400b198:	887b      	ldrh	r3, [r7, #2]
2400b19a:	4013      	ands	r3, r2
2400b19c:	2b00      	cmp	r3, #0
2400b19e:	d002      	beq.n	2400b1a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
2400b1a0:	2301      	movs	r3, #1
2400b1a2:	73fb      	strb	r3, [r7, #15]
2400b1a4:	e001      	b.n	2400b1aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
2400b1a6:	2300      	movs	r3, #0
2400b1a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
2400b1aa:	7bfb      	ldrb	r3, [r7, #15]
}
2400b1ac:	4618      	mov	r0, r3
2400b1ae:	3714      	adds	r7, #20
2400b1b0:	46bd      	mov	sp, r7
2400b1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
2400b1b6:	4770      	bx	lr

2400b1b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
2400b1b8:	b480      	push	{r7}
2400b1ba:	b083      	sub	sp, #12
2400b1bc:	af00      	add	r7, sp, #0
2400b1be:	6078      	str	r0, [r7, #4]
2400b1c0:	460b      	mov	r3, r1
2400b1c2:	807b      	strh	r3, [r7, #2]
2400b1c4:	4613      	mov	r3, r2
2400b1c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
2400b1c8:	787b      	ldrb	r3, [r7, #1]
2400b1ca:	2b00      	cmp	r3, #0
2400b1cc:	d003      	beq.n	2400b1d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
2400b1ce:	887a      	ldrh	r2, [r7, #2]
2400b1d0:	687b      	ldr	r3, [r7, #4]
2400b1d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
2400b1d4:	e003      	b.n	2400b1de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
2400b1d6:	887b      	ldrh	r3, [r7, #2]
2400b1d8:	041a      	lsls	r2, r3, #16
2400b1da:	687b      	ldr	r3, [r7, #4]
2400b1dc:	619a      	str	r2, [r3, #24]
}
2400b1de:	bf00      	nop
2400b1e0:	370c      	adds	r7, #12
2400b1e2:	46bd      	mov	sp, r7
2400b1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
2400b1e8:	4770      	bx	lr

2400b1ea <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
2400b1ea:	b480      	push	{r7}
2400b1ec:	b085      	sub	sp, #20
2400b1ee:	af00      	add	r7, sp, #0
2400b1f0:	6078      	str	r0, [r7, #4]
2400b1f2:	460b      	mov	r3, r1
2400b1f4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
2400b1f6:	687b      	ldr	r3, [r7, #4]
2400b1f8:	695b      	ldr	r3, [r3, #20]
2400b1fa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
2400b1fc:	887a      	ldrh	r2, [r7, #2]
2400b1fe:	68fb      	ldr	r3, [r7, #12]
2400b200:	4013      	ands	r3, r2
2400b202:	041a      	lsls	r2, r3, #16
2400b204:	68fb      	ldr	r3, [r7, #12]
2400b206:	43d9      	mvns	r1, r3
2400b208:	887b      	ldrh	r3, [r7, #2]
2400b20a:	400b      	ands	r3, r1
2400b20c:	431a      	orrs	r2, r3
2400b20e:	687b      	ldr	r3, [r7, #4]
2400b210:	619a      	str	r2, [r3, #24]
}
2400b212:	bf00      	nop
2400b214:	3714      	adds	r7, #20
2400b216:	46bd      	mov	sp, r7
2400b218:	f85d 7b04 	ldr.w	r7, [sp], #4
2400b21c:	4770      	bx	lr

2400b21e <HAL_GPIO_LockPin>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
HAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
2400b21e:	b480      	push	{r7}
2400b220:	b085      	sub	sp, #20
2400b222:	af00      	add	r7, sp, #0
2400b224:	6078      	str	r0, [r7, #4]
2400b226:	460b      	mov	r3, r1
2400b228:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = GPIO_LCKR_LCKK;
2400b22a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
2400b22e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_LOCK_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Apply lock key write sequence */
  tmp |= GPIO_Pin;
2400b230:	887a      	ldrh	r2, [r7, #2]
2400b232:	68fb      	ldr	r3, [r7, #12]
2400b234:	4313      	orrs	r3, r2
2400b236:	60fb      	str	r3, [r7, #12]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
2400b238:	68fa      	ldr	r2, [r7, #12]
2400b23a:	687b      	ldr	r3, [r7, #4]
2400b23c:	61da      	str	r2, [r3, #28]
  /* Reset LCKx bit(s): LCKK='0' + LCK[15-0] */
  GPIOx->LCKR = GPIO_Pin;
2400b23e:	887a      	ldrh	r2, [r7, #2]
2400b240:	687b      	ldr	r3, [r7, #4]
2400b242:	61da      	str	r2, [r3, #28]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
2400b244:	68fa      	ldr	r2, [r7, #12]
2400b246:	687b      	ldr	r3, [r7, #4]
2400b248:	61da      	str	r2, [r3, #28]
  /* Read LCKK register. This read is mandatory to complete key lock sequence*/
  tmp = GPIOx->LCKR;
2400b24a:	687b      	ldr	r3, [r7, #4]
2400b24c:	69db      	ldr	r3, [r3, #28]
2400b24e:	60fb      	str	r3, [r7, #12]

  /* read again in order to confirm lock is active */
  if ((GPIOx->LCKR & GPIO_LCKR_LCKK) != 0x00U)
2400b250:	687b      	ldr	r3, [r7, #4]
2400b252:	69db      	ldr	r3, [r3, #28]
2400b254:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
2400b258:	2b00      	cmp	r3, #0
2400b25a:	d001      	beq.n	2400b260 <HAL_GPIO_LockPin+0x42>
  {
    return HAL_OK;
2400b25c:	2300      	movs	r3, #0
2400b25e:	e000      	b.n	2400b262 <HAL_GPIO_LockPin+0x44>
  }
  else
  {
    return HAL_ERROR;
2400b260:	2301      	movs	r3, #1
  }
}
2400b262:	4618      	mov	r0, r3
2400b264:	3714      	adds	r7, #20
2400b266:	46bd      	mov	sp, r7
2400b268:	f85d 7b04 	ldr.w	r7, [sp], #4
2400b26c:	4770      	bx	lr

2400b26e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
2400b26e:	b580      	push	{r7, lr}
2400b270:	b082      	sub	sp, #8
2400b272:	af00      	add	r7, sp, #0
2400b274:	4603      	mov	r3, r0
2400b276:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
2400b278:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
2400b27c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
2400b280:	88fb      	ldrh	r3, [r7, #6]
2400b282:	4013      	ands	r3, r2
2400b284:	2b00      	cmp	r3, #0
2400b286:	d008      	beq.n	2400b29a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
2400b288:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
2400b28c:	88fb      	ldrh	r3, [r7, #6]
2400b28e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
2400b292:	88fb      	ldrh	r3, [r7, #6]
2400b294:	4618      	mov	r0, r3
2400b296:	f000 f804 	bl	2400b2a2 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
2400b29a:	bf00      	nop
2400b29c:	3708      	adds	r7, #8
2400b29e:	46bd      	mov	sp, r7
2400b2a0:	bd80      	pop	{r7, pc}

2400b2a2 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
2400b2a2:	b480      	push	{r7}
2400b2a4:	b083      	sub	sp, #12
2400b2a6:	af00      	add	r7, sp, #0
2400b2a8:	4603      	mov	r3, r0
2400b2aa:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
2400b2ac:	bf00      	nop
2400b2ae:	370c      	adds	r7, #12
2400b2b0:	46bd      	mov	sp, r7
2400b2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
2400b2b6:	4770      	bx	lr

2400b2b8 <HAL_HSEM_Take>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_HSEM_Take(uint32_t SemID, uint32_t ProcessID)
{
2400b2b8:	b480      	push	{r7}
2400b2ba:	b083      	sub	sp, #12
2400b2bc:	af00      	add	r7, sp, #0
2400b2be:	6078      	str	r0, [r7, #4]
2400b2c0:	6039      	str	r1, [r7, #0]
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
  }
#else
  /* First step  write R register with MasterID, processID and take bit=1*/
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK);
2400b2c2:	490c      	ldr	r1, [pc, #48]	; (2400b2f4 <HAL_HSEM_Take+0x3c>)
2400b2c4:	683a      	ldr	r2, [r7, #0]
2400b2c6:	4b0c      	ldr	r3, [pc, #48]	; (2400b2f8 <HAL_HSEM_Take+0x40>)
2400b2c8:	4313      	orrs	r3, r2
2400b2ca:	687a      	ldr	r2, [r7, #4]
2400b2cc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  /* second step : read the R register . Take achieved if MasterID and processID match and take bit set to 1 */
  if (HSEM->R[SemID] == (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK))
2400b2d0:	4a08      	ldr	r2, [pc, #32]	; (2400b2f4 <HAL_HSEM_Take+0x3c>)
2400b2d2:	687b      	ldr	r3, [r7, #4]
2400b2d4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
2400b2d8:	6839      	ldr	r1, [r7, #0]
2400b2da:	4b07      	ldr	r3, [pc, #28]	; (2400b2f8 <HAL_HSEM_Take+0x40>)
2400b2dc:	430b      	orrs	r3, r1
2400b2de:	429a      	cmp	r2, r3
2400b2e0:	d101      	bne.n	2400b2e6 <HAL_HSEM_Take+0x2e>
  {
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
2400b2e2:	2300      	movs	r3, #0
2400b2e4:	e000      	b.n	2400b2e8 <HAL_HSEM_Take+0x30>
  }
#endif

  /* Semaphore take fails*/
  return HAL_ERROR;
2400b2e6:	2301      	movs	r3, #1
}
2400b2e8:	4618      	mov	r0, r3
2400b2ea:	370c      	adds	r7, #12
2400b2ec:	46bd      	mov	sp, r7
2400b2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
2400b2f2:	4770      	bx	lr
2400b2f4:	58026400 	.word	0x58026400
2400b2f8:	80000300 	.word	0x80000300

2400b2fc <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
2400b2fc:	b480      	push	{r7}
2400b2fe:	b083      	sub	sp, #12
2400b300:	af00      	add	r7, sp, #0
2400b302:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
2400b304:	4a08      	ldr	r2, [pc, #32]	; (2400b328 <HAL_HSEM_FastTake+0x2c>)
2400b306:	687b      	ldr	r3, [r7, #4]
2400b308:	3320      	adds	r3, #32
2400b30a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
2400b30e:	4a07      	ldr	r2, [pc, #28]	; (2400b32c <HAL_HSEM_FastTake+0x30>)
2400b310:	4293      	cmp	r3, r2
2400b312:	d101      	bne.n	2400b318 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
2400b314:	2300      	movs	r3, #0
2400b316:	e000      	b.n	2400b31a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
2400b318:	2301      	movs	r3, #1
}
2400b31a:	4618      	mov	r0, r3
2400b31c:	370c      	adds	r7, #12
2400b31e:	46bd      	mov	sp, r7
2400b320:	f85d 7b04 	ldr.w	r7, [sp], #4
2400b324:	4770      	bx	lr
2400b326:	bf00      	nop
2400b328:	58026400 	.word	0x58026400
2400b32c:	80000300 	.word	0x80000300

2400b330 <HAL_HSEM_IsSemTaken>:
  * @brief  Check semaphore state Taken or not.
  * @param  SemID: semaphore ID
  * @retval HAL HSEM state
  */
uint32_t HAL_HSEM_IsSemTaken(uint32_t SemID)
{
2400b330:	b480      	push	{r7}
2400b332:	b083      	sub	sp, #12
2400b334:	af00      	add	r7, sp, #0
2400b336:	6078      	str	r0, [r7, #4]
  return (((HSEM->R[SemID] & HSEM_R_LOCK) != 0U) ? 1UL : 0UL);
2400b338:	4a07      	ldr	r2, [pc, #28]	; (2400b358 <HAL_HSEM_IsSemTaken+0x28>)
2400b33a:	687b      	ldr	r3, [r7, #4]
2400b33c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
2400b340:	2b00      	cmp	r3, #0
2400b342:	da01      	bge.n	2400b348 <HAL_HSEM_IsSemTaken+0x18>
2400b344:	2301      	movs	r3, #1
2400b346:	e000      	b.n	2400b34a <HAL_HSEM_IsSemTaken+0x1a>
2400b348:	2300      	movs	r3, #0
}
2400b34a:	4618      	mov	r0, r3
2400b34c:	370c      	adds	r7, #12
2400b34e:	46bd      	mov	sp, r7
2400b350:	f85d 7b04 	ldr.w	r7, [sp], #4
2400b354:	4770      	bx	lr
2400b356:	bf00      	nop
2400b358:	58026400 	.word	0x58026400

2400b35c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
2400b35c:	b480      	push	{r7}
2400b35e:	b083      	sub	sp, #12
2400b360:	af00      	add	r7, sp, #0
2400b362:	6078      	str	r0, [r7, #4]
2400b364:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
2400b366:	4906      	ldr	r1, [pc, #24]	; (2400b380 <HAL_HSEM_Release+0x24>)
2400b368:	683b      	ldr	r3, [r7, #0]
2400b36a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
2400b36e:	687b      	ldr	r3, [r7, #4]
2400b370:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
2400b374:	bf00      	nop
2400b376:	370c      	adds	r7, #12
2400b378:	46bd      	mov	sp, r7
2400b37a:	f85d 7b04 	ldr.w	r7, [sp], #4
2400b37e:	4770      	bx	lr
2400b380:	58026400 	.word	0x58026400

2400b384 <HAL_HSEM_ReleaseAll>:
  * @param  Key: Semaphore Key , value from 0 to 0xFFFF
  * @param  CoreID: CoreID of the CPU that is using semaphores to be released
  * @retval None
  */
void HAL_HSEM_ReleaseAll(uint32_t Key, uint32_t CoreID)
{
2400b384:	b480      	push	{r7}
2400b386:	b083      	sub	sp, #12
2400b388:	af00      	add	r7, sp, #0
2400b38a:	6078      	str	r0, [r7, #4]
2400b38c:	6039      	str	r1, [r7, #0]
  assert_param(IS_HSEM_KEY(Key));
  assert_param(IS_HSEM_COREID(CoreID));

  HSEM->CR = ((Key << HSEM_CR_KEY_Pos) | (CoreID << HSEM_CR_COREID_Pos));
2400b38e:	687b      	ldr	r3, [r7, #4]
2400b390:	041a      	lsls	r2, r3, #16
2400b392:	683b      	ldr	r3, [r7, #0]
2400b394:	021b      	lsls	r3, r3, #8
2400b396:	4905      	ldr	r1, [pc, #20]	; (2400b3ac <HAL_HSEM_ReleaseAll+0x28>)
2400b398:	4313      	orrs	r3, r2
2400b39a:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
}
2400b39e:	bf00      	nop
2400b3a0:	370c      	adds	r7, #12
2400b3a2:	46bd      	mov	sp, r7
2400b3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
2400b3a8:	4770      	bx	lr
2400b3aa:	bf00      	nop
2400b3ac:	58026400 	.word	0x58026400

2400b3b0 <HAL_HSEM_SetClearKey>:
  * @brief  Set semaphore Key .
  * @param  Key: Semaphore Key , value from 0 to 0xFFFF
  * @retval None
  */
void  HAL_HSEM_SetClearKey(uint32_t Key)
{
2400b3b0:	b480      	push	{r7}
2400b3b2:	b083      	sub	sp, #12
2400b3b4:	af00      	add	r7, sp, #0
2400b3b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_HSEM_KEY(Key));

  MODIFY_REG(HSEM->KEYR, HSEM_KEYR_KEY, (Key << HSEM_KEYR_KEY_Pos));
2400b3b8:	4b07      	ldr	r3, [pc, #28]	; (2400b3d8 <HAL_HSEM_SetClearKey+0x28>)
2400b3ba:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
2400b3be:	b29a      	uxth	r2, r3
2400b3c0:	687b      	ldr	r3, [r7, #4]
2400b3c2:	041b      	lsls	r3, r3, #16
2400b3c4:	4904      	ldr	r1, [pc, #16]	; (2400b3d8 <HAL_HSEM_SetClearKey+0x28>)
2400b3c6:	4313      	orrs	r3, r2
2400b3c8:	f8c1 3144 	str.w	r3, [r1, #324]	; 0x144

}
2400b3cc:	bf00      	nop
2400b3ce:	370c      	adds	r7, #12
2400b3d0:	46bd      	mov	sp, r7
2400b3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
2400b3d6:	4770      	bx	lr
2400b3d8:	58026400 	.word	0x58026400

2400b3dc <HAL_HSEM_GetClearKey>:
/**
  * @brief  Get semaphore Key .
  * @retval Semaphore Key , value from 0 to 0xFFFF
  */
uint32_t HAL_HSEM_GetClearKey(void)
{
2400b3dc:	b480      	push	{r7}
2400b3de:	af00      	add	r7, sp, #0
  return (HSEM->KEYR >> HSEM_KEYR_KEY_Pos);
2400b3e0:	4b04      	ldr	r3, [pc, #16]	; (2400b3f4 <HAL_HSEM_GetClearKey+0x18>)
2400b3e2:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
2400b3e6:	0c1b      	lsrs	r3, r3, #16
}
2400b3e8:	4618      	mov	r0, r3
2400b3ea:	46bd      	mov	sp, r7
2400b3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
2400b3f0:	4770      	bx	lr
2400b3f2:	bf00      	nop
2400b3f4:	58026400 	.word	0x58026400

2400b3f8 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
2400b3f8:	b480      	push	{r7}
2400b3fa:	b083      	sub	sp, #12
2400b3fc:	af00      	add	r7, sp, #0
2400b3fe:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
2400b400:	4b05      	ldr	r3, [pc, #20]	; (2400b418 <HAL_HSEM_ActivateNotification+0x20>)
2400b402:	681a      	ldr	r2, [r3, #0]
2400b404:	4904      	ldr	r1, [pc, #16]	; (2400b418 <HAL_HSEM_ActivateNotification+0x20>)
2400b406:	687b      	ldr	r3, [r7, #4]
2400b408:	4313      	orrs	r3, r2
2400b40a:	600b      	str	r3, [r1, #0]
#endif
}
2400b40c:	bf00      	nop
2400b40e:	370c      	adds	r7, #12
2400b410:	46bd      	mov	sp, r7
2400b412:	f85d 7b04 	ldr.w	r7, [sp], #4
2400b416:	4770      	bx	lr
2400b418:	58026500 	.word	0x58026500

2400b41c <HAL_HSEM_DeactivateNotification>:
  * @brief  Deactivate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_DeactivateNotification(uint32_t SemMask)
{
2400b41c:	b480      	push	{r7}
2400b41e:	b083      	sub	sp, #12
2400b420:	af00      	add	r7, sp, #0
2400b422:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER &= ~SemMask;
  }
#else
  HSEM_COMMON->IER &= ~SemMask;
2400b424:	4b06      	ldr	r3, [pc, #24]	; (2400b440 <HAL_HSEM_DeactivateNotification+0x24>)
2400b426:	681a      	ldr	r2, [r3, #0]
2400b428:	687b      	ldr	r3, [r7, #4]
2400b42a:	43db      	mvns	r3, r3
2400b42c:	4904      	ldr	r1, [pc, #16]	; (2400b440 <HAL_HSEM_DeactivateNotification+0x24>)
2400b42e:	4013      	ands	r3, r2
2400b430:	600b      	str	r3, [r1, #0]
#endif
}
2400b432:	bf00      	nop
2400b434:	370c      	adds	r7, #12
2400b436:	46bd      	mov	sp, r7
2400b438:	f85d 7b04 	ldr.w	r7, [sp], #4
2400b43c:	4770      	bx	lr
2400b43e:	bf00      	nop
2400b440:	58026500 	.word	0x58026500

2400b444 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
2400b444:	b580      	push	{r7, lr}
2400b446:	b082      	sub	sp, #8
2400b448:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
2400b44a:	4b0a      	ldr	r3, [pc, #40]	; (2400b474 <HAL_HSEM_IRQHandler+0x30>)
2400b44c:	68db      	ldr	r3, [r3, #12]
2400b44e:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
2400b450:	4b08      	ldr	r3, [pc, #32]	; (2400b474 <HAL_HSEM_IRQHandler+0x30>)
2400b452:	681a      	ldr	r2, [r3, #0]
2400b454:	687b      	ldr	r3, [r7, #4]
2400b456:	43db      	mvns	r3, r3
2400b458:	4906      	ldr	r1, [pc, #24]	; (2400b474 <HAL_HSEM_IRQHandler+0x30>)
2400b45a:	4013      	ands	r3, r2
2400b45c:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
2400b45e:	4a05      	ldr	r2, [pc, #20]	; (2400b474 <HAL_HSEM_IRQHandler+0x30>)
2400b460:	687b      	ldr	r3, [r7, #4]
2400b462:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
2400b464:	6878      	ldr	r0, [r7, #4]
2400b466:	f000 f807 	bl	2400b478 <HAL_HSEM_FreeCallback>
}
2400b46a:	bf00      	nop
2400b46c:	3708      	adds	r7, #8
2400b46e:	46bd      	mov	sp, r7
2400b470:	bd80      	pop	{r7, pc}
2400b472:	bf00      	nop
2400b474:	58026500 	.word	0x58026500

2400b478 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
2400b478:	b480      	push	{r7}
2400b47a:	b083      	sub	sp, #12
2400b47c:	af00      	add	r7, sp, #0
2400b47e:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
2400b480:	bf00      	nop
2400b482:	370c      	adds	r7, #12
2400b484:	46bd      	mov	sp, r7
2400b486:	f85d 7b04 	ldr.w	r7, [sp], #4
2400b48a:	4770      	bx	lr

2400b48c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
2400b48c:	b580      	push	{r7, lr}
2400b48e:	b082      	sub	sp, #8
2400b490:	af00      	add	r7, sp, #0
2400b492:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
2400b494:	687b      	ldr	r3, [r7, #4]
2400b496:	2b00      	cmp	r3, #0
2400b498:	d101      	bne.n	2400b49e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
2400b49a:	2301      	movs	r3, #1
2400b49c:	e07f      	b.n	2400b59e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
2400b49e:	687b      	ldr	r3, [r7, #4]
2400b4a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400b4a4:	b2db      	uxtb	r3, r3
2400b4a6:	2b00      	cmp	r3, #0
2400b4a8:	d106      	bne.n	2400b4b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
2400b4aa:	687b      	ldr	r3, [r7, #4]
2400b4ac:	2200      	movs	r2, #0
2400b4ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
2400b4b2:	6878      	ldr	r0, [r7, #4]
2400b4b4:	f000 f8a9 	bl	2400b60a <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
2400b4b8:	687b      	ldr	r3, [r7, #4]
2400b4ba:	2224      	movs	r2, #36	; 0x24
2400b4bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
2400b4c0:	687b      	ldr	r3, [r7, #4]
2400b4c2:	681b      	ldr	r3, [r3, #0]
2400b4c4:	681a      	ldr	r2, [r3, #0]
2400b4c6:	687b      	ldr	r3, [r7, #4]
2400b4c8:	681b      	ldr	r3, [r3, #0]
2400b4ca:	f022 0201 	bic.w	r2, r2, #1
2400b4ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
2400b4d0:	687b      	ldr	r3, [r7, #4]
2400b4d2:	685a      	ldr	r2, [r3, #4]
2400b4d4:	687b      	ldr	r3, [r7, #4]
2400b4d6:	681b      	ldr	r3, [r3, #0]
2400b4d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
2400b4dc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
2400b4de:	687b      	ldr	r3, [r7, #4]
2400b4e0:	681b      	ldr	r3, [r3, #0]
2400b4e2:	689a      	ldr	r2, [r3, #8]
2400b4e4:	687b      	ldr	r3, [r7, #4]
2400b4e6:	681b      	ldr	r3, [r3, #0]
2400b4e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
2400b4ec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
2400b4ee:	687b      	ldr	r3, [r7, #4]
2400b4f0:	68db      	ldr	r3, [r3, #12]
2400b4f2:	2b01      	cmp	r3, #1
2400b4f4:	d107      	bne.n	2400b506 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
2400b4f6:	687b      	ldr	r3, [r7, #4]
2400b4f8:	689a      	ldr	r2, [r3, #8]
2400b4fa:	687b      	ldr	r3, [r7, #4]
2400b4fc:	681b      	ldr	r3, [r3, #0]
2400b4fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2400b502:	609a      	str	r2, [r3, #8]
2400b504:	e006      	b.n	2400b514 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
2400b506:	687b      	ldr	r3, [r7, #4]
2400b508:	689a      	ldr	r2, [r3, #8]
2400b50a:	687b      	ldr	r3, [r7, #4]
2400b50c:	681b      	ldr	r3, [r3, #0]
2400b50e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
2400b512:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
2400b514:	687b      	ldr	r3, [r7, #4]
2400b516:	68db      	ldr	r3, [r3, #12]
2400b518:	2b02      	cmp	r3, #2
2400b51a:	d104      	bne.n	2400b526 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
2400b51c:	687b      	ldr	r3, [r7, #4]
2400b51e:	681b      	ldr	r3, [r3, #0]
2400b520:	f44f 6200 	mov.w	r2, #2048	; 0x800
2400b524:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
2400b526:	687b      	ldr	r3, [r7, #4]
2400b528:	681b      	ldr	r3, [r3, #0]
2400b52a:	6859      	ldr	r1, [r3, #4]
2400b52c:	687b      	ldr	r3, [r7, #4]
2400b52e:	681a      	ldr	r2, [r3, #0]
2400b530:	4b1d      	ldr	r3, [pc, #116]	; (2400b5a8 <HAL_I2C_Init+0x11c>)
2400b532:	430b      	orrs	r3, r1
2400b534:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
2400b536:	687b      	ldr	r3, [r7, #4]
2400b538:	681b      	ldr	r3, [r3, #0]
2400b53a:	68da      	ldr	r2, [r3, #12]
2400b53c:	687b      	ldr	r3, [r7, #4]
2400b53e:	681b      	ldr	r3, [r3, #0]
2400b540:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
2400b544:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
2400b546:	687b      	ldr	r3, [r7, #4]
2400b548:	691a      	ldr	r2, [r3, #16]
2400b54a:	687b      	ldr	r3, [r7, #4]
2400b54c:	695b      	ldr	r3, [r3, #20]
2400b54e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
2400b552:	687b      	ldr	r3, [r7, #4]
2400b554:	699b      	ldr	r3, [r3, #24]
2400b556:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
2400b558:	687b      	ldr	r3, [r7, #4]
2400b55a:	681b      	ldr	r3, [r3, #0]
2400b55c:	430a      	orrs	r2, r1
2400b55e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
2400b560:	687b      	ldr	r3, [r7, #4]
2400b562:	69d9      	ldr	r1, [r3, #28]
2400b564:	687b      	ldr	r3, [r7, #4]
2400b566:	6a1a      	ldr	r2, [r3, #32]
2400b568:	687b      	ldr	r3, [r7, #4]
2400b56a:	681b      	ldr	r3, [r3, #0]
2400b56c:	430a      	orrs	r2, r1
2400b56e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
2400b570:	687b      	ldr	r3, [r7, #4]
2400b572:	681b      	ldr	r3, [r3, #0]
2400b574:	681a      	ldr	r2, [r3, #0]
2400b576:	687b      	ldr	r3, [r7, #4]
2400b578:	681b      	ldr	r3, [r3, #0]
2400b57a:	f042 0201 	orr.w	r2, r2, #1
2400b57e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400b580:	687b      	ldr	r3, [r7, #4]
2400b582:	2200      	movs	r2, #0
2400b584:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
2400b586:	687b      	ldr	r3, [r7, #4]
2400b588:	2220      	movs	r2, #32
2400b58a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
2400b58e:	687b      	ldr	r3, [r7, #4]
2400b590:	2200      	movs	r2, #0
2400b592:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
2400b594:	687b      	ldr	r3, [r7, #4]
2400b596:	2200      	movs	r2, #0
2400b598:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
2400b59c:	2300      	movs	r3, #0
}
2400b59e:	4618      	mov	r0, r3
2400b5a0:	3708      	adds	r7, #8
2400b5a2:	46bd      	mov	sp, r7
2400b5a4:	bd80      	pop	{r7, pc}
2400b5a6:	bf00      	nop
2400b5a8:	02008000 	.word	0x02008000

2400b5ac <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
2400b5ac:	b580      	push	{r7, lr}
2400b5ae:	b082      	sub	sp, #8
2400b5b0:	af00      	add	r7, sp, #0
2400b5b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
2400b5b4:	687b      	ldr	r3, [r7, #4]
2400b5b6:	2b00      	cmp	r3, #0
2400b5b8:	d101      	bne.n	2400b5be <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
2400b5ba:	2301      	movs	r3, #1
2400b5bc:	e021      	b.n	2400b602 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
2400b5be:	687b      	ldr	r3, [r7, #4]
2400b5c0:	2224      	movs	r2, #36	; 0x24
2400b5c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
2400b5c6:	687b      	ldr	r3, [r7, #4]
2400b5c8:	681b      	ldr	r3, [r3, #0]
2400b5ca:	681a      	ldr	r2, [r3, #0]
2400b5cc:	687b      	ldr	r3, [r7, #4]
2400b5ce:	681b      	ldr	r3, [r3, #0]
2400b5d0:	f022 0201 	bic.w	r2, r2, #1
2400b5d4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
2400b5d6:	6878      	ldr	r0, [r7, #4]
2400b5d8:	f000 f821 	bl	2400b61e <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400b5dc:	687b      	ldr	r3, [r7, #4]
2400b5de:	2200      	movs	r2, #0
2400b5e0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
2400b5e2:	687b      	ldr	r3, [r7, #4]
2400b5e4:	2200      	movs	r2, #0
2400b5e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
2400b5ea:	687b      	ldr	r3, [r7, #4]
2400b5ec:	2200      	movs	r2, #0
2400b5ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
2400b5f0:	687b      	ldr	r3, [r7, #4]
2400b5f2:	2200      	movs	r2, #0
2400b5f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
2400b5f8:	687b      	ldr	r3, [r7, #4]
2400b5fa:	2200      	movs	r2, #0
2400b5fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
2400b600:	2300      	movs	r3, #0
}
2400b602:	4618      	mov	r0, r3
2400b604:	3708      	adds	r7, #8
2400b606:	46bd      	mov	sp, r7
2400b608:	bd80      	pop	{r7, pc}

2400b60a <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
2400b60a:	b480      	push	{r7}
2400b60c:	b083      	sub	sp, #12
2400b60e:	af00      	add	r7, sp, #0
2400b610:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
2400b612:	bf00      	nop
2400b614:	370c      	adds	r7, #12
2400b616:	46bd      	mov	sp, r7
2400b618:	f85d 7b04 	ldr.w	r7, [sp], #4
2400b61c:	4770      	bx	lr

2400b61e <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
2400b61e:	b480      	push	{r7}
2400b620:	b083      	sub	sp, #12
2400b622:	af00      	add	r7, sp, #0
2400b624:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
2400b626:	bf00      	nop
2400b628:	370c      	adds	r7, #12
2400b62a:	46bd      	mov	sp, r7
2400b62c:	f85d 7b04 	ldr.w	r7, [sp], #4
2400b630:	4770      	bx	lr
	...

2400b634 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
2400b634:	b580      	push	{r7, lr}
2400b636:	b088      	sub	sp, #32
2400b638:	af02      	add	r7, sp, #8
2400b63a:	60f8      	str	r0, [r7, #12]
2400b63c:	607a      	str	r2, [r7, #4]
2400b63e:	461a      	mov	r2, r3
2400b640:	460b      	mov	r3, r1
2400b642:	817b      	strh	r3, [r7, #10]
2400b644:	4613      	mov	r3, r2
2400b646:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
2400b648:	68fb      	ldr	r3, [r7, #12]
2400b64a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400b64e:	b2db      	uxtb	r3, r3
2400b650:	2b20      	cmp	r3, #32
2400b652:	f040 80da 	bne.w	2400b80a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
2400b656:	68fb      	ldr	r3, [r7, #12]
2400b658:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400b65c:	2b01      	cmp	r3, #1
2400b65e:	d101      	bne.n	2400b664 <HAL_I2C_Master_Transmit+0x30>
2400b660:	2302      	movs	r3, #2
2400b662:	e0d3      	b.n	2400b80c <HAL_I2C_Master_Transmit+0x1d8>
2400b664:	68fb      	ldr	r3, [r7, #12]
2400b666:	2201      	movs	r2, #1
2400b668:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
2400b66c:	f7f7 fd1a 	bl	240030a4 <HAL_GetTick>
2400b670:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
2400b672:	697b      	ldr	r3, [r7, #20]
2400b674:	9300      	str	r3, [sp, #0]
2400b676:	2319      	movs	r3, #25
2400b678:	2201      	movs	r2, #1
2400b67a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
2400b67e:	68f8      	ldr	r0, [r7, #12]
2400b680:	f004 ffc0 	bl	24010604 <I2C_WaitOnFlagUntilTimeout>
2400b684:	4603      	mov	r3, r0
2400b686:	2b00      	cmp	r3, #0
2400b688:	d001      	beq.n	2400b68e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
2400b68a:	2301      	movs	r3, #1
2400b68c:	e0be      	b.n	2400b80c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
2400b68e:	68fb      	ldr	r3, [r7, #12]
2400b690:	2221      	movs	r2, #33	; 0x21
2400b692:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
2400b696:	68fb      	ldr	r3, [r7, #12]
2400b698:	2210      	movs	r2, #16
2400b69a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400b69e:	68fb      	ldr	r3, [r7, #12]
2400b6a0:	2200      	movs	r2, #0
2400b6a2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
2400b6a4:	68fb      	ldr	r3, [r7, #12]
2400b6a6:	687a      	ldr	r2, [r7, #4]
2400b6a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
2400b6aa:	68fb      	ldr	r3, [r7, #12]
2400b6ac:	893a      	ldrh	r2, [r7, #8]
2400b6ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
2400b6b0:	68fb      	ldr	r3, [r7, #12]
2400b6b2:	2200      	movs	r2, #0
2400b6b4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400b6b6:	68fb      	ldr	r3, [r7, #12]
2400b6b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400b6ba:	b29b      	uxth	r3, r3
2400b6bc:	2bff      	cmp	r3, #255	; 0xff
2400b6be:	d90e      	bls.n	2400b6de <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400b6c0:	68fb      	ldr	r3, [r7, #12]
2400b6c2:	22ff      	movs	r2, #255	; 0xff
2400b6c4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
2400b6c6:	68fb      	ldr	r3, [r7, #12]
2400b6c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400b6ca:	b2da      	uxtb	r2, r3
2400b6cc:	8979      	ldrh	r1, [r7, #10]
2400b6ce:	4b51      	ldr	r3, [pc, #324]	; (2400b814 <HAL_I2C_Master_Transmit+0x1e0>)
2400b6d0:	9300      	str	r3, [sp, #0]
2400b6d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400b6d6:	68f8      	ldr	r0, [r7, #12]
2400b6d8:	f005 f9d0 	bl	24010a7c <I2C_TransferConfig>
2400b6dc:	e06c      	b.n	2400b7b8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2400b6de:	68fb      	ldr	r3, [r7, #12]
2400b6e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400b6e2:	b29a      	uxth	r2, r3
2400b6e4:	68fb      	ldr	r3, [r7, #12]
2400b6e6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
2400b6e8:	68fb      	ldr	r3, [r7, #12]
2400b6ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400b6ec:	b2da      	uxtb	r2, r3
2400b6ee:	8979      	ldrh	r1, [r7, #10]
2400b6f0:	4b48      	ldr	r3, [pc, #288]	; (2400b814 <HAL_I2C_Master_Transmit+0x1e0>)
2400b6f2:	9300      	str	r3, [sp, #0]
2400b6f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400b6f8:	68f8      	ldr	r0, [r7, #12]
2400b6fa:	f005 f9bf 	bl	24010a7c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
2400b6fe:	e05b      	b.n	2400b7b8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
2400b700:	697a      	ldr	r2, [r7, #20]
2400b702:	6a39      	ldr	r1, [r7, #32]
2400b704:	68f8      	ldr	r0, [r7, #12]
2400b706:	f004 ffcc 	bl	240106a2 <I2C_WaitOnTXISFlagUntilTimeout>
2400b70a:	4603      	mov	r3, r0
2400b70c:	2b00      	cmp	r3, #0
2400b70e:	d001      	beq.n	2400b714 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
2400b710:	2301      	movs	r3, #1
2400b712:	e07b      	b.n	2400b80c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
2400b714:	68fb      	ldr	r3, [r7, #12]
2400b716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400b718:	781a      	ldrb	r2, [r3, #0]
2400b71a:	68fb      	ldr	r3, [r7, #12]
2400b71c:	681b      	ldr	r3, [r3, #0]
2400b71e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
2400b720:	68fb      	ldr	r3, [r7, #12]
2400b722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400b724:	1c5a      	adds	r2, r3, #1
2400b726:	68fb      	ldr	r3, [r7, #12]
2400b728:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
2400b72a:	68fb      	ldr	r3, [r7, #12]
2400b72c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400b72e:	b29b      	uxth	r3, r3
2400b730:	3b01      	subs	r3, #1
2400b732:	b29a      	uxth	r2, r3
2400b734:	68fb      	ldr	r3, [r7, #12]
2400b736:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
2400b738:	68fb      	ldr	r3, [r7, #12]
2400b73a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400b73c:	3b01      	subs	r3, #1
2400b73e:	b29a      	uxth	r2, r3
2400b740:	68fb      	ldr	r3, [r7, #12]
2400b742:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
2400b744:	68fb      	ldr	r3, [r7, #12]
2400b746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400b748:	b29b      	uxth	r3, r3
2400b74a:	2b00      	cmp	r3, #0
2400b74c:	d034      	beq.n	2400b7b8 <HAL_I2C_Master_Transmit+0x184>
2400b74e:	68fb      	ldr	r3, [r7, #12]
2400b750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400b752:	2b00      	cmp	r3, #0
2400b754:	d130      	bne.n	2400b7b8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
2400b756:	697b      	ldr	r3, [r7, #20]
2400b758:	9300      	str	r3, [sp, #0]
2400b75a:	6a3b      	ldr	r3, [r7, #32]
2400b75c:	2200      	movs	r2, #0
2400b75e:	2180      	movs	r1, #128	; 0x80
2400b760:	68f8      	ldr	r0, [r7, #12]
2400b762:	f004 ff4f 	bl	24010604 <I2C_WaitOnFlagUntilTimeout>
2400b766:	4603      	mov	r3, r0
2400b768:	2b00      	cmp	r3, #0
2400b76a:	d001      	beq.n	2400b770 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
2400b76c:	2301      	movs	r3, #1
2400b76e:	e04d      	b.n	2400b80c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400b770:	68fb      	ldr	r3, [r7, #12]
2400b772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400b774:	b29b      	uxth	r3, r3
2400b776:	2bff      	cmp	r3, #255	; 0xff
2400b778:	d90e      	bls.n	2400b798 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
2400b77a:	68fb      	ldr	r3, [r7, #12]
2400b77c:	22ff      	movs	r2, #255	; 0xff
2400b77e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
2400b780:	68fb      	ldr	r3, [r7, #12]
2400b782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400b784:	b2da      	uxtb	r2, r3
2400b786:	8979      	ldrh	r1, [r7, #10]
2400b788:	2300      	movs	r3, #0
2400b78a:	9300      	str	r3, [sp, #0]
2400b78c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400b790:	68f8      	ldr	r0, [r7, #12]
2400b792:	f005 f973 	bl	24010a7c <I2C_TransferConfig>
2400b796:	e00f      	b.n	2400b7b8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
2400b798:	68fb      	ldr	r3, [r7, #12]
2400b79a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400b79c:	b29a      	uxth	r2, r3
2400b79e:	68fb      	ldr	r3, [r7, #12]
2400b7a0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
2400b7a2:	68fb      	ldr	r3, [r7, #12]
2400b7a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400b7a6:	b2da      	uxtb	r2, r3
2400b7a8:	8979      	ldrh	r1, [r7, #10]
2400b7aa:	2300      	movs	r3, #0
2400b7ac:	9300      	str	r3, [sp, #0]
2400b7ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400b7b2:	68f8      	ldr	r0, [r7, #12]
2400b7b4:	f005 f962 	bl	24010a7c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
2400b7b8:	68fb      	ldr	r3, [r7, #12]
2400b7ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400b7bc:	b29b      	uxth	r3, r3
2400b7be:	2b00      	cmp	r3, #0
2400b7c0:	d19e      	bne.n	2400b700 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
2400b7c2:	697a      	ldr	r2, [r7, #20]
2400b7c4:	6a39      	ldr	r1, [r7, #32]
2400b7c6:	68f8      	ldr	r0, [r7, #12]
2400b7c8:	f004 ffb2 	bl	24010730 <I2C_WaitOnSTOPFlagUntilTimeout>
2400b7cc:	4603      	mov	r3, r0
2400b7ce:	2b00      	cmp	r3, #0
2400b7d0:	d001      	beq.n	2400b7d6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
2400b7d2:	2301      	movs	r3, #1
2400b7d4:	e01a      	b.n	2400b80c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2400b7d6:	68fb      	ldr	r3, [r7, #12]
2400b7d8:	681b      	ldr	r3, [r3, #0]
2400b7da:	2220      	movs	r2, #32
2400b7dc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
2400b7de:	68fb      	ldr	r3, [r7, #12]
2400b7e0:	681b      	ldr	r3, [r3, #0]
2400b7e2:	6859      	ldr	r1, [r3, #4]
2400b7e4:	68fb      	ldr	r3, [r7, #12]
2400b7e6:	681a      	ldr	r2, [r3, #0]
2400b7e8:	4b0b      	ldr	r3, [pc, #44]	; (2400b818 <HAL_I2C_Master_Transmit+0x1e4>)
2400b7ea:	400b      	ands	r3, r1
2400b7ec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
2400b7ee:	68fb      	ldr	r3, [r7, #12]
2400b7f0:	2220      	movs	r2, #32
2400b7f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
2400b7f6:	68fb      	ldr	r3, [r7, #12]
2400b7f8:	2200      	movs	r2, #0
2400b7fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400b7fe:	68fb      	ldr	r3, [r7, #12]
2400b800:	2200      	movs	r2, #0
2400b802:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
2400b806:	2300      	movs	r3, #0
2400b808:	e000      	b.n	2400b80c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
2400b80a:	2302      	movs	r3, #2
  }
}
2400b80c:	4618      	mov	r0, r3
2400b80e:	3718      	adds	r7, #24
2400b810:	46bd      	mov	sp, r7
2400b812:	bd80      	pop	{r7, pc}
2400b814:	80002000 	.word	0x80002000
2400b818:	fe00e800 	.word	0xfe00e800

2400b81c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
2400b81c:	b580      	push	{r7, lr}
2400b81e:	b088      	sub	sp, #32
2400b820:	af02      	add	r7, sp, #8
2400b822:	60f8      	str	r0, [r7, #12]
2400b824:	607a      	str	r2, [r7, #4]
2400b826:	461a      	mov	r2, r3
2400b828:	460b      	mov	r3, r1
2400b82a:	817b      	strh	r3, [r7, #10]
2400b82c:	4613      	mov	r3, r2
2400b82e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
2400b830:	68fb      	ldr	r3, [r7, #12]
2400b832:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400b836:	b2db      	uxtb	r3, r3
2400b838:	2b20      	cmp	r3, #32
2400b83a:	f040 80db 	bne.w	2400b9f4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
2400b83e:	68fb      	ldr	r3, [r7, #12]
2400b840:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400b844:	2b01      	cmp	r3, #1
2400b846:	d101      	bne.n	2400b84c <HAL_I2C_Master_Receive+0x30>
2400b848:	2302      	movs	r3, #2
2400b84a:	e0d4      	b.n	2400b9f6 <HAL_I2C_Master_Receive+0x1da>
2400b84c:	68fb      	ldr	r3, [r7, #12]
2400b84e:	2201      	movs	r2, #1
2400b850:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
2400b854:	f7f7 fc26 	bl	240030a4 <HAL_GetTick>
2400b858:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
2400b85a:	697b      	ldr	r3, [r7, #20]
2400b85c:	9300      	str	r3, [sp, #0]
2400b85e:	2319      	movs	r3, #25
2400b860:	2201      	movs	r2, #1
2400b862:	f44f 4100 	mov.w	r1, #32768	; 0x8000
2400b866:	68f8      	ldr	r0, [r7, #12]
2400b868:	f004 fecc 	bl	24010604 <I2C_WaitOnFlagUntilTimeout>
2400b86c:	4603      	mov	r3, r0
2400b86e:	2b00      	cmp	r3, #0
2400b870:	d001      	beq.n	2400b876 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
2400b872:	2301      	movs	r3, #1
2400b874:	e0bf      	b.n	2400b9f6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
2400b876:	68fb      	ldr	r3, [r7, #12]
2400b878:	2222      	movs	r2, #34	; 0x22
2400b87a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
2400b87e:	68fb      	ldr	r3, [r7, #12]
2400b880:	2210      	movs	r2, #16
2400b882:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400b886:	68fb      	ldr	r3, [r7, #12]
2400b888:	2200      	movs	r2, #0
2400b88a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
2400b88c:	68fb      	ldr	r3, [r7, #12]
2400b88e:	687a      	ldr	r2, [r7, #4]
2400b890:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
2400b892:	68fb      	ldr	r3, [r7, #12]
2400b894:	893a      	ldrh	r2, [r7, #8]
2400b896:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
2400b898:	68fb      	ldr	r3, [r7, #12]
2400b89a:	2200      	movs	r2, #0
2400b89c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400b89e:	68fb      	ldr	r3, [r7, #12]
2400b8a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400b8a2:	b29b      	uxth	r3, r3
2400b8a4:	2bff      	cmp	r3, #255	; 0xff
2400b8a6:	d90e      	bls.n	2400b8c6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400b8a8:	68fb      	ldr	r3, [r7, #12]
2400b8aa:	22ff      	movs	r2, #255	; 0xff
2400b8ac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
2400b8ae:	68fb      	ldr	r3, [r7, #12]
2400b8b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400b8b2:	b2da      	uxtb	r2, r3
2400b8b4:	8979      	ldrh	r1, [r7, #10]
2400b8b6:	4b52      	ldr	r3, [pc, #328]	; (2400ba00 <HAL_I2C_Master_Receive+0x1e4>)
2400b8b8:	9300      	str	r3, [sp, #0]
2400b8ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400b8be:	68f8      	ldr	r0, [r7, #12]
2400b8c0:	f005 f8dc 	bl	24010a7c <I2C_TransferConfig>
2400b8c4:	e06d      	b.n	2400b9a2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2400b8c6:	68fb      	ldr	r3, [r7, #12]
2400b8c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400b8ca:	b29a      	uxth	r2, r3
2400b8cc:	68fb      	ldr	r3, [r7, #12]
2400b8ce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
2400b8d0:	68fb      	ldr	r3, [r7, #12]
2400b8d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400b8d4:	b2da      	uxtb	r2, r3
2400b8d6:	8979      	ldrh	r1, [r7, #10]
2400b8d8:	4b49      	ldr	r3, [pc, #292]	; (2400ba00 <HAL_I2C_Master_Receive+0x1e4>)
2400b8da:	9300      	str	r3, [sp, #0]
2400b8dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400b8e0:	68f8      	ldr	r0, [r7, #12]
2400b8e2:	f005 f8cb 	bl	24010a7c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
2400b8e6:	e05c      	b.n	2400b9a2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
2400b8e8:	697a      	ldr	r2, [r7, #20]
2400b8ea:	6a39      	ldr	r1, [r7, #32]
2400b8ec:	68f8      	ldr	r0, [r7, #12]
2400b8ee:	f004 ff63 	bl	240107b8 <I2C_WaitOnRXNEFlagUntilTimeout>
2400b8f2:	4603      	mov	r3, r0
2400b8f4:	2b00      	cmp	r3, #0
2400b8f6:	d001      	beq.n	2400b8fc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
2400b8f8:	2301      	movs	r3, #1
2400b8fa:	e07c      	b.n	2400b9f6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
2400b8fc:	68fb      	ldr	r3, [r7, #12]
2400b8fe:	681b      	ldr	r3, [r3, #0]
2400b900:	6a5a      	ldr	r2, [r3, #36]	; 0x24
2400b902:	68fb      	ldr	r3, [r7, #12]
2400b904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400b906:	b2d2      	uxtb	r2, r2
2400b908:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
2400b90a:	68fb      	ldr	r3, [r7, #12]
2400b90c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400b90e:	1c5a      	adds	r2, r3, #1
2400b910:	68fb      	ldr	r3, [r7, #12]
2400b912:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
2400b914:	68fb      	ldr	r3, [r7, #12]
2400b916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400b918:	3b01      	subs	r3, #1
2400b91a:	b29a      	uxth	r2, r3
2400b91c:	68fb      	ldr	r3, [r7, #12]
2400b91e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
2400b920:	68fb      	ldr	r3, [r7, #12]
2400b922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400b924:	b29b      	uxth	r3, r3
2400b926:	3b01      	subs	r3, #1
2400b928:	b29a      	uxth	r2, r3
2400b92a:	68fb      	ldr	r3, [r7, #12]
2400b92c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
2400b92e:	68fb      	ldr	r3, [r7, #12]
2400b930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400b932:	b29b      	uxth	r3, r3
2400b934:	2b00      	cmp	r3, #0
2400b936:	d034      	beq.n	2400b9a2 <HAL_I2C_Master_Receive+0x186>
2400b938:	68fb      	ldr	r3, [r7, #12]
2400b93a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400b93c:	2b00      	cmp	r3, #0
2400b93e:	d130      	bne.n	2400b9a2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
2400b940:	697b      	ldr	r3, [r7, #20]
2400b942:	9300      	str	r3, [sp, #0]
2400b944:	6a3b      	ldr	r3, [r7, #32]
2400b946:	2200      	movs	r2, #0
2400b948:	2180      	movs	r1, #128	; 0x80
2400b94a:	68f8      	ldr	r0, [r7, #12]
2400b94c:	f004 fe5a 	bl	24010604 <I2C_WaitOnFlagUntilTimeout>
2400b950:	4603      	mov	r3, r0
2400b952:	2b00      	cmp	r3, #0
2400b954:	d001      	beq.n	2400b95a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
2400b956:	2301      	movs	r3, #1
2400b958:	e04d      	b.n	2400b9f6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400b95a:	68fb      	ldr	r3, [r7, #12]
2400b95c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400b95e:	b29b      	uxth	r3, r3
2400b960:	2bff      	cmp	r3, #255	; 0xff
2400b962:	d90e      	bls.n	2400b982 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
2400b964:	68fb      	ldr	r3, [r7, #12]
2400b966:	22ff      	movs	r2, #255	; 0xff
2400b968:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
2400b96a:	68fb      	ldr	r3, [r7, #12]
2400b96c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400b96e:	b2da      	uxtb	r2, r3
2400b970:	8979      	ldrh	r1, [r7, #10]
2400b972:	2300      	movs	r3, #0
2400b974:	9300      	str	r3, [sp, #0]
2400b976:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400b97a:	68f8      	ldr	r0, [r7, #12]
2400b97c:	f005 f87e 	bl	24010a7c <I2C_TransferConfig>
2400b980:	e00f      	b.n	2400b9a2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
2400b982:	68fb      	ldr	r3, [r7, #12]
2400b984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400b986:	b29a      	uxth	r2, r3
2400b988:	68fb      	ldr	r3, [r7, #12]
2400b98a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
2400b98c:	68fb      	ldr	r3, [r7, #12]
2400b98e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400b990:	b2da      	uxtb	r2, r3
2400b992:	8979      	ldrh	r1, [r7, #10]
2400b994:	2300      	movs	r3, #0
2400b996:	9300      	str	r3, [sp, #0]
2400b998:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400b99c:	68f8      	ldr	r0, [r7, #12]
2400b99e:	f005 f86d 	bl	24010a7c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
2400b9a2:	68fb      	ldr	r3, [r7, #12]
2400b9a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400b9a6:	b29b      	uxth	r3, r3
2400b9a8:	2b00      	cmp	r3, #0
2400b9aa:	d19d      	bne.n	2400b8e8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
2400b9ac:	697a      	ldr	r2, [r7, #20]
2400b9ae:	6a39      	ldr	r1, [r7, #32]
2400b9b0:	68f8      	ldr	r0, [r7, #12]
2400b9b2:	f004 febd 	bl	24010730 <I2C_WaitOnSTOPFlagUntilTimeout>
2400b9b6:	4603      	mov	r3, r0
2400b9b8:	2b00      	cmp	r3, #0
2400b9ba:	d001      	beq.n	2400b9c0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
2400b9bc:	2301      	movs	r3, #1
2400b9be:	e01a      	b.n	2400b9f6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2400b9c0:	68fb      	ldr	r3, [r7, #12]
2400b9c2:	681b      	ldr	r3, [r3, #0]
2400b9c4:	2220      	movs	r2, #32
2400b9c6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
2400b9c8:	68fb      	ldr	r3, [r7, #12]
2400b9ca:	681b      	ldr	r3, [r3, #0]
2400b9cc:	6859      	ldr	r1, [r3, #4]
2400b9ce:	68fb      	ldr	r3, [r7, #12]
2400b9d0:	681a      	ldr	r2, [r3, #0]
2400b9d2:	4b0c      	ldr	r3, [pc, #48]	; (2400ba04 <HAL_I2C_Master_Receive+0x1e8>)
2400b9d4:	400b      	ands	r3, r1
2400b9d6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
2400b9d8:	68fb      	ldr	r3, [r7, #12]
2400b9da:	2220      	movs	r2, #32
2400b9dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
2400b9e0:	68fb      	ldr	r3, [r7, #12]
2400b9e2:	2200      	movs	r2, #0
2400b9e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400b9e8:	68fb      	ldr	r3, [r7, #12]
2400b9ea:	2200      	movs	r2, #0
2400b9ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
2400b9f0:	2300      	movs	r3, #0
2400b9f2:	e000      	b.n	2400b9f6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
2400b9f4:	2302      	movs	r3, #2
  }
}
2400b9f6:	4618      	mov	r0, r3
2400b9f8:	3718      	adds	r7, #24
2400b9fa:	46bd      	mov	sp, r7
2400b9fc:	bd80      	pop	{r7, pc}
2400b9fe:	bf00      	nop
2400ba00:	80002400 	.word	0x80002400
2400ba04:	fe00e800 	.word	0xfe00e800

2400ba08 <HAL_I2C_Slave_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
2400ba08:	b580      	push	{r7, lr}
2400ba0a:	b088      	sub	sp, #32
2400ba0c:	af02      	add	r7, sp, #8
2400ba0e:	60f8      	str	r0, [r7, #12]
2400ba10:	60b9      	str	r1, [r7, #8]
2400ba12:	603b      	str	r3, [r7, #0]
2400ba14:	4613      	mov	r3, r2
2400ba16:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
2400ba18:	68fb      	ldr	r3, [r7, #12]
2400ba1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400ba1e:	b2db      	uxtb	r3, r3
2400ba20:	2b20      	cmp	r3, #32
2400ba22:	f040 8120 	bne.w	2400bc66 <HAL_I2C_Slave_Transmit+0x25e>
  {
    if ((pData == NULL) || (Size == 0U))
2400ba26:	68bb      	ldr	r3, [r7, #8]
2400ba28:	2b00      	cmp	r3, #0
2400ba2a:	d002      	beq.n	2400ba32 <HAL_I2C_Slave_Transmit+0x2a>
2400ba2c:	88fb      	ldrh	r3, [r7, #6]
2400ba2e:	2b00      	cmp	r3, #0
2400ba30:	d105      	bne.n	2400ba3e <HAL_I2C_Slave_Transmit+0x36>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
2400ba32:	68fb      	ldr	r3, [r7, #12]
2400ba34:	f44f 7200 	mov.w	r2, #512	; 0x200
2400ba38:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
2400ba3a:	2301      	movs	r3, #1
2400ba3c:	e114      	b.n	2400bc68 <HAL_I2C_Slave_Transmit+0x260>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
2400ba3e:	68fb      	ldr	r3, [r7, #12]
2400ba40:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400ba44:	2b01      	cmp	r3, #1
2400ba46:	d101      	bne.n	2400ba4c <HAL_I2C_Slave_Transmit+0x44>
2400ba48:	2302      	movs	r3, #2
2400ba4a:	e10d      	b.n	2400bc68 <HAL_I2C_Slave_Transmit+0x260>
2400ba4c:	68fb      	ldr	r3, [r7, #12]
2400ba4e:	2201      	movs	r2, #1
2400ba50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
2400ba54:	f7f7 fb26 	bl	240030a4 <HAL_GetTick>
2400ba58:	6178      	str	r0, [r7, #20]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
2400ba5a:	68fb      	ldr	r3, [r7, #12]
2400ba5c:	2221      	movs	r2, #33	; 0x21
2400ba5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
2400ba62:	68fb      	ldr	r3, [r7, #12]
2400ba64:	2220      	movs	r2, #32
2400ba66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400ba6a:	68fb      	ldr	r3, [r7, #12]
2400ba6c:	2200      	movs	r2, #0
2400ba6e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
2400ba70:	68fb      	ldr	r3, [r7, #12]
2400ba72:	68ba      	ldr	r2, [r7, #8]
2400ba74:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
2400ba76:	68fb      	ldr	r3, [r7, #12]
2400ba78:	88fa      	ldrh	r2, [r7, #6]
2400ba7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
2400ba7c:	68fb      	ldr	r3, [r7, #12]
2400ba7e:	2200      	movs	r2, #0
2400ba80:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
2400ba82:	68fb      	ldr	r3, [r7, #12]
2400ba84:	681b      	ldr	r3, [r3, #0]
2400ba86:	685a      	ldr	r2, [r3, #4]
2400ba88:	68fb      	ldr	r3, [r7, #12]
2400ba8a:	681b      	ldr	r3, [r3, #0]
2400ba8c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
2400ba90:	605a      	str	r2, [r3, #4]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
2400ba92:	697b      	ldr	r3, [r7, #20]
2400ba94:	9300      	str	r3, [sp, #0]
2400ba96:	683b      	ldr	r3, [r7, #0]
2400ba98:	2200      	movs	r2, #0
2400ba9a:	2108      	movs	r1, #8
2400ba9c:	68f8      	ldr	r0, [r7, #12]
2400ba9e:	f004 fdb1 	bl	24010604 <I2C_WaitOnFlagUntilTimeout>
2400baa2:	4603      	mov	r3, r0
2400baa4:	2b00      	cmp	r3, #0
2400baa6:	d009      	beq.n	2400babc <HAL_I2C_Slave_Transmit+0xb4>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
2400baa8:	68fb      	ldr	r3, [r7, #12]
2400baaa:	681b      	ldr	r3, [r3, #0]
2400baac:	685a      	ldr	r2, [r3, #4]
2400baae:	68fb      	ldr	r3, [r7, #12]
2400bab0:	681b      	ldr	r3, [r3, #0]
2400bab2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2400bab6:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
2400bab8:	2301      	movs	r3, #1
2400baba:	e0d5      	b.n	2400bc68 <HAL_I2C_Slave_Transmit+0x260>
    }

    /* Preload TX data if no stretch enable */
    if (hi2c->Init.NoStretchMode == I2C_NOSTRETCH_ENABLE)
2400babc:	68fb      	ldr	r3, [r7, #12]
2400babe:	6a1b      	ldr	r3, [r3, #32]
2400bac0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
2400bac4:	d111      	bne.n	2400baea <HAL_I2C_Slave_Transmit+0xe2>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
2400bac6:	68fb      	ldr	r3, [r7, #12]
2400bac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400baca:	781a      	ldrb	r2, [r3, #0]
2400bacc:	68fb      	ldr	r3, [r7, #12]
2400bace:	681b      	ldr	r3, [r3, #0]
2400bad0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
2400bad2:	68fb      	ldr	r3, [r7, #12]
2400bad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400bad6:	1c5a      	adds	r2, r3, #1
2400bad8:	68fb      	ldr	r3, [r7, #12]
2400bada:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
2400badc:	68fb      	ldr	r3, [r7, #12]
2400bade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400bae0:	b29b      	uxth	r3, r3
2400bae2:	3b01      	subs	r3, #1
2400bae4:	b29a      	uxth	r2, r3
2400bae6:	68fb      	ldr	r3, [r7, #12]
2400bae8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
2400baea:	68fb      	ldr	r3, [r7, #12]
2400baec:	681b      	ldr	r3, [r3, #0]
2400baee:	2208      	movs	r2, #8
2400baf0:	61da      	str	r2, [r3, #28]

    /* If 10bit addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
2400baf2:	68fb      	ldr	r3, [r7, #12]
2400baf4:	68db      	ldr	r3, [r3, #12]
2400baf6:	2b02      	cmp	r3, #2
2400baf8:	d118      	bne.n	2400bb2c <HAL_I2C_Slave_Transmit+0x124>
    {
      /* Wait until ADDR flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
2400bafa:	697b      	ldr	r3, [r7, #20]
2400bafc:	9300      	str	r3, [sp, #0]
2400bafe:	683b      	ldr	r3, [r7, #0]
2400bb00:	2200      	movs	r2, #0
2400bb02:	2108      	movs	r1, #8
2400bb04:	68f8      	ldr	r0, [r7, #12]
2400bb06:	f004 fd7d 	bl	24010604 <I2C_WaitOnFlagUntilTimeout>
2400bb0a:	4603      	mov	r3, r0
2400bb0c:	2b00      	cmp	r3, #0
2400bb0e:	d009      	beq.n	2400bb24 <HAL_I2C_Slave_Transmit+0x11c>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
2400bb10:	68fb      	ldr	r3, [r7, #12]
2400bb12:	681b      	ldr	r3, [r3, #0]
2400bb14:	685a      	ldr	r2, [r3, #4]
2400bb16:	68fb      	ldr	r3, [r7, #12]
2400bb18:	681b      	ldr	r3, [r3, #0]
2400bb1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2400bb1e:	605a      	str	r2, [r3, #4]
        return HAL_ERROR;
2400bb20:	2301      	movs	r3, #1
2400bb22:	e0a1      	b.n	2400bc68 <HAL_I2C_Slave_Transmit+0x260>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
2400bb24:	68fb      	ldr	r3, [r7, #12]
2400bb26:	681b      	ldr	r3, [r3, #0]
2400bb28:	2208      	movs	r2, #8
2400bb2a:	61da      	str	r2, [r3, #28]
    }

    /* Wait until DIR flag is set Transmitter mode */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_DIR, RESET, Timeout, tickstart) != HAL_OK)
2400bb2c:	697b      	ldr	r3, [r7, #20]
2400bb2e:	9300      	str	r3, [sp, #0]
2400bb30:	683b      	ldr	r3, [r7, #0]
2400bb32:	2200      	movs	r2, #0
2400bb34:	f44f 3180 	mov.w	r1, #65536	; 0x10000
2400bb38:	68f8      	ldr	r0, [r7, #12]
2400bb3a:	f004 fd63 	bl	24010604 <I2C_WaitOnFlagUntilTimeout>
2400bb3e:	4603      	mov	r3, r0
2400bb40:	2b00      	cmp	r3, #0
2400bb42:	d02d      	beq.n	2400bba0 <HAL_I2C_Slave_Transmit+0x198>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
2400bb44:	68fb      	ldr	r3, [r7, #12]
2400bb46:	681b      	ldr	r3, [r3, #0]
2400bb48:	685a      	ldr	r2, [r3, #4]
2400bb4a:	68fb      	ldr	r3, [r7, #12]
2400bb4c:	681b      	ldr	r3, [r3, #0]
2400bb4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2400bb52:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
2400bb54:	2301      	movs	r3, #1
2400bb56:	e087      	b.n	2400bc68 <HAL_I2C_Slave_Transmit+0x260>
    }

    while (hi2c->XferCount > 0U)
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
2400bb58:	697a      	ldr	r2, [r7, #20]
2400bb5a:	6839      	ldr	r1, [r7, #0]
2400bb5c:	68f8      	ldr	r0, [r7, #12]
2400bb5e:	f004 fda0 	bl	240106a2 <I2C_WaitOnTXISFlagUntilTimeout>
2400bb62:	4603      	mov	r3, r0
2400bb64:	2b00      	cmp	r3, #0
2400bb66:	d009      	beq.n	2400bb7c <HAL_I2C_Slave_Transmit+0x174>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
2400bb68:	68fb      	ldr	r3, [r7, #12]
2400bb6a:	681b      	ldr	r3, [r3, #0]
2400bb6c:	685a      	ldr	r2, [r3, #4]
2400bb6e:	68fb      	ldr	r3, [r7, #12]
2400bb70:	681b      	ldr	r3, [r3, #0]
2400bb72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2400bb76:	605a      	str	r2, [r3, #4]
        return HAL_ERROR;
2400bb78:	2301      	movs	r3, #1
2400bb7a:	e075      	b.n	2400bc68 <HAL_I2C_Slave_Transmit+0x260>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
2400bb7c:	68fb      	ldr	r3, [r7, #12]
2400bb7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400bb80:	781a      	ldrb	r2, [r3, #0]
2400bb82:	68fb      	ldr	r3, [r7, #12]
2400bb84:	681b      	ldr	r3, [r3, #0]
2400bb86:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
2400bb88:	68fb      	ldr	r3, [r7, #12]
2400bb8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400bb8c:	1c5a      	adds	r2, r3, #1
2400bb8e:	68fb      	ldr	r3, [r7, #12]
2400bb90:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
2400bb92:	68fb      	ldr	r3, [r7, #12]
2400bb94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400bb96:	b29b      	uxth	r3, r3
2400bb98:	3b01      	subs	r3, #1
2400bb9a:	b29a      	uxth	r2, r3
2400bb9c:	68fb      	ldr	r3, [r7, #12]
2400bb9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferCount > 0U)
2400bba0:	68fb      	ldr	r3, [r7, #12]
2400bba2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400bba4:	b29b      	uxth	r3, r3
2400bba6:	2b00      	cmp	r3, #0
2400bba8:	d1d6      	bne.n	2400bb58 <HAL_I2C_Slave_Transmit+0x150>
    }

    /* Wait until AF flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_AF, RESET, Timeout, tickstart) != HAL_OK)
2400bbaa:	697b      	ldr	r3, [r7, #20]
2400bbac:	9300      	str	r3, [sp, #0]
2400bbae:	683b      	ldr	r3, [r7, #0]
2400bbb0:	2200      	movs	r2, #0
2400bbb2:	2110      	movs	r1, #16
2400bbb4:	68f8      	ldr	r0, [r7, #12]
2400bbb6:	f004 fd25 	bl	24010604 <I2C_WaitOnFlagUntilTimeout>
2400bbba:	4603      	mov	r3, r0
2400bbbc:	2b00      	cmp	r3, #0
2400bbbe:	d009      	beq.n	2400bbd4 <HAL_I2C_Slave_Transmit+0x1cc>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
2400bbc0:	68fb      	ldr	r3, [r7, #12]
2400bbc2:	681b      	ldr	r3, [r3, #0]
2400bbc4:	685a      	ldr	r2, [r3, #4]
2400bbc6:	68fb      	ldr	r3, [r7, #12]
2400bbc8:	681b      	ldr	r3, [r3, #0]
2400bbca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2400bbce:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
2400bbd0:	2301      	movs	r3, #1
2400bbd2:	e049      	b.n	2400bc68 <HAL_I2C_Slave_Transmit+0x260>
    }

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
2400bbd4:	68f8      	ldr	r0, [r7, #12]
2400bbd6:	f004 fa30 	bl	2401003a <I2C_Flush_TXDR>

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400bbda:	68fb      	ldr	r3, [r7, #12]
2400bbdc:	681b      	ldr	r3, [r3, #0]
2400bbde:	2210      	movs	r2, #16
2400bbe0:	61da      	str	r2, [r3, #28]

    /* Wait until STOP flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
2400bbe2:	697a      	ldr	r2, [r7, #20]
2400bbe4:	6839      	ldr	r1, [r7, #0]
2400bbe6:	68f8      	ldr	r0, [r7, #12]
2400bbe8:	f004 fda2 	bl	24010730 <I2C_WaitOnSTOPFlagUntilTimeout>
2400bbec:	4603      	mov	r3, r0
2400bbee:	2b00      	cmp	r3, #0
2400bbf0:	d009      	beq.n	2400bc06 <HAL_I2C_Slave_Transmit+0x1fe>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
2400bbf2:	68fb      	ldr	r3, [r7, #12]
2400bbf4:	681b      	ldr	r3, [r3, #0]
2400bbf6:	685a      	ldr	r2, [r3, #4]
2400bbf8:	68fb      	ldr	r3, [r7, #12]
2400bbfa:	681b      	ldr	r3, [r3, #0]
2400bbfc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2400bc00:	605a      	str	r2, [r3, #4]

      return HAL_ERROR;
2400bc02:	2301      	movs	r3, #1
2400bc04:	e030      	b.n	2400bc68 <HAL_I2C_Slave_Transmit+0x260>
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2400bc06:	68fb      	ldr	r3, [r7, #12]
2400bc08:	681b      	ldr	r3, [r3, #0]
2400bc0a:	2220      	movs	r2, #32
2400bc0c:	61da      	str	r2, [r3, #28]

    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout, tickstart) != HAL_OK)
2400bc0e:	697b      	ldr	r3, [r7, #20]
2400bc10:	9300      	str	r3, [sp, #0]
2400bc12:	683b      	ldr	r3, [r7, #0]
2400bc14:	2201      	movs	r2, #1
2400bc16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
2400bc1a:	68f8      	ldr	r0, [r7, #12]
2400bc1c:	f004 fcf2 	bl	24010604 <I2C_WaitOnFlagUntilTimeout>
2400bc20:	4603      	mov	r3, r0
2400bc22:	2b00      	cmp	r3, #0
2400bc24:	d009      	beq.n	2400bc3a <HAL_I2C_Slave_Transmit+0x232>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
2400bc26:	68fb      	ldr	r3, [r7, #12]
2400bc28:	681b      	ldr	r3, [r3, #0]
2400bc2a:	685a      	ldr	r2, [r3, #4]
2400bc2c:	68fb      	ldr	r3, [r7, #12]
2400bc2e:	681b      	ldr	r3, [r3, #0]
2400bc30:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2400bc34:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
2400bc36:	2301      	movs	r3, #1
2400bc38:	e016      	b.n	2400bc68 <HAL_I2C_Slave_Transmit+0x260>
    }

    /* Disable Address Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
2400bc3a:	68fb      	ldr	r3, [r7, #12]
2400bc3c:	681b      	ldr	r3, [r3, #0]
2400bc3e:	685a      	ldr	r2, [r3, #4]
2400bc40:	68fb      	ldr	r3, [r7, #12]
2400bc42:	681b      	ldr	r3, [r3, #0]
2400bc44:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2400bc48:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
2400bc4a:	68fb      	ldr	r3, [r7, #12]
2400bc4c:	2220      	movs	r2, #32
2400bc4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
2400bc52:	68fb      	ldr	r3, [r7, #12]
2400bc54:	2200      	movs	r2, #0
2400bc56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400bc5a:	68fb      	ldr	r3, [r7, #12]
2400bc5c:	2200      	movs	r2, #0
2400bc5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
2400bc62:	2300      	movs	r3, #0
2400bc64:	e000      	b.n	2400bc68 <HAL_I2C_Slave_Transmit+0x260>
  }
  else
  {
    return HAL_BUSY;
2400bc66:	2302      	movs	r3, #2
  }
}
2400bc68:	4618      	mov	r0, r3
2400bc6a:	3718      	adds	r7, #24
2400bc6c:	46bd      	mov	sp, r7
2400bc6e:	bd80      	pop	{r7, pc}

2400bc70 <HAL_I2C_Slave_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                        uint32_t Timeout)
{
2400bc70:	b580      	push	{r7, lr}
2400bc72:	b088      	sub	sp, #32
2400bc74:	af02      	add	r7, sp, #8
2400bc76:	60f8      	str	r0, [r7, #12]
2400bc78:	60b9      	str	r1, [r7, #8]
2400bc7a:	603b      	str	r3, [r7, #0]
2400bc7c:	4613      	mov	r3, r2
2400bc7e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
2400bc80:	68fb      	ldr	r3, [r7, #12]
2400bc82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400bc86:	b2db      	uxtb	r3, r3
2400bc88:	2b20      	cmp	r3, #32
2400bc8a:	f040 80fc 	bne.w	2400be86 <HAL_I2C_Slave_Receive+0x216>
  {
    if ((pData == NULL) || (Size == 0U))
2400bc8e:	68bb      	ldr	r3, [r7, #8]
2400bc90:	2b00      	cmp	r3, #0
2400bc92:	d002      	beq.n	2400bc9a <HAL_I2C_Slave_Receive+0x2a>
2400bc94:	88fb      	ldrh	r3, [r7, #6]
2400bc96:	2b00      	cmp	r3, #0
2400bc98:	d105      	bne.n	2400bca6 <HAL_I2C_Slave_Receive+0x36>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
2400bc9a:	68fb      	ldr	r3, [r7, #12]
2400bc9c:	f44f 7200 	mov.w	r2, #512	; 0x200
2400bca0:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
2400bca2:	2301      	movs	r3, #1
2400bca4:	e0f0      	b.n	2400be88 <HAL_I2C_Slave_Receive+0x218>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
2400bca6:	68fb      	ldr	r3, [r7, #12]
2400bca8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400bcac:	2b01      	cmp	r3, #1
2400bcae:	d101      	bne.n	2400bcb4 <HAL_I2C_Slave_Receive+0x44>
2400bcb0:	2302      	movs	r3, #2
2400bcb2:	e0e9      	b.n	2400be88 <HAL_I2C_Slave_Receive+0x218>
2400bcb4:	68fb      	ldr	r3, [r7, #12]
2400bcb6:	2201      	movs	r2, #1
2400bcb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
2400bcbc:	f7f7 f9f2 	bl	240030a4 <HAL_GetTick>
2400bcc0:	6178      	str	r0, [r7, #20]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
2400bcc2:	68fb      	ldr	r3, [r7, #12]
2400bcc4:	2222      	movs	r2, #34	; 0x22
2400bcc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
2400bcca:	68fb      	ldr	r3, [r7, #12]
2400bccc:	2220      	movs	r2, #32
2400bcce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400bcd2:	68fb      	ldr	r3, [r7, #12]
2400bcd4:	2200      	movs	r2, #0
2400bcd6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
2400bcd8:	68fb      	ldr	r3, [r7, #12]
2400bcda:	68ba      	ldr	r2, [r7, #8]
2400bcdc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
2400bcde:	68fb      	ldr	r3, [r7, #12]
2400bce0:	88fa      	ldrh	r2, [r7, #6]
2400bce2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize = hi2c->XferCount;
2400bce4:	68fb      	ldr	r3, [r7, #12]
2400bce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400bce8:	b29a      	uxth	r2, r3
2400bcea:	68fb      	ldr	r3, [r7, #12]
2400bcec:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferISR   = NULL;
2400bcee:	68fb      	ldr	r3, [r7, #12]
2400bcf0:	2200      	movs	r2, #0
2400bcf2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
2400bcf4:	68fb      	ldr	r3, [r7, #12]
2400bcf6:	681b      	ldr	r3, [r3, #0]
2400bcf8:	685a      	ldr	r2, [r3, #4]
2400bcfa:	68fb      	ldr	r3, [r7, #12]
2400bcfc:	681b      	ldr	r3, [r3, #0]
2400bcfe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
2400bd02:	605a      	str	r2, [r3, #4]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
2400bd04:	697b      	ldr	r3, [r7, #20]
2400bd06:	9300      	str	r3, [sp, #0]
2400bd08:	683b      	ldr	r3, [r7, #0]
2400bd0a:	2200      	movs	r2, #0
2400bd0c:	2108      	movs	r1, #8
2400bd0e:	68f8      	ldr	r0, [r7, #12]
2400bd10:	f004 fc78 	bl	24010604 <I2C_WaitOnFlagUntilTimeout>
2400bd14:	4603      	mov	r3, r0
2400bd16:	2b00      	cmp	r3, #0
2400bd18:	d009      	beq.n	2400bd2e <HAL_I2C_Slave_Receive+0xbe>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
2400bd1a:	68fb      	ldr	r3, [r7, #12]
2400bd1c:	681b      	ldr	r3, [r3, #0]
2400bd1e:	685a      	ldr	r2, [r3, #4]
2400bd20:	68fb      	ldr	r3, [r7, #12]
2400bd22:	681b      	ldr	r3, [r3, #0]
2400bd24:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2400bd28:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
2400bd2a:	2301      	movs	r3, #1
2400bd2c:	e0ac      	b.n	2400be88 <HAL_I2C_Slave_Receive+0x218>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
2400bd2e:	68fb      	ldr	r3, [r7, #12]
2400bd30:	681b      	ldr	r3, [r3, #0]
2400bd32:	2208      	movs	r2, #8
2400bd34:	61da      	str	r2, [r3, #28]

    /* Wait until DIR flag is reset Receiver mode */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_DIR, SET, Timeout, tickstart) != HAL_OK)
2400bd36:	697b      	ldr	r3, [r7, #20]
2400bd38:	9300      	str	r3, [sp, #0]
2400bd3a:	683b      	ldr	r3, [r7, #0]
2400bd3c:	2201      	movs	r2, #1
2400bd3e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
2400bd42:	68f8      	ldr	r0, [r7, #12]
2400bd44:	f004 fc5e 	bl	24010604 <I2C_WaitOnFlagUntilTimeout>
2400bd48:	4603      	mov	r3, r0
2400bd4a:	2b00      	cmp	r3, #0
2400bd4c:	d054      	beq.n	2400bdf8 <HAL_I2C_Slave_Receive+0x188>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
2400bd4e:	68fb      	ldr	r3, [r7, #12]
2400bd50:	681b      	ldr	r3, [r3, #0]
2400bd52:	685a      	ldr	r2, [r3, #4]
2400bd54:	68fb      	ldr	r3, [r7, #12]
2400bd56:	681b      	ldr	r3, [r3, #0]
2400bd58:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2400bd5c:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
2400bd5e:	2301      	movs	r3, #1
2400bd60:	e092      	b.n	2400be88 <HAL_I2C_Slave_Receive+0x218>
    }

    while (hi2c->XferCount > 0U)
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
2400bd62:	697a      	ldr	r2, [r7, #20]
2400bd64:	6839      	ldr	r1, [r7, #0]
2400bd66:	68f8      	ldr	r0, [r7, #12]
2400bd68:	f004 fd26 	bl	240107b8 <I2C_WaitOnRXNEFlagUntilTimeout>
2400bd6c:	4603      	mov	r3, r0
2400bd6e:	2b00      	cmp	r3, #0
2400bd70:	d029      	beq.n	2400bdc6 <HAL_I2C_Slave_Receive+0x156>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
2400bd72:	68fb      	ldr	r3, [r7, #12]
2400bd74:	681b      	ldr	r3, [r3, #0]
2400bd76:	685a      	ldr	r2, [r3, #4]
2400bd78:	68fb      	ldr	r3, [r7, #12]
2400bd7a:	681b      	ldr	r3, [r3, #0]
2400bd7c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2400bd80:	605a      	str	r2, [r3, #4]

        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
2400bd82:	68fb      	ldr	r3, [r7, #12]
2400bd84:	681b      	ldr	r3, [r3, #0]
2400bd86:	699b      	ldr	r3, [r3, #24]
2400bd88:	f003 0304 	and.w	r3, r3, #4
2400bd8c:	2b04      	cmp	r3, #4
2400bd8e:	d118      	bne.n	2400bdc2 <HAL_I2C_Slave_Receive+0x152>
        {
          /* Read data from RXDR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
2400bd90:	68fb      	ldr	r3, [r7, #12]
2400bd92:	681b      	ldr	r3, [r3, #0]
2400bd94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
2400bd96:	68fb      	ldr	r3, [r7, #12]
2400bd98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400bd9a:	b2d2      	uxtb	r2, r2
2400bd9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
2400bd9e:	68fb      	ldr	r3, [r7, #12]
2400bda0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400bda2:	1c5a      	adds	r2, r3, #1
2400bda4:	68fb      	ldr	r3, [r7, #12]
2400bda6:	625a      	str	r2, [r3, #36]	; 0x24

          hi2c->XferCount--;
2400bda8:	68fb      	ldr	r3, [r7, #12]
2400bdaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400bdac:	b29b      	uxth	r3, r3
2400bdae:	3b01      	subs	r3, #1
2400bdb0:	b29a      	uxth	r2, r3
2400bdb2:	68fb      	ldr	r3, [r7, #12]
2400bdb4:	855a      	strh	r2, [r3, #42]	; 0x2a
          hi2c->XferSize--;
2400bdb6:	68fb      	ldr	r3, [r7, #12]
2400bdb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400bdba:	3b01      	subs	r3, #1
2400bdbc:	b29a      	uxth	r2, r3
2400bdbe:	68fb      	ldr	r3, [r7, #12]
2400bdc0:	851a      	strh	r2, [r3, #40]	; 0x28
        }

        return HAL_ERROR;
2400bdc2:	2301      	movs	r3, #1
2400bdc4:	e060      	b.n	2400be88 <HAL_I2C_Slave_Receive+0x218>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
2400bdc6:	68fb      	ldr	r3, [r7, #12]
2400bdc8:	681b      	ldr	r3, [r3, #0]
2400bdca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
2400bdcc:	68fb      	ldr	r3, [r7, #12]
2400bdce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400bdd0:	b2d2      	uxtb	r2, r2
2400bdd2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
2400bdd4:	68fb      	ldr	r3, [r7, #12]
2400bdd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400bdd8:	1c5a      	adds	r2, r3, #1
2400bdda:	68fb      	ldr	r3, [r7, #12]
2400bddc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
2400bdde:	68fb      	ldr	r3, [r7, #12]
2400bde0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400bde2:	b29b      	uxth	r3, r3
2400bde4:	3b01      	subs	r3, #1
2400bde6:	b29a      	uxth	r2, r3
2400bde8:	68fb      	ldr	r3, [r7, #12]
2400bdea:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
2400bdec:	68fb      	ldr	r3, [r7, #12]
2400bdee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400bdf0:	3b01      	subs	r3, #1
2400bdf2:	b29a      	uxth	r2, r3
2400bdf4:	68fb      	ldr	r3, [r7, #12]
2400bdf6:	851a      	strh	r2, [r3, #40]	; 0x28
    while (hi2c->XferCount > 0U)
2400bdf8:	68fb      	ldr	r3, [r7, #12]
2400bdfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400bdfc:	b29b      	uxth	r3, r3
2400bdfe:	2b00      	cmp	r3, #0
2400be00:	d1af      	bne.n	2400bd62 <HAL_I2C_Slave_Receive+0xf2>
    }

    /* Wait until STOP flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
2400be02:	697a      	ldr	r2, [r7, #20]
2400be04:	6839      	ldr	r1, [r7, #0]
2400be06:	68f8      	ldr	r0, [r7, #12]
2400be08:	f004 fc92 	bl	24010730 <I2C_WaitOnSTOPFlagUntilTimeout>
2400be0c:	4603      	mov	r3, r0
2400be0e:	2b00      	cmp	r3, #0
2400be10:	d009      	beq.n	2400be26 <HAL_I2C_Slave_Receive+0x1b6>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
2400be12:	68fb      	ldr	r3, [r7, #12]
2400be14:	681b      	ldr	r3, [r3, #0]
2400be16:	685a      	ldr	r2, [r3, #4]
2400be18:	68fb      	ldr	r3, [r7, #12]
2400be1a:	681b      	ldr	r3, [r3, #0]
2400be1c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2400be20:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
2400be22:	2301      	movs	r3, #1
2400be24:	e030      	b.n	2400be88 <HAL_I2C_Slave_Receive+0x218>
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2400be26:	68fb      	ldr	r3, [r7, #12]
2400be28:	681b      	ldr	r3, [r3, #0]
2400be2a:	2220      	movs	r2, #32
2400be2c:	61da      	str	r2, [r3, #28]

    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout, tickstart) != HAL_OK)
2400be2e:	697b      	ldr	r3, [r7, #20]
2400be30:	9300      	str	r3, [sp, #0]
2400be32:	683b      	ldr	r3, [r7, #0]
2400be34:	2201      	movs	r2, #1
2400be36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
2400be3a:	68f8      	ldr	r0, [r7, #12]
2400be3c:	f004 fbe2 	bl	24010604 <I2C_WaitOnFlagUntilTimeout>
2400be40:	4603      	mov	r3, r0
2400be42:	2b00      	cmp	r3, #0
2400be44:	d009      	beq.n	2400be5a <HAL_I2C_Slave_Receive+0x1ea>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
2400be46:	68fb      	ldr	r3, [r7, #12]
2400be48:	681b      	ldr	r3, [r3, #0]
2400be4a:	685a      	ldr	r2, [r3, #4]
2400be4c:	68fb      	ldr	r3, [r7, #12]
2400be4e:	681b      	ldr	r3, [r3, #0]
2400be50:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2400be54:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
2400be56:	2301      	movs	r3, #1
2400be58:	e016      	b.n	2400be88 <HAL_I2C_Slave_Receive+0x218>
    }

    /* Disable Address Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
2400be5a:	68fb      	ldr	r3, [r7, #12]
2400be5c:	681b      	ldr	r3, [r3, #0]
2400be5e:	685a      	ldr	r2, [r3, #4]
2400be60:	68fb      	ldr	r3, [r7, #12]
2400be62:	681b      	ldr	r3, [r3, #0]
2400be64:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2400be68:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
2400be6a:	68fb      	ldr	r3, [r7, #12]
2400be6c:	2220      	movs	r2, #32
2400be6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
2400be72:	68fb      	ldr	r3, [r7, #12]
2400be74:	2200      	movs	r2, #0
2400be76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400be7a:	68fb      	ldr	r3, [r7, #12]
2400be7c:	2200      	movs	r2, #0
2400be7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
2400be82:	2300      	movs	r3, #0
2400be84:	e000      	b.n	2400be88 <HAL_I2C_Slave_Receive+0x218>
  }
  else
  {
    return HAL_BUSY;
2400be86:	2302      	movs	r3, #2
  }
}
2400be88:	4618      	mov	r0, r3
2400be8a:	3718      	adds	r7, #24
2400be8c:	46bd      	mov	sp, r7
2400be8e:	bd80      	pop	{r7, pc}

2400be90 <HAL_I2C_Master_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
2400be90:	b580      	push	{r7, lr}
2400be92:	b088      	sub	sp, #32
2400be94:	af02      	add	r7, sp, #8
2400be96:	60f8      	str	r0, [r7, #12]
2400be98:	607a      	str	r2, [r7, #4]
2400be9a:	461a      	mov	r2, r3
2400be9c:	460b      	mov	r3, r1
2400be9e:	817b      	strh	r3, [r7, #10]
2400bea0:	4613      	mov	r3, r2
2400bea2:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
2400bea4:	68fb      	ldr	r3, [r7, #12]
2400bea6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400beaa:	b2db      	uxtb	r3, r3
2400beac:	2b20      	cmp	r3, #32
2400beae:	d153      	bne.n	2400bf58 <HAL_I2C_Master_Transmit_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
2400beb0:	68fb      	ldr	r3, [r7, #12]
2400beb2:	681b      	ldr	r3, [r3, #0]
2400beb4:	699b      	ldr	r3, [r3, #24]
2400beb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
2400beba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
2400bebe:	d101      	bne.n	2400bec4 <HAL_I2C_Master_Transmit_IT+0x34>
    {
      return HAL_BUSY;
2400bec0:	2302      	movs	r3, #2
2400bec2:	e04a      	b.n	2400bf5a <HAL_I2C_Master_Transmit_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
2400bec4:	68fb      	ldr	r3, [r7, #12]
2400bec6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400beca:	2b01      	cmp	r3, #1
2400becc:	d101      	bne.n	2400bed2 <HAL_I2C_Master_Transmit_IT+0x42>
2400bece:	2302      	movs	r3, #2
2400bed0:	e043      	b.n	2400bf5a <HAL_I2C_Master_Transmit_IT+0xca>
2400bed2:	68fb      	ldr	r3, [r7, #12]
2400bed4:	2201      	movs	r2, #1
2400bed6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
2400beda:	68fb      	ldr	r3, [r7, #12]
2400bedc:	2221      	movs	r2, #33	; 0x21
2400bede:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
2400bee2:	68fb      	ldr	r3, [r7, #12]
2400bee4:	2210      	movs	r2, #16
2400bee6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
2400beea:	68fb      	ldr	r3, [r7, #12]
2400beec:	2200      	movs	r2, #0
2400beee:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400bef0:	68fb      	ldr	r3, [r7, #12]
2400bef2:	687a      	ldr	r2, [r7, #4]
2400bef4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
2400bef6:	68fb      	ldr	r3, [r7, #12]
2400bef8:	893a      	ldrh	r2, [r7, #8]
2400befa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2400befc:	68fb      	ldr	r3, [r7, #12]
2400befe:	4a19      	ldr	r2, [pc, #100]	; (2400bf64 <HAL_I2C_Master_Transmit_IT+0xd4>)
2400bf00:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
2400bf02:	68fb      	ldr	r3, [r7, #12]
2400bf04:	4a18      	ldr	r2, [pc, #96]	; (2400bf68 <HAL_I2C_Master_Transmit_IT+0xd8>)
2400bf06:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400bf08:	68fb      	ldr	r3, [r7, #12]
2400bf0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400bf0c:	b29b      	uxth	r3, r3
2400bf0e:	2bff      	cmp	r3, #255	; 0xff
2400bf10:	d906      	bls.n	2400bf20 <HAL_I2C_Master_Transmit_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400bf12:	68fb      	ldr	r3, [r7, #12]
2400bf14:	22ff      	movs	r2, #255	; 0xff
2400bf16:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
2400bf18:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400bf1c:	617b      	str	r3, [r7, #20]
2400bf1e:	e007      	b.n	2400bf30 <HAL_I2C_Master_Transmit_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2400bf20:	68fb      	ldr	r3, [r7, #12]
2400bf22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400bf24:	b29a      	uxth	r2, r3
2400bf26:	68fb      	ldr	r3, [r7, #12]
2400bf28:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
2400bf2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400bf2e:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
2400bf30:	68fb      	ldr	r3, [r7, #12]
2400bf32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400bf34:	b2da      	uxtb	r2, r3
2400bf36:	8979      	ldrh	r1, [r7, #10]
2400bf38:	4b0c      	ldr	r3, [pc, #48]	; (2400bf6c <HAL_I2C_Master_Transmit_IT+0xdc>)
2400bf3a:	9300      	str	r3, [sp, #0]
2400bf3c:	697b      	ldr	r3, [r7, #20]
2400bf3e:	68f8      	ldr	r0, [r7, #12]
2400bf40:	f004 fd9c 	bl	24010a7c <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400bf44:	68fb      	ldr	r3, [r7, #12]
2400bf46:	2200      	movs	r2, #0
2400bf48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
2400bf4c:	2101      	movs	r1, #1
2400bf4e:	68f8      	ldr	r0, [r7, #12]
2400bf50:	f004 fdc6 	bl	24010ae0 <I2C_Enable_IRQ>

    return HAL_OK;
2400bf54:	2300      	movs	r3, #0
2400bf56:	e000      	b.n	2400bf5a <HAL_I2C_Master_Transmit_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
2400bf58:	2302      	movs	r3, #2
  }
}
2400bf5a:	4618      	mov	r0, r3
2400bf5c:	3718      	adds	r7, #24
2400bf5e:	46bd      	mov	sp, r7
2400bf60:	bd80      	pop	{r7, pc}
2400bf62:	bf00      	nop
2400bf64:	ffff0000 	.word	0xffff0000
2400bf68:	2400e63b 	.word	0x2400e63b
2400bf6c:	80002000 	.word	0x80002000

2400bf70 <HAL_I2C_Master_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                            uint16_t Size)
{
2400bf70:	b580      	push	{r7, lr}
2400bf72:	b088      	sub	sp, #32
2400bf74:	af02      	add	r7, sp, #8
2400bf76:	60f8      	str	r0, [r7, #12]
2400bf78:	607a      	str	r2, [r7, #4]
2400bf7a:	461a      	mov	r2, r3
2400bf7c:	460b      	mov	r3, r1
2400bf7e:	817b      	strh	r3, [r7, #10]
2400bf80:	4613      	mov	r3, r2
2400bf82:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
2400bf84:	68fb      	ldr	r3, [r7, #12]
2400bf86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400bf8a:	b2db      	uxtb	r3, r3
2400bf8c:	2b20      	cmp	r3, #32
2400bf8e:	d153      	bne.n	2400c038 <HAL_I2C_Master_Receive_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
2400bf90:	68fb      	ldr	r3, [r7, #12]
2400bf92:	681b      	ldr	r3, [r3, #0]
2400bf94:	699b      	ldr	r3, [r3, #24]
2400bf96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
2400bf9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
2400bf9e:	d101      	bne.n	2400bfa4 <HAL_I2C_Master_Receive_IT+0x34>
    {
      return HAL_BUSY;
2400bfa0:	2302      	movs	r3, #2
2400bfa2:	e04a      	b.n	2400c03a <HAL_I2C_Master_Receive_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
2400bfa4:	68fb      	ldr	r3, [r7, #12]
2400bfa6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400bfaa:	2b01      	cmp	r3, #1
2400bfac:	d101      	bne.n	2400bfb2 <HAL_I2C_Master_Receive_IT+0x42>
2400bfae:	2302      	movs	r3, #2
2400bfb0:	e043      	b.n	2400c03a <HAL_I2C_Master_Receive_IT+0xca>
2400bfb2:	68fb      	ldr	r3, [r7, #12]
2400bfb4:	2201      	movs	r2, #1
2400bfb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
2400bfba:	68fb      	ldr	r3, [r7, #12]
2400bfbc:	2222      	movs	r2, #34	; 0x22
2400bfbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
2400bfc2:	68fb      	ldr	r3, [r7, #12]
2400bfc4:	2210      	movs	r2, #16
2400bfc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
2400bfca:	68fb      	ldr	r3, [r7, #12]
2400bfcc:	2200      	movs	r2, #0
2400bfce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400bfd0:	68fb      	ldr	r3, [r7, #12]
2400bfd2:	687a      	ldr	r2, [r7, #4]
2400bfd4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
2400bfd6:	68fb      	ldr	r3, [r7, #12]
2400bfd8:	893a      	ldrh	r2, [r7, #8]
2400bfda:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2400bfdc:	68fb      	ldr	r3, [r7, #12]
2400bfde:	4a19      	ldr	r2, [pc, #100]	; (2400c044 <HAL_I2C_Master_Receive_IT+0xd4>)
2400bfe0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
2400bfe2:	68fb      	ldr	r3, [r7, #12]
2400bfe4:	4a18      	ldr	r2, [pc, #96]	; (2400c048 <HAL_I2C_Master_Receive_IT+0xd8>)
2400bfe6:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400bfe8:	68fb      	ldr	r3, [r7, #12]
2400bfea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400bfec:	b29b      	uxth	r3, r3
2400bfee:	2bff      	cmp	r3, #255	; 0xff
2400bff0:	d906      	bls.n	2400c000 <HAL_I2C_Master_Receive_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400bff2:	68fb      	ldr	r3, [r7, #12]
2400bff4:	22ff      	movs	r2, #255	; 0xff
2400bff6:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
2400bff8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400bffc:	617b      	str	r3, [r7, #20]
2400bffe:	e007      	b.n	2400c010 <HAL_I2C_Master_Receive_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2400c000:	68fb      	ldr	r3, [r7, #12]
2400c002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400c004:	b29a      	uxth	r2, r3
2400c006:	68fb      	ldr	r3, [r7, #12]
2400c008:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
2400c00a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400c00e:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
2400c010:	68fb      	ldr	r3, [r7, #12]
2400c012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400c014:	b2da      	uxtb	r2, r3
2400c016:	8979      	ldrh	r1, [r7, #10]
2400c018:	4b0c      	ldr	r3, [pc, #48]	; (2400c04c <HAL_I2C_Master_Receive_IT+0xdc>)
2400c01a:	9300      	str	r3, [sp, #0]
2400c01c:	697b      	ldr	r3, [r7, #20]
2400c01e:	68f8      	ldr	r0, [r7, #12]
2400c020:	f004 fd2c 	bl	24010a7c <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400c024:	68fb      	ldr	r3, [r7, #12]
2400c026:	2200      	movs	r2, #0
2400c028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
2400c02c:	2102      	movs	r1, #2
2400c02e:	68f8      	ldr	r0, [r7, #12]
2400c030:	f004 fd56 	bl	24010ae0 <I2C_Enable_IRQ>

    return HAL_OK;
2400c034:	2300      	movs	r3, #0
2400c036:	e000      	b.n	2400c03a <HAL_I2C_Master_Receive_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
2400c038:	2302      	movs	r3, #2
  }
}
2400c03a:	4618      	mov	r0, r3
2400c03c:	3718      	adds	r7, #24
2400c03e:	46bd      	mov	sp, r7
2400c040:	bd80      	pop	{r7, pc}
2400c042:	bf00      	nop
2400c044:	ffff0000 	.word	0xffff0000
2400c048:	2400e63b 	.word	0x2400e63b
2400c04c:	80002400 	.word	0x80002400

2400c050 <HAL_I2C_Slave_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
2400c050:	b580      	push	{r7, lr}
2400c052:	b084      	sub	sp, #16
2400c054:	af00      	add	r7, sp, #0
2400c056:	60f8      	str	r0, [r7, #12]
2400c058:	60b9      	str	r1, [r7, #8]
2400c05a:	4613      	mov	r3, r2
2400c05c:	80fb      	strh	r3, [r7, #6]
  if (hi2c->State == HAL_I2C_STATE_READY)
2400c05e:	68fb      	ldr	r3, [r7, #12]
2400c060:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400c064:	b2db      	uxtb	r3, r3
2400c066:	2b20      	cmp	r3, #32
2400c068:	d156      	bne.n	2400c118 <HAL_I2C_Slave_Transmit_IT+0xc8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
2400c06a:	68fb      	ldr	r3, [r7, #12]
2400c06c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400c070:	2b01      	cmp	r3, #1
2400c072:	d101      	bne.n	2400c078 <HAL_I2C_Slave_Transmit_IT+0x28>
2400c074:	2302      	movs	r3, #2
2400c076:	e050      	b.n	2400c11a <HAL_I2C_Slave_Transmit_IT+0xca>
2400c078:	68fb      	ldr	r3, [r7, #12]
2400c07a:	2201      	movs	r2, #1
2400c07c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
2400c080:	68fb      	ldr	r3, [r7, #12]
2400c082:	2221      	movs	r2, #33	; 0x21
2400c084:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
2400c088:	68fb      	ldr	r3, [r7, #12]
2400c08a:	2220      	movs	r2, #32
2400c08c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
2400c090:	68fb      	ldr	r3, [r7, #12]
2400c092:	2200      	movs	r2, #0
2400c094:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
2400c096:	68fb      	ldr	r3, [r7, #12]
2400c098:	681b      	ldr	r3, [r3, #0]
2400c09a:	685a      	ldr	r2, [r3, #4]
2400c09c:	68fb      	ldr	r3, [r7, #12]
2400c09e:	681b      	ldr	r3, [r3, #0]
2400c0a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
2400c0a4:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400c0a6:	68fb      	ldr	r3, [r7, #12]
2400c0a8:	68ba      	ldr	r2, [r7, #8]
2400c0aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
2400c0ac:	68fb      	ldr	r3, [r7, #12]
2400c0ae:	88fa      	ldrh	r2, [r7, #6]
2400c0b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
2400c0b2:	68fb      	ldr	r3, [r7, #12]
2400c0b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400c0b6:	b29a      	uxth	r2, r3
2400c0b8:	68fb      	ldr	r3, [r7, #12]
2400c0ba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2400c0bc:	68fb      	ldr	r3, [r7, #12]
2400c0be:	4a19      	ldr	r2, [pc, #100]	; (2400c124 <HAL_I2C_Slave_Transmit_IT+0xd4>)
2400c0c0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
2400c0c2:	68fb      	ldr	r3, [r7, #12]
2400c0c4:	4a18      	ldr	r2, [pc, #96]	; (2400c128 <HAL_I2C_Slave_Transmit_IT+0xd8>)
2400c0c6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Preload TX data if no stretch enable */
    if (hi2c->Init.NoStretchMode == I2C_NOSTRETCH_ENABLE)
2400c0c8:	68fb      	ldr	r3, [r7, #12]
2400c0ca:	6a1b      	ldr	r3, [r3, #32]
2400c0cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
2400c0d0:	d117      	bne.n	2400c102 <HAL_I2C_Slave_Transmit_IT+0xb2>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
2400c0d2:	68fb      	ldr	r3, [r7, #12]
2400c0d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400c0d6:	781a      	ldrb	r2, [r3, #0]
2400c0d8:	68fb      	ldr	r3, [r7, #12]
2400c0da:	681b      	ldr	r3, [r3, #0]
2400c0dc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
2400c0de:	68fb      	ldr	r3, [r7, #12]
2400c0e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400c0e2:	1c5a      	adds	r2, r3, #1
2400c0e4:	68fb      	ldr	r3, [r7, #12]
2400c0e6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
2400c0e8:	68fb      	ldr	r3, [r7, #12]
2400c0ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400c0ec:	b29b      	uxth	r3, r3
2400c0ee:	3b01      	subs	r3, #1
2400c0f0:	b29a      	uxth	r2, r3
2400c0f2:	68fb      	ldr	r3, [r7, #12]
2400c0f4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
2400c0f6:	68fb      	ldr	r3, [r7, #12]
2400c0f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400c0fa:	3b01      	subs	r3, #1
2400c0fc:	b29a      	uxth	r2, r3
2400c0fe:	68fb      	ldr	r3, [r7, #12]
2400c100:	851a      	strh	r2, [r3, #40]	; 0x28
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400c102:	68fb      	ldr	r3, [r7, #12]
2400c104:	2200      	movs	r2, #0
2400c106:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
2400c10a:	f248 0101 	movw	r1, #32769	; 0x8001
2400c10e:	68f8      	ldr	r0, [r7, #12]
2400c110:	f004 fce6 	bl	24010ae0 <I2C_Enable_IRQ>

    return HAL_OK;
2400c114:	2300      	movs	r3, #0
2400c116:	e000      	b.n	2400c11a <HAL_I2C_Slave_Transmit_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
2400c118:	2302      	movs	r3, #2
  }
}
2400c11a:	4618      	mov	r0, r3
2400c11c:	3710      	adds	r7, #16
2400c11e:	46bd      	mov	sp, r7
2400c120:	bd80      	pop	{r7, pc}
2400c122:	bf00      	nop
2400c124:	ffff0000 	.word	0xffff0000
2400c128:	2400eab1 	.word	0x2400eab1

2400c12c <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
2400c12c:	b580      	push	{r7, lr}
2400c12e:	b084      	sub	sp, #16
2400c130:	af00      	add	r7, sp, #0
2400c132:	60f8      	str	r0, [r7, #12]
2400c134:	60b9      	str	r1, [r7, #8]
2400c136:	4613      	mov	r3, r2
2400c138:	80fb      	strh	r3, [r7, #6]
  if (hi2c->State == HAL_I2C_STATE_READY)
2400c13a:	68fb      	ldr	r3, [r7, #12]
2400c13c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400c140:	b2db      	uxtb	r3, r3
2400c142:	2b20      	cmp	r3, #32
2400c144:	d139      	bne.n	2400c1ba <HAL_I2C_Slave_Receive_IT+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
2400c146:	68fb      	ldr	r3, [r7, #12]
2400c148:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400c14c:	2b01      	cmp	r3, #1
2400c14e:	d101      	bne.n	2400c154 <HAL_I2C_Slave_Receive_IT+0x28>
2400c150:	2302      	movs	r3, #2
2400c152:	e033      	b.n	2400c1bc <HAL_I2C_Slave_Receive_IT+0x90>
2400c154:	68fb      	ldr	r3, [r7, #12]
2400c156:	2201      	movs	r2, #1
2400c158:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
2400c15c:	68fb      	ldr	r3, [r7, #12]
2400c15e:	2222      	movs	r2, #34	; 0x22
2400c160:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
2400c164:	68fb      	ldr	r3, [r7, #12]
2400c166:	2220      	movs	r2, #32
2400c168:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
2400c16c:	68fb      	ldr	r3, [r7, #12]
2400c16e:	2200      	movs	r2, #0
2400c170:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
2400c172:	68fb      	ldr	r3, [r7, #12]
2400c174:	681b      	ldr	r3, [r3, #0]
2400c176:	685a      	ldr	r2, [r3, #4]
2400c178:	68fb      	ldr	r3, [r7, #12]
2400c17a:	681b      	ldr	r3, [r3, #0]
2400c17c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
2400c180:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400c182:	68fb      	ldr	r3, [r7, #12]
2400c184:	68ba      	ldr	r2, [r7, #8]
2400c186:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
2400c188:	68fb      	ldr	r3, [r7, #12]
2400c18a:	88fa      	ldrh	r2, [r7, #6]
2400c18c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
2400c18e:	68fb      	ldr	r3, [r7, #12]
2400c190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400c192:	b29a      	uxth	r2, r3
2400c194:	68fb      	ldr	r3, [r7, #12]
2400c196:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2400c198:	68fb      	ldr	r3, [r7, #12]
2400c19a:	4a0a      	ldr	r2, [pc, #40]	; (2400c1c4 <HAL_I2C_Slave_Receive_IT+0x98>)
2400c19c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
2400c19e:	68fb      	ldr	r3, [r7, #12]
2400c1a0:	4a09      	ldr	r2, [pc, #36]	; (2400c1c8 <HAL_I2C_Slave_Receive_IT+0x9c>)
2400c1a2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400c1a4:	68fb      	ldr	r3, [r7, #12]
2400c1a6:	2200      	movs	r2, #0
2400c1a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
2400c1ac:	f248 0102 	movw	r1, #32770	; 0x8002
2400c1b0:	68f8      	ldr	r0, [r7, #12]
2400c1b2:	f004 fc95 	bl	24010ae0 <I2C_Enable_IRQ>

    return HAL_OK;
2400c1b6:	2300      	movs	r3, #0
2400c1b8:	e000      	b.n	2400c1bc <HAL_I2C_Slave_Receive_IT+0x90>
  }
  else
  {
    return HAL_BUSY;
2400c1ba:	2302      	movs	r3, #2
  }
}
2400c1bc:	4618      	mov	r0, r3
2400c1be:	3710      	adds	r7, #16
2400c1c0:	46bd      	mov	sp, r7
2400c1c2:	bd80      	pop	{r7, pc}
2400c1c4:	ffff0000 	.word	0xffff0000
2400c1c8:	2400eab1 	.word	0x2400eab1

2400c1cc <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
2400c1cc:	b580      	push	{r7, lr}
2400c1ce:	b088      	sub	sp, #32
2400c1d0:	af02      	add	r7, sp, #8
2400c1d2:	60f8      	str	r0, [r7, #12]
2400c1d4:	607a      	str	r2, [r7, #4]
2400c1d6:	461a      	mov	r2, r3
2400c1d8:	460b      	mov	r3, r1
2400c1da:	817b      	strh	r3, [r7, #10]
2400c1dc:	4613      	mov	r3, r2
2400c1de:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
2400c1e0:	68fb      	ldr	r3, [r7, #12]
2400c1e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400c1e6:	b2db      	uxtb	r3, r3
2400c1e8:	2b20      	cmp	r3, #32
2400c1ea:	f040 80cd 	bne.w	2400c388 <HAL_I2C_Master_Transmit_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
2400c1ee:	68fb      	ldr	r3, [r7, #12]
2400c1f0:	681b      	ldr	r3, [r3, #0]
2400c1f2:	699b      	ldr	r3, [r3, #24]
2400c1f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
2400c1f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
2400c1fc:	d101      	bne.n	2400c202 <HAL_I2C_Master_Transmit_DMA+0x36>
    {
      return HAL_BUSY;
2400c1fe:	2302      	movs	r3, #2
2400c200:	e0c3      	b.n	2400c38a <HAL_I2C_Master_Transmit_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
2400c202:	68fb      	ldr	r3, [r7, #12]
2400c204:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400c208:	2b01      	cmp	r3, #1
2400c20a:	d101      	bne.n	2400c210 <HAL_I2C_Master_Transmit_DMA+0x44>
2400c20c:	2302      	movs	r3, #2
2400c20e:	e0bc      	b.n	2400c38a <HAL_I2C_Master_Transmit_DMA+0x1be>
2400c210:	68fb      	ldr	r3, [r7, #12]
2400c212:	2201      	movs	r2, #1
2400c214:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
2400c218:	68fb      	ldr	r3, [r7, #12]
2400c21a:	2221      	movs	r2, #33	; 0x21
2400c21c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
2400c220:	68fb      	ldr	r3, [r7, #12]
2400c222:	2210      	movs	r2, #16
2400c224:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
2400c228:	68fb      	ldr	r3, [r7, #12]
2400c22a:	2200      	movs	r2, #0
2400c22c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400c22e:	68fb      	ldr	r3, [r7, #12]
2400c230:	687a      	ldr	r2, [r7, #4]
2400c232:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
2400c234:	68fb      	ldr	r3, [r7, #12]
2400c236:	893a      	ldrh	r2, [r7, #8]
2400c238:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2400c23a:	68fb      	ldr	r3, [r7, #12]
2400c23c:	4a55      	ldr	r2, [pc, #340]	; (2400c394 <HAL_I2C_Master_Transmit_DMA+0x1c8>)
2400c23e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
2400c240:	68fb      	ldr	r3, [r7, #12]
2400c242:	4a55      	ldr	r2, [pc, #340]	; (2400c398 <HAL_I2C_Master_Transmit_DMA+0x1cc>)
2400c244:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400c246:	68fb      	ldr	r3, [r7, #12]
2400c248:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400c24a:	b29b      	uxth	r3, r3
2400c24c:	2bff      	cmp	r3, #255	; 0xff
2400c24e:	d906      	bls.n	2400c25e <HAL_I2C_Master_Transmit_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400c250:	68fb      	ldr	r3, [r7, #12]
2400c252:	22ff      	movs	r2, #255	; 0xff
2400c254:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
2400c256:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400c25a:	617b      	str	r3, [r7, #20]
2400c25c:	e007      	b.n	2400c26e <HAL_I2C_Master_Transmit_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2400c25e:	68fb      	ldr	r3, [r7, #12]
2400c260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400c262:	b29a      	uxth	r2, r3
2400c264:	68fb      	ldr	r3, [r7, #12]
2400c266:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
2400c268:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400c26c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
2400c26e:	68fb      	ldr	r3, [r7, #12]
2400c270:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400c272:	2b00      	cmp	r3, #0
2400c274:	d070      	beq.n	2400c358 <HAL_I2C_Master_Transmit_DMA+0x18c>
    {
      if (hi2c->hdmatx != NULL)
2400c276:	68fb      	ldr	r3, [r7, #12]
2400c278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400c27a:	2b00      	cmp	r3, #0
2400c27c:	d020      	beq.n	2400c2c0 <HAL_I2C_Master_Transmit_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
2400c27e:	68fb      	ldr	r3, [r7, #12]
2400c280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400c282:	4a46      	ldr	r2, [pc, #280]	; (2400c39c <HAL_I2C_Master_Transmit_DMA+0x1d0>)
2400c284:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
2400c286:	68fb      	ldr	r3, [r7, #12]
2400c288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400c28a:	4a45      	ldr	r2, [pc, #276]	; (2400c3a0 <HAL_I2C_Master_Transmit_DMA+0x1d4>)
2400c28c:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
2400c28e:	68fb      	ldr	r3, [r7, #12]
2400c290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400c292:	2200      	movs	r2, #0
2400c294:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
2400c296:	68fb      	ldr	r3, [r7, #12]
2400c298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400c29a:	2200      	movs	r2, #0
2400c29c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
2400c29e:	68fb      	ldr	r3, [r7, #12]
2400c2a0:	6b98      	ldr	r0, [r3, #56]	; 0x38
2400c2a2:	6879      	ldr	r1, [r7, #4]
2400c2a4:	68fb      	ldr	r3, [r7, #12]
2400c2a6:	681b      	ldr	r3, [r3, #0]
2400c2a8:	3328      	adds	r3, #40	; 0x28
2400c2aa:	461a      	mov	r2, r3
                                         hi2c->XferSize);
2400c2ac:	68fb      	ldr	r3, [r7, #12]
2400c2ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
2400c2b0:	f7f8 fc92 	bl	24004bd8 <HAL_DMA_Start_IT>
2400c2b4:	4603      	mov	r3, r0
2400c2b6:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
2400c2b8:	7cfb      	ldrb	r3, [r7, #19]
2400c2ba:	2b00      	cmp	r3, #0
2400c2bc:	d138      	bne.n	2400c330 <HAL_I2C_Master_Transmit_DMA+0x164>
2400c2be:	e013      	b.n	2400c2e8 <HAL_I2C_Master_Transmit_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
2400c2c0:	68fb      	ldr	r3, [r7, #12]
2400c2c2:	2220      	movs	r2, #32
2400c2c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
2400c2c8:	68fb      	ldr	r3, [r7, #12]
2400c2ca:	2200      	movs	r2, #0
2400c2cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
2400c2d0:	68fb      	ldr	r3, [r7, #12]
2400c2d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400c2d4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
2400c2d8:	68fb      	ldr	r3, [r7, #12]
2400c2da:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
2400c2dc:	68fb      	ldr	r3, [r7, #12]
2400c2de:	2200      	movs	r2, #0
2400c2e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
2400c2e4:	2301      	movs	r3, #1
2400c2e6:	e050      	b.n	2400c38a <HAL_I2C_Master_Transmit_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
2400c2e8:	68fb      	ldr	r3, [r7, #12]
2400c2ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400c2ec:	b2da      	uxtb	r2, r3
2400c2ee:	8979      	ldrh	r1, [r7, #10]
2400c2f0:	4b2c      	ldr	r3, [pc, #176]	; (2400c3a4 <HAL_I2C_Master_Transmit_DMA+0x1d8>)
2400c2f2:	9300      	str	r3, [sp, #0]
2400c2f4:	697b      	ldr	r3, [r7, #20]
2400c2f6:	68f8      	ldr	r0, [r7, #12]
2400c2f8:	f004 fbc0 	bl	24010a7c <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
2400c2fc:	68fb      	ldr	r3, [r7, #12]
2400c2fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400c300:	b29a      	uxth	r2, r3
2400c302:	68fb      	ldr	r3, [r7, #12]
2400c304:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400c306:	1ad3      	subs	r3, r2, r3
2400c308:	b29a      	uxth	r2, r3
2400c30a:	68fb      	ldr	r3, [r7, #12]
2400c30c:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
2400c30e:	68fb      	ldr	r3, [r7, #12]
2400c310:	2200      	movs	r2, #0
2400c312:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
2400c316:	2110      	movs	r1, #16
2400c318:	68f8      	ldr	r0, [r7, #12]
2400c31a:	f004 fbe1 	bl	24010ae0 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
2400c31e:	68fb      	ldr	r3, [r7, #12]
2400c320:	681b      	ldr	r3, [r3, #0]
2400c322:	681a      	ldr	r2, [r3, #0]
2400c324:	68fb      	ldr	r3, [r7, #12]
2400c326:	681b      	ldr	r3, [r3, #0]
2400c328:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
2400c32c:	601a      	str	r2, [r3, #0]
2400c32e:	e029      	b.n	2400c384 <HAL_I2C_Master_Transmit_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
2400c330:	68fb      	ldr	r3, [r7, #12]
2400c332:	2220      	movs	r2, #32
2400c334:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
2400c338:	68fb      	ldr	r3, [r7, #12]
2400c33a:	2200      	movs	r2, #0
2400c33c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
2400c340:	68fb      	ldr	r3, [r7, #12]
2400c342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400c344:	f043 0210 	orr.w	r2, r3, #16
2400c348:	68fb      	ldr	r3, [r7, #12]
2400c34a:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
2400c34c:	68fb      	ldr	r3, [r7, #12]
2400c34e:	2200      	movs	r2, #0
2400c350:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
2400c354:	2301      	movs	r3, #1
2400c356:	e018      	b.n	2400c38a <HAL_I2C_Master_Transmit_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
2400c358:	68fb      	ldr	r3, [r7, #12]
2400c35a:	4a13      	ldr	r2, [pc, #76]	; (2400c3a8 <HAL_I2C_Master_Transmit_DMA+0x1dc>)
2400c35c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
2400c35e:	68fb      	ldr	r3, [r7, #12]
2400c360:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400c362:	b2da      	uxtb	r2, r3
2400c364:	8979      	ldrh	r1, [r7, #10]
2400c366:	4b0f      	ldr	r3, [pc, #60]	; (2400c3a4 <HAL_I2C_Master_Transmit_DMA+0x1d8>)
2400c368:	9300      	str	r3, [sp, #0]
2400c36a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400c36e:	68f8      	ldr	r0, [r7, #12]
2400c370:	f004 fb84 	bl	24010a7c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2400c374:	68fb      	ldr	r3, [r7, #12]
2400c376:	2200      	movs	r2, #0
2400c378:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
2400c37c:	2101      	movs	r1, #1
2400c37e:	68f8      	ldr	r0, [r7, #12]
2400c380:	f004 fbae 	bl	24010ae0 <I2C_Enable_IRQ>
    }

    return HAL_OK;
2400c384:	2300      	movs	r3, #0
2400c386:	e000      	b.n	2400c38a <HAL_I2C_Master_Transmit_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
2400c388:	2302      	movs	r3, #2
  }
}
2400c38a:	4618      	mov	r0, r3
2400c38c:	3718      	adds	r7, #24
2400c38e:	46bd      	mov	sp, r7
2400c390:	bd80      	pop	{r7, pc}
2400c392:	bf00      	nop
2400c394:	ffff0000 	.word	0xffff0000
2400c398:	2400eca1 	.word	0x2400eca1
2400c39c:	24010083 	.word	0x24010083
2400c3a0:	24010355 	.word	0x24010355
2400c3a4:	80002000 	.word	0x80002000
2400c3a8:	2400e63b 	.word	0x2400e63b

2400c3ac <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
2400c3ac:	b580      	push	{r7, lr}
2400c3ae:	b088      	sub	sp, #32
2400c3b0:	af02      	add	r7, sp, #8
2400c3b2:	60f8      	str	r0, [r7, #12]
2400c3b4:	607a      	str	r2, [r7, #4]
2400c3b6:	461a      	mov	r2, r3
2400c3b8:	460b      	mov	r3, r1
2400c3ba:	817b      	strh	r3, [r7, #10]
2400c3bc:	4613      	mov	r3, r2
2400c3be:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
2400c3c0:	68fb      	ldr	r3, [r7, #12]
2400c3c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400c3c6:	b2db      	uxtb	r3, r3
2400c3c8:	2b20      	cmp	r3, #32
2400c3ca:	f040 80cd 	bne.w	2400c568 <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
2400c3ce:	68fb      	ldr	r3, [r7, #12]
2400c3d0:	681b      	ldr	r3, [r3, #0]
2400c3d2:	699b      	ldr	r3, [r3, #24]
2400c3d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
2400c3d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
2400c3dc:	d101      	bne.n	2400c3e2 <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
2400c3de:	2302      	movs	r3, #2
2400c3e0:	e0c3      	b.n	2400c56a <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
2400c3e2:	68fb      	ldr	r3, [r7, #12]
2400c3e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400c3e8:	2b01      	cmp	r3, #1
2400c3ea:	d101      	bne.n	2400c3f0 <HAL_I2C_Master_Receive_DMA+0x44>
2400c3ec:	2302      	movs	r3, #2
2400c3ee:	e0bc      	b.n	2400c56a <HAL_I2C_Master_Receive_DMA+0x1be>
2400c3f0:	68fb      	ldr	r3, [r7, #12]
2400c3f2:	2201      	movs	r2, #1
2400c3f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
2400c3f8:	68fb      	ldr	r3, [r7, #12]
2400c3fa:	2222      	movs	r2, #34	; 0x22
2400c3fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
2400c400:	68fb      	ldr	r3, [r7, #12]
2400c402:	2210      	movs	r2, #16
2400c404:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
2400c408:	68fb      	ldr	r3, [r7, #12]
2400c40a:	2200      	movs	r2, #0
2400c40c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400c40e:	68fb      	ldr	r3, [r7, #12]
2400c410:	687a      	ldr	r2, [r7, #4]
2400c412:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
2400c414:	68fb      	ldr	r3, [r7, #12]
2400c416:	893a      	ldrh	r2, [r7, #8]
2400c418:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2400c41a:	68fb      	ldr	r3, [r7, #12]
2400c41c:	4a55      	ldr	r2, [pc, #340]	; (2400c574 <HAL_I2C_Master_Receive_DMA+0x1c8>)
2400c41e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
2400c420:	68fb      	ldr	r3, [r7, #12]
2400c422:	4a55      	ldr	r2, [pc, #340]	; (2400c578 <HAL_I2C_Master_Receive_DMA+0x1cc>)
2400c424:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400c426:	68fb      	ldr	r3, [r7, #12]
2400c428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400c42a:	b29b      	uxth	r3, r3
2400c42c:	2bff      	cmp	r3, #255	; 0xff
2400c42e:	d906      	bls.n	2400c43e <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400c430:	68fb      	ldr	r3, [r7, #12]
2400c432:	22ff      	movs	r2, #255	; 0xff
2400c434:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
2400c436:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400c43a:	617b      	str	r3, [r7, #20]
2400c43c:	e007      	b.n	2400c44e <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2400c43e:	68fb      	ldr	r3, [r7, #12]
2400c440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400c442:	b29a      	uxth	r2, r3
2400c444:	68fb      	ldr	r3, [r7, #12]
2400c446:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
2400c448:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400c44c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
2400c44e:	68fb      	ldr	r3, [r7, #12]
2400c450:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400c452:	2b00      	cmp	r3, #0
2400c454:	d070      	beq.n	2400c538 <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
2400c456:	68fb      	ldr	r3, [r7, #12]
2400c458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400c45a:	2b00      	cmp	r3, #0
2400c45c:	d020      	beq.n	2400c4a0 <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
2400c45e:	68fb      	ldr	r3, [r7, #12]
2400c460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400c462:	4a46      	ldr	r2, [pc, #280]	; (2400c57c <HAL_I2C_Master_Receive_DMA+0x1d0>)
2400c464:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
2400c466:	68fb      	ldr	r3, [r7, #12]
2400c468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400c46a:	4a45      	ldr	r2, [pc, #276]	; (2400c580 <HAL_I2C_Master_Receive_DMA+0x1d4>)
2400c46c:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
2400c46e:	68fb      	ldr	r3, [r7, #12]
2400c470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400c472:	2200      	movs	r2, #0
2400c474:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
2400c476:	68fb      	ldr	r3, [r7, #12]
2400c478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400c47a:	2200      	movs	r2, #0
2400c47c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
2400c47e:	68fb      	ldr	r3, [r7, #12]
2400c480:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
2400c482:	68fb      	ldr	r3, [r7, #12]
2400c484:	681b      	ldr	r3, [r3, #0]
2400c486:	3324      	adds	r3, #36	; 0x24
2400c488:	4619      	mov	r1, r3
2400c48a:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
2400c48c:	68fb      	ldr	r3, [r7, #12]
2400c48e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
2400c490:	f7f8 fba2 	bl	24004bd8 <HAL_DMA_Start_IT>
2400c494:	4603      	mov	r3, r0
2400c496:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
2400c498:	7cfb      	ldrb	r3, [r7, #19]
2400c49a:	2b00      	cmp	r3, #0
2400c49c:	d138      	bne.n	2400c510 <HAL_I2C_Master_Receive_DMA+0x164>
2400c49e:	e013      	b.n	2400c4c8 <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
2400c4a0:	68fb      	ldr	r3, [r7, #12]
2400c4a2:	2220      	movs	r2, #32
2400c4a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
2400c4a8:	68fb      	ldr	r3, [r7, #12]
2400c4aa:	2200      	movs	r2, #0
2400c4ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
2400c4b0:	68fb      	ldr	r3, [r7, #12]
2400c4b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400c4b4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
2400c4b8:	68fb      	ldr	r3, [r7, #12]
2400c4ba:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
2400c4bc:	68fb      	ldr	r3, [r7, #12]
2400c4be:	2200      	movs	r2, #0
2400c4c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
2400c4c4:	2301      	movs	r3, #1
2400c4c6:	e050      	b.n	2400c56a <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
2400c4c8:	68fb      	ldr	r3, [r7, #12]
2400c4ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400c4cc:	b2da      	uxtb	r2, r3
2400c4ce:	8979      	ldrh	r1, [r7, #10]
2400c4d0:	4b2c      	ldr	r3, [pc, #176]	; (2400c584 <HAL_I2C_Master_Receive_DMA+0x1d8>)
2400c4d2:	9300      	str	r3, [sp, #0]
2400c4d4:	697b      	ldr	r3, [r7, #20]
2400c4d6:	68f8      	ldr	r0, [r7, #12]
2400c4d8:	f004 fad0 	bl	24010a7c <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
2400c4dc:	68fb      	ldr	r3, [r7, #12]
2400c4de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400c4e0:	b29a      	uxth	r2, r3
2400c4e2:	68fb      	ldr	r3, [r7, #12]
2400c4e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400c4e6:	1ad3      	subs	r3, r2, r3
2400c4e8:	b29a      	uxth	r2, r3
2400c4ea:	68fb      	ldr	r3, [r7, #12]
2400c4ec:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
2400c4ee:	68fb      	ldr	r3, [r7, #12]
2400c4f0:	2200      	movs	r2, #0
2400c4f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
2400c4f6:	2110      	movs	r1, #16
2400c4f8:	68f8      	ldr	r0, [r7, #12]
2400c4fa:	f004 faf1 	bl	24010ae0 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
2400c4fe:	68fb      	ldr	r3, [r7, #12]
2400c500:	681b      	ldr	r3, [r3, #0]
2400c502:	681a      	ldr	r2, [r3, #0]
2400c504:	68fb      	ldr	r3, [r7, #12]
2400c506:	681b      	ldr	r3, [r3, #0]
2400c508:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2400c50c:	601a      	str	r2, [r3, #0]
2400c50e:	e029      	b.n	2400c564 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
2400c510:	68fb      	ldr	r3, [r7, #12]
2400c512:	2220      	movs	r2, #32
2400c514:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
2400c518:	68fb      	ldr	r3, [r7, #12]
2400c51a:	2200      	movs	r2, #0
2400c51c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
2400c520:	68fb      	ldr	r3, [r7, #12]
2400c522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400c524:	f043 0210 	orr.w	r2, r3, #16
2400c528:	68fb      	ldr	r3, [r7, #12]
2400c52a:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
2400c52c:	68fb      	ldr	r3, [r7, #12]
2400c52e:	2200      	movs	r2, #0
2400c530:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
2400c534:	2301      	movs	r3, #1
2400c536:	e018      	b.n	2400c56a <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
2400c538:	68fb      	ldr	r3, [r7, #12]
2400c53a:	4a13      	ldr	r2, [pc, #76]	; (2400c588 <HAL_I2C_Master_Receive_DMA+0x1dc>)
2400c53c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
2400c53e:	68fb      	ldr	r3, [r7, #12]
2400c540:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400c542:	b2da      	uxtb	r2, r3
2400c544:	8979      	ldrh	r1, [r7, #10]
2400c546:	4b0f      	ldr	r3, [pc, #60]	; (2400c584 <HAL_I2C_Master_Receive_DMA+0x1d8>)
2400c548:	9300      	str	r3, [sp, #0]
2400c54a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400c54e:	68f8      	ldr	r0, [r7, #12]
2400c550:	f004 fa94 	bl	24010a7c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2400c554:	68fb      	ldr	r3, [r7, #12]
2400c556:	2200      	movs	r2, #0
2400c558:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
2400c55c:	2101      	movs	r1, #1
2400c55e:	68f8      	ldr	r0, [r7, #12]
2400c560:	f004 fabe 	bl	24010ae0 <I2C_Enable_IRQ>
    }

    return HAL_OK;
2400c564:	2300      	movs	r3, #0
2400c566:	e000      	b.n	2400c56a <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
2400c568:	2302      	movs	r3, #2
  }
}
2400c56a:	4618      	mov	r0, r3
2400c56c:	3718      	adds	r7, #24
2400c56e:	46bd      	mov	sp, r7
2400c570:	bd80      	pop	{r7, pc}
2400c572:	bf00      	nop
2400c574:	ffff0000 	.word	0xffff0000
2400c578:	2400eca1 	.word	0x2400eca1
2400c57c:	24010159 	.word	0x24010159
2400c580:	24010355 	.word	0x24010355
2400c584:	80002400 	.word	0x80002400
2400c588:	2400e63b 	.word	0x2400e63b

2400c58c <HAL_I2C_Slave_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
2400c58c:	b580      	push	{r7, lr}
2400c58e:	b086      	sub	sp, #24
2400c590:	af00      	add	r7, sp, #0
2400c592:	60f8      	str	r0, [r7, #12]
2400c594:	60b9      	str	r1, [r7, #8]
2400c596:	4613      	mov	r3, r2
2400c598:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
2400c59a:	68fb      	ldr	r3, [r7, #12]
2400c59c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400c5a0:	b2db      	uxtb	r3, r3
2400c5a2:	2b20      	cmp	r3, #32
2400c5a4:	f040 80d1 	bne.w	2400c74a <HAL_I2C_Slave_Transmit_DMA+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
2400c5a8:	68bb      	ldr	r3, [r7, #8]
2400c5aa:	2b00      	cmp	r3, #0
2400c5ac:	d002      	beq.n	2400c5b4 <HAL_I2C_Slave_Transmit_DMA+0x28>
2400c5ae:	88fb      	ldrh	r3, [r7, #6]
2400c5b0:	2b00      	cmp	r3, #0
2400c5b2:	d105      	bne.n	2400c5c0 <HAL_I2C_Slave_Transmit_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
2400c5b4:	68fb      	ldr	r3, [r7, #12]
2400c5b6:	f44f 7200 	mov.w	r2, #512	; 0x200
2400c5ba:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
2400c5bc:	2301      	movs	r3, #1
2400c5be:	e0c5      	b.n	2400c74c <HAL_I2C_Slave_Transmit_DMA+0x1c0>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
2400c5c0:	68fb      	ldr	r3, [r7, #12]
2400c5c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400c5c6:	2b01      	cmp	r3, #1
2400c5c8:	d101      	bne.n	2400c5ce <HAL_I2C_Slave_Transmit_DMA+0x42>
2400c5ca:	2302      	movs	r3, #2
2400c5cc:	e0be      	b.n	2400c74c <HAL_I2C_Slave_Transmit_DMA+0x1c0>
2400c5ce:	68fb      	ldr	r3, [r7, #12]
2400c5d0:	2201      	movs	r2, #1
2400c5d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
2400c5d6:	68fb      	ldr	r3, [r7, #12]
2400c5d8:	2221      	movs	r2, #33	; 0x21
2400c5da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
2400c5de:	68fb      	ldr	r3, [r7, #12]
2400c5e0:	2220      	movs	r2, #32
2400c5e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
2400c5e6:	68fb      	ldr	r3, [r7, #12]
2400c5e8:	2200      	movs	r2, #0
2400c5ea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400c5ec:	68fb      	ldr	r3, [r7, #12]
2400c5ee:	68ba      	ldr	r2, [r7, #8]
2400c5f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
2400c5f2:	68fb      	ldr	r3, [r7, #12]
2400c5f4:	88fa      	ldrh	r2, [r7, #6]
2400c5f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
2400c5f8:	68fb      	ldr	r3, [r7, #12]
2400c5fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400c5fc:	b29a      	uxth	r2, r3
2400c5fe:	68fb      	ldr	r3, [r7, #12]
2400c600:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2400c602:	68fb      	ldr	r3, [r7, #12]
2400c604:	4a53      	ldr	r2, [pc, #332]	; (2400c754 <HAL_I2C_Slave_Transmit_DMA+0x1c8>)
2400c606:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
2400c608:	68fb      	ldr	r3, [r7, #12]
2400c60a:	4a53      	ldr	r2, [pc, #332]	; (2400c758 <HAL_I2C_Slave_Transmit_DMA+0x1cc>)
2400c60c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Preload TX data if no stretch enable */
    if (hi2c->Init.NoStretchMode == I2C_NOSTRETCH_ENABLE)
2400c60e:	68fb      	ldr	r3, [r7, #12]
2400c610:	6a1b      	ldr	r3, [r3, #32]
2400c612:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
2400c616:	d117      	bne.n	2400c648 <HAL_I2C_Slave_Transmit_DMA+0xbc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
2400c618:	68fb      	ldr	r3, [r7, #12]
2400c61a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400c61c:	781a      	ldrb	r2, [r3, #0]
2400c61e:	68fb      	ldr	r3, [r7, #12]
2400c620:	681b      	ldr	r3, [r3, #0]
2400c622:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
2400c624:	68fb      	ldr	r3, [r7, #12]
2400c626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400c628:	1c5a      	adds	r2, r3, #1
2400c62a:	68fb      	ldr	r3, [r7, #12]
2400c62c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
2400c62e:	68fb      	ldr	r3, [r7, #12]
2400c630:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400c632:	b29b      	uxth	r3, r3
2400c634:	3b01      	subs	r3, #1
2400c636:	b29a      	uxth	r2, r3
2400c638:	68fb      	ldr	r3, [r7, #12]
2400c63a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
2400c63c:	68fb      	ldr	r3, [r7, #12]
2400c63e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400c640:	3b01      	subs	r3, #1
2400c642:	b29a      	uxth	r2, r3
2400c644:	68fb      	ldr	r3, [r7, #12]
2400c646:	851a      	strh	r2, [r3, #40]	; 0x28
    }

    if (hi2c->XferCount != 0U)
2400c648:	68fb      	ldr	r3, [r7, #12]
2400c64a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400c64c:	b29b      	uxth	r3, r3
2400c64e:	2b00      	cmp	r3, #0
2400c650:	d068      	beq.n	2400c724 <HAL_I2C_Slave_Transmit_DMA+0x198>
    {
      if (hi2c->hdmatx != NULL)
2400c652:	68fb      	ldr	r3, [r7, #12]
2400c654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400c656:	2b00      	cmp	r3, #0
2400c658:	d022      	beq.n	2400c6a0 <HAL_I2C_Slave_Transmit_DMA+0x114>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMASlaveTransmitCplt;
2400c65a:	68fb      	ldr	r3, [r7, #12]
2400c65c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400c65e:	4a3f      	ldr	r2, [pc, #252]	; (2400c75c <HAL_I2C_Slave_Transmit_DMA+0x1d0>)
2400c660:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
2400c662:	68fb      	ldr	r3, [r7, #12]
2400c664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400c666:	4a3e      	ldr	r2, [pc, #248]	; (2400c760 <HAL_I2C_Slave_Transmit_DMA+0x1d4>)
2400c668:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
2400c66a:	68fb      	ldr	r3, [r7, #12]
2400c66c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400c66e:	2200      	movs	r2, #0
2400c670:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
2400c672:	68fb      	ldr	r3, [r7, #12]
2400c674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400c676:	2200      	movs	r2, #0
2400c678:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
2400c67a:	68fb      	ldr	r3, [r7, #12]
2400c67c:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                         (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
2400c67e:	68fb      	ldr	r3, [r7, #12]
2400c680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
2400c682:	4619      	mov	r1, r3
                                         (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
2400c684:	68fb      	ldr	r3, [r7, #12]
2400c686:	681b      	ldr	r3, [r3, #0]
2400c688:	3328      	adds	r3, #40	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
2400c68a:	461a      	mov	r2, r3
                                         hi2c->XferSize);
2400c68c:	68fb      	ldr	r3, [r7, #12]
2400c68e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
2400c690:	f7f8 faa2 	bl	24004bd8 <HAL_DMA_Start_IT>
2400c694:	4603      	mov	r3, r0
2400c696:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
2400c698:	7dfb      	ldrb	r3, [r7, #23]
2400c69a:	2b00      	cmp	r3, #0
2400c69c:	d12e      	bne.n	2400c6fc <HAL_I2C_Slave_Transmit_DMA+0x170>
2400c69e:	e013      	b.n	2400c6c8 <HAL_I2C_Slave_Transmit_DMA+0x13c>
        hi2c->State     = HAL_I2C_STATE_LISTEN;
2400c6a0:	68fb      	ldr	r3, [r7, #12]
2400c6a2:	2228      	movs	r2, #40	; 0x28
2400c6a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
2400c6a8:	68fb      	ldr	r3, [r7, #12]
2400c6aa:	2200      	movs	r2, #0
2400c6ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
2400c6b0:	68fb      	ldr	r3, [r7, #12]
2400c6b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400c6b4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
2400c6b8:	68fb      	ldr	r3, [r7, #12]
2400c6ba:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
2400c6bc:	68fb      	ldr	r3, [r7, #12]
2400c6be:	2200      	movs	r2, #0
2400c6c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
2400c6c4:	2301      	movs	r3, #1
2400c6c6:	e041      	b.n	2400c74c <HAL_I2C_Slave_Transmit_DMA+0x1c0>
      {
        /* Enable Address Acknowledge */
        hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
2400c6c8:	68fb      	ldr	r3, [r7, #12]
2400c6ca:	681b      	ldr	r3, [r3, #0]
2400c6cc:	685a      	ldr	r2, [r3, #4]
2400c6ce:	68fb      	ldr	r3, [r7, #12]
2400c6d0:	681b      	ldr	r3, [r3, #0]
2400c6d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
2400c6d6:	605a      	str	r2, [r3, #4]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
2400c6d8:	68fb      	ldr	r3, [r7, #12]
2400c6da:	2200      	movs	r2, #0
2400c6dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR, STOP, NACK, ADDR interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
2400c6e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
2400c6e4:	68f8      	ldr	r0, [r7, #12]
2400c6e6:	f004 f9fb 	bl	24010ae0 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
2400c6ea:	68fb      	ldr	r3, [r7, #12]
2400c6ec:	681b      	ldr	r3, [r3, #0]
2400c6ee:	681a      	ldr	r2, [r3, #0]
2400c6f0:	68fb      	ldr	r3, [r7, #12]
2400c6f2:	681b      	ldr	r3, [r3, #0]
2400c6f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
2400c6f8:	601a      	str	r2, [r3, #0]
2400c6fa:	e024      	b.n	2400c746 <HAL_I2C_Slave_Transmit_DMA+0x1ba>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_LISTEN;
2400c6fc:	68fb      	ldr	r3, [r7, #12]
2400c6fe:	2228      	movs	r2, #40	; 0x28
2400c700:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
2400c704:	68fb      	ldr	r3, [r7, #12]
2400c706:	2200      	movs	r2, #0
2400c708:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
2400c70c:	68fb      	ldr	r3, [r7, #12]
2400c70e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400c710:	f043 0210 	orr.w	r2, r3, #16
2400c714:	68fb      	ldr	r3, [r7, #12]
2400c716:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
2400c718:	68fb      	ldr	r3, [r7, #12]
2400c71a:	2200      	movs	r2, #0
2400c71c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
2400c720:	2301      	movs	r3, #1
2400c722:	e013      	b.n	2400c74c <HAL_I2C_Slave_Transmit_DMA+0x1c0>
      }
    }
    else
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
2400c724:	68fb      	ldr	r3, [r7, #12]
2400c726:	681b      	ldr	r3, [r3, #0]
2400c728:	685a      	ldr	r2, [r3, #4]
2400c72a:	68fb      	ldr	r3, [r7, #12]
2400c72c:	681b      	ldr	r3, [r3, #0]
2400c72e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
2400c732:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2400c734:	68fb      	ldr	r3, [r7, #12]
2400c736:	2200      	movs	r2, #0
2400c738:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
2400c73c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
2400c740:	68f8      	ldr	r0, [r7, #12]
2400c742:	f004 f9cd 	bl	24010ae0 <I2C_Enable_IRQ>
    }

    return HAL_OK;
2400c746:	2300      	movs	r3, #0
2400c748:	e000      	b.n	2400c74c <HAL_I2C_Slave_Transmit_DMA+0x1c0>
  }
  else
  {
    return HAL_BUSY;
2400c74a:	2302      	movs	r3, #2
  }
}
2400c74c:	4618      	mov	r0, r3
2400c74e:	3718      	adds	r7, #24
2400c750:	46bd      	mov	sp, r7
2400c752:	bd80      	pop	{r7, pc}
2400c754:	ffff0000 	.word	0xffff0000
2400c758:	2400f0ad 	.word	0x2400f0ad
2400c75c:	24010119 	.word	0x24010119
2400c760:	24010355 	.word	0x24010355

2400c764 <HAL_I2C_Slave_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
2400c764:	b580      	push	{r7, lr}
2400c766:	b086      	sub	sp, #24
2400c768:	af00      	add	r7, sp, #0
2400c76a:	60f8      	str	r0, [r7, #12]
2400c76c:	60b9      	str	r1, [r7, #8]
2400c76e:	4613      	mov	r3, r2
2400c770:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
2400c772:	68fb      	ldr	r3, [r7, #12]
2400c774:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400c778:	b2db      	uxtb	r3, r3
2400c77a:	2b20      	cmp	r3, #32
2400c77c:	f040 809b 	bne.w	2400c8b6 <HAL_I2C_Slave_Receive_DMA+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
2400c780:	68bb      	ldr	r3, [r7, #8]
2400c782:	2b00      	cmp	r3, #0
2400c784:	d002      	beq.n	2400c78c <HAL_I2C_Slave_Receive_DMA+0x28>
2400c786:	88fb      	ldrh	r3, [r7, #6]
2400c788:	2b00      	cmp	r3, #0
2400c78a:	d105      	bne.n	2400c798 <HAL_I2C_Slave_Receive_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
2400c78c:	68fb      	ldr	r3, [r7, #12]
2400c78e:	f44f 7200 	mov.w	r2, #512	; 0x200
2400c792:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
2400c794:	2301      	movs	r3, #1
2400c796:	e08f      	b.n	2400c8b8 <HAL_I2C_Slave_Receive_DMA+0x154>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
2400c798:	68fb      	ldr	r3, [r7, #12]
2400c79a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400c79e:	2b01      	cmp	r3, #1
2400c7a0:	d101      	bne.n	2400c7a6 <HAL_I2C_Slave_Receive_DMA+0x42>
2400c7a2:	2302      	movs	r3, #2
2400c7a4:	e088      	b.n	2400c8b8 <HAL_I2C_Slave_Receive_DMA+0x154>
2400c7a6:	68fb      	ldr	r3, [r7, #12]
2400c7a8:	2201      	movs	r2, #1
2400c7aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
2400c7ae:	68fb      	ldr	r3, [r7, #12]
2400c7b0:	2222      	movs	r2, #34	; 0x22
2400c7b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
2400c7b6:	68fb      	ldr	r3, [r7, #12]
2400c7b8:	2220      	movs	r2, #32
2400c7ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
2400c7be:	68fb      	ldr	r3, [r7, #12]
2400c7c0:	2200      	movs	r2, #0
2400c7c2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400c7c4:	68fb      	ldr	r3, [r7, #12]
2400c7c6:	68ba      	ldr	r2, [r7, #8]
2400c7c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
2400c7ca:	68fb      	ldr	r3, [r7, #12]
2400c7cc:	88fa      	ldrh	r2, [r7, #6]
2400c7ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
2400c7d0:	68fb      	ldr	r3, [r7, #12]
2400c7d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400c7d4:	b29a      	uxth	r2, r3
2400c7d6:	68fb      	ldr	r3, [r7, #12]
2400c7d8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2400c7da:	68fb      	ldr	r3, [r7, #12]
2400c7dc:	4a38      	ldr	r2, [pc, #224]	; (2400c8c0 <HAL_I2C_Slave_Receive_DMA+0x15c>)
2400c7de:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
2400c7e0:	68fb      	ldr	r3, [r7, #12]
2400c7e2:	4a38      	ldr	r2, [pc, #224]	; (2400c8c4 <HAL_I2C_Slave_Receive_DMA+0x160>)
2400c7e4:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->hdmarx != NULL)
2400c7e6:	68fb      	ldr	r3, [r7, #12]
2400c7e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400c7ea:	2b00      	cmp	r3, #0
2400c7ec:	d020      	beq.n	2400c830 <HAL_I2C_Slave_Receive_DMA+0xcc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMASlaveReceiveCplt;
2400c7ee:	68fb      	ldr	r3, [r7, #12]
2400c7f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400c7f2:	4a35      	ldr	r2, [pc, #212]	; (2400c8c8 <HAL_I2C_Slave_Receive_DMA+0x164>)
2400c7f4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
2400c7f6:	68fb      	ldr	r3, [r7, #12]
2400c7f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400c7fa:	4a34      	ldr	r2, [pc, #208]	; (2400c8cc <HAL_I2C_Slave_Receive_DMA+0x168>)
2400c7fc:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
2400c7fe:	68fb      	ldr	r3, [r7, #12]
2400c800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400c802:	2200      	movs	r2, #0
2400c804:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
2400c806:	68fb      	ldr	r3, [r7, #12]
2400c808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400c80a:	2200      	movs	r2, #0
2400c80c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream or channel depends on Instance */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
2400c80e:	68fb      	ldr	r3, [r7, #12]
2400c810:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
2400c812:	68fb      	ldr	r3, [r7, #12]
2400c814:	681b      	ldr	r3, [r3, #0]
2400c816:	3324      	adds	r3, #36	; 0x24
2400c818:	4619      	mov	r1, r3
2400c81a:	68ba      	ldr	r2, [r7, #8]
                                       hi2c->XferSize);
2400c81c:	68fb      	ldr	r3, [r7, #12]
2400c81e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
2400c820:	f7f8 f9da 	bl	24004bd8 <HAL_DMA_Start_IT>
2400c824:	4603      	mov	r3, r0
2400c826:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
2400c828:	7dfb      	ldrb	r3, [r7, #23]
2400c82a:	2b00      	cmp	r3, #0
2400c82c:	d12f      	bne.n	2400c88e <HAL_I2C_Slave_Receive_DMA+0x12a>
2400c82e:	e013      	b.n	2400c858 <HAL_I2C_Slave_Receive_DMA+0xf4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
2400c830:	68fb      	ldr	r3, [r7, #12]
2400c832:	2228      	movs	r2, #40	; 0x28
2400c834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
2400c838:	68fb      	ldr	r3, [r7, #12]
2400c83a:	2200      	movs	r2, #0
2400c83c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
2400c840:	68fb      	ldr	r3, [r7, #12]
2400c842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400c844:	f043 0280 	orr.w	r2, r3, #128	; 0x80
2400c848:	68fb      	ldr	r3, [r7, #12]
2400c84a:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
2400c84c:	68fb      	ldr	r3, [r7, #12]
2400c84e:	2200      	movs	r2, #0
2400c850:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
2400c854:	2301      	movs	r3, #1
2400c856:	e02f      	b.n	2400c8b8 <HAL_I2C_Slave_Receive_DMA+0x154>
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
2400c858:	68fb      	ldr	r3, [r7, #12]
2400c85a:	681b      	ldr	r3, [r3, #0]
2400c85c:	685a      	ldr	r2, [r3, #4]
2400c85e:	68fb      	ldr	r3, [r7, #12]
2400c860:	681b      	ldr	r3, [r3, #0]
2400c862:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
2400c866:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2400c868:	68fb      	ldr	r3, [r7, #12]
2400c86a:	2200      	movs	r2, #0
2400c86c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
2400c870:	f44f 4100 	mov.w	r1, #32768	; 0x8000
2400c874:	68f8      	ldr	r0, [r7, #12]
2400c876:	f004 f933 	bl	24010ae0 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
2400c87a:	68fb      	ldr	r3, [r7, #12]
2400c87c:	681b      	ldr	r3, [r3, #0]
2400c87e:	681a      	ldr	r2, [r3, #0]
2400c880:	68fb      	ldr	r3, [r7, #12]
2400c882:	681b      	ldr	r3, [r3, #0]
2400c884:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2400c888:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
2400c88a:	2300      	movs	r3, #0
2400c88c:	e014      	b.n	2400c8b8 <HAL_I2C_Slave_Receive_DMA+0x154>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
2400c88e:	68fb      	ldr	r3, [r7, #12]
2400c890:	2228      	movs	r2, #40	; 0x28
2400c892:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
2400c896:	68fb      	ldr	r3, [r7, #12]
2400c898:	2200      	movs	r2, #0
2400c89a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
2400c89e:	68fb      	ldr	r3, [r7, #12]
2400c8a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400c8a2:	f043 0210 	orr.w	r2, r3, #16
2400c8a6:	68fb      	ldr	r3, [r7, #12]
2400c8a8:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
2400c8aa:	68fb      	ldr	r3, [r7, #12]
2400c8ac:	2200      	movs	r2, #0
2400c8ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
2400c8b2:	2301      	movs	r3, #1
2400c8b4:	e000      	b.n	2400c8b8 <HAL_I2C_Slave_Receive_DMA+0x154>
  }
  else
  {
    return HAL_BUSY;
2400c8b6:	2302      	movs	r3, #2
  }
}
2400c8b8:	4618      	mov	r0, r3
2400c8ba:	3718      	adds	r7, #24
2400c8bc:	46bd      	mov	sp, r7
2400c8be:	bd80      	pop	{r7, pc}
2400c8c0:	ffff0000 	.word	0xffff0000
2400c8c4:	2400f0ad 	.word	0x2400f0ad
2400c8c8:	240101f1 	.word	0x240101f1
2400c8cc:	24010355 	.word	0x24010355

2400c8d0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
2400c8d0:	b580      	push	{r7, lr}
2400c8d2:	b088      	sub	sp, #32
2400c8d4:	af02      	add	r7, sp, #8
2400c8d6:	60f8      	str	r0, [r7, #12]
2400c8d8:	4608      	mov	r0, r1
2400c8da:	4611      	mov	r1, r2
2400c8dc:	461a      	mov	r2, r3
2400c8de:	4603      	mov	r3, r0
2400c8e0:	817b      	strh	r3, [r7, #10]
2400c8e2:	460b      	mov	r3, r1
2400c8e4:	813b      	strh	r3, [r7, #8]
2400c8e6:	4613      	mov	r3, r2
2400c8e8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
2400c8ea:	68fb      	ldr	r3, [r7, #12]
2400c8ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400c8f0:	b2db      	uxtb	r3, r3
2400c8f2:	2b20      	cmp	r3, #32
2400c8f4:	f040 80f9 	bne.w	2400caea <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
2400c8f8:	6a3b      	ldr	r3, [r7, #32]
2400c8fa:	2b00      	cmp	r3, #0
2400c8fc:	d002      	beq.n	2400c904 <HAL_I2C_Mem_Write+0x34>
2400c8fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
2400c900:	2b00      	cmp	r3, #0
2400c902:	d105      	bne.n	2400c910 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
2400c904:	68fb      	ldr	r3, [r7, #12]
2400c906:	f44f 7200 	mov.w	r2, #512	; 0x200
2400c90a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
2400c90c:	2301      	movs	r3, #1
2400c90e:	e0ed      	b.n	2400caec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
2400c910:	68fb      	ldr	r3, [r7, #12]
2400c912:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400c916:	2b01      	cmp	r3, #1
2400c918:	d101      	bne.n	2400c91e <HAL_I2C_Mem_Write+0x4e>
2400c91a:	2302      	movs	r3, #2
2400c91c:	e0e6      	b.n	2400caec <HAL_I2C_Mem_Write+0x21c>
2400c91e:	68fb      	ldr	r3, [r7, #12]
2400c920:	2201      	movs	r2, #1
2400c922:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
2400c926:	f7f6 fbbd 	bl	240030a4 <HAL_GetTick>
2400c92a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
2400c92c:	697b      	ldr	r3, [r7, #20]
2400c92e:	9300      	str	r3, [sp, #0]
2400c930:	2319      	movs	r3, #25
2400c932:	2201      	movs	r2, #1
2400c934:	f44f 4100 	mov.w	r1, #32768	; 0x8000
2400c938:	68f8      	ldr	r0, [r7, #12]
2400c93a:	f003 fe63 	bl	24010604 <I2C_WaitOnFlagUntilTimeout>
2400c93e:	4603      	mov	r3, r0
2400c940:	2b00      	cmp	r3, #0
2400c942:	d001      	beq.n	2400c948 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
2400c944:	2301      	movs	r3, #1
2400c946:	e0d1      	b.n	2400caec <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
2400c948:	68fb      	ldr	r3, [r7, #12]
2400c94a:	2221      	movs	r2, #33	; 0x21
2400c94c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
2400c950:	68fb      	ldr	r3, [r7, #12]
2400c952:	2240      	movs	r2, #64	; 0x40
2400c954:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400c958:	68fb      	ldr	r3, [r7, #12]
2400c95a:	2200      	movs	r2, #0
2400c95c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
2400c95e:	68fb      	ldr	r3, [r7, #12]
2400c960:	6a3a      	ldr	r2, [r7, #32]
2400c962:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
2400c964:	68fb      	ldr	r3, [r7, #12]
2400c966:	8cba      	ldrh	r2, [r7, #36]	; 0x24
2400c968:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
2400c96a:	68fb      	ldr	r3, [r7, #12]
2400c96c:	2200      	movs	r2, #0
2400c96e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
2400c970:	88f8      	ldrh	r0, [r7, #6]
2400c972:	893a      	ldrh	r2, [r7, #8]
2400c974:	8979      	ldrh	r1, [r7, #10]
2400c976:	697b      	ldr	r3, [r7, #20]
2400c978:	9301      	str	r3, [sp, #4]
2400c97a:	6abb      	ldr	r3, [r7, #40]	; 0x28
2400c97c:	9300      	str	r3, [sp, #0]
2400c97e:	4603      	mov	r3, r0
2400c980:	68f8      	ldr	r0, [r7, #12]
2400c982:	f002 fd6b 	bl	2400f45c <I2C_RequestMemoryWrite>
2400c986:	4603      	mov	r3, r0
2400c988:	2b00      	cmp	r3, #0
2400c98a:	d005      	beq.n	2400c998 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2400c98c:	68fb      	ldr	r3, [r7, #12]
2400c98e:	2200      	movs	r2, #0
2400c990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
2400c994:	2301      	movs	r3, #1
2400c996:	e0a9      	b.n	2400caec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400c998:	68fb      	ldr	r3, [r7, #12]
2400c99a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400c99c:	b29b      	uxth	r3, r3
2400c99e:	2bff      	cmp	r3, #255	; 0xff
2400c9a0:	d90e      	bls.n	2400c9c0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400c9a2:	68fb      	ldr	r3, [r7, #12]
2400c9a4:	22ff      	movs	r2, #255	; 0xff
2400c9a6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
2400c9a8:	68fb      	ldr	r3, [r7, #12]
2400c9aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400c9ac:	b2da      	uxtb	r2, r3
2400c9ae:	8979      	ldrh	r1, [r7, #10]
2400c9b0:	2300      	movs	r3, #0
2400c9b2:	9300      	str	r3, [sp, #0]
2400c9b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400c9b8:	68f8      	ldr	r0, [r7, #12]
2400c9ba:	f004 f85f 	bl	24010a7c <I2C_TransferConfig>
2400c9be:	e00f      	b.n	2400c9e0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2400c9c0:	68fb      	ldr	r3, [r7, #12]
2400c9c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400c9c4:	b29a      	uxth	r2, r3
2400c9c6:	68fb      	ldr	r3, [r7, #12]
2400c9c8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
2400c9ca:	68fb      	ldr	r3, [r7, #12]
2400c9cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400c9ce:	b2da      	uxtb	r2, r3
2400c9d0:	8979      	ldrh	r1, [r7, #10]
2400c9d2:	2300      	movs	r3, #0
2400c9d4:	9300      	str	r3, [sp, #0]
2400c9d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400c9da:	68f8      	ldr	r0, [r7, #12]
2400c9dc:	f004 f84e 	bl	24010a7c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
2400c9e0:	697a      	ldr	r2, [r7, #20]
2400c9e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
2400c9e4:	68f8      	ldr	r0, [r7, #12]
2400c9e6:	f003 fe5c 	bl	240106a2 <I2C_WaitOnTXISFlagUntilTimeout>
2400c9ea:	4603      	mov	r3, r0
2400c9ec:	2b00      	cmp	r3, #0
2400c9ee:	d001      	beq.n	2400c9f4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
2400c9f0:	2301      	movs	r3, #1
2400c9f2:	e07b      	b.n	2400caec <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
2400c9f4:	68fb      	ldr	r3, [r7, #12]
2400c9f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400c9f8:	781a      	ldrb	r2, [r3, #0]
2400c9fa:	68fb      	ldr	r3, [r7, #12]
2400c9fc:	681b      	ldr	r3, [r3, #0]
2400c9fe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
2400ca00:	68fb      	ldr	r3, [r7, #12]
2400ca02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400ca04:	1c5a      	adds	r2, r3, #1
2400ca06:	68fb      	ldr	r3, [r7, #12]
2400ca08:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
2400ca0a:	68fb      	ldr	r3, [r7, #12]
2400ca0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400ca0e:	b29b      	uxth	r3, r3
2400ca10:	3b01      	subs	r3, #1
2400ca12:	b29a      	uxth	r2, r3
2400ca14:	68fb      	ldr	r3, [r7, #12]
2400ca16:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
2400ca18:	68fb      	ldr	r3, [r7, #12]
2400ca1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400ca1c:	3b01      	subs	r3, #1
2400ca1e:	b29a      	uxth	r2, r3
2400ca20:	68fb      	ldr	r3, [r7, #12]
2400ca22:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
2400ca24:	68fb      	ldr	r3, [r7, #12]
2400ca26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400ca28:	b29b      	uxth	r3, r3
2400ca2a:	2b00      	cmp	r3, #0
2400ca2c:	d034      	beq.n	2400ca98 <HAL_I2C_Mem_Write+0x1c8>
2400ca2e:	68fb      	ldr	r3, [r7, #12]
2400ca30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400ca32:	2b00      	cmp	r3, #0
2400ca34:	d130      	bne.n	2400ca98 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
2400ca36:	697b      	ldr	r3, [r7, #20]
2400ca38:	9300      	str	r3, [sp, #0]
2400ca3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
2400ca3c:	2200      	movs	r2, #0
2400ca3e:	2180      	movs	r1, #128	; 0x80
2400ca40:	68f8      	ldr	r0, [r7, #12]
2400ca42:	f003 fddf 	bl	24010604 <I2C_WaitOnFlagUntilTimeout>
2400ca46:	4603      	mov	r3, r0
2400ca48:	2b00      	cmp	r3, #0
2400ca4a:	d001      	beq.n	2400ca50 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
2400ca4c:	2301      	movs	r3, #1
2400ca4e:	e04d      	b.n	2400caec <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400ca50:	68fb      	ldr	r3, [r7, #12]
2400ca52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400ca54:	b29b      	uxth	r3, r3
2400ca56:	2bff      	cmp	r3, #255	; 0xff
2400ca58:	d90e      	bls.n	2400ca78 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
2400ca5a:	68fb      	ldr	r3, [r7, #12]
2400ca5c:	22ff      	movs	r2, #255	; 0xff
2400ca5e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
2400ca60:	68fb      	ldr	r3, [r7, #12]
2400ca62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400ca64:	b2da      	uxtb	r2, r3
2400ca66:	8979      	ldrh	r1, [r7, #10]
2400ca68:	2300      	movs	r3, #0
2400ca6a:	9300      	str	r3, [sp, #0]
2400ca6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400ca70:	68f8      	ldr	r0, [r7, #12]
2400ca72:	f004 f803 	bl	24010a7c <I2C_TransferConfig>
2400ca76:	e00f      	b.n	2400ca98 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
2400ca78:	68fb      	ldr	r3, [r7, #12]
2400ca7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400ca7c:	b29a      	uxth	r2, r3
2400ca7e:	68fb      	ldr	r3, [r7, #12]
2400ca80:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
2400ca82:	68fb      	ldr	r3, [r7, #12]
2400ca84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400ca86:	b2da      	uxtb	r2, r3
2400ca88:	8979      	ldrh	r1, [r7, #10]
2400ca8a:	2300      	movs	r3, #0
2400ca8c:	9300      	str	r3, [sp, #0]
2400ca8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400ca92:	68f8      	ldr	r0, [r7, #12]
2400ca94:	f003 fff2 	bl	24010a7c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
2400ca98:	68fb      	ldr	r3, [r7, #12]
2400ca9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400ca9c:	b29b      	uxth	r3, r3
2400ca9e:	2b00      	cmp	r3, #0
2400caa0:	d19e      	bne.n	2400c9e0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
2400caa2:	697a      	ldr	r2, [r7, #20]
2400caa4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
2400caa6:	68f8      	ldr	r0, [r7, #12]
2400caa8:	f003 fe42 	bl	24010730 <I2C_WaitOnSTOPFlagUntilTimeout>
2400caac:	4603      	mov	r3, r0
2400caae:	2b00      	cmp	r3, #0
2400cab0:	d001      	beq.n	2400cab6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
2400cab2:	2301      	movs	r3, #1
2400cab4:	e01a      	b.n	2400caec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2400cab6:	68fb      	ldr	r3, [r7, #12]
2400cab8:	681b      	ldr	r3, [r3, #0]
2400caba:	2220      	movs	r2, #32
2400cabc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
2400cabe:	68fb      	ldr	r3, [r7, #12]
2400cac0:	681b      	ldr	r3, [r3, #0]
2400cac2:	6859      	ldr	r1, [r3, #4]
2400cac4:	68fb      	ldr	r3, [r7, #12]
2400cac6:	681a      	ldr	r2, [r3, #0]
2400cac8:	4b0a      	ldr	r3, [pc, #40]	; (2400caf4 <HAL_I2C_Mem_Write+0x224>)
2400caca:	400b      	ands	r3, r1
2400cacc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
2400cace:	68fb      	ldr	r3, [r7, #12]
2400cad0:	2220      	movs	r2, #32
2400cad2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
2400cad6:	68fb      	ldr	r3, [r7, #12]
2400cad8:	2200      	movs	r2, #0
2400cada:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400cade:	68fb      	ldr	r3, [r7, #12]
2400cae0:	2200      	movs	r2, #0
2400cae2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
2400cae6:	2300      	movs	r3, #0
2400cae8:	e000      	b.n	2400caec <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
2400caea:	2302      	movs	r3, #2
  }
}
2400caec:	4618      	mov	r0, r3
2400caee:	3718      	adds	r7, #24
2400caf0:	46bd      	mov	sp, r7
2400caf2:	bd80      	pop	{r7, pc}
2400caf4:	fe00e800 	.word	0xfe00e800

2400caf8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
2400caf8:	b580      	push	{r7, lr}
2400cafa:	b088      	sub	sp, #32
2400cafc:	af02      	add	r7, sp, #8
2400cafe:	60f8      	str	r0, [r7, #12]
2400cb00:	4608      	mov	r0, r1
2400cb02:	4611      	mov	r1, r2
2400cb04:	461a      	mov	r2, r3
2400cb06:	4603      	mov	r3, r0
2400cb08:	817b      	strh	r3, [r7, #10]
2400cb0a:	460b      	mov	r3, r1
2400cb0c:	813b      	strh	r3, [r7, #8]
2400cb0e:	4613      	mov	r3, r2
2400cb10:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
2400cb12:	68fb      	ldr	r3, [r7, #12]
2400cb14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400cb18:	b2db      	uxtb	r3, r3
2400cb1a:	2b20      	cmp	r3, #32
2400cb1c:	f040 80fd 	bne.w	2400cd1a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
2400cb20:	6a3b      	ldr	r3, [r7, #32]
2400cb22:	2b00      	cmp	r3, #0
2400cb24:	d002      	beq.n	2400cb2c <HAL_I2C_Mem_Read+0x34>
2400cb26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
2400cb28:	2b00      	cmp	r3, #0
2400cb2a:	d105      	bne.n	2400cb38 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
2400cb2c:	68fb      	ldr	r3, [r7, #12]
2400cb2e:	f44f 7200 	mov.w	r2, #512	; 0x200
2400cb32:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
2400cb34:	2301      	movs	r3, #1
2400cb36:	e0f1      	b.n	2400cd1c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
2400cb38:	68fb      	ldr	r3, [r7, #12]
2400cb3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400cb3e:	2b01      	cmp	r3, #1
2400cb40:	d101      	bne.n	2400cb46 <HAL_I2C_Mem_Read+0x4e>
2400cb42:	2302      	movs	r3, #2
2400cb44:	e0ea      	b.n	2400cd1c <HAL_I2C_Mem_Read+0x224>
2400cb46:	68fb      	ldr	r3, [r7, #12]
2400cb48:	2201      	movs	r2, #1
2400cb4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
2400cb4e:	f7f6 faa9 	bl	240030a4 <HAL_GetTick>
2400cb52:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
2400cb54:	697b      	ldr	r3, [r7, #20]
2400cb56:	9300      	str	r3, [sp, #0]
2400cb58:	2319      	movs	r3, #25
2400cb5a:	2201      	movs	r2, #1
2400cb5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
2400cb60:	68f8      	ldr	r0, [r7, #12]
2400cb62:	f003 fd4f 	bl	24010604 <I2C_WaitOnFlagUntilTimeout>
2400cb66:	4603      	mov	r3, r0
2400cb68:	2b00      	cmp	r3, #0
2400cb6a:	d001      	beq.n	2400cb70 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
2400cb6c:	2301      	movs	r3, #1
2400cb6e:	e0d5      	b.n	2400cd1c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
2400cb70:	68fb      	ldr	r3, [r7, #12]
2400cb72:	2222      	movs	r2, #34	; 0x22
2400cb74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
2400cb78:	68fb      	ldr	r3, [r7, #12]
2400cb7a:	2240      	movs	r2, #64	; 0x40
2400cb7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400cb80:	68fb      	ldr	r3, [r7, #12]
2400cb82:	2200      	movs	r2, #0
2400cb84:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
2400cb86:	68fb      	ldr	r3, [r7, #12]
2400cb88:	6a3a      	ldr	r2, [r7, #32]
2400cb8a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
2400cb8c:	68fb      	ldr	r3, [r7, #12]
2400cb8e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
2400cb90:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
2400cb92:	68fb      	ldr	r3, [r7, #12]
2400cb94:	2200      	movs	r2, #0
2400cb96:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
2400cb98:	88f8      	ldrh	r0, [r7, #6]
2400cb9a:	893a      	ldrh	r2, [r7, #8]
2400cb9c:	8979      	ldrh	r1, [r7, #10]
2400cb9e:	697b      	ldr	r3, [r7, #20]
2400cba0:	9301      	str	r3, [sp, #4]
2400cba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
2400cba4:	9300      	str	r3, [sp, #0]
2400cba6:	4603      	mov	r3, r0
2400cba8:	68f8      	ldr	r0, [r7, #12]
2400cbaa:	f002 fcab 	bl	2400f504 <I2C_RequestMemoryRead>
2400cbae:	4603      	mov	r3, r0
2400cbb0:	2b00      	cmp	r3, #0
2400cbb2:	d005      	beq.n	2400cbc0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2400cbb4:	68fb      	ldr	r3, [r7, #12]
2400cbb6:	2200      	movs	r2, #0
2400cbb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
2400cbbc:	2301      	movs	r3, #1
2400cbbe:	e0ad      	b.n	2400cd1c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400cbc0:	68fb      	ldr	r3, [r7, #12]
2400cbc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400cbc4:	b29b      	uxth	r3, r3
2400cbc6:	2bff      	cmp	r3, #255	; 0xff
2400cbc8:	d90e      	bls.n	2400cbe8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400cbca:	68fb      	ldr	r3, [r7, #12]
2400cbcc:	22ff      	movs	r2, #255	; 0xff
2400cbce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
2400cbd0:	68fb      	ldr	r3, [r7, #12]
2400cbd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400cbd4:	b2da      	uxtb	r2, r3
2400cbd6:	8979      	ldrh	r1, [r7, #10]
2400cbd8:	4b52      	ldr	r3, [pc, #328]	; (2400cd24 <HAL_I2C_Mem_Read+0x22c>)
2400cbda:	9300      	str	r3, [sp, #0]
2400cbdc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400cbe0:	68f8      	ldr	r0, [r7, #12]
2400cbe2:	f003 ff4b 	bl	24010a7c <I2C_TransferConfig>
2400cbe6:	e00f      	b.n	2400cc08 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2400cbe8:	68fb      	ldr	r3, [r7, #12]
2400cbea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400cbec:	b29a      	uxth	r2, r3
2400cbee:	68fb      	ldr	r3, [r7, #12]
2400cbf0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
2400cbf2:	68fb      	ldr	r3, [r7, #12]
2400cbf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400cbf6:	b2da      	uxtb	r2, r3
2400cbf8:	8979      	ldrh	r1, [r7, #10]
2400cbfa:	4b4a      	ldr	r3, [pc, #296]	; (2400cd24 <HAL_I2C_Mem_Read+0x22c>)
2400cbfc:	9300      	str	r3, [sp, #0]
2400cbfe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400cc02:	68f8      	ldr	r0, [r7, #12]
2400cc04:	f003 ff3a 	bl	24010a7c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
2400cc08:	697b      	ldr	r3, [r7, #20]
2400cc0a:	9300      	str	r3, [sp, #0]
2400cc0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
2400cc0e:	2200      	movs	r2, #0
2400cc10:	2104      	movs	r1, #4
2400cc12:	68f8      	ldr	r0, [r7, #12]
2400cc14:	f003 fcf6 	bl	24010604 <I2C_WaitOnFlagUntilTimeout>
2400cc18:	4603      	mov	r3, r0
2400cc1a:	2b00      	cmp	r3, #0
2400cc1c:	d001      	beq.n	2400cc22 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
2400cc1e:	2301      	movs	r3, #1
2400cc20:	e07c      	b.n	2400cd1c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
2400cc22:	68fb      	ldr	r3, [r7, #12]
2400cc24:	681b      	ldr	r3, [r3, #0]
2400cc26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
2400cc28:	68fb      	ldr	r3, [r7, #12]
2400cc2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400cc2c:	b2d2      	uxtb	r2, r2
2400cc2e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
2400cc30:	68fb      	ldr	r3, [r7, #12]
2400cc32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400cc34:	1c5a      	adds	r2, r3, #1
2400cc36:	68fb      	ldr	r3, [r7, #12]
2400cc38:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
2400cc3a:	68fb      	ldr	r3, [r7, #12]
2400cc3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400cc3e:	3b01      	subs	r3, #1
2400cc40:	b29a      	uxth	r2, r3
2400cc42:	68fb      	ldr	r3, [r7, #12]
2400cc44:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
2400cc46:	68fb      	ldr	r3, [r7, #12]
2400cc48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400cc4a:	b29b      	uxth	r3, r3
2400cc4c:	3b01      	subs	r3, #1
2400cc4e:	b29a      	uxth	r2, r3
2400cc50:	68fb      	ldr	r3, [r7, #12]
2400cc52:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
2400cc54:	68fb      	ldr	r3, [r7, #12]
2400cc56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400cc58:	b29b      	uxth	r3, r3
2400cc5a:	2b00      	cmp	r3, #0
2400cc5c:	d034      	beq.n	2400ccc8 <HAL_I2C_Mem_Read+0x1d0>
2400cc5e:	68fb      	ldr	r3, [r7, #12]
2400cc60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400cc62:	2b00      	cmp	r3, #0
2400cc64:	d130      	bne.n	2400ccc8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
2400cc66:	697b      	ldr	r3, [r7, #20]
2400cc68:	9300      	str	r3, [sp, #0]
2400cc6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
2400cc6c:	2200      	movs	r2, #0
2400cc6e:	2180      	movs	r1, #128	; 0x80
2400cc70:	68f8      	ldr	r0, [r7, #12]
2400cc72:	f003 fcc7 	bl	24010604 <I2C_WaitOnFlagUntilTimeout>
2400cc76:	4603      	mov	r3, r0
2400cc78:	2b00      	cmp	r3, #0
2400cc7a:	d001      	beq.n	2400cc80 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
2400cc7c:	2301      	movs	r3, #1
2400cc7e:	e04d      	b.n	2400cd1c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400cc80:	68fb      	ldr	r3, [r7, #12]
2400cc82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400cc84:	b29b      	uxth	r3, r3
2400cc86:	2bff      	cmp	r3, #255	; 0xff
2400cc88:	d90e      	bls.n	2400cca8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
2400cc8a:	68fb      	ldr	r3, [r7, #12]
2400cc8c:	22ff      	movs	r2, #255	; 0xff
2400cc8e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
2400cc90:	68fb      	ldr	r3, [r7, #12]
2400cc92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400cc94:	b2da      	uxtb	r2, r3
2400cc96:	8979      	ldrh	r1, [r7, #10]
2400cc98:	2300      	movs	r3, #0
2400cc9a:	9300      	str	r3, [sp, #0]
2400cc9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400cca0:	68f8      	ldr	r0, [r7, #12]
2400cca2:	f003 feeb 	bl	24010a7c <I2C_TransferConfig>
2400cca6:	e00f      	b.n	2400ccc8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
2400cca8:	68fb      	ldr	r3, [r7, #12]
2400ccaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400ccac:	b29a      	uxth	r2, r3
2400ccae:	68fb      	ldr	r3, [r7, #12]
2400ccb0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
2400ccb2:	68fb      	ldr	r3, [r7, #12]
2400ccb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400ccb6:	b2da      	uxtb	r2, r3
2400ccb8:	8979      	ldrh	r1, [r7, #10]
2400ccba:	2300      	movs	r3, #0
2400ccbc:	9300      	str	r3, [sp, #0]
2400ccbe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400ccc2:	68f8      	ldr	r0, [r7, #12]
2400ccc4:	f003 feda 	bl	24010a7c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
2400ccc8:	68fb      	ldr	r3, [r7, #12]
2400ccca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400cccc:	b29b      	uxth	r3, r3
2400ccce:	2b00      	cmp	r3, #0
2400ccd0:	d19a      	bne.n	2400cc08 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
2400ccd2:	697a      	ldr	r2, [r7, #20]
2400ccd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
2400ccd6:	68f8      	ldr	r0, [r7, #12]
2400ccd8:	f003 fd2a 	bl	24010730 <I2C_WaitOnSTOPFlagUntilTimeout>
2400ccdc:	4603      	mov	r3, r0
2400ccde:	2b00      	cmp	r3, #0
2400cce0:	d001      	beq.n	2400cce6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
2400cce2:	2301      	movs	r3, #1
2400cce4:	e01a      	b.n	2400cd1c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2400cce6:	68fb      	ldr	r3, [r7, #12]
2400cce8:	681b      	ldr	r3, [r3, #0]
2400ccea:	2220      	movs	r2, #32
2400ccec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
2400ccee:	68fb      	ldr	r3, [r7, #12]
2400ccf0:	681b      	ldr	r3, [r3, #0]
2400ccf2:	6859      	ldr	r1, [r3, #4]
2400ccf4:	68fb      	ldr	r3, [r7, #12]
2400ccf6:	681a      	ldr	r2, [r3, #0]
2400ccf8:	4b0b      	ldr	r3, [pc, #44]	; (2400cd28 <HAL_I2C_Mem_Read+0x230>)
2400ccfa:	400b      	ands	r3, r1
2400ccfc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
2400ccfe:	68fb      	ldr	r3, [r7, #12]
2400cd00:	2220      	movs	r2, #32
2400cd02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
2400cd06:	68fb      	ldr	r3, [r7, #12]
2400cd08:	2200      	movs	r2, #0
2400cd0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400cd0e:	68fb      	ldr	r3, [r7, #12]
2400cd10:	2200      	movs	r2, #0
2400cd12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
2400cd16:	2300      	movs	r3, #0
2400cd18:	e000      	b.n	2400cd1c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
2400cd1a:	2302      	movs	r3, #2
  }
}
2400cd1c:	4618      	mov	r0, r3
2400cd1e:	3718      	adds	r7, #24
2400cd20:	46bd      	mov	sp, r7
2400cd22:	bd80      	pop	{r7, pc}
2400cd24:	80002400 	.word	0x80002400
2400cd28:	fe00e800 	.word	0xfe00e800

2400cd2c <HAL_I2C_Mem_Write_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
2400cd2c:	b580      	push	{r7, lr}
2400cd2e:	b086      	sub	sp, #24
2400cd30:	af02      	add	r7, sp, #8
2400cd32:	60f8      	str	r0, [r7, #12]
2400cd34:	4608      	mov	r0, r1
2400cd36:	4611      	mov	r1, r2
2400cd38:	461a      	mov	r2, r3
2400cd3a:	4603      	mov	r3, r0
2400cd3c:	817b      	strh	r3, [r7, #10]
2400cd3e:	460b      	mov	r3, r1
2400cd40:	813b      	strh	r3, [r7, #8]
2400cd42:	4613      	mov	r3, r2
2400cd44:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
2400cd46:	68fb      	ldr	r3, [r7, #12]
2400cd48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400cd4c:	b2db      	uxtb	r3, r3
2400cd4e:	2b20      	cmp	r3, #32
2400cd50:	d167      	bne.n	2400ce22 <HAL_I2C_Mem_Write_IT+0xf6>
  {
    if ((pData == NULL) || (Size == 0U))
2400cd52:	69bb      	ldr	r3, [r7, #24]
2400cd54:	2b00      	cmp	r3, #0
2400cd56:	d002      	beq.n	2400cd5e <HAL_I2C_Mem_Write_IT+0x32>
2400cd58:	8bbb      	ldrh	r3, [r7, #28]
2400cd5a:	2b00      	cmp	r3, #0
2400cd5c:	d105      	bne.n	2400cd6a <HAL_I2C_Mem_Write_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
2400cd5e:	68fb      	ldr	r3, [r7, #12]
2400cd60:	f44f 7200 	mov.w	r2, #512	; 0x200
2400cd64:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
2400cd66:	2301      	movs	r3, #1
2400cd68:	e05c      	b.n	2400ce24 <HAL_I2C_Mem_Write_IT+0xf8>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
2400cd6a:	68fb      	ldr	r3, [r7, #12]
2400cd6c:	681b      	ldr	r3, [r3, #0]
2400cd6e:	699b      	ldr	r3, [r3, #24]
2400cd70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
2400cd74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
2400cd78:	d101      	bne.n	2400cd7e <HAL_I2C_Mem_Write_IT+0x52>
    {
      return HAL_BUSY;
2400cd7a:	2302      	movs	r3, #2
2400cd7c:	e052      	b.n	2400ce24 <HAL_I2C_Mem_Write_IT+0xf8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
2400cd7e:	68fb      	ldr	r3, [r7, #12]
2400cd80:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400cd84:	2b01      	cmp	r3, #1
2400cd86:	d101      	bne.n	2400cd8c <HAL_I2C_Mem_Write_IT+0x60>
2400cd88:	2302      	movs	r3, #2
2400cd8a:	e04b      	b.n	2400ce24 <HAL_I2C_Mem_Write_IT+0xf8>
2400cd8c:	68fb      	ldr	r3, [r7, #12]
2400cd8e:	2201      	movs	r2, #1
2400cd90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
2400cd94:	68fb      	ldr	r3, [r7, #12]
2400cd96:	2221      	movs	r2, #33	; 0x21
2400cd98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
2400cd9c:	68fb      	ldr	r3, [r7, #12]
2400cd9e:	2240      	movs	r2, #64	; 0x40
2400cda0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
2400cda4:	68fb      	ldr	r3, [r7, #12]
2400cda6:	2200      	movs	r2, #0
2400cda8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400cdaa:	68fb      	ldr	r3, [r7, #12]
2400cdac:	69ba      	ldr	r2, [r7, #24]
2400cdae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
2400cdb0:	68fb      	ldr	r3, [r7, #12]
2400cdb2:	8bba      	ldrh	r2, [r7, #28]
2400cdb4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2400cdb6:	68fb      	ldr	r3, [r7, #12]
2400cdb8:	4a1c      	ldr	r2, [pc, #112]	; (2400ce2c <HAL_I2C_Mem_Write_IT+0x100>)
2400cdba:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
2400cdbc:	68fb      	ldr	r3, [r7, #12]
2400cdbe:	4a1c      	ldr	r2, [pc, #112]	; (2400ce30 <HAL_I2C_Mem_Write_IT+0x104>)
2400cdc0:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->Devaddress  = DevAddress;
2400cdc2:	897a      	ldrh	r2, [r7, #10]
2400cdc4:	68fb      	ldr	r3, [r7, #12]
2400cdc6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
2400cdc8:	88fb      	ldrh	r3, [r7, #6]
2400cdca:	2b01      	cmp	r3, #1
2400cdcc:	d109      	bne.n	2400cde2 <HAL_I2C_Mem_Write_IT+0xb6>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
2400cdce:	893b      	ldrh	r3, [r7, #8]
2400cdd0:	b2da      	uxtb	r2, r3
2400cdd2:	68fb      	ldr	r3, [r7, #12]
2400cdd4:	681b      	ldr	r3, [r3, #0]
2400cdd6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
2400cdd8:	68fb      	ldr	r3, [r7, #12]
2400cdda:	f04f 32ff 	mov.w	r2, #4294967295
2400cdde:	651a      	str	r2, [r3, #80]	; 0x50
2400cde0:	e00b      	b.n	2400cdfa <HAL_I2C_Mem_Write_IT+0xce>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
2400cde2:	893b      	ldrh	r3, [r7, #8]
2400cde4:	0a1b      	lsrs	r3, r3, #8
2400cde6:	b29b      	uxth	r3, r3
2400cde8:	b2da      	uxtb	r2, r3
2400cdea:	68fb      	ldr	r3, [r7, #12]
2400cdec:	681b      	ldr	r3, [r3, #0]
2400cdee:	629a      	str	r2, [r3, #40]	; 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
2400cdf0:	893b      	ldrh	r3, [r7, #8]
2400cdf2:	b2db      	uxtb	r3, r3
2400cdf4:	461a      	mov	r2, r3
2400cdf6:	68fb      	ldr	r3, [r7, #12]
2400cdf8:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
2400cdfa:	88fb      	ldrh	r3, [r7, #6]
2400cdfc:	b2da      	uxtb	r2, r3
2400cdfe:	8979      	ldrh	r1, [r7, #10]
2400ce00:	4b0c      	ldr	r3, [pc, #48]	; (2400ce34 <HAL_I2C_Mem_Write_IT+0x108>)
2400ce02:	9300      	str	r3, [sp, #0]
2400ce04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400ce08:	68f8      	ldr	r0, [r7, #12]
2400ce0a:	f003 fe37 	bl	24010a7c <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400ce0e:	68fb      	ldr	r3, [r7, #12]
2400ce10:	2200      	movs	r2, #0
2400ce12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
2400ce16:	2101      	movs	r1, #1
2400ce18:	68f8      	ldr	r0, [r7, #12]
2400ce1a:	f003 fe61 	bl	24010ae0 <I2C_Enable_IRQ>

    return HAL_OK;
2400ce1e:	2300      	movs	r3, #0
2400ce20:	e000      	b.n	2400ce24 <HAL_I2C_Mem_Write_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
2400ce22:	2302      	movs	r3, #2
  }
}
2400ce24:	4618      	mov	r0, r3
2400ce26:	3710      	adds	r7, #16
2400ce28:	46bd      	mov	sp, r7
2400ce2a:	bd80      	pop	{r7, pc}
2400ce2c:	ffff0000 	.word	0xffff0000
2400ce30:	2400e875 	.word	0x2400e875
2400ce34:	80002000 	.word	0x80002000

2400ce38 <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
2400ce38:	b580      	push	{r7, lr}
2400ce3a:	b086      	sub	sp, #24
2400ce3c:	af02      	add	r7, sp, #8
2400ce3e:	60f8      	str	r0, [r7, #12]
2400ce40:	4608      	mov	r0, r1
2400ce42:	4611      	mov	r1, r2
2400ce44:	461a      	mov	r2, r3
2400ce46:	4603      	mov	r3, r0
2400ce48:	817b      	strh	r3, [r7, #10]
2400ce4a:	460b      	mov	r3, r1
2400ce4c:	813b      	strh	r3, [r7, #8]
2400ce4e:	4613      	mov	r3, r2
2400ce50:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
2400ce52:	68fb      	ldr	r3, [r7, #12]
2400ce54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400ce58:	b2db      	uxtb	r3, r3
2400ce5a:	2b20      	cmp	r3, #32
2400ce5c:	d166      	bne.n	2400cf2c <HAL_I2C_Mem_Read_IT+0xf4>
  {
    if ((pData == NULL) || (Size == 0U))
2400ce5e:	69bb      	ldr	r3, [r7, #24]
2400ce60:	2b00      	cmp	r3, #0
2400ce62:	d002      	beq.n	2400ce6a <HAL_I2C_Mem_Read_IT+0x32>
2400ce64:	8bbb      	ldrh	r3, [r7, #28]
2400ce66:	2b00      	cmp	r3, #0
2400ce68:	d105      	bne.n	2400ce76 <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
2400ce6a:	68fb      	ldr	r3, [r7, #12]
2400ce6c:	f44f 7200 	mov.w	r2, #512	; 0x200
2400ce70:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
2400ce72:	2301      	movs	r3, #1
2400ce74:	e05b      	b.n	2400cf2e <HAL_I2C_Mem_Read_IT+0xf6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
2400ce76:	68fb      	ldr	r3, [r7, #12]
2400ce78:	681b      	ldr	r3, [r3, #0]
2400ce7a:	699b      	ldr	r3, [r3, #24]
2400ce7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
2400ce80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
2400ce84:	d101      	bne.n	2400ce8a <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
2400ce86:	2302      	movs	r3, #2
2400ce88:	e051      	b.n	2400cf2e <HAL_I2C_Mem_Read_IT+0xf6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
2400ce8a:	68fb      	ldr	r3, [r7, #12]
2400ce8c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400ce90:	2b01      	cmp	r3, #1
2400ce92:	d101      	bne.n	2400ce98 <HAL_I2C_Mem_Read_IT+0x60>
2400ce94:	2302      	movs	r3, #2
2400ce96:	e04a      	b.n	2400cf2e <HAL_I2C_Mem_Read_IT+0xf6>
2400ce98:	68fb      	ldr	r3, [r7, #12]
2400ce9a:	2201      	movs	r2, #1
2400ce9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
2400cea0:	68fb      	ldr	r3, [r7, #12]
2400cea2:	2222      	movs	r2, #34	; 0x22
2400cea4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
2400cea8:	68fb      	ldr	r3, [r7, #12]
2400ceaa:	2240      	movs	r2, #64	; 0x40
2400ceac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
2400ceb0:	68fb      	ldr	r3, [r7, #12]
2400ceb2:	2200      	movs	r2, #0
2400ceb4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400ceb6:	68fb      	ldr	r3, [r7, #12]
2400ceb8:	69ba      	ldr	r2, [r7, #24]
2400ceba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
2400cebc:	68fb      	ldr	r3, [r7, #12]
2400cebe:	8bba      	ldrh	r2, [r7, #28]
2400cec0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2400cec2:	68fb      	ldr	r3, [r7, #12]
2400cec4:	4a1c      	ldr	r2, [pc, #112]	; (2400cf38 <HAL_I2C_Mem_Read_IT+0x100>)
2400cec6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
2400cec8:	68fb      	ldr	r3, [r7, #12]
2400ceca:	4a1c      	ldr	r2, [pc, #112]	; (2400cf3c <HAL_I2C_Mem_Read_IT+0x104>)
2400cecc:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->Devaddress  = DevAddress;
2400cece:	897a      	ldrh	r2, [r7, #10]
2400ced0:	68fb      	ldr	r3, [r7, #12]
2400ced2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
2400ced4:	88fb      	ldrh	r3, [r7, #6]
2400ced6:	2b01      	cmp	r3, #1
2400ced8:	d109      	bne.n	2400ceee <HAL_I2C_Mem_Read_IT+0xb6>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
2400ceda:	893b      	ldrh	r3, [r7, #8]
2400cedc:	b2da      	uxtb	r2, r3
2400cede:	68fb      	ldr	r3, [r7, #12]
2400cee0:	681b      	ldr	r3, [r3, #0]
2400cee2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
2400cee4:	68fb      	ldr	r3, [r7, #12]
2400cee6:	f04f 32ff 	mov.w	r2, #4294967295
2400ceea:	651a      	str	r2, [r3, #80]	; 0x50
2400ceec:	e00b      	b.n	2400cf06 <HAL_I2C_Mem_Read_IT+0xce>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
2400ceee:	893b      	ldrh	r3, [r7, #8]
2400cef0:	0a1b      	lsrs	r3, r3, #8
2400cef2:	b29b      	uxth	r3, r3
2400cef4:	b2da      	uxtb	r2, r3
2400cef6:	68fb      	ldr	r3, [r7, #12]
2400cef8:	681b      	ldr	r3, [r3, #0]
2400cefa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
2400cefc:	893b      	ldrh	r3, [r7, #8]
2400cefe:	b2db      	uxtb	r3, r3
2400cf00:	461a      	mov	r2, r3
2400cf02:	68fb      	ldr	r3, [r7, #12]
2400cf04:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
2400cf06:	88fb      	ldrh	r3, [r7, #6]
2400cf08:	b2da      	uxtb	r2, r3
2400cf0a:	8979      	ldrh	r1, [r7, #10]
2400cf0c:	4b0c      	ldr	r3, [pc, #48]	; (2400cf40 <HAL_I2C_Mem_Read_IT+0x108>)
2400cf0e:	9300      	str	r3, [sp, #0]
2400cf10:	2300      	movs	r3, #0
2400cf12:	68f8      	ldr	r0, [r7, #12]
2400cf14:	f003 fdb2 	bl	24010a7c <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400cf18:	68fb      	ldr	r3, [r7, #12]
2400cf1a:	2200      	movs	r2, #0
2400cf1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, (I2C_XFER_TX_IT | I2C_XFER_RX_IT));
2400cf20:	2103      	movs	r1, #3
2400cf22:	68f8      	ldr	r0, [r7, #12]
2400cf24:	f003 fddc 	bl	24010ae0 <I2C_Enable_IRQ>

    return HAL_OK;
2400cf28:	2300      	movs	r3, #0
2400cf2a:	e000      	b.n	2400cf2e <HAL_I2C_Mem_Read_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
2400cf2c:	2302      	movs	r3, #2
  }
}
2400cf2e:	4618      	mov	r0, r3
2400cf30:	3710      	adds	r7, #16
2400cf32:	46bd      	mov	sp, r7
2400cf34:	bd80      	pop	{r7, pc}
2400cf36:	bf00      	nop
2400cf38:	ffff0000 	.word	0xffff0000
2400cf3c:	2400e875 	.word	0x2400e875
2400cf40:	80002000 	.word	0x80002000

2400cf44 <HAL_I2C_Mem_Write_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                        uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
2400cf44:	b580      	push	{r7, lr}
2400cf46:	b088      	sub	sp, #32
2400cf48:	af02      	add	r7, sp, #8
2400cf4a:	60f8      	str	r0, [r7, #12]
2400cf4c:	4608      	mov	r0, r1
2400cf4e:	4611      	mov	r1, r2
2400cf50:	461a      	mov	r2, r3
2400cf52:	4603      	mov	r3, r0
2400cf54:	817b      	strh	r3, [r7, #10]
2400cf56:	460b      	mov	r3, r1
2400cf58:	813b      	strh	r3, [r7, #8]
2400cf5a:	4613      	mov	r3, r2
2400cf5c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
2400cf5e:	68fb      	ldr	r3, [r7, #12]
2400cf60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400cf64:	b2db      	uxtb	r3, r3
2400cf66:	2b20      	cmp	r3, #32
2400cf68:	f040 80c3 	bne.w	2400d0f2 <HAL_I2C_Mem_Write_DMA+0x1ae>
  {
    if ((pData == NULL) || (Size == 0U))
2400cf6c:	6a3b      	ldr	r3, [r7, #32]
2400cf6e:	2b00      	cmp	r3, #0
2400cf70:	d002      	beq.n	2400cf78 <HAL_I2C_Mem_Write_DMA+0x34>
2400cf72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
2400cf74:	2b00      	cmp	r3, #0
2400cf76:	d105      	bne.n	2400cf84 <HAL_I2C_Mem_Write_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
2400cf78:	68fb      	ldr	r3, [r7, #12]
2400cf7a:	f44f 7200 	mov.w	r2, #512	; 0x200
2400cf7e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
2400cf80:	2301      	movs	r3, #1
2400cf82:	e0b7      	b.n	2400d0f4 <HAL_I2C_Mem_Write_DMA+0x1b0>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
2400cf84:	68fb      	ldr	r3, [r7, #12]
2400cf86:	681b      	ldr	r3, [r3, #0]
2400cf88:	699b      	ldr	r3, [r3, #24]
2400cf8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
2400cf8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
2400cf92:	d101      	bne.n	2400cf98 <HAL_I2C_Mem_Write_DMA+0x54>
    {
      return HAL_BUSY;
2400cf94:	2302      	movs	r3, #2
2400cf96:	e0ad      	b.n	2400d0f4 <HAL_I2C_Mem_Write_DMA+0x1b0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
2400cf98:	68fb      	ldr	r3, [r7, #12]
2400cf9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400cf9e:	2b01      	cmp	r3, #1
2400cfa0:	d101      	bne.n	2400cfa6 <HAL_I2C_Mem_Write_DMA+0x62>
2400cfa2:	2302      	movs	r3, #2
2400cfa4:	e0a6      	b.n	2400d0f4 <HAL_I2C_Mem_Write_DMA+0x1b0>
2400cfa6:	68fb      	ldr	r3, [r7, #12]
2400cfa8:	2201      	movs	r2, #1
2400cfaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
2400cfae:	68fb      	ldr	r3, [r7, #12]
2400cfb0:	2221      	movs	r2, #33	; 0x21
2400cfb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
2400cfb6:	68fb      	ldr	r3, [r7, #12]
2400cfb8:	2240      	movs	r2, #64	; 0x40
2400cfba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
2400cfbe:	68fb      	ldr	r3, [r7, #12]
2400cfc0:	2200      	movs	r2, #0
2400cfc2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400cfc4:	68fb      	ldr	r3, [r7, #12]
2400cfc6:	6a3a      	ldr	r2, [r7, #32]
2400cfc8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
2400cfca:	68fb      	ldr	r3, [r7, #12]
2400cfcc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
2400cfce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2400cfd0:	68fb      	ldr	r3, [r7, #12]
2400cfd2:	4a4a      	ldr	r2, [pc, #296]	; (2400d0fc <HAL_I2C_Mem_Write_DMA+0x1b8>)
2400cfd4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_DMA;
2400cfd6:	68fb      	ldr	r3, [r7, #12]
2400cfd8:	4a49      	ldr	r2, [pc, #292]	; (2400d100 <HAL_I2C_Mem_Write_DMA+0x1bc>)
2400cfda:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->Devaddress  = DevAddress;
2400cfdc:	897a      	ldrh	r2, [r7, #10]
2400cfde:	68fb      	ldr	r3, [r7, #12]
2400cfe0:	64da      	str	r2, [r3, #76]	; 0x4c

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400cfe2:	68fb      	ldr	r3, [r7, #12]
2400cfe4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400cfe6:	b29b      	uxth	r3, r3
2400cfe8:	2bff      	cmp	r3, #255	; 0xff
2400cfea:	d903      	bls.n	2400cff4 <HAL_I2C_Mem_Write_DMA+0xb0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400cfec:	68fb      	ldr	r3, [r7, #12]
2400cfee:	22ff      	movs	r2, #255	; 0xff
2400cff0:	851a      	strh	r2, [r3, #40]	; 0x28
2400cff2:	e004      	b.n	2400cffe <HAL_I2C_Mem_Write_DMA+0xba>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2400cff4:	68fb      	ldr	r3, [r7, #12]
2400cff6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400cff8:	b29a      	uxth	r2, r3
2400cffa:	68fb      	ldr	r3, [r7, #12]
2400cffc:	851a      	strh	r2, [r3, #40]	; 0x28
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
2400cffe:	88fb      	ldrh	r3, [r7, #6]
2400d000:	2b01      	cmp	r3, #1
2400d002:	d109      	bne.n	2400d018 <HAL_I2C_Mem_Write_DMA+0xd4>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
2400d004:	893b      	ldrh	r3, [r7, #8]
2400d006:	b2da      	uxtb	r2, r3
2400d008:	68fb      	ldr	r3, [r7, #12]
2400d00a:	681b      	ldr	r3, [r3, #0]
2400d00c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
2400d00e:	68fb      	ldr	r3, [r7, #12]
2400d010:	f04f 32ff 	mov.w	r2, #4294967295
2400d014:	651a      	str	r2, [r3, #80]	; 0x50
2400d016:	e00b      	b.n	2400d030 <HAL_I2C_Mem_Write_DMA+0xec>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
2400d018:	893b      	ldrh	r3, [r7, #8]
2400d01a:	0a1b      	lsrs	r3, r3, #8
2400d01c:	b29b      	uxth	r3, r3
2400d01e:	b2da      	uxtb	r2, r3
2400d020:	68fb      	ldr	r3, [r7, #12]
2400d022:	681b      	ldr	r3, [r3, #0]
2400d024:	629a      	str	r2, [r3, #40]	; 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
2400d026:	893b      	ldrh	r3, [r7, #8]
2400d028:	b2db      	uxtb	r3, r3
2400d02a:	461a      	mov	r2, r3
2400d02c:	68fb      	ldr	r3, [r7, #12]
2400d02e:	651a      	str	r2, [r3, #80]	; 0x50
    }

    if (hi2c->hdmatx != NULL)
2400d030:	68fb      	ldr	r3, [r7, #12]
2400d032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400d034:	2b00      	cmp	r3, #0
2400d036:	d020      	beq.n	2400d07a <HAL_I2C_Mem_Write_DMA+0x136>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
2400d038:	68fb      	ldr	r3, [r7, #12]
2400d03a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400d03c:	4a31      	ldr	r2, [pc, #196]	; (2400d104 <HAL_I2C_Mem_Write_DMA+0x1c0>)
2400d03e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
2400d040:	68fb      	ldr	r3, [r7, #12]
2400d042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400d044:	4a30      	ldr	r2, [pc, #192]	; (2400d108 <HAL_I2C_Mem_Write_DMA+0x1c4>)
2400d046:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
2400d048:	68fb      	ldr	r3, [r7, #12]
2400d04a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400d04c:	2200      	movs	r2, #0
2400d04e:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferAbortCallback = NULL;
2400d050:	68fb      	ldr	r3, [r7, #12]
2400d052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400d054:	2200      	movs	r2, #0
2400d056:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream or channel depends on Instance */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
2400d058:	68fb      	ldr	r3, [r7, #12]
2400d05a:	6b98      	ldr	r0, [r3, #56]	; 0x38
2400d05c:	6a39      	ldr	r1, [r7, #32]
2400d05e:	68fb      	ldr	r3, [r7, #12]
2400d060:	681b      	ldr	r3, [r3, #0]
2400d062:	3328      	adds	r3, #40	; 0x28
2400d064:	461a      	mov	r2, r3
                                       hi2c->XferSize);
2400d066:	68fb      	ldr	r3, [r7, #12]
2400d068:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
2400d06a:	f7f7 fdb5 	bl	24004bd8 <HAL_DMA_Start_IT>
2400d06e:	4603      	mov	r3, r0
2400d070:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
2400d072:	7dfb      	ldrb	r3, [r7, #23]
2400d074:	2b00      	cmp	r3, #0
2400d076:	d128      	bne.n	2400d0ca <HAL_I2C_Mem_Write_DMA+0x186>
2400d078:	e013      	b.n	2400d0a2 <HAL_I2C_Mem_Write_DMA+0x15e>
      hi2c->State     = HAL_I2C_STATE_READY;
2400d07a:	68fb      	ldr	r3, [r7, #12]
2400d07c:	2220      	movs	r2, #32
2400d07e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
2400d082:	68fb      	ldr	r3, [r7, #12]
2400d084:	2200      	movs	r2, #0
2400d086:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
2400d08a:	68fb      	ldr	r3, [r7, #12]
2400d08c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400d08e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
2400d092:	68fb      	ldr	r3, [r7, #12]
2400d094:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
2400d096:	68fb      	ldr	r3, [r7, #12]
2400d098:	2200      	movs	r2, #0
2400d09a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
2400d09e:	2301      	movs	r3, #1
2400d0a0:	e028      	b.n	2400d0f4 <HAL_I2C_Mem_Write_DMA+0x1b0>
    {
      /* Send Slave Address and Memory Address */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
2400d0a2:	88fb      	ldrh	r3, [r7, #6]
2400d0a4:	b2da      	uxtb	r2, r3
2400d0a6:	8979      	ldrh	r1, [r7, #10]
2400d0a8:	4b18      	ldr	r3, [pc, #96]	; (2400d10c <HAL_I2C_Mem_Write_DMA+0x1c8>)
2400d0aa:	9300      	str	r3, [sp, #0]
2400d0ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400d0b0:	68f8      	ldr	r0, [r7, #12]
2400d0b2:	f003 fce3 	bl	24010a7c <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2400d0b6:	68fb      	ldr	r3, [r7, #12]
2400d0b8:	2200      	movs	r2, #0
2400d0ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
2400d0be:	2101      	movs	r1, #1
2400d0c0:	68f8      	ldr	r0, [r7, #12]
2400d0c2:	f003 fd0d 	bl	24010ae0 <I2C_Enable_IRQ>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
2400d0c6:	2300      	movs	r3, #0
2400d0c8:	e014      	b.n	2400d0f4 <HAL_I2C_Mem_Write_DMA+0x1b0>
      hi2c->State     = HAL_I2C_STATE_READY;
2400d0ca:	68fb      	ldr	r3, [r7, #12]
2400d0cc:	2220      	movs	r2, #32
2400d0ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
2400d0d2:	68fb      	ldr	r3, [r7, #12]
2400d0d4:	2200      	movs	r2, #0
2400d0d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
2400d0da:	68fb      	ldr	r3, [r7, #12]
2400d0dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400d0de:	f043 0210 	orr.w	r2, r3, #16
2400d0e2:	68fb      	ldr	r3, [r7, #12]
2400d0e4:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
2400d0e6:	68fb      	ldr	r3, [r7, #12]
2400d0e8:	2200      	movs	r2, #0
2400d0ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
2400d0ee:	2301      	movs	r3, #1
2400d0f0:	e000      	b.n	2400d0f4 <HAL_I2C_Mem_Write_DMA+0x1b0>
  }
  else
  {
    return HAL_BUSY;
2400d0f2:	2302      	movs	r3, #2
  }
}
2400d0f4:	4618      	mov	r0, r3
2400d0f6:	3718      	adds	r7, #24
2400d0f8:	46bd      	mov	sp, r7
2400d0fa:	bd80      	pop	{r7, pc}
2400d0fc:	ffff0000 	.word	0xffff0000
2400d100:	2400ee79 	.word	0x2400ee79
2400d104:	24010083 	.word	0x24010083
2400d108:	24010355 	.word	0x24010355
2400d10c:	80002000 	.word	0x80002000

2400d110 <HAL_I2C_Mem_Read_DMA>:
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
2400d110:	b580      	push	{r7, lr}
2400d112:	b088      	sub	sp, #32
2400d114:	af02      	add	r7, sp, #8
2400d116:	60f8      	str	r0, [r7, #12]
2400d118:	4608      	mov	r0, r1
2400d11a:	4611      	mov	r1, r2
2400d11c:	461a      	mov	r2, r3
2400d11e:	4603      	mov	r3, r0
2400d120:	817b      	strh	r3, [r7, #10]
2400d122:	460b      	mov	r3, r1
2400d124:	813b      	strh	r3, [r7, #8]
2400d126:	4613      	mov	r3, r2
2400d128:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
2400d12a:	68fb      	ldr	r3, [r7, #12]
2400d12c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400d130:	b2db      	uxtb	r3, r3
2400d132:	2b20      	cmp	r3, #32
2400d134:	f040 80c2 	bne.w	2400d2bc <HAL_I2C_Mem_Read_DMA+0x1ac>
  {
    if ((pData == NULL) || (Size == 0U))
2400d138:	6a3b      	ldr	r3, [r7, #32]
2400d13a:	2b00      	cmp	r3, #0
2400d13c:	d002      	beq.n	2400d144 <HAL_I2C_Mem_Read_DMA+0x34>
2400d13e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
2400d140:	2b00      	cmp	r3, #0
2400d142:	d105      	bne.n	2400d150 <HAL_I2C_Mem_Read_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
2400d144:	68fb      	ldr	r3, [r7, #12]
2400d146:	f44f 7200 	mov.w	r2, #512	; 0x200
2400d14a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
2400d14c:	2301      	movs	r3, #1
2400d14e:	e0b6      	b.n	2400d2be <HAL_I2C_Mem_Read_DMA+0x1ae>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
2400d150:	68fb      	ldr	r3, [r7, #12]
2400d152:	681b      	ldr	r3, [r3, #0]
2400d154:	699b      	ldr	r3, [r3, #24]
2400d156:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
2400d15a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
2400d15e:	d101      	bne.n	2400d164 <HAL_I2C_Mem_Read_DMA+0x54>
    {
      return HAL_BUSY;
2400d160:	2302      	movs	r3, #2
2400d162:	e0ac      	b.n	2400d2be <HAL_I2C_Mem_Read_DMA+0x1ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
2400d164:	68fb      	ldr	r3, [r7, #12]
2400d166:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400d16a:	2b01      	cmp	r3, #1
2400d16c:	d101      	bne.n	2400d172 <HAL_I2C_Mem_Read_DMA+0x62>
2400d16e:	2302      	movs	r3, #2
2400d170:	e0a5      	b.n	2400d2be <HAL_I2C_Mem_Read_DMA+0x1ae>
2400d172:	68fb      	ldr	r3, [r7, #12]
2400d174:	2201      	movs	r2, #1
2400d176:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
2400d17a:	68fb      	ldr	r3, [r7, #12]
2400d17c:	2222      	movs	r2, #34	; 0x22
2400d17e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
2400d182:	68fb      	ldr	r3, [r7, #12]
2400d184:	2240      	movs	r2, #64	; 0x40
2400d186:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
2400d18a:	68fb      	ldr	r3, [r7, #12]
2400d18c:	2200      	movs	r2, #0
2400d18e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400d190:	68fb      	ldr	r3, [r7, #12]
2400d192:	6a3a      	ldr	r2, [r7, #32]
2400d194:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
2400d196:	68fb      	ldr	r3, [r7, #12]
2400d198:	8cba      	ldrh	r2, [r7, #36]	; 0x24
2400d19a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2400d19c:	68fb      	ldr	r3, [r7, #12]
2400d19e:	4a4a      	ldr	r2, [pc, #296]	; (2400d2c8 <HAL_I2C_Mem_Read_DMA+0x1b8>)
2400d1a0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_DMA;
2400d1a2:	68fb      	ldr	r3, [r7, #12]
2400d1a4:	4a49      	ldr	r2, [pc, #292]	; (2400d2cc <HAL_I2C_Mem_Read_DMA+0x1bc>)
2400d1a6:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->Devaddress  = DevAddress;
2400d1a8:	897a      	ldrh	r2, [r7, #10]
2400d1aa:	68fb      	ldr	r3, [r7, #12]
2400d1ac:	64da      	str	r2, [r3, #76]	; 0x4c

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400d1ae:	68fb      	ldr	r3, [r7, #12]
2400d1b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400d1b2:	b29b      	uxth	r3, r3
2400d1b4:	2bff      	cmp	r3, #255	; 0xff
2400d1b6:	d903      	bls.n	2400d1c0 <HAL_I2C_Mem_Read_DMA+0xb0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400d1b8:	68fb      	ldr	r3, [r7, #12]
2400d1ba:	22ff      	movs	r2, #255	; 0xff
2400d1bc:	851a      	strh	r2, [r3, #40]	; 0x28
2400d1be:	e004      	b.n	2400d1ca <HAL_I2C_Mem_Read_DMA+0xba>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2400d1c0:	68fb      	ldr	r3, [r7, #12]
2400d1c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400d1c4:	b29a      	uxth	r2, r3
2400d1c6:	68fb      	ldr	r3, [r7, #12]
2400d1c8:	851a      	strh	r2, [r3, #40]	; 0x28
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
2400d1ca:	88fb      	ldrh	r3, [r7, #6]
2400d1cc:	2b01      	cmp	r3, #1
2400d1ce:	d109      	bne.n	2400d1e4 <HAL_I2C_Mem_Read_DMA+0xd4>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
2400d1d0:	893b      	ldrh	r3, [r7, #8]
2400d1d2:	b2da      	uxtb	r2, r3
2400d1d4:	68fb      	ldr	r3, [r7, #12]
2400d1d6:	681b      	ldr	r3, [r3, #0]
2400d1d8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
2400d1da:	68fb      	ldr	r3, [r7, #12]
2400d1dc:	f04f 32ff 	mov.w	r2, #4294967295
2400d1e0:	651a      	str	r2, [r3, #80]	; 0x50
2400d1e2:	e00b      	b.n	2400d1fc <HAL_I2C_Mem_Read_DMA+0xec>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
2400d1e4:	893b      	ldrh	r3, [r7, #8]
2400d1e6:	0a1b      	lsrs	r3, r3, #8
2400d1e8:	b29b      	uxth	r3, r3
2400d1ea:	b2da      	uxtb	r2, r3
2400d1ec:	68fb      	ldr	r3, [r7, #12]
2400d1ee:	681b      	ldr	r3, [r3, #0]
2400d1f0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
2400d1f2:	893b      	ldrh	r3, [r7, #8]
2400d1f4:	b2db      	uxtb	r3, r3
2400d1f6:	461a      	mov	r2, r3
2400d1f8:	68fb      	ldr	r3, [r7, #12]
2400d1fa:	651a      	str	r2, [r3, #80]	; 0x50
    }

    if (hi2c->hdmarx != NULL)
2400d1fc:	68fb      	ldr	r3, [r7, #12]
2400d1fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400d200:	2b00      	cmp	r3, #0
2400d202:	d020      	beq.n	2400d246 <HAL_I2C_Mem_Read_DMA+0x136>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
2400d204:	68fb      	ldr	r3, [r7, #12]
2400d206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400d208:	4a31      	ldr	r2, [pc, #196]	; (2400d2d0 <HAL_I2C_Mem_Read_DMA+0x1c0>)
2400d20a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
2400d20c:	68fb      	ldr	r3, [r7, #12]
2400d20e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400d210:	4a30      	ldr	r2, [pc, #192]	; (2400d2d4 <HAL_I2C_Mem_Read_DMA+0x1c4>)
2400d212:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
2400d214:	68fb      	ldr	r3, [r7, #12]
2400d216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400d218:	2200      	movs	r2, #0
2400d21a:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
2400d21c:	68fb      	ldr	r3, [r7, #12]
2400d21e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400d220:	2200      	movs	r2, #0
2400d222:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream or channel depends on Instance */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
2400d224:	68fb      	ldr	r3, [r7, #12]
2400d226:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
2400d228:	68fb      	ldr	r3, [r7, #12]
2400d22a:	681b      	ldr	r3, [r3, #0]
2400d22c:	3324      	adds	r3, #36	; 0x24
2400d22e:	4619      	mov	r1, r3
2400d230:	6a3a      	ldr	r2, [r7, #32]
                                       hi2c->XferSize);
2400d232:	68fb      	ldr	r3, [r7, #12]
2400d234:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
2400d236:	f7f7 fccf 	bl	24004bd8 <HAL_DMA_Start_IT>
2400d23a:	4603      	mov	r3, r0
2400d23c:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
2400d23e:	7dfb      	ldrb	r3, [r7, #23]
2400d240:	2b00      	cmp	r3, #0
2400d242:	d127      	bne.n	2400d294 <HAL_I2C_Mem_Read_DMA+0x184>
2400d244:	e013      	b.n	2400d26e <HAL_I2C_Mem_Read_DMA+0x15e>
      hi2c->State     = HAL_I2C_STATE_READY;
2400d246:	68fb      	ldr	r3, [r7, #12]
2400d248:	2220      	movs	r2, #32
2400d24a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
2400d24e:	68fb      	ldr	r3, [r7, #12]
2400d250:	2200      	movs	r2, #0
2400d252:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
2400d256:	68fb      	ldr	r3, [r7, #12]
2400d258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400d25a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
2400d25e:	68fb      	ldr	r3, [r7, #12]
2400d260:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
2400d262:	68fb      	ldr	r3, [r7, #12]
2400d264:	2200      	movs	r2, #0
2400d266:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
2400d26a:	2301      	movs	r3, #1
2400d26c:	e027      	b.n	2400d2be <HAL_I2C_Mem_Read_DMA+0x1ae>
    {
      /* Send Slave Address and Memory Address */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
2400d26e:	88fb      	ldrh	r3, [r7, #6]
2400d270:	b2da      	uxtb	r2, r3
2400d272:	8979      	ldrh	r1, [r7, #10]
2400d274:	4b18      	ldr	r3, [pc, #96]	; (2400d2d8 <HAL_I2C_Mem_Read_DMA+0x1c8>)
2400d276:	9300      	str	r3, [sp, #0]
2400d278:	2300      	movs	r3, #0
2400d27a:	68f8      	ldr	r0, [r7, #12]
2400d27c:	f003 fbfe 	bl	24010a7c <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2400d280:	68fb      	ldr	r3, [r7, #12]
2400d282:	2200      	movs	r2, #0
2400d284:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
2400d288:	2101      	movs	r1, #1
2400d28a:	68f8      	ldr	r0, [r7, #12]
2400d28c:	f003 fc28 	bl	24010ae0 <I2C_Enable_IRQ>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
2400d290:	2300      	movs	r3, #0
2400d292:	e014      	b.n	2400d2be <HAL_I2C_Mem_Read_DMA+0x1ae>
      hi2c->State     = HAL_I2C_STATE_READY;
2400d294:	68fb      	ldr	r3, [r7, #12]
2400d296:	2220      	movs	r2, #32
2400d298:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
2400d29c:	68fb      	ldr	r3, [r7, #12]
2400d29e:	2200      	movs	r2, #0
2400d2a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
2400d2a4:	68fb      	ldr	r3, [r7, #12]
2400d2a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400d2a8:	f043 0210 	orr.w	r2, r3, #16
2400d2ac:	68fb      	ldr	r3, [r7, #12]
2400d2ae:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
2400d2b0:	68fb      	ldr	r3, [r7, #12]
2400d2b2:	2200      	movs	r2, #0
2400d2b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
2400d2b8:	2301      	movs	r3, #1
2400d2ba:	e000      	b.n	2400d2be <HAL_I2C_Mem_Read_DMA+0x1ae>
  }
  else
  {
    return HAL_BUSY;
2400d2bc:	2302      	movs	r3, #2
  }
}
2400d2be:	4618      	mov	r0, r3
2400d2c0:	3718      	adds	r7, #24
2400d2c2:	46bd      	mov	sp, r7
2400d2c4:	bd80      	pop	{r7, pc}
2400d2c6:	bf00      	nop
2400d2c8:	ffff0000 	.word	0xffff0000
2400d2cc:	2400ee79 	.word	0x2400ee79
2400d2d0:	24010159 	.word	0x24010159
2400d2d4:	24010355 	.word	0x24010355
2400d2d8:	80002000 	.word	0x80002000

2400d2dc <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
2400d2dc:	b580      	push	{r7, lr}
2400d2de:	b08a      	sub	sp, #40	; 0x28
2400d2e0:	af02      	add	r7, sp, #8
2400d2e2:	60f8      	str	r0, [r7, #12]
2400d2e4:	607a      	str	r2, [r7, #4]
2400d2e6:	603b      	str	r3, [r7, #0]
2400d2e8:	460b      	mov	r3, r1
2400d2ea:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
2400d2ec:	2300      	movs	r3, #0
2400d2ee:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
2400d2f0:	68fb      	ldr	r3, [r7, #12]
2400d2f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400d2f6:	b2db      	uxtb	r3, r3
2400d2f8:	2b20      	cmp	r3, #32
2400d2fa:	f040 80ef 	bne.w	2400d4dc <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
2400d2fe:	68fb      	ldr	r3, [r7, #12]
2400d300:	681b      	ldr	r3, [r3, #0]
2400d302:	699b      	ldr	r3, [r3, #24]
2400d304:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
2400d308:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
2400d30c:	d101      	bne.n	2400d312 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
2400d30e:	2302      	movs	r3, #2
2400d310:	e0e5      	b.n	2400d4de <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
2400d312:	68fb      	ldr	r3, [r7, #12]
2400d314:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400d318:	2b01      	cmp	r3, #1
2400d31a:	d101      	bne.n	2400d320 <HAL_I2C_IsDeviceReady+0x44>
2400d31c:	2302      	movs	r3, #2
2400d31e:	e0de      	b.n	2400d4de <HAL_I2C_IsDeviceReady+0x202>
2400d320:	68fb      	ldr	r3, [r7, #12]
2400d322:	2201      	movs	r2, #1
2400d324:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
2400d328:	68fb      	ldr	r3, [r7, #12]
2400d32a:	2224      	movs	r2, #36	; 0x24
2400d32c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400d330:	68fb      	ldr	r3, [r7, #12]
2400d332:	2200      	movs	r2, #0
2400d334:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
2400d336:	68fb      	ldr	r3, [r7, #12]
2400d338:	68db      	ldr	r3, [r3, #12]
2400d33a:	2b01      	cmp	r3, #1
2400d33c:	d105      	bne.n	2400d34a <HAL_I2C_IsDeviceReady+0x6e>
2400d33e:	897b      	ldrh	r3, [r7, #10]
2400d340:	f3c3 0209 	ubfx	r2, r3, #0, #10
2400d344:	4b68      	ldr	r3, [pc, #416]	; (2400d4e8 <HAL_I2C_IsDeviceReady+0x20c>)
2400d346:	4313      	orrs	r3, r2
2400d348:	e004      	b.n	2400d354 <HAL_I2C_IsDeviceReady+0x78>
2400d34a:	897b      	ldrh	r3, [r7, #10]
2400d34c:	f3c3 0309 	ubfx	r3, r3, #0, #10
2400d350:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
2400d354:	68fa      	ldr	r2, [r7, #12]
2400d356:	6812      	ldr	r2, [r2, #0]
2400d358:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
2400d35a:	f7f5 fea3 	bl	240030a4 <HAL_GetTick>
2400d35e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
2400d360:	68fb      	ldr	r3, [r7, #12]
2400d362:	681b      	ldr	r3, [r3, #0]
2400d364:	699b      	ldr	r3, [r3, #24]
2400d366:	f003 0320 	and.w	r3, r3, #32
2400d36a:	2b20      	cmp	r3, #32
2400d36c:	bf0c      	ite	eq
2400d36e:	2301      	moveq	r3, #1
2400d370:	2300      	movne	r3, #0
2400d372:	b2db      	uxtb	r3, r3
2400d374:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
2400d376:	68fb      	ldr	r3, [r7, #12]
2400d378:	681b      	ldr	r3, [r3, #0]
2400d37a:	699b      	ldr	r3, [r3, #24]
2400d37c:	f003 0310 	and.w	r3, r3, #16
2400d380:	2b10      	cmp	r3, #16
2400d382:	bf0c      	ite	eq
2400d384:	2301      	moveq	r3, #1
2400d386:	2300      	movne	r3, #0
2400d388:	b2db      	uxtb	r3, r3
2400d38a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
2400d38c:	e034      	b.n	2400d3f8 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
2400d38e:	683b      	ldr	r3, [r7, #0]
2400d390:	f1b3 3fff 	cmp.w	r3, #4294967295
2400d394:	d01a      	beq.n	2400d3cc <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
2400d396:	f7f5 fe85 	bl	240030a4 <HAL_GetTick>
2400d39a:	4602      	mov	r2, r0
2400d39c:	69bb      	ldr	r3, [r7, #24]
2400d39e:	1ad3      	subs	r3, r2, r3
2400d3a0:	683a      	ldr	r2, [r7, #0]
2400d3a2:	429a      	cmp	r2, r3
2400d3a4:	d302      	bcc.n	2400d3ac <HAL_I2C_IsDeviceReady+0xd0>
2400d3a6:	683b      	ldr	r3, [r7, #0]
2400d3a8:	2b00      	cmp	r3, #0
2400d3aa:	d10f      	bne.n	2400d3cc <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
2400d3ac:	68fb      	ldr	r3, [r7, #12]
2400d3ae:	2220      	movs	r2, #32
2400d3b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
2400d3b4:	68fb      	ldr	r3, [r7, #12]
2400d3b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400d3b8:	f043 0220 	orr.w	r2, r3, #32
2400d3bc:	68fb      	ldr	r3, [r7, #12]
2400d3be:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
2400d3c0:	68fb      	ldr	r3, [r7, #12]
2400d3c2:	2200      	movs	r2, #0
2400d3c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
2400d3c8:	2301      	movs	r3, #1
2400d3ca:	e088      	b.n	2400d4de <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
2400d3cc:	68fb      	ldr	r3, [r7, #12]
2400d3ce:	681b      	ldr	r3, [r3, #0]
2400d3d0:	699b      	ldr	r3, [r3, #24]
2400d3d2:	f003 0320 	and.w	r3, r3, #32
2400d3d6:	2b20      	cmp	r3, #32
2400d3d8:	bf0c      	ite	eq
2400d3da:	2301      	moveq	r3, #1
2400d3dc:	2300      	movne	r3, #0
2400d3de:	b2db      	uxtb	r3, r3
2400d3e0:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
2400d3e2:	68fb      	ldr	r3, [r7, #12]
2400d3e4:	681b      	ldr	r3, [r3, #0]
2400d3e6:	699b      	ldr	r3, [r3, #24]
2400d3e8:	f003 0310 	and.w	r3, r3, #16
2400d3ec:	2b10      	cmp	r3, #16
2400d3ee:	bf0c      	ite	eq
2400d3f0:	2301      	moveq	r3, #1
2400d3f2:	2300      	movne	r3, #0
2400d3f4:	b2db      	uxtb	r3, r3
2400d3f6:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
2400d3f8:	7ffb      	ldrb	r3, [r7, #31]
2400d3fa:	2b00      	cmp	r3, #0
2400d3fc:	d102      	bne.n	2400d404 <HAL_I2C_IsDeviceReady+0x128>
2400d3fe:	7fbb      	ldrb	r3, [r7, #30]
2400d400:	2b00      	cmp	r3, #0
2400d402:	d0c4      	beq.n	2400d38e <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
2400d404:	68fb      	ldr	r3, [r7, #12]
2400d406:	681b      	ldr	r3, [r3, #0]
2400d408:	699b      	ldr	r3, [r3, #24]
2400d40a:	f003 0310 	and.w	r3, r3, #16
2400d40e:	2b10      	cmp	r3, #16
2400d410:	d01a      	beq.n	2400d448 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
2400d412:	69bb      	ldr	r3, [r7, #24]
2400d414:	9300      	str	r3, [sp, #0]
2400d416:	683b      	ldr	r3, [r7, #0]
2400d418:	2200      	movs	r2, #0
2400d41a:	2120      	movs	r1, #32
2400d41c:	68f8      	ldr	r0, [r7, #12]
2400d41e:	f003 f8f1 	bl	24010604 <I2C_WaitOnFlagUntilTimeout>
2400d422:	4603      	mov	r3, r0
2400d424:	2b00      	cmp	r3, #0
2400d426:	d001      	beq.n	2400d42c <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
2400d428:	2301      	movs	r3, #1
2400d42a:	e058      	b.n	2400d4de <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2400d42c:	68fb      	ldr	r3, [r7, #12]
2400d42e:	681b      	ldr	r3, [r3, #0]
2400d430:	2220      	movs	r2, #32
2400d432:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
2400d434:	68fb      	ldr	r3, [r7, #12]
2400d436:	2220      	movs	r2, #32
2400d438:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
2400d43c:	68fb      	ldr	r3, [r7, #12]
2400d43e:	2200      	movs	r2, #0
2400d440:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
2400d444:	2300      	movs	r3, #0
2400d446:	e04a      	b.n	2400d4de <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
2400d448:	69bb      	ldr	r3, [r7, #24]
2400d44a:	9300      	str	r3, [sp, #0]
2400d44c:	683b      	ldr	r3, [r7, #0]
2400d44e:	2200      	movs	r2, #0
2400d450:	2120      	movs	r1, #32
2400d452:	68f8      	ldr	r0, [r7, #12]
2400d454:	f003 f8d6 	bl	24010604 <I2C_WaitOnFlagUntilTimeout>
2400d458:	4603      	mov	r3, r0
2400d45a:	2b00      	cmp	r3, #0
2400d45c:	d001      	beq.n	2400d462 <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
2400d45e:	2301      	movs	r3, #1
2400d460:	e03d      	b.n	2400d4de <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400d462:	68fb      	ldr	r3, [r7, #12]
2400d464:	681b      	ldr	r3, [r3, #0]
2400d466:	2210      	movs	r2, #16
2400d468:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2400d46a:	68fb      	ldr	r3, [r7, #12]
2400d46c:	681b      	ldr	r3, [r3, #0]
2400d46e:	2220      	movs	r2, #32
2400d470:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
2400d472:	697b      	ldr	r3, [r7, #20]
2400d474:	687a      	ldr	r2, [r7, #4]
2400d476:	429a      	cmp	r2, r3
2400d478:	d118      	bne.n	2400d4ac <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
2400d47a:	68fb      	ldr	r3, [r7, #12]
2400d47c:	681b      	ldr	r3, [r3, #0]
2400d47e:	685a      	ldr	r2, [r3, #4]
2400d480:	68fb      	ldr	r3, [r7, #12]
2400d482:	681b      	ldr	r3, [r3, #0]
2400d484:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
2400d488:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
2400d48a:	69bb      	ldr	r3, [r7, #24]
2400d48c:	9300      	str	r3, [sp, #0]
2400d48e:	683b      	ldr	r3, [r7, #0]
2400d490:	2200      	movs	r2, #0
2400d492:	2120      	movs	r1, #32
2400d494:	68f8      	ldr	r0, [r7, #12]
2400d496:	f003 f8b5 	bl	24010604 <I2C_WaitOnFlagUntilTimeout>
2400d49a:	4603      	mov	r3, r0
2400d49c:	2b00      	cmp	r3, #0
2400d49e:	d001      	beq.n	2400d4a4 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
2400d4a0:	2301      	movs	r3, #1
2400d4a2:	e01c      	b.n	2400d4de <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2400d4a4:	68fb      	ldr	r3, [r7, #12]
2400d4a6:	681b      	ldr	r3, [r3, #0]
2400d4a8:	2220      	movs	r2, #32
2400d4aa:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
2400d4ac:	697b      	ldr	r3, [r7, #20]
2400d4ae:	3301      	adds	r3, #1
2400d4b0:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
2400d4b2:	697b      	ldr	r3, [r7, #20]
2400d4b4:	687a      	ldr	r2, [r7, #4]
2400d4b6:	429a      	cmp	r2, r3
2400d4b8:	f63f af3d 	bhi.w	2400d336 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
2400d4bc:	68fb      	ldr	r3, [r7, #12]
2400d4be:	2220      	movs	r2, #32
2400d4c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
2400d4c4:	68fb      	ldr	r3, [r7, #12]
2400d4c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400d4c8:	f043 0220 	orr.w	r2, r3, #32
2400d4cc:	68fb      	ldr	r3, [r7, #12]
2400d4ce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400d4d0:	68fb      	ldr	r3, [r7, #12]
2400d4d2:	2200      	movs	r2, #0
2400d4d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
2400d4d8:	2301      	movs	r3, #1
2400d4da:	e000      	b.n	2400d4de <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
2400d4dc:	2302      	movs	r3, #2
  }
}
2400d4de:	4618      	mov	r0, r3
2400d4e0:	3720      	adds	r7, #32
2400d4e2:	46bd      	mov	sp, r7
2400d4e4:	bd80      	pop	{r7, pc}
2400d4e6:	bf00      	nop
2400d4e8:	02002000 	.word	0x02002000

2400d4ec <HAL_I2C_Master_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                                 uint16_t Size, uint32_t XferOptions)
{
2400d4ec:	b580      	push	{r7, lr}
2400d4ee:	b088      	sub	sp, #32
2400d4f0:	af02      	add	r7, sp, #8
2400d4f2:	60f8      	str	r0, [r7, #12]
2400d4f4:	607a      	str	r2, [r7, #4]
2400d4f6:	461a      	mov	r2, r3
2400d4f8:	460b      	mov	r3, r1
2400d4fa:	817b      	strh	r3, [r7, #10]
2400d4fc:	4613      	mov	r3, r2
2400d4fe:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  uint32_t xferrequest = I2C_GENERATE_START_WRITE;
2400d500:	4b3a      	ldr	r3, [pc, #232]	; (2400d5ec <HAL_I2C_Master_Seq_Transmit_IT+0x100>)
2400d502:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
2400d504:	68fb      	ldr	r3, [r7, #12]
2400d506:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400d50a:	b2db      	uxtb	r3, r3
2400d50c:	2b20      	cmp	r3, #32
2400d50e:	d167      	bne.n	2400d5e0 <HAL_I2C_Master_Seq_Transmit_IT+0xf4>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
2400d510:	68fb      	ldr	r3, [r7, #12]
2400d512:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400d516:	2b01      	cmp	r3, #1
2400d518:	d101      	bne.n	2400d51e <HAL_I2C_Master_Seq_Transmit_IT+0x32>
2400d51a:	2302      	movs	r3, #2
2400d51c:	e061      	b.n	2400d5e2 <HAL_I2C_Master_Seq_Transmit_IT+0xf6>
2400d51e:	68fb      	ldr	r3, [r7, #12]
2400d520:	2201      	movs	r2, #1
2400d522:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
2400d526:	68fb      	ldr	r3, [r7, #12]
2400d528:	2221      	movs	r2, #33	; 0x21
2400d52a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
2400d52e:	68fb      	ldr	r3, [r7, #12]
2400d530:	2210      	movs	r2, #16
2400d532:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400d536:	68fb      	ldr	r3, [r7, #12]
2400d538:	2200      	movs	r2, #0
2400d53a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400d53c:	68fb      	ldr	r3, [r7, #12]
2400d53e:	687a      	ldr	r2, [r7, #4]
2400d540:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
2400d542:	68fb      	ldr	r3, [r7, #12]
2400d544:	893a      	ldrh	r2, [r7, #8]
2400d546:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = XferOptions;
2400d548:	68fb      	ldr	r3, [r7, #12]
2400d54a:	6a3a      	ldr	r2, [r7, #32]
2400d54c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
2400d54e:	68fb      	ldr	r3, [r7, #12]
2400d550:	4a27      	ldr	r2, [pc, #156]	; (2400d5f0 <HAL_I2C_Master_Seq_Transmit_IT+0x104>)
2400d552:	635a      	str	r2, [r3, #52]	; 0x34

    /* If hi2c->XferCount > MAX_NBYTE_SIZE, use reload mode */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400d554:	68fb      	ldr	r3, [r7, #12]
2400d556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400d558:	b29b      	uxth	r3, r3
2400d55a:	2bff      	cmp	r3, #255	; 0xff
2400d55c:	d906      	bls.n	2400d56c <HAL_I2C_Master_Seq_Transmit_IT+0x80>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400d55e:	68fb      	ldr	r3, [r7, #12]
2400d560:	22ff      	movs	r2, #255	; 0xff
2400d562:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
2400d564:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400d568:	617b      	str	r3, [r7, #20]
2400d56a:	e007      	b.n	2400d57c <HAL_I2C_Master_Seq_Transmit_IT+0x90>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2400d56c:	68fb      	ldr	r3, [r7, #12]
2400d56e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400d570:	b29a      	uxth	r2, r3
2400d572:	68fb      	ldr	r3, [r7, #12]
2400d574:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = hi2c->XferOptions;
2400d576:	68fb      	ldr	r3, [r7, #12]
2400d578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400d57a:	617b      	str	r3, [r7, #20]
    }

    /* If transfer direction not change and there is no request to start another frame,
       do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX) && \
2400d57c:	68fb      	ldr	r3, [r7, #12]
2400d57e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2400d580:	2b11      	cmp	r3, #17
2400d582:	d10e      	bne.n	2400d5a2 <HAL_I2C_Master_Seq_Transmit_IT+0xb6>
        (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 0))
2400d584:	6a3b      	ldr	r3, [r7, #32]
2400d586:	2baa      	cmp	r3, #170	; 0xaa
2400d588:	d003      	beq.n	2400d592 <HAL_I2C_Master_Seq_Transmit_IT+0xa6>
2400d58a:	6a3b      	ldr	r3, [r7, #32]
2400d58c:	f5b3 4f2a 	cmp.w	r3, #43520	; 0xaa00
2400d590:	d101      	bne.n	2400d596 <HAL_I2C_Master_Seq_Transmit_IT+0xaa>
2400d592:	2301      	movs	r3, #1
2400d594:	e000      	b.n	2400d598 <HAL_I2C_Master_Seq_Transmit_IT+0xac>
2400d596:	2300      	movs	r3, #0
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX) && \
2400d598:	2b00      	cmp	r3, #0
2400d59a:	d102      	bne.n	2400d5a2 <HAL_I2C_Master_Seq_Transmit_IT+0xb6>
    {
      xferrequest = I2C_NO_STARTSTOP;
2400d59c:	2300      	movs	r3, #0
2400d59e:	613b      	str	r3, [r7, #16]
2400d5a0:	e00a      	b.n	2400d5b8 <HAL_I2C_Master_Seq_Transmit_IT+0xcc>
    }
    else
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
2400d5a2:	68f8      	ldr	r0, [r7, #12]
2400d5a4:	f003 fb64 	bl	24010c70 <I2C_ConvertOtherXferOptions>

      /* Update xfermode accordingly if no reload is necessary */
      if (hi2c->XferCount <= MAX_NBYTE_SIZE)
2400d5a8:	68fb      	ldr	r3, [r7, #12]
2400d5aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400d5ac:	b29b      	uxth	r3, r3
2400d5ae:	2bff      	cmp	r3, #255	; 0xff
2400d5b0:	d802      	bhi.n	2400d5b8 <HAL_I2C_Master_Seq_Transmit_IT+0xcc>
      {
        xfermode = hi2c->XferOptions;
2400d5b2:	68fb      	ldr	r3, [r7, #12]
2400d5b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400d5b6:	617b      	str	r3, [r7, #20]
      }
    }

    /* Send Slave Address and set NBYTES to write */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, xferrequest);
2400d5b8:	68fb      	ldr	r3, [r7, #12]
2400d5ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400d5bc:	b2da      	uxtb	r2, r3
2400d5be:	8979      	ldrh	r1, [r7, #10]
2400d5c0:	693b      	ldr	r3, [r7, #16]
2400d5c2:	9300      	str	r3, [sp, #0]
2400d5c4:	697b      	ldr	r3, [r7, #20]
2400d5c6:	68f8      	ldr	r0, [r7, #12]
2400d5c8:	f003 fa58 	bl	24010a7c <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400d5cc:	68fb      	ldr	r3, [r7, #12]
2400d5ce:	2200      	movs	r2, #0
2400d5d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */
    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
       I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
2400d5d4:	2101      	movs	r1, #1
2400d5d6:	68f8      	ldr	r0, [r7, #12]
2400d5d8:	f003 fa82 	bl	24010ae0 <I2C_Enable_IRQ>

    return HAL_OK;
2400d5dc:	2300      	movs	r3, #0
2400d5de:	e000      	b.n	2400d5e2 <HAL_I2C_Master_Seq_Transmit_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
2400d5e0:	2302      	movs	r3, #2
  }
}
2400d5e2:	4618      	mov	r0, r3
2400d5e4:	3718      	adds	r7, #24
2400d5e6:	46bd      	mov	sp, r7
2400d5e8:	bd80      	pop	{r7, pc}
2400d5ea:	bf00      	nop
2400d5ec:	80002000 	.word	0x80002000
2400d5f0:	2400e63b 	.word	0x2400e63b

2400d5f4 <HAL_I2C_Master_Seq_Transmit_DMA>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                                  uint16_t Size, uint32_t XferOptions)
{
2400d5f4:	b580      	push	{r7, lr}
2400d5f6:	b08a      	sub	sp, #40	; 0x28
2400d5f8:	af02      	add	r7, sp, #8
2400d5fa:	60f8      	str	r0, [r7, #12]
2400d5fc:	607a      	str	r2, [r7, #4]
2400d5fe:	461a      	mov	r2, r3
2400d600:	460b      	mov	r3, r1
2400d602:	817b      	strh	r3, [r7, #10]
2400d604:	4613      	mov	r3, r2
2400d606:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  uint32_t xferrequest = I2C_GENERATE_START_WRITE;
2400d608:	4b77      	ldr	r3, [pc, #476]	; (2400d7e8 <HAL_I2C_Master_Seq_Transmit_DMA+0x1f4>)
2400d60a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
2400d60c:	68fb      	ldr	r3, [r7, #12]
2400d60e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400d612:	b2db      	uxtb	r3, r3
2400d614:	2b20      	cmp	r3, #32
2400d616:	f040 80e1 	bne.w	2400d7dc <HAL_I2C_Master_Seq_Transmit_DMA+0x1e8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
2400d61a:	68fb      	ldr	r3, [r7, #12]
2400d61c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400d620:	2b01      	cmp	r3, #1
2400d622:	d101      	bne.n	2400d628 <HAL_I2C_Master_Seq_Transmit_DMA+0x34>
2400d624:	2302      	movs	r3, #2
2400d626:	e0da      	b.n	2400d7de <HAL_I2C_Master_Seq_Transmit_DMA+0x1ea>
2400d628:	68fb      	ldr	r3, [r7, #12]
2400d62a:	2201      	movs	r2, #1
2400d62c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
2400d630:	68fb      	ldr	r3, [r7, #12]
2400d632:	2221      	movs	r2, #33	; 0x21
2400d634:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
2400d638:	68fb      	ldr	r3, [r7, #12]
2400d63a:	2210      	movs	r2, #16
2400d63c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400d640:	68fb      	ldr	r3, [r7, #12]
2400d642:	2200      	movs	r2, #0
2400d644:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400d646:	68fb      	ldr	r3, [r7, #12]
2400d648:	687a      	ldr	r2, [r7, #4]
2400d64a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
2400d64c:	68fb      	ldr	r3, [r7, #12]
2400d64e:	893a      	ldrh	r2, [r7, #8]
2400d650:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = XferOptions;
2400d652:	68fb      	ldr	r3, [r7, #12]
2400d654:	6aba      	ldr	r2, [r7, #40]	; 0x28
2400d656:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
2400d658:	68fb      	ldr	r3, [r7, #12]
2400d65a:	4a64      	ldr	r2, [pc, #400]	; (2400d7ec <HAL_I2C_Master_Seq_Transmit_DMA+0x1f8>)
2400d65c:	635a      	str	r2, [r3, #52]	; 0x34

    /* If hi2c->XferCount > MAX_NBYTE_SIZE, use reload mode */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400d65e:	68fb      	ldr	r3, [r7, #12]
2400d660:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400d662:	b29b      	uxth	r3, r3
2400d664:	2bff      	cmp	r3, #255	; 0xff
2400d666:	d906      	bls.n	2400d676 <HAL_I2C_Master_Seq_Transmit_DMA+0x82>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400d668:	68fb      	ldr	r3, [r7, #12]
2400d66a:	22ff      	movs	r2, #255	; 0xff
2400d66c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
2400d66e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400d672:	61fb      	str	r3, [r7, #28]
2400d674:	e007      	b.n	2400d686 <HAL_I2C_Master_Seq_Transmit_DMA+0x92>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2400d676:	68fb      	ldr	r3, [r7, #12]
2400d678:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400d67a:	b29a      	uxth	r2, r3
2400d67c:	68fb      	ldr	r3, [r7, #12]
2400d67e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = hi2c->XferOptions;
2400d680:	68fb      	ldr	r3, [r7, #12]
2400d682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400d684:	61fb      	str	r3, [r7, #28]
    }

    /* If transfer direction not change and there is no request to start another frame,
       do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX) && \
2400d686:	68fb      	ldr	r3, [r7, #12]
2400d688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2400d68a:	2b11      	cmp	r3, #17
2400d68c:	d10e      	bne.n	2400d6ac <HAL_I2C_Master_Seq_Transmit_DMA+0xb8>
        (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 0))
2400d68e:	6abb      	ldr	r3, [r7, #40]	; 0x28
2400d690:	2baa      	cmp	r3, #170	; 0xaa
2400d692:	d003      	beq.n	2400d69c <HAL_I2C_Master_Seq_Transmit_DMA+0xa8>
2400d694:	6abb      	ldr	r3, [r7, #40]	; 0x28
2400d696:	f5b3 4f2a 	cmp.w	r3, #43520	; 0xaa00
2400d69a:	d101      	bne.n	2400d6a0 <HAL_I2C_Master_Seq_Transmit_DMA+0xac>
2400d69c:	2301      	movs	r3, #1
2400d69e:	e000      	b.n	2400d6a2 <HAL_I2C_Master_Seq_Transmit_DMA+0xae>
2400d6a0:	2300      	movs	r3, #0
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX) && \
2400d6a2:	2b00      	cmp	r3, #0
2400d6a4:	d102      	bne.n	2400d6ac <HAL_I2C_Master_Seq_Transmit_DMA+0xb8>
    {
      xferrequest = I2C_NO_STARTSTOP;
2400d6a6:	2300      	movs	r3, #0
2400d6a8:	61bb      	str	r3, [r7, #24]
2400d6aa:	e00a      	b.n	2400d6c2 <HAL_I2C_Master_Seq_Transmit_DMA+0xce>
    }
    else
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
2400d6ac:	68f8      	ldr	r0, [r7, #12]
2400d6ae:	f003 fadf 	bl	24010c70 <I2C_ConvertOtherXferOptions>

      /* Update xfermode accordingly if no reload is necessary */
      if (hi2c->XferCount <= MAX_NBYTE_SIZE)
2400d6b2:	68fb      	ldr	r3, [r7, #12]
2400d6b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400d6b6:	b29b      	uxth	r3, r3
2400d6b8:	2bff      	cmp	r3, #255	; 0xff
2400d6ba:	d802      	bhi.n	2400d6c2 <HAL_I2C_Master_Seq_Transmit_DMA+0xce>
      {
        xfermode = hi2c->XferOptions;
2400d6bc:	68fb      	ldr	r3, [r7, #12]
2400d6be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400d6c0:	61fb      	str	r3, [r7, #28]
      }
    }

    if (hi2c->XferSize > 0U)
2400d6c2:	68fb      	ldr	r3, [r7, #12]
2400d6c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400d6c6:	2b00      	cmp	r3, #0
2400d6c8:	d070      	beq.n	2400d7ac <HAL_I2C_Master_Seq_Transmit_DMA+0x1b8>
    {
      if (hi2c->hdmatx != NULL)
2400d6ca:	68fb      	ldr	r3, [r7, #12]
2400d6cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400d6ce:	2b00      	cmp	r3, #0
2400d6d0:	d020      	beq.n	2400d714 <HAL_I2C_Master_Seq_Transmit_DMA+0x120>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
2400d6d2:	68fb      	ldr	r3, [r7, #12]
2400d6d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400d6d6:	4a46      	ldr	r2, [pc, #280]	; (2400d7f0 <HAL_I2C_Master_Seq_Transmit_DMA+0x1fc>)
2400d6d8:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
2400d6da:	68fb      	ldr	r3, [r7, #12]
2400d6dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400d6de:	4a45      	ldr	r2, [pc, #276]	; (2400d7f4 <HAL_I2C_Master_Seq_Transmit_DMA+0x200>)
2400d6e0:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
2400d6e2:	68fb      	ldr	r3, [r7, #12]
2400d6e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400d6e6:	2200      	movs	r2, #0
2400d6e8:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
2400d6ea:	68fb      	ldr	r3, [r7, #12]
2400d6ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400d6ee:	2200      	movs	r2, #0
2400d6f0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
2400d6f2:	68fb      	ldr	r3, [r7, #12]
2400d6f4:	6b98      	ldr	r0, [r3, #56]	; 0x38
2400d6f6:	6879      	ldr	r1, [r7, #4]
2400d6f8:	68fb      	ldr	r3, [r7, #12]
2400d6fa:	681b      	ldr	r3, [r3, #0]
2400d6fc:	3328      	adds	r3, #40	; 0x28
2400d6fe:	461a      	mov	r2, r3
                                         hi2c->XferSize);
2400d700:	68fb      	ldr	r3, [r7, #12]
2400d702:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
2400d704:	f7f7 fa68 	bl	24004bd8 <HAL_DMA_Start_IT>
2400d708:	4603      	mov	r3, r0
2400d70a:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
2400d70c:	7dfb      	ldrb	r3, [r7, #23]
2400d70e:	2b00      	cmp	r3, #0
2400d710:	d138      	bne.n	2400d784 <HAL_I2C_Master_Seq_Transmit_DMA+0x190>
2400d712:	e013      	b.n	2400d73c <HAL_I2C_Master_Seq_Transmit_DMA+0x148>
        hi2c->State     = HAL_I2C_STATE_READY;
2400d714:	68fb      	ldr	r3, [r7, #12]
2400d716:	2220      	movs	r2, #32
2400d718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
2400d71c:	68fb      	ldr	r3, [r7, #12]
2400d71e:	2200      	movs	r2, #0
2400d720:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
2400d724:	68fb      	ldr	r3, [r7, #12]
2400d726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400d728:	f043 0280 	orr.w	r2, r3, #128	; 0x80
2400d72c:	68fb      	ldr	r3, [r7, #12]
2400d72e:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
2400d730:	68fb      	ldr	r3, [r7, #12]
2400d732:	2200      	movs	r2, #0
2400d734:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
2400d738:	2301      	movs	r3, #1
2400d73a:	e050      	b.n	2400d7de <HAL_I2C_Master_Seq_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address and set NBYTES to write */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, xferrequest);
2400d73c:	68fb      	ldr	r3, [r7, #12]
2400d73e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400d740:	b2da      	uxtb	r2, r3
2400d742:	8979      	ldrh	r1, [r7, #10]
2400d744:	69bb      	ldr	r3, [r7, #24]
2400d746:	9300      	str	r3, [sp, #0]
2400d748:	69fb      	ldr	r3, [r7, #28]
2400d74a:	68f8      	ldr	r0, [r7, #12]
2400d74c:	f003 f996 	bl	24010a7c <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
2400d750:	68fb      	ldr	r3, [r7, #12]
2400d752:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400d754:	b29a      	uxth	r2, r3
2400d756:	68fb      	ldr	r3, [r7, #12]
2400d758:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400d75a:	1ad3      	subs	r3, r2, r3
2400d75c:	b29a      	uxth	r2, r3
2400d75e:	68fb      	ldr	r3, [r7, #12]
2400d760:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
2400d762:	68fb      	ldr	r3, [r7, #12]
2400d764:	2200      	movs	r2, #0
2400d766:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
2400d76a:	2110      	movs	r1, #16
2400d76c:	68f8      	ldr	r0, [r7, #12]
2400d76e:	f003 f9b7 	bl	24010ae0 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
2400d772:	68fb      	ldr	r3, [r7, #12]
2400d774:	681b      	ldr	r3, [r3, #0]
2400d776:	681a      	ldr	r2, [r3, #0]
2400d778:	68fb      	ldr	r3, [r7, #12]
2400d77a:	681b      	ldr	r3, [r3, #0]
2400d77c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
2400d780:	601a      	str	r2, [r3, #0]
2400d782:	e029      	b.n	2400d7d8 <HAL_I2C_Master_Seq_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
2400d784:	68fb      	ldr	r3, [r7, #12]
2400d786:	2220      	movs	r2, #32
2400d788:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
2400d78c:	68fb      	ldr	r3, [r7, #12]
2400d78e:	2200      	movs	r2, #0
2400d790:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
2400d794:	68fb      	ldr	r3, [r7, #12]
2400d796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400d798:	f043 0210 	orr.w	r2, r3, #16
2400d79c:	68fb      	ldr	r3, [r7, #12]
2400d79e:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
2400d7a0:	68fb      	ldr	r3, [r7, #12]
2400d7a2:	2200      	movs	r2, #0
2400d7a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
2400d7a8:	2301      	movs	r3, #1
2400d7aa:	e018      	b.n	2400d7de <HAL_I2C_Master_Seq_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
2400d7ac:	68fb      	ldr	r3, [r7, #12]
2400d7ae:	4a12      	ldr	r2, [pc, #72]	; (2400d7f8 <HAL_I2C_Master_Seq_Transmit_DMA+0x204>)
2400d7b0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
2400d7b2:	68fb      	ldr	r3, [r7, #12]
2400d7b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400d7b6:	b2da      	uxtb	r2, r3
2400d7b8:	8979      	ldrh	r1, [r7, #10]
2400d7ba:	4b0b      	ldr	r3, [pc, #44]	; (2400d7e8 <HAL_I2C_Master_Seq_Transmit_DMA+0x1f4>)
2400d7bc:	9300      	str	r3, [sp, #0]
2400d7be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400d7c2:	68f8      	ldr	r0, [r7, #12]
2400d7c4:	f003 f95a 	bl	24010a7c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2400d7c8:	68fb      	ldr	r3, [r7, #12]
2400d7ca:	2200      	movs	r2, #0
2400d7cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
2400d7d0:	2101      	movs	r1, #1
2400d7d2:	68f8      	ldr	r0, [r7, #12]
2400d7d4:	f003 f984 	bl	24010ae0 <I2C_Enable_IRQ>
    }

    return HAL_OK;
2400d7d8:	2300      	movs	r3, #0
2400d7da:	e000      	b.n	2400d7de <HAL_I2C_Master_Seq_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
2400d7dc:	2302      	movs	r3, #2
  }
}
2400d7de:	4618      	mov	r0, r3
2400d7e0:	3720      	adds	r7, #32
2400d7e2:	46bd      	mov	sp, r7
2400d7e4:	bd80      	pop	{r7, pc}
2400d7e6:	bf00      	nop
2400d7e8:	80002000 	.word	0x80002000
2400d7ec:	2400eca1 	.word	0x2400eca1
2400d7f0:	24010083 	.word	0x24010083
2400d7f4:	24010355 	.word	0x24010355
2400d7f8:	2400e63b 	.word	0x2400e63b

2400d7fc <HAL_I2C_Master_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                                uint16_t Size, uint32_t XferOptions)
{
2400d7fc:	b580      	push	{r7, lr}
2400d7fe:	b088      	sub	sp, #32
2400d800:	af02      	add	r7, sp, #8
2400d802:	60f8      	str	r0, [r7, #12]
2400d804:	607a      	str	r2, [r7, #4]
2400d806:	461a      	mov	r2, r3
2400d808:	460b      	mov	r3, r1
2400d80a:	817b      	strh	r3, [r7, #10]
2400d80c:	4613      	mov	r3, r2
2400d80e:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  uint32_t xferrequest = I2C_GENERATE_START_READ;
2400d810:	4b3a      	ldr	r3, [pc, #232]	; (2400d8fc <HAL_I2C_Master_Seq_Receive_IT+0x100>)
2400d812:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
2400d814:	68fb      	ldr	r3, [r7, #12]
2400d816:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400d81a:	b2db      	uxtb	r3, r3
2400d81c:	2b20      	cmp	r3, #32
2400d81e:	d167      	bne.n	2400d8f0 <HAL_I2C_Master_Seq_Receive_IT+0xf4>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
2400d820:	68fb      	ldr	r3, [r7, #12]
2400d822:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400d826:	2b01      	cmp	r3, #1
2400d828:	d101      	bne.n	2400d82e <HAL_I2C_Master_Seq_Receive_IT+0x32>
2400d82a:	2302      	movs	r3, #2
2400d82c:	e061      	b.n	2400d8f2 <HAL_I2C_Master_Seq_Receive_IT+0xf6>
2400d82e:	68fb      	ldr	r3, [r7, #12]
2400d830:	2201      	movs	r2, #1
2400d832:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
2400d836:	68fb      	ldr	r3, [r7, #12]
2400d838:	2222      	movs	r2, #34	; 0x22
2400d83a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
2400d83e:	68fb      	ldr	r3, [r7, #12]
2400d840:	2210      	movs	r2, #16
2400d842:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400d846:	68fb      	ldr	r3, [r7, #12]
2400d848:	2200      	movs	r2, #0
2400d84a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400d84c:	68fb      	ldr	r3, [r7, #12]
2400d84e:	687a      	ldr	r2, [r7, #4]
2400d850:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
2400d852:	68fb      	ldr	r3, [r7, #12]
2400d854:	893a      	ldrh	r2, [r7, #8]
2400d856:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = XferOptions;
2400d858:	68fb      	ldr	r3, [r7, #12]
2400d85a:	6a3a      	ldr	r2, [r7, #32]
2400d85c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
2400d85e:	68fb      	ldr	r3, [r7, #12]
2400d860:	4a27      	ldr	r2, [pc, #156]	; (2400d900 <HAL_I2C_Master_Seq_Receive_IT+0x104>)
2400d862:	635a      	str	r2, [r3, #52]	; 0x34

    /* If hi2c->XferCount > MAX_NBYTE_SIZE, use reload mode */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400d864:	68fb      	ldr	r3, [r7, #12]
2400d866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400d868:	b29b      	uxth	r3, r3
2400d86a:	2bff      	cmp	r3, #255	; 0xff
2400d86c:	d906      	bls.n	2400d87c <HAL_I2C_Master_Seq_Receive_IT+0x80>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400d86e:	68fb      	ldr	r3, [r7, #12]
2400d870:	22ff      	movs	r2, #255	; 0xff
2400d872:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
2400d874:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400d878:	617b      	str	r3, [r7, #20]
2400d87a:	e007      	b.n	2400d88c <HAL_I2C_Master_Seq_Receive_IT+0x90>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2400d87c:	68fb      	ldr	r3, [r7, #12]
2400d87e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400d880:	b29a      	uxth	r2, r3
2400d882:	68fb      	ldr	r3, [r7, #12]
2400d884:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = hi2c->XferOptions;
2400d886:	68fb      	ldr	r3, [r7, #12]
2400d888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400d88a:	617b      	str	r3, [r7, #20]
    }

    /* If transfer direction not change and there is no request to start another frame,
       do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX) && \
2400d88c:	68fb      	ldr	r3, [r7, #12]
2400d88e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2400d890:	2b12      	cmp	r3, #18
2400d892:	d10e      	bne.n	2400d8b2 <HAL_I2C_Master_Seq_Receive_IT+0xb6>
        (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 0))
2400d894:	6a3b      	ldr	r3, [r7, #32]
2400d896:	2baa      	cmp	r3, #170	; 0xaa
2400d898:	d003      	beq.n	2400d8a2 <HAL_I2C_Master_Seq_Receive_IT+0xa6>
2400d89a:	6a3b      	ldr	r3, [r7, #32]
2400d89c:	f5b3 4f2a 	cmp.w	r3, #43520	; 0xaa00
2400d8a0:	d101      	bne.n	2400d8a6 <HAL_I2C_Master_Seq_Receive_IT+0xaa>
2400d8a2:	2301      	movs	r3, #1
2400d8a4:	e000      	b.n	2400d8a8 <HAL_I2C_Master_Seq_Receive_IT+0xac>
2400d8a6:	2300      	movs	r3, #0
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX) && \
2400d8a8:	2b00      	cmp	r3, #0
2400d8aa:	d102      	bne.n	2400d8b2 <HAL_I2C_Master_Seq_Receive_IT+0xb6>
    {
      xferrequest = I2C_NO_STARTSTOP;
2400d8ac:	2300      	movs	r3, #0
2400d8ae:	613b      	str	r3, [r7, #16]
2400d8b0:	e00a      	b.n	2400d8c8 <HAL_I2C_Master_Seq_Receive_IT+0xcc>
    }
    else
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
2400d8b2:	68f8      	ldr	r0, [r7, #12]
2400d8b4:	f003 f9dc 	bl	24010c70 <I2C_ConvertOtherXferOptions>

      /* Update xfermode accordingly if no reload is necessary */
      if (hi2c->XferCount <= MAX_NBYTE_SIZE)
2400d8b8:	68fb      	ldr	r3, [r7, #12]
2400d8ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400d8bc:	b29b      	uxth	r3, r3
2400d8be:	2bff      	cmp	r3, #255	; 0xff
2400d8c0:	d802      	bhi.n	2400d8c8 <HAL_I2C_Master_Seq_Receive_IT+0xcc>
      {
        xfermode = hi2c->XferOptions;
2400d8c2:	68fb      	ldr	r3, [r7, #12]
2400d8c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400d8c6:	617b      	str	r3, [r7, #20]
      }
    }

    /* Send Slave Address and set NBYTES to read */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, xferrequest);
2400d8c8:	68fb      	ldr	r3, [r7, #12]
2400d8ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400d8cc:	b2da      	uxtb	r2, r3
2400d8ce:	8979      	ldrh	r1, [r7, #10]
2400d8d0:	693b      	ldr	r3, [r7, #16]
2400d8d2:	9300      	str	r3, [sp, #0]
2400d8d4:	697b      	ldr	r3, [r7, #20]
2400d8d6:	68f8      	ldr	r0, [r7, #12]
2400d8d8:	f003 f8d0 	bl	24010a7c <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400d8dc:	68fb      	ldr	r3, [r7, #12]
2400d8de:	2200      	movs	r2, #0
2400d8e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
2400d8e4:	2102      	movs	r1, #2
2400d8e6:	68f8      	ldr	r0, [r7, #12]
2400d8e8:	f003 f8fa 	bl	24010ae0 <I2C_Enable_IRQ>

    return HAL_OK;
2400d8ec:	2300      	movs	r3, #0
2400d8ee:	e000      	b.n	2400d8f2 <HAL_I2C_Master_Seq_Receive_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
2400d8f0:	2302      	movs	r3, #2
  }
}
2400d8f2:	4618      	mov	r0, r3
2400d8f4:	3718      	adds	r7, #24
2400d8f6:	46bd      	mov	sp, r7
2400d8f8:	bd80      	pop	{r7, pc}
2400d8fa:	bf00      	nop
2400d8fc:	80002400 	.word	0x80002400
2400d900:	2400e63b 	.word	0x2400e63b

2400d904 <HAL_I2C_Master_Seq_Receive_DMA>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                                 uint16_t Size, uint32_t XferOptions)
{
2400d904:	b580      	push	{r7, lr}
2400d906:	b08a      	sub	sp, #40	; 0x28
2400d908:	af02      	add	r7, sp, #8
2400d90a:	60f8      	str	r0, [r7, #12]
2400d90c:	607a      	str	r2, [r7, #4]
2400d90e:	461a      	mov	r2, r3
2400d910:	460b      	mov	r3, r1
2400d912:	817b      	strh	r3, [r7, #10]
2400d914:	4613      	mov	r3, r2
2400d916:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  uint32_t xferrequest = I2C_GENERATE_START_READ;
2400d918:	4b77      	ldr	r3, [pc, #476]	; (2400daf8 <HAL_I2C_Master_Seq_Receive_DMA+0x1f4>)
2400d91a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
2400d91c:	68fb      	ldr	r3, [r7, #12]
2400d91e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400d922:	b2db      	uxtb	r3, r3
2400d924:	2b20      	cmp	r3, #32
2400d926:	f040 80e1 	bne.w	2400daec <HAL_I2C_Master_Seq_Receive_DMA+0x1e8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
2400d92a:	68fb      	ldr	r3, [r7, #12]
2400d92c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400d930:	2b01      	cmp	r3, #1
2400d932:	d101      	bne.n	2400d938 <HAL_I2C_Master_Seq_Receive_DMA+0x34>
2400d934:	2302      	movs	r3, #2
2400d936:	e0da      	b.n	2400daee <HAL_I2C_Master_Seq_Receive_DMA+0x1ea>
2400d938:	68fb      	ldr	r3, [r7, #12]
2400d93a:	2201      	movs	r2, #1
2400d93c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
2400d940:	68fb      	ldr	r3, [r7, #12]
2400d942:	2222      	movs	r2, #34	; 0x22
2400d944:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
2400d948:	68fb      	ldr	r3, [r7, #12]
2400d94a:	2210      	movs	r2, #16
2400d94c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400d950:	68fb      	ldr	r3, [r7, #12]
2400d952:	2200      	movs	r2, #0
2400d954:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400d956:	68fb      	ldr	r3, [r7, #12]
2400d958:	687a      	ldr	r2, [r7, #4]
2400d95a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
2400d95c:	68fb      	ldr	r3, [r7, #12]
2400d95e:	893a      	ldrh	r2, [r7, #8]
2400d960:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = XferOptions;
2400d962:	68fb      	ldr	r3, [r7, #12]
2400d964:	6aba      	ldr	r2, [r7, #40]	; 0x28
2400d966:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
2400d968:	68fb      	ldr	r3, [r7, #12]
2400d96a:	4a64      	ldr	r2, [pc, #400]	; (2400dafc <HAL_I2C_Master_Seq_Receive_DMA+0x1f8>)
2400d96c:	635a      	str	r2, [r3, #52]	; 0x34

    /* If hi2c->XferCount > MAX_NBYTE_SIZE, use reload mode */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400d96e:	68fb      	ldr	r3, [r7, #12]
2400d970:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400d972:	b29b      	uxth	r3, r3
2400d974:	2bff      	cmp	r3, #255	; 0xff
2400d976:	d906      	bls.n	2400d986 <HAL_I2C_Master_Seq_Receive_DMA+0x82>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400d978:	68fb      	ldr	r3, [r7, #12]
2400d97a:	22ff      	movs	r2, #255	; 0xff
2400d97c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
2400d97e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400d982:	61fb      	str	r3, [r7, #28]
2400d984:	e007      	b.n	2400d996 <HAL_I2C_Master_Seq_Receive_DMA+0x92>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2400d986:	68fb      	ldr	r3, [r7, #12]
2400d988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400d98a:	b29a      	uxth	r2, r3
2400d98c:	68fb      	ldr	r3, [r7, #12]
2400d98e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = hi2c->XferOptions;
2400d990:	68fb      	ldr	r3, [r7, #12]
2400d992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400d994:	61fb      	str	r3, [r7, #28]
    }

    /* If transfer direction not change and there is no request to start another frame,
       do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX) && \
2400d996:	68fb      	ldr	r3, [r7, #12]
2400d998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2400d99a:	2b12      	cmp	r3, #18
2400d99c:	d10e      	bne.n	2400d9bc <HAL_I2C_Master_Seq_Receive_DMA+0xb8>
        (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 0))
2400d99e:	6abb      	ldr	r3, [r7, #40]	; 0x28
2400d9a0:	2baa      	cmp	r3, #170	; 0xaa
2400d9a2:	d003      	beq.n	2400d9ac <HAL_I2C_Master_Seq_Receive_DMA+0xa8>
2400d9a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
2400d9a6:	f5b3 4f2a 	cmp.w	r3, #43520	; 0xaa00
2400d9aa:	d101      	bne.n	2400d9b0 <HAL_I2C_Master_Seq_Receive_DMA+0xac>
2400d9ac:	2301      	movs	r3, #1
2400d9ae:	e000      	b.n	2400d9b2 <HAL_I2C_Master_Seq_Receive_DMA+0xae>
2400d9b0:	2300      	movs	r3, #0
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX) && \
2400d9b2:	2b00      	cmp	r3, #0
2400d9b4:	d102      	bne.n	2400d9bc <HAL_I2C_Master_Seq_Receive_DMA+0xb8>
    {
      xferrequest = I2C_NO_STARTSTOP;
2400d9b6:	2300      	movs	r3, #0
2400d9b8:	61bb      	str	r3, [r7, #24]
2400d9ba:	e00a      	b.n	2400d9d2 <HAL_I2C_Master_Seq_Receive_DMA+0xce>
    }
    else
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
2400d9bc:	68f8      	ldr	r0, [r7, #12]
2400d9be:	f003 f957 	bl	24010c70 <I2C_ConvertOtherXferOptions>

      /* Update xfermode accordingly if no reload is necessary */
      if (hi2c->XferCount <= MAX_NBYTE_SIZE)
2400d9c2:	68fb      	ldr	r3, [r7, #12]
2400d9c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400d9c6:	b29b      	uxth	r3, r3
2400d9c8:	2bff      	cmp	r3, #255	; 0xff
2400d9ca:	d802      	bhi.n	2400d9d2 <HAL_I2C_Master_Seq_Receive_DMA+0xce>
      {
        xfermode = hi2c->XferOptions;
2400d9cc:	68fb      	ldr	r3, [r7, #12]
2400d9ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400d9d0:	61fb      	str	r3, [r7, #28]
      }
    }

    if (hi2c->XferSize > 0U)
2400d9d2:	68fb      	ldr	r3, [r7, #12]
2400d9d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400d9d6:	2b00      	cmp	r3, #0
2400d9d8:	d070      	beq.n	2400dabc <HAL_I2C_Master_Seq_Receive_DMA+0x1b8>
    {
      if (hi2c->hdmarx != NULL)
2400d9da:	68fb      	ldr	r3, [r7, #12]
2400d9dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400d9de:	2b00      	cmp	r3, #0
2400d9e0:	d020      	beq.n	2400da24 <HAL_I2C_Master_Seq_Receive_DMA+0x120>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
2400d9e2:	68fb      	ldr	r3, [r7, #12]
2400d9e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400d9e6:	4a46      	ldr	r2, [pc, #280]	; (2400db00 <HAL_I2C_Master_Seq_Receive_DMA+0x1fc>)
2400d9e8:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
2400d9ea:	68fb      	ldr	r3, [r7, #12]
2400d9ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400d9ee:	4a45      	ldr	r2, [pc, #276]	; (2400db04 <HAL_I2C_Master_Seq_Receive_DMA+0x200>)
2400d9f0:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
2400d9f2:	68fb      	ldr	r3, [r7, #12]
2400d9f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400d9f6:	2200      	movs	r2, #0
2400d9f8:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
2400d9fa:	68fb      	ldr	r3, [r7, #12]
2400d9fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400d9fe:	2200      	movs	r2, #0
2400da00:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
2400da02:	68fb      	ldr	r3, [r7, #12]
2400da04:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
2400da06:	68fb      	ldr	r3, [r7, #12]
2400da08:	681b      	ldr	r3, [r3, #0]
2400da0a:	3324      	adds	r3, #36	; 0x24
2400da0c:	4619      	mov	r1, r3
2400da0e:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
2400da10:	68fb      	ldr	r3, [r7, #12]
2400da12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
2400da14:	f7f7 f8e0 	bl	24004bd8 <HAL_DMA_Start_IT>
2400da18:	4603      	mov	r3, r0
2400da1a:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
2400da1c:	7dfb      	ldrb	r3, [r7, #23]
2400da1e:	2b00      	cmp	r3, #0
2400da20:	d138      	bne.n	2400da94 <HAL_I2C_Master_Seq_Receive_DMA+0x190>
2400da22:	e013      	b.n	2400da4c <HAL_I2C_Master_Seq_Receive_DMA+0x148>
        hi2c->State     = HAL_I2C_STATE_READY;
2400da24:	68fb      	ldr	r3, [r7, #12]
2400da26:	2220      	movs	r2, #32
2400da28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
2400da2c:	68fb      	ldr	r3, [r7, #12]
2400da2e:	2200      	movs	r2, #0
2400da30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
2400da34:	68fb      	ldr	r3, [r7, #12]
2400da36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400da38:	f043 0280 	orr.w	r2, r3, #128	; 0x80
2400da3c:	68fb      	ldr	r3, [r7, #12]
2400da3e:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
2400da40:	68fb      	ldr	r3, [r7, #12]
2400da42:	2200      	movs	r2, #0
2400da44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
2400da48:	2301      	movs	r3, #1
2400da4a:	e050      	b.n	2400daee <HAL_I2C_Master_Seq_Receive_DMA+0x1ea>
      {
        /* Send Slave Address and set NBYTES to read */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, xferrequest);
2400da4c:	68fb      	ldr	r3, [r7, #12]
2400da4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400da50:	b2da      	uxtb	r2, r3
2400da52:	8979      	ldrh	r1, [r7, #10]
2400da54:	69bb      	ldr	r3, [r7, #24]
2400da56:	9300      	str	r3, [sp, #0]
2400da58:	69fb      	ldr	r3, [r7, #28]
2400da5a:	68f8      	ldr	r0, [r7, #12]
2400da5c:	f003 f80e 	bl	24010a7c <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
2400da60:	68fb      	ldr	r3, [r7, #12]
2400da62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400da64:	b29a      	uxth	r2, r3
2400da66:	68fb      	ldr	r3, [r7, #12]
2400da68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400da6a:	1ad3      	subs	r3, r2, r3
2400da6c:	b29a      	uxth	r2, r3
2400da6e:	68fb      	ldr	r3, [r7, #12]
2400da70:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
2400da72:	68fb      	ldr	r3, [r7, #12]
2400da74:	2200      	movs	r2, #0
2400da76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
2400da7a:	2110      	movs	r1, #16
2400da7c:	68f8      	ldr	r0, [r7, #12]
2400da7e:	f003 f82f 	bl	24010ae0 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
2400da82:	68fb      	ldr	r3, [r7, #12]
2400da84:	681b      	ldr	r3, [r3, #0]
2400da86:	681a      	ldr	r2, [r3, #0]
2400da88:	68fb      	ldr	r3, [r7, #12]
2400da8a:	681b      	ldr	r3, [r3, #0]
2400da8c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2400da90:	601a      	str	r2, [r3, #0]
2400da92:	e029      	b.n	2400dae8 <HAL_I2C_Master_Seq_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
2400da94:	68fb      	ldr	r3, [r7, #12]
2400da96:	2220      	movs	r2, #32
2400da98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
2400da9c:	68fb      	ldr	r3, [r7, #12]
2400da9e:	2200      	movs	r2, #0
2400daa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
2400daa4:	68fb      	ldr	r3, [r7, #12]
2400daa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400daa8:	f043 0210 	orr.w	r2, r3, #16
2400daac:	68fb      	ldr	r3, [r7, #12]
2400daae:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
2400dab0:	68fb      	ldr	r3, [r7, #12]
2400dab2:	2200      	movs	r2, #0
2400dab4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
2400dab8:	2301      	movs	r3, #1
2400daba:	e018      	b.n	2400daee <HAL_I2C_Master_Seq_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
2400dabc:	68fb      	ldr	r3, [r7, #12]
2400dabe:	4a12      	ldr	r2, [pc, #72]	; (2400db08 <HAL_I2C_Master_Seq_Receive_DMA+0x204>)
2400dac0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
2400dac2:	68fb      	ldr	r3, [r7, #12]
2400dac4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400dac6:	b2da      	uxtb	r2, r3
2400dac8:	8979      	ldrh	r1, [r7, #10]
2400daca:	4b0b      	ldr	r3, [pc, #44]	; (2400daf8 <HAL_I2C_Master_Seq_Receive_DMA+0x1f4>)
2400dacc:	9300      	str	r3, [sp, #0]
2400dace:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400dad2:	68f8      	ldr	r0, [r7, #12]
2400dad4:	f002 ffd2 	bl	24010a7c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2400dad8:	68fb      	ldr	r3, [r7, #12]
2400dada:	2200      	movs	r2, #0
2400dadc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
2400dae0:	2101      	movs	r1, #1
2400dae2:	68f8      	ldr	r0, [r7, #12]
2400dae4:	f002 fffc 	bl	24010ae0 <I2C_Enable_IRQ>
    }

    return HAL_OK;
2400dae8:	2300      	movs	r3, #0
2400daea:	e000      	b.n	2400daee <HAL_I2C_Master_Seq_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
2400daec:	2302      	movs	r3, #2
  }
}
2400daee:	4618      	mov	r0, r3
2400daf0:	3720      	adds	r7, #32
2400daf2:	46bd      	mov	sp, r7
2400daf4:	bd80      	pop	{r7, pc}
2400daf6:	bf00      	nop
2400daf8:	80002400 	.word	0x80002400
2400dafc:	2400eca1 	.word	0x2400eca1
2400db00:	24010159 	.word	0x24010159
2400db04:	24010355 	.word	0x24010355
2400db08:	2400e63b 	.word	0x2400e63b

2400db0c <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                uint32_t XferOptions)
{
2400db0c:	b580      	push	{r7, lr}
2400db0e:	b086      	sub	sp, #24
2400db10:	af00      	add	r7, sp, #0
2400db12:	60f8      	str	r0, [r7, #12]
2400db14:	60b9      	str	r1, [r7, #8]
2400db16:	603b      	str	r3, [r7, #0]
2400db18:	4613      	mov	r3, r2
2400db1a:	80fb      	strh	r3, [r7, #6]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
2400db1c:	68fb      	ldr	r3, [r7, #12]
2400db1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400db22:	b2db      	uxtb	r3, r3
2400db24:	f003 0328 	and.w	r3, r3, #40	; 0x28
2400db28:	2b28      	cmp	r3, #40	; 0x28
2400db2a:	f040 8098 	bne.w	2400dc5e <HAL_I2C_Slave_Seq_Transmit_IT+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
2400db2e:	68bb      	ldr	r3, [r7, #8]
2400db30:	2b00      	cmp	r3, #0
2400db32:	d002      	beq.n	2400db3a <HAL_I2C_Slave_Seq_Transmit_IT+0x2e>
2400db34:	88fb      	ldrh	r3, [r7, #6]
2400db36:	2b00      	cmp	r3, #0
2400db38:	d105      	bne.n	2400db46 <HAL_I2C_Slave_Seq_Transmit_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
2400db3a:	68fb      	ldr	r3, [r7, #12]
2400db3c:	f44f 7200 	mov.w	r2, #512	; 0x200
2400db40:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
2400db42:	2301      	movs	r3, #1
2400db44:	e08c      	b.n	2400dc60 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
2400db46:	f248 0101 	movw	r1, #32769	; 0x8001
2400db4a:	68f8      	ldr	r0, [r7, #12]
2400db4c:	f003 f832 	bl	24010bb4 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
2400db50:	68fb      	ldr	r3, [r7, #12]
2400db52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400db56:	2b01      	cmp	r3, #1
2400db58:	d101      	bne.n	2400db5e <HAL_I2C_Slave_Seq_Transmit_IT+0x52>
2400db5a:	2302      	movs	r3, #2
2400db5c:	e080      	b.n	2400dc60 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
2400db5e:	68fb      	ldr	r3, [r7, #12]
2400db60:	2201      	movs	r2, #1
2400db62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
2400db66:	68fb      	ldr	r3, [r7, #12]
2400db68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400db6c:	b2db      	uxtb	r3, r3
2400db6e:	2b2a      	cmp	r3, #42	; 0x2a
2400db70:	d12a      	bne.n	2400dbc8 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
2400db72:	2102      	movs	r1, #2
2400db74:	68f8      	ldr	r0, [r7, #12]
2400db76:	f003 f81d 	bl	24010bb4 <I2C_Disable_IRQ>

      /* Abort DMA Xfer if any */
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
2400db7a:	68fb      	ldr	r3, [r7, #12]
2400db7c:	681b      	ldr	r3, [r3, #0]
2400db7e:	681b      	ldr	r3, [r3, #0]
2400db80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
2400db84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
2400db88:	d11e      	bne.n	2400dbc8 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
2400db8a:	68fb      	ldr	r3, [r7, #12]
2400db8c:	681b      	ldr	r3, [r3, #0]
2400db8e:	681a      	ldr	r2, [r3, #0]
2400db90:	68fb      	ldr	r3, [r7, #12]
2400db92:	681b      	ldr	r3, [r3, #0]
2400db94:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
2400db98:	601a      	str	r2, [r3, #0]

        if (hi2c->hdmarx != NULL)
2400db9a:	68fb      	ldr	r3, [r7, #12]
2400db9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400db9e:	2b00      	cmp	r3, #0
2400dba0:	d012      	beq.n	2400dbc8 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
2400dba2:	68fb      	ldr	r3, [r7, #12]
2400dba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400dba6:	4a30      	ldr	r2, [pc, #192]	; (2400dc68 <HAL_I2C_Slave_Seq_Transmit_IT+0x15c>)
2400dba8:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
2400dbaa:	68fb      	ldr	r3, [r7, #12]
2400dbac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400dbae:	4618      	mov	r0, r3
2400dbb0:	f7f7 fd9a 	bl	240056e8 <HAL_DMA_Abort_IT>
2400dbb4:	4603      	mov	r3, r0
2400dbb6:	2b00      	cmp	r3, #0
2400dbb8:	d006      	beq.n	2400dbc8 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
2400dbba:	68fb      	ldr	r3, [r7, #12]
2400dbbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400dbbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2400dbc0:	68fa      	ldr	r2, [r7, #12]
2400dbc2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
2400dbc4:	4610      	mov	r0, r2
2400dbc6:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
2400dbc8:	68fb      	ldr	r3, [r7, #12]
2400dbca:	2229      	movs	r2, #41	; 0x29
2400dbcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
2400dbd0:	68fb      	ldr	r3, [r7, #12]
2400dbd2:	2220      	movs	r2, #32
2400dbd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400dbd8:	68fb      	ldr	r3, [r7, #12]
2400dbda:	2200      	movs	r2, #0
2400dbdc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
2400dbde:	68fb      	ldr	r3, [r7, #12]
2400dbe0:	681b      	ldr	r3, [r3, #0]
2400dbe2:	685a      	ldr	r2, [r3, #4]
2400dbe4:	68fb      	ldr	r3, [r7, #12]
2400dbe6:	681b      	ldr	r3, [r3, #0]
2400dbe8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
2400dbec:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400dbee:	68fb      	ldr	r3, [r7, #12]
2400dbf0:	68ba      	ldr	r2, [r7, #8]
2400dbf2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
2400dbf4:	68fb      	ldr	r3, [r7, #12]
2400dbf6:	88fa      	ldrh	r2, [r7, #6]
2400dbf8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
2400dbfa:	68fb      	ldr	r3, [r7, #12]
2400dbfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400dbfe:	b29a      	uxth	r2, r3
2400dc00:	68fb      	ldr	r3, [r7, #12]
2400dc02:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
2400dc04:	68fb      	ldr	r3, [r7, #12]
2400dc06:	683a      	ldr	r2, [r7, #0]
2400dc08:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
2400dc0a:	68fb      	ldr	r3, [r7, #12]
2400dc0c:	4a17      	ldr	r2, [pc, #92]	; (2400dc6c <HAL_I2C_Slave_Seq_Transmit_IT+0x160>)
2400dc0e:	635a      	str	r2, [r3, #52]	; 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
2400dc10:	68fb      	ldr	r3, [r7, #12]
2400dc12:	681b      	ldr	r3, [r3, #0]
2400dc14:	699b      	ldr	r3, [r3, #24]
2400dc16:	f003 0308 	and.w	r3, r3, #8
2400dc1a:	2b08      	cmp	r3, #8
2400dc1c:	bf0c      	ite	eq
2400dc1e:	2301      	moveq	r3, #1
2400dc20:	2300      	movne	r3, #0
2400dc22:	b2db      	uxtb	r3, r3
2400dc24:	75fb      	strb	r3, [r7, #23]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE) && (tmp != RESET))
2400dc26:	68fb      	ldr	r3, [r7, #12]
2400dc28:	681b      	ldr	r3, [r3, #0]
2400dc2a:	699b      	ldr	r3, [r3, #24]
2400dc2c:	0c1b      	lsrs	r3, r3, #16
2400dc2e:	b2db      	uxtb	r3, r3
2400dc30:	f003 0301 	and.w	r3, r3, #1
2400dc34:	b2db      	uxtb	r3, r3
2400dc36:	2b01      	cmp	r3, #1
2400dc38:	d106      	bne.n	2400dc48 <HAL_I2C_Slave_Seq_Transmit_IT+0x13c>
2400dc3a:	7dfb      	ldrb	r3, [r7, #23]
2400dc3c:	2b00      	cmp	r3, #0
2400dc3e:	d003      	beq.n	2400dc48 <HAL_I2C_Slave_Seq_Transmit_IT+0x13c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
2400dc40:	68fb      	ldr	r3, [r7, #12]
2400dc42:	681b      	ldr	r3, [r3, #0]
2400dc44:	2208      	movs	r2, #8
2400dc46:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400dc48:	68fb      	ldr	r3, [r7, #12]
2400dc4a:	2200      	movs	r2, #0
2400dc4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
2400dc50:	f248 0101 	movw	r1, #32769	; 0x8001
2400dc54:	68f8      	ldr	r0, [r7, #12]
2400dc56:	f002 ff43 	bl	24010ae0 <I2C_Enable_IRQ>

    return HAL_OK;
2400dc5a:	2300      	movs	r3, #0
2400dc5c:	e000      	b.n	2400dc60 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
  }
  else
  {
    return HAL_ERROR;
2400dc5e:	2301      	movs	r3, #1
  }
}
2400dc60:	4618      	mov	r0, r3
2400dc62:	3718      	adds	r7, #24
2400dc64:	46bd      	mov	sp, r7
2400dc66:	bd80      	pop	{r7, pc}
2400dc68:	240105c9 	.word	0x240105c9
2400dc6c:	2400eab1 	.word	0x2400eab1

2400dc70 <HAL_I2C_Slave_Seq_Transmit_DMA>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                 uint32_t XferOptions)
{
2400dc70:	b580      	push	{r7, lr}
2400dc72:	b086      	sub	sp, #24
2400dc74:	af00      	add	r7, sp, #0
2400dc76:	60f8      	str	r0, [r7, #12]
2400dc78:	60b9      	str	r1, [r7, #8]
2400dc7a:	603b      	str	r3, [r7, #0]
2400dc7c:	4613      	mov	r3, r2
2400dc7e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
2400dc80:	68fb      	ldr	r3, [r7, #12]
2400dc82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400dc86:	b2db      	uxtb	r3, r3
2400dc88:	f003 0328 	and.w	r3, r3, #40	; 0x28
2400dc8c:	2b28      	cmp	r3, #40	; 0x28
2400dc8e:	f040 8128 	bne.w	2400dee2 <HAL_I2C_Slave_Seq_Transmit_DMA+0x272>
  {
    if ((pData == NULL) || (Size == 0U))
2400dc92:	68bb      	ldr	r3, [r7, #8]
2400dc94:	2b00      	cmp	r3, #0
2400dc96:	d002      	beq.n	2400dc9e <HAL_I2C_Slave_Seq_Transmit_DMA+0x2e>
2400dc98:	88fb      	ldrh	r3, [r7, #6]
2400dc9a:	2b00      	cmp	r3, #0
2400dc9c:	d105      	bne.n	2400dcaa <HAL_I2C_Slave_Seq_Transmit_DMA+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
2400dc9e:	68fb      	ldr	r3, [r7, #12]
2400dca0:	f44f 7200 	mov.w	r2, #512	; 0x200
2400dca4:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
2400dca6:	2301      	movs	r3, #1
2400dca8:	e11c      	b.n	2400dee4 <HAL_I2C_Slave_Seq_Transmit_DMA+0x274>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
2400dcaa:	68fb      	ldr	r3, [r7, #12]
2400dcac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400dcb0:	2b01      	cmp	r3, #1
2400dcb2:	d101      	bne.n	2400dcb8 <HAL_I2C_Slave_Seq_Transmit_DMA+0x48>
2400dcb4:	2302      	movs	r3, #2
2400dcb6:	e115      	b.n	2400dee4 <HAL_I2C_Slave_Seq_Transmit_DMA+0x274>
2400dcb8:	68fb      	ldr	r3, [r7, #12]
2400dcba:	2201      	movs	r2, #1
2400dcbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
2400dcc0:	f248 0101 	movw	r1, #32769	; 0x8001
2400dcc4:	68f8      	ldr	r0, [r7, #12]
2400dcc6:	f002 ff75 	bl	24010bb4 <I2C_Disable_IRQ>

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
2400dcca:	68fb      	ldr	r3, [r7, #12]
2400dccc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400dcd0:	b2db      	uxtb	r3, r3
2400dcd2:	2b2a      	cmp	r3, #42	; 0x2a
2400dcd4:	d12b      	bne.n	2400dd2e <HAL_I2C_Slave_Seq_Transmit_DMA+0xbe>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
2400dcd6:	2102      	movs	r1, #2
2400dcd8:	68f8      	ldr	r0, [r7, #12]
2400dcda:	f002 ff6b 	bl	24010bb4 <I2C_Disable_IRQ>

      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
2400dcde:	68fb      	ldr	r3, [r7, #12]
2400dce0:	681b      	ldr	r3, [r3, #0]
2400dce2:	681b      	ldr	r3, [r3, #0]
2400dce4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
2400dce8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
2400dcec:	d14c      	bne.n	2400dd88 <HAL_I2C_Slave_Seq_Transmit_DMA+0x118>
      {
        /* Abort DMA Xfer if any */
        if (hi2c->hdmarx != NULL)
2400dcee:	68fb      	ldr	r3, [r7, #12]
2400dcf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400dcf2:	2b00      	cmp	r3, #0
2400dcf4:	d048      	beq.n	2400dd88 <HAL_I2C_Slave_Seq_Transmit_DMA+0x118>
        {
          hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
2400dcf6:	68fb      	ldr	r3, [r7, #12]
2400dcf8:	681b      	ldr	r3, [r3, #0]
2400dcfa:	681a      	ldr	r2, [r3, #0]
2400dcfc:	68fb      	ldr	r3, [r7, #12]
2400dcfe:	681b      	ldr	r3, [r3, #0]
2400dd00:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
2400dd04:	601a      	str	r2, [r3, #0]

          /* Set the I2C DMA Abort callback :
          will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
2400dd06:	68fb      	ldr	r3, [r7, #12]
2400dd08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400dd0a:	4a78      	ldr	r2, [pc, #480]	; (2400deec <HAL_I2C_Slave_Seq_Transmit_DMA+0x27c>)
2400dd0c:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
2400dd0e:	68fb      	ldr	r3, [r7, #12]
2400dd10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400dd12:	4618      	mov	r0, r3
2400dd14:	f7f7 fce8 	bl	240056e8 <HAL_DMA_Abort_IT>
2400dd18:	4603      	mov	r3, r0
2400dd1a:	2b00      	cmp	r3, #0
2400dd1c:	d034      	beq.n	2400dd88 <HAL_I2C_Slave_Seq_Transmit_DMA+0x118>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
2400dd1e:	68fb      	ldr	r3, [r7, #12]
2400dd20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400dd22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2400dd24:	68fa      	ldr	r2, [r7, #12]
2400dd26:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
2400dd28:	4610      	mov	r0, r2
2400dd2a:	4798      	blx	r3
2400dd2c:	e02c      	b.n	2400dd88 <HAL_I2C_Slave_Seq_Transmit_DMA+0x118>
          }
        }
      }
    }
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
2400dd2e:	68fb      	ldr	r3, [r7, #12]
2400dd30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400dd34:	b2db      	uxtb	r3, r3
2400dd36:	2b29      	cmp	r3, #41	; 0x29
2400dd38:	d126      	bne.n	2400dd88 <HAL_I2C_Slave_Seq_Transmit_DMA+0x118>
    {
      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
2400dd3a:	68fb      	ldr	r3, [r7, #12]
2400dd3c:	681b      	ldr	r3, [r3, #0]
2400dd3e:	681b      	ldr	r3, [r3, #0]
2400dd40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
2400dd44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
2400dd48:	d11e      	bne.n	2400dd88 <HAL_I2C_Slave_Seq_Transmit_DMA+0x118>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
2400dd4a:	68fb      	ldr	r3, [r7, #12]
2400dd4c:	681b      	ldr	r3, [r3, #0]
2400dd4e:	681a      	ldr	r2, [r3, #0]
2400dd50:	68fb      	ldr	r3, [r7, #12]
2400dd52:	681b      	ldr	r3, [r3, #0]
2400dd54:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
2400dd58:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
2400dd5a:	68fb      	ldr	r3, [r7, #12]
2400dd5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400dd5e:	2b00      	cmp	r3, #0
2400dd60:	d012      	beq.n	2400dd88 <HAL_I2C_Slave_Seq_Transmit_DMA+0x118>
        {
          /* Set the I2C DMA Abort callback :
          will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
2400dd62:	68fb      	ldr	r3, [r7, #12]
2400dd64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400dd66:	4a61      	ldr	r2, [pc, #388]	; (2400deec <HAL_I2C_Slave_Seq_Transmit_DMA+0x27c>)
2400dd68:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
2400dd6a:	68fb      	ldr	r3, [r7, #12]
2400dd6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400dd6e:	4618      	mov	r0, r3
2400dd70:	f7f7 fcba 	bl	240056e8 <HAL_DMA_Abort_IT>
2400dd74:	4603      	mov	r3, r0
2400dd76:	2b00      	cmp	r3, #0
2400dd78:	d006      	beq.n	2400dd88 <HAL_I2C_Slave_Seq_Transmit_DMA+0x118>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
2400dd7a:	68fb      	ldr	r3, [r7, #12]
2400dd7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400dd7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2400dd80:	68fa      	ldr	r2, [r7, #12]
2400dd82:	6b92      	ldr	r2, [r2, #56]	; 0x38
2400dd84:	4610      	mov	r0, r2
2400dd86:	4798      	blx	r3
    else
    {
      /* Nothing to do */
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
2400dd88:	68fb      	ldr	r3, [r7, #12]
2400dd8a:	2229      	movs	r2, #41	; 0x29
2400dd8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
2400dd90:	68fb      	ldr	r3, [r7, #12]
2400dd92:	2220      	movs	r2, #32
2400dd94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400dd98:	68fb      	ldr	r3, [r7, #12]
2400dd9a:	2200      	movs	r2, #0
2400dd9c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
2400dd9e:	68fb      	ldr	r3, [r7, #12]
2400dda0:	681b      	ldr	r3, [r3, #0]
2400dda2:	685a      	ldr	r2, [r3, #4]
2400dda4:	68fb      	ldr	r3, [r7, #12]
2400dda6:	681b      	ldr	r3, [r3, #0]
2400dda8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
2400ddac:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400ddae:	68fb      	ldr	r3, [r7, #12]
2400ddb0:	68ba      	ldr	r2, [r7, #8]
2400ddb2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
2400ddb4:	68fb      	ldr	r3, [r7, #12]
2400ddb6:	88fa      	ldrh	r2, [r7, #6]
2400ddb8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
2400ddba:	68fb      	ldr	r3, [r7, #12]
2400ddbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400ddbe:	b29a      	uxth	r2, r3
2400ddc0:	68fb      	ldr	r3, [r7, #12]
2400ddc2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
2400ddc4:	68fb      	ldr	r3, [r7, #12]
2400ddc6:	683a      	ldr	r2, [r7, #0]
2400ddc8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
2400ddca:	68fb      	ldr	r3, [r7, #12]
2400ddcc:	4a48      	ldr	r2, [pc, #288]	; (2400def0 <HAL_I2C_Slave_Seq_Transmit_DMA+0x280>)
2400ddce:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->hdmatx != NULL)
2400ddd0:	68fb      	ldr	r3, [r7, #12]
2400ddd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400ddd4:	2b00      	cmp	r3, #0
2400ddd6:	d020      	beq.n	2400de1a <HAL_I2C_Slave_Seq_Transmit_DMA+0x1aa>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMASlaveTransmitCplt;
2400ddd8:	68fb      	ldr	r3, [r7, #12]
2400ddda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400dddc:	4a45      	ldr	r2, [pc, #276]	; (2400def4 <HAL_I2C_Slave_Seq_Transmit_DMA+0x284>)
2400ddde:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
2400dde0:	68fb      	ldr	r3, [r7, #12]
2400dde2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400dde4:	4a44      	ldr	r2, [pc, #272]	; (2400def8 <HAL_I2C_Slave_Seq_Transmit_DMA+0x288>)
2400dde6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
2400dde8:	68fb      	ldr	r3, [r7, #12]
2400ddea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400ddec:	2200      	movs	r2, #0
2400ddee:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferAbortCallback = NULL;
2400ddf0:	68fb      	ldr	r3, [r7, #12]
2400ddf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400ddf4:	2200      	movs	r2, #0
2400ddf6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream or channel depends on Instance */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
2400ddf8:	68fb      	ldr	r3, [r7, #12]
2400ddfa:	6b98      	ldr	r0, [r3, #56]	; 0x38
2400ddfc:	68b9      	ldr	r1, [r7, #8]
2400ddfe:	68fb      	ldr	r3, [r7, #12]
2400de00:	681b      	ldr	r3, [r3, #0]
2400de02:	3328      	adds	r3, #40	; 0x28
2400de04:	461a      	mov	r2, r3
                                       hi2c->XferSize);
2400de06:	68fb      	ldr	r3, [r7, #12]
2400de08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
2400de0a:	f7f6 fee5 	bl	24004bd8 <HAL_DMA_Start_IT>
2400de0e:	4603      	mov	r3, r0
2400de10:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
2400de12:	7dfb      	ldrb	r3, [r7, #23]
2400de14:	2b00      	cmp	r3, #0
2400de16:	d136      	bne.n	2400de86 <HAL_I2C_Slave_Seq_Transmit_DMA+0x216>
2400de18:	e013      	b.n	2400de42 <HAL_I2C_Slave_Seq_Transmit_DMA+0x1d2>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
2400de1a:	68fb      	ldr	r3, [r7, #12]
2400de1c:	2228      	movs	r2, #40	; 0x28
2400de1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
2400de22:	68fb      	ldr	r3, [r7, #12]
2400de24:	2200      	movs	r2, #0
2400de26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
2400de2a:	68fb      	ldr	r3, [r7, #12]
2400de2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400de2e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
2400de32:	68fb      	ldr	r3, [r7, #12]
2400de34:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
2400de36:	68fb      	ldr	r3, [r7, #12]
2400de38:	2200      	movs	r2, #0
2400de3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
2400de3e:	2301      	movs	r3, #1
2400de40:	e050      	b.n	2400dee4 <HAL_I2C_Slave_Seq_Transmit_DMA+0x274>
    {
      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
2400de42:	68fb      	ldr	r3, [r7, #12]
2400de44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400de46:	b29a      	uxth	r2, r3
2400de48:	68fb      	ldr	r3, [r7, #12]
2400de4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400de4c:	1ad3      	subs	r3, r2, r3
2400de4e:	b29a      	uxth	r2, r3
2400de50:	68fb      	ldr	r3, [r7, #12]
2400de52:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Reset XferSize */
      hi2c->XferSize = 0;
2400de54:	68fb      	ldr	r3, [r7, #12]
2400de56:	2200      	movs	r2, #0
2400de58:	851a      	strh	r2, [r3, #40]	; 0x28
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
2400de5a:	68fb      	ldr	r3, [r7, #12]
2400de5c:	681b      	ldr	r3, [r3, #0]
2400de5e:	699b      	ldr	r3, [r3, #24]
2400de60:	f003 0308 	and.w	r3, r3, #8
2400de64:	2b08      	cmp	r3, #8
2400de66:	bf0c      	ite	eq
2400de68:	2301      	moveq	r3, #1
2400de6a:	2300      	movne	r3, #0
2400de6c:	b2db      	uxtb	r3, r3
2400de6e:	75bb      	strb	r3, [r7, #22]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE) && (tmp != RESET))
2400de70:	68fb      	ldr	r3, [r7, #12]
2400de72:	681b      	ldr	r3, [r3, #0]
2400de74:	699b      	ldr	r3, [r3, #24]
2400de76:	0c1b      	lsrs	r3, r3, #16
2400de78:	b2db      	uxtb	r3, r3
2400de7a:	f003 0301 	and.w	r3, r3, #1
2400de7e:	b2db      	uxtb	r3, r3
2400de80:	2b01      	cmp	r3, #1
2400de82:	d11b      	bne.n	2400debc <HAL_I2C_Slave_Seq_Transmit_DMA+0x24c>
2400de84:	e013      	b.n	2400deae <HAL_I2C_Slave_Seq_Transmit_DMA+0x23e>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
2400de86:	68fb      	ldr	r3, [r7, #12]
2400de88:	2228      	movs	r2, #40	; 0x28
2400de8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
2400de8e:	68fb      	ldr	r3, [r7, #12]
2400de90:	2200      	movs	r2, #0
2400de92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
2400de96:	68fb      	ldr	r3, [r7, #12]
2400de98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400de9a:	f043 0210 	orr.w	r2, r3, #16
2400de9e:	68fb      	ldr	r3, [r7, #12]
2400dea0:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
2400dea2:	68fb      	ldr	r3, [r7, #12]
2400dea4:	2200      	movs	r2, #0
2400dea6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
2400deaa:	2301      	movs	r3, #1
2400deac:	e01a      	b.n	2400dee4 <HAL_I2C_Slave_Seq_Transmit_DMA+0x274>
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE) && (tmp != RESET))
2400deae:	7dbb      	ldrb	r3, [r7, #22]
2400deb0:	2b00      	cmp	r3, #0
2400deb2:	d003      	beq.n	2400debc <HAL_I2C_Slave_Seq_Transmit_DMA+0x24c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
2400deb4:	68fb      	ldr	r3, [r7, #12]
2400deb6:	681b      	ldr	r3, [r3, #0]
2400deb8:	2208      	movs	r2, #8
2400deba:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400debc:	68fb      	ldr	r3, [r7, #12]
2400debe:	2200      	movs	r2, #0
2400dec0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable DMA Request */
    hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
2400dec4:	68fb      	ldr	r3, [r7, #12]
2400dec6:	681b      	ldr	r3, [r3, #0]
2400dec8:	681a      	ldr	r2, [r3, #0]
2400deca:	68fb      	ldr	r3, [r7, #12]
2400decc:	681b      	ldr	r3, [r3, #0]
2400dece:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
2400ded2:	601a      	str	r2, [r3, #0]

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* Enable ERR, STOP, NACK, ADDR interrupts */
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
2400ded4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
2400ded8:	68f8      	ldr	r0, [r7, #12]
2400deda:	f002 fe01 	bl	24010ae0 <I2C_Enable_IRQ>

    return HAL_OK;
2400dede:	2300      	movs	r3, #0
2400dee0:	e000      	b.n	2400dee4 <HAL_I2C_Slave_Seq_Transmit_DMA+0x274>
  }
  else
  {
    return HAL_ERROR;
2400dee2:	2301      	movs	r3, #1
  }
}
2400dee4:	4618      	mov	r0, r3
2400dee6:	3718      	adds	r7, #24
2400dee8:	46bd      	mov	sp, r7
2400deea:	bd80      	pop	{r7, pc}
2400deec:	240105c9 	.word	0x240105c9
2400def0:	2400f0ad 	.word	0x2400f0ad
2400def4:	24010119 	.word	0x24010119
2400def8:	24010355 	.word	0x24010355

2400defc <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                               uint32_t XferOptions)
{
2400defc:	b580      	push	{r7, lr}
2400defe:	b086      	sub	sp, #24
2400df00:	af00      	add	r7, sp, #0
2400df02:	60f8      	str	r0, [r7, #12]
2400df04:	60b9      	str	r1, [r7, #8]
2400df06:	603b      	str	r3, [r7, #0]
2400df08:	4613      	mov	r3, r2
2400df0a:	80fb      	strh	r3, [r7, #6]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
2400df0c:	68fb      	ldr	r3, [r7, #12]
2400df0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400df12:	b2db      	uxtb	r3, r3
2400df14:	f003 0328 	and.w	r3, r3, #40	; 0x28
2400df18:	2b28      	cmp	r3, #40	; 0x28
2400df1a:	f040 8098 	bne.w	2400e04e <HAL_I2C_Slave_Seq_Receive_IT+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
2400df1e:	68bb      	ldr	r3, [r7, #8]
2400df20:	2b00      	cmp	r3, #0
2400df22:	d002      	beq.n	2400df2a <HAL_I2C_Slave_Seq_Receive_IT+0x2e>
2400df24:	88fb      	ldrh	r3, [r7, #6]
2400df26:	2b00      	cmp	r3, #0
2400df28:	d105      	bne.n	2400df36 <HAL_I2C_Slave_Seq_Receive_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
2400df2a:	68fb      	ldr	r3, [r7, #12]
2400df2c:	f44f 7200 	mov.w	r2, #512	; 0x200
2400df30:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
2400df32:	2301      	movs	r3, #1
2400df34:	e08c      	b.n	2400e050 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
2400df36:	f248 0102 	movw	r1, #32770	; 0x8002
2400df3a:	68f8      	ldr	r0, [r7, #12]
2400df3c:	f002 fe3a 	bl	24010bb4 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
2400df40:	68fb      	ldr	r3, [r7, #12]
2400df42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400df46:	2b01      	cmp	r3, #1
2400df48:	d101      	bne.n	2400df4e <HAL_I2C_Slave_Seq_Receive_IT+0x52>
2400df4a:	2302      	movs	r3, #2
2400df4c:	e080      	b.n	2400e050 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
2400df4e:	68fb      	ldr	r3, [r7, #12]
2400df50:	2201      	movs	r2, #1
2400df52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave TX state to RX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
2400df56:	68fb      	ldr	r3, [r7, #12]
2400df58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400df5c:	b2db      	uxtb	r3, r3
2400df5e:	2b29      	cmp	r3, #41	; 0x29
2400df60:	d12a      	bne.n	2400dfb8 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
2400df62:	2101      	movs	r1, #1
2400df64:	68f8      	ldr	r0, [r7, #12]
2400df66:	f002 fe25 	bl	24010bb4 <I2C_Disable_IRQ>

      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
2400df6a:	68fb      	ldr	r3, [r7, #12]
2400df6c:	681b      	ldr	r3, [r3, #0]
2400df6e:	681b      	ldr	r3, [r3, #0]
2400df70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
2400df74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
2400df78:	d11e      	bne.n	2400dfb8 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
2400df7a:	68fb      	ldr	r3, [r7, #12]
2400df7c:	681b      	ldr	r3, [r3, #0]
2400df7e:	681a      	ldr	r2, [r3, #0]
2400df80:	68fb      	ldr	r3, [r7, #12]
2400df82:	681b      	ldr	r3, [r3, #0]
2400df84:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
2400df88:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
2400df8a:	68fb      	ldr	r3, [r7, #12]
2400df8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400df8e:	2b00      	cmp	r3, #0
2400df90:	d012      	beq.n	2400dfb8 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
2400df92:	68fb      	ldr	r3, [r7, #12]
2400df94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400df96:	4a30      	ldr	r2, [pc, #192]	; (2400e058 <HAL_I2C_Slave_Seq_Receive_IT+0x15c>)
2400df98:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
2400df9a:	68fb      	ldr	r3, [r7, #12]
2400df9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400df9e:	4618      	mov	r0, r3
2400dfa0:	f7f7 fba2 	bl	240056e8 <HAL_DMA_Abort_IT>
2400dfa4:	4603      	mov	r3, r0
2400dfa6:	2b00      	cmp	r3, #0
2400dfa8:	d006      	beq.n	2400dfb8 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
2400dfaa:	68fb      	ldr	r3, [r7, #12]
2400dfac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400dfae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2400dfb0:	68fa      	ldr	r2, [r7, #12]
2400dfb2:	6b92      	ldr	r2, [r2, #56]	; 0x38
2400dfb4:	4610      	mov	r0, r2
2400dfb6:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
2400dfb8:	68fb      	ldr	r3, [r7, #12]
2400dfba:	222a      	movs	r2, #42	; 0x2a
2400dfbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
2400dfc0:	68fb      	ldr	r3, [r7, #12]
2400dfc2:	2220      	movs	r2, #32
2400dfc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400dfc8:	68fb      	ldr	r3, [r7, #12]
2400dfca:	2200      	movs	r2, #0
2400dfcc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
2400dfce:	68fb      	ldr	r3, [r7, #12]
2400dfd0:	681b      	ldr	r3, [r3, #0]
2400dfd2:	685a      	ldr	r2, [r3, #4]
2400dfd4:	68fb      	ldr	r3, [r7, #12]
2400dfd6:	681b      	ldr	r3, [r3, #0]
2400dfd8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
2400dfdc:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400dfde:	68fb      	ldr	r3, [r7, #12]
2400dfe0:	68ba      	ldr	r2, [r7, #8]
2400dfe2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
2400dfe4:	68fb      	ldr	r3, [r7, #12]
2400dfe6:	88fa      	ldrh	r2, [r7, #6]
2400dfe8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
2400dfea:	68fb      	ldr	r3, [r7, #12]
2400dfec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400dfee:	b29a      	uxth	r2, r3
2400dff0:	68fb      	ldr	r3, [r7, #12]
2400dff2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
2400dff4:	68fb      	ldr	r3, [r7, #12]
2400dff6:	683a      	ldr	r2, [r7, #0]
2400dff8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
2400dffa:	68fb      	ldr	r3, [r7, #12]
2400dffc:	4a17      	ldr	r2, [pc, #92]	; (2400e05c <HAL_I2C_Slave_Seq_Receive_IT+0x160>)
2400dffe:	635a      	str	r2, [r3, #52]	; 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
2400e000:	68fb      	ldr	r3, [r7, #12]
2400e002:	681b      	ldr	r3, [r3, #0]
2400e004:	699b      	ldr	r3, [r3, #24]
2400e006:	f003 0308 	and.w	r3, r3, #8
2400e00a:	2b08      	cmp	r3, #8
2400e00c:	bf0c      	ite	eq
2400e00e:	2301      	moveq	r3, #1
2400e010:	2300      	movne	r3, #0
2400e012:	b2db      	uxtb	r3, r3
2400e014:	75fb      	strb	r3, [r7, #23]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT) && (tmp != RESET))
2400e016:	68fb      	ldr	r3, [r7, #12]
2400e018:	681b      	ldr	r3, [r3, #0]
2400e01a:	699b      	ldr	r3, [r3, #24]
2400e01c:	0c1b      	lsrs	r3, r3, #16
2400e01e:	b2db      	uxtb	r3, r3
2400e020:	f003 0301 	and.w	r3, r3, #1
2400e024:	b2db      	uxtb	r3, r3
2400e026:	2b00      	cmp	r3, #0
2400e028:	d106      	bne.n	2400e038 <HAL_I2C_Slave_Seq_Receive_IT+0x13c>
2400e02a:	7dfb      	ldrb	r3, [r7, #23]
2400e02c:	2b00      	cmp	r3, #0
2400e02e:	d003      	beq.n	2400e038 <HAL_I2C_Slave_Seq_Receive_IT+0x13c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
2400e030:	68fb      	ldr	r3, [r7, #12]
2400e032:	681b      	ldr	r3, [r3, #0]
2400e034:	2208      	movs	r2, #8
2400e036:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400e038:	68fb      	ldr	r3, [r7, #12]
2400e03a:	2200      	movs	r2, #0
2400e03c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
2400e040:	f248 0102 	movw	r1, #32770	; 0x8002
2400e044:	68f8      	ldr	r0, [r7, #12]
2400e046:	f002 fd4b 	bl	24010ae0 <I2C_Enable_IRQ>

    return HAL_OK;
2400e04a:	2300      	movs	r3, #0
2400e04c:	e000      	b.n	2400e050 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
  }
  else
  {
    return HAL_ERROR;
2400e04e:	2301      	movs	r3, #1
  }
}
2400e050:	4618      	mov	r0, r3
2400e052:	3718      	adds	r7, #24
2400e054:	46bd      	mov	sp, r7
2400e056:	bd80      	pop	{r7, pc}
2400e058:	240105c9 	.word	0x240105c9
2400e05c:	2400eab1 	.word	0x2400eab1

2400e060 <HAL_I2C_Slave_Seq_Receive_DMA>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                uint32_t XferOptions)
{
2400e060:	b580      	push	{r7, lr}
2400e062:	b086      	sub	sp, #24
2400e064:	af00      	add	r7, sp, #0
2400e066:	60f8      	str	r0, [r7, #12]
2400e068:	60b9      	str	r1, [r7, #8]
2400e06a:	603b      	str	r3, [r7, #0]
2400e06c:	4613      	mov	r3, r2
2400e06e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
2400e070:	68fb      	ldr	r3, [r7, #12]
2400e072:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400e076:	b2db      	uxtb	r3, r3
2400e078:	f003 0328 	and.w	r3, r3, #40	; 0x28
2400e07c:	2b28      	cmp	r3, #40	; 0x28
2400e07e:	f040 8128 	bne.w	2400e2d2 <HAL_I2C_Slave_Seq_Receive_DMA+0x272>
  {
    if ((pData == NULL) || (Size == 0U))
2400e082:	68bb      	ldr	r3, [r7, #8]
2400e084:	2b00      	cmp	r3, #0
2400e086:	d002      	beq.n	2400e08e <HAL_I2C_Slave_Seq_Receive_DMA+0x2e>
2400e088:	88fb      	ldrh	r3, [r7, #6]
2400e08a:	2b00      	cmp	r3, #0
2400e08c:	d105      	bne.n	2400e09a <HAL_I2C_Slave_Seq_Receive_DMA+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
2400e08e:	68fb      	ldr	r3, [r7, #12]
2400e090:	f44f 7200 	mov.w	r2, #512	; 0x200
2400e094:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
2400e096:	2301      	movs	r3, #1
2400e098:	e11c      	b.n	2400e2d4 <HAL_I2C_Slave_Seq_Receive_DMA+0x274>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
2400e09a:	f248 0102 	movw	r1, #32770	; 0x8002
2400e09e:	68f8      	ldr	r0, [r7, #12]
2400e0a0:	f002 fd88 	bl	24010bb4 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
2400e0a4:	68fb      	ldr	r3, [r7, #12]
2400e0a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400e0aa:	2b01      	cmp	r3, #1
2400e0ac:	d101      	bne.n	2400e0b2 <HAL_I2C_Slave_Seq_Receive_DMA+0x52>
2400e0ae:	2302      	movs	r3, #2
2400e0b0:	e110      	b.n	2400e2d4 <HAL_I2C_Slave_Seq_Receive_DMA+0x274>
2400e0b2:	68fb      	ldr	r3, [r7, #12]
2400e0b4:	2201      	movs	r2, #1
2400e0b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave TX state to RX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
2400e0ba:	68fb      	ldr	r3, [r7, #12]
2400e0bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400e0c0:	b2db      	uxtb	r3, r3
2400e0c2:	2b29      	cmp	r3, #41	; 0x29
2400e0c4:	d12b      	bne.n	2400e11e <HAL_I2C_Slave_Seq_Receive_DMA+0xbe>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
2400e0c6:	2101      	movs	r1, #1
2400e0c8:	68f8      	ldr	r0, [r7, #12]
2400e0ca:	f002 fd73 	bl	24010bb4 <I2C_Disable_IRQ>

      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
2400e0ce:	68fb      	ldr	r3, [r7, #12]
2400e0d0:	681b      	ldr	r3, [r3, #0]
2400e0d2:	681b      	ldr	r3, [r3, #0]
2400e0d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
2400e0d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
2400e0dc:	d14c      	bne.n	2400e178 <HAL_I2C_Slave_Seq_Receive_DMA+0x118>
      {
        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
2400e0de:	68fb      	ldr	r3, [r7, #12]
2400e0e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400e0e2:	2b00      	cmp	r3, #0
2400e0e4:	d048      	beq.n	2400e178 <HAL_I2C_Slave_Seq_Receive_DMA+0x118>
        {
          hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
2400e0e6:	68fb      	ldr	r3, [r7, #12]
2400e0e8:	681b      	ldr	r3, [r3, #0]
2400e0ea:	681a      	ldr	r2, [r3, #0]
2400e0ec:	68fb      	ldr	r3, [r7, #12]
2400e0ee:	681b      	ldr	r3, [r3, #0]
2400e0f0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
2400e0f4:	601a      	str	r2, [r3, #0]

          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
2400e0f6:	68fb      	ldr	r3, [r7, #12]
2400e0f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400e0fa:	4a78      	ldr	r2, [pc, #480]	; (2400e2dc <HAL_I2C_Slave_Seq_Receive_DMA+0x27c>)
2400e0fc:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
2400e0fe:	68fb      	ldr	r3, [r7, #12]
2400e100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400e102:	4618      	mov	r0, r3
2400e104:	f7f7 faf0 	bl	240056e8 <HAL_DMA_Abort_IT>
2400e108:	4603      	mov	r3, r0
2400e10a:	2b00      	cmp	r3, #0
2400e10c:	d034      	beq.n	2400e178 <HAL_I2C_Slave_Seq_Receive_DMA+0x118>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
2400e10e:	68fb      	ldr	r3, [r7, #12]
2400e110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400e112:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2400e114:	68fa      	ldr	r2, [r7, #12]
2400e116:	6b92      	ldr	r2, [r2, #56]	; 0x38
2400e118:	4610      	mov	r0, r2
2400e11a:	4798      	blx	r3
2400e11c:	e02c      	b.n	2400e178 <HAL_I2C_Slave_Seq_Receive_DMA+0x118>
          }
        }
      }
    }
    else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
2400e11e:	68fb      	ldr	r3, [r7, #12]
2400e120:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400e124:	b2db      	uxtb	r3, r3
2400e126:	2b2a      	cmp	r3, #42	; 0x2a
2400e128:	d126      	bne.n	2400e178 <HAL_I2C_Slave_Seq_Receive_DMA+0x118>
    {
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
2400e12a:	68fb      	ldr	r3, [r7, #12]
2400e12c:	681b      	ldr	r3, [r3, #0]
2400e12e:	681b      	ldr	r3, [r3, #0]
2400e130:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
2400e134:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
2400e138:	d11e      	bne.n	2400e178 <HAL_I2C_Slave_Seq_Receive_DMA+0x118>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
2400e13a:	68fb      	ldr	r3, [r7, #12]
2400e13c:	681b      	ldr	r3, [r3, #0]
2400e13e:	681a      	ldr	r2, [r3, #0]
2400e140:	68fb      	ldr	r3, [r7, #12]
2400e142:	681b      	ldr	r3, [r3, #0]
2400e144:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
2400e148:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmarx != NULL)
2400e14a:	68fb      	ldr	r3, [r7, #12]
2400e14c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e14e:	2b00      	cmp	r3, #0
2400e150:	d012      	beq.n	2400e178 <HAL_I2C_Slave_Seq_Receive_DMA+0x118>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
2400e152:	68fb      	ldr	r3, [r7, #12]
2400e154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e156:	4a61      	ldr	r2, [pc, #388]	; (2400e2dc <HAL_I2C_Slave_Seq_Receive_DMA+0x27c>)
2400e158:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
2400e15a:	68fb      	ldr	r3, [r7, #12]
2400e15c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e15e:	4618      	mov	r0, r3
2400e160:	f7f7 fac2 	bl	240056e8 <HAL_DMA_Abort_IT>
2400e164:	4603      	mov	r3, r0
2400e166:	2b00      	cmp	r3, #0
2400e168:	d006      	beq.n	2400e178 <HAL_I2C_Slave_Seq_Receive_DMA+0x118>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
2400e16a:	68fb      	ldr	r3, [r7, #12]
2400e16c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e16e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2400e170:	68fa      	ldr	r2, [r7, #12]
2400e172:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
2400e174:	4610      	mov	r0, r2
2400e176:	4798      	blx	r3
    else
    {
      /* Nothing to do */
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
2400e178:	68fb      	ldr	r3, [r7, #12]
2400e17a:	222a      	movs	r2, #42	; 0x2a
2400e17c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
2400e180:	68fb      	ldr	r3, [r7, #12]
2400e182:	2220      	movs	r2, #32
2400e184:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400e188:	68fb      	ldr	r3, [r7, #12]
2400e18a:	2200      	movs	r2, #0
2400e18c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
2400e18e:	68fb      	ldr	r3, [r7, #12]
2400e190:	681b      	ldr	r3, [r3, #0]
2400e192:	685a      	ldr	r2, [r3, #4]
2400e194:	68fb      	ldr	r3, [r7, #12]
2400e196:	681b      	ldr	r3, [r3, #0]
2400e198:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
2400e19c:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400e19e:	68fb      	ldr	r3, [r7, #12]
2400e1a0:	68ba      	ldr	r2, [r7, #8]
2400e1a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
2400e1a4:	68fb      	ldr	r3, [r7, #12]
2400e1a6:	88fa      	ldrh	r2, [r7, #6]
2400e1a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
2400e1aa:	68fb      	ldr	r3, [r7, #12]
2400e1ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400e1ae:	b29a      	uxth	r2, r3
2400e1b0:	68fb      	ldr	r3, [r7, #12]
2400e1b2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
2400e1b4:	68fb      	ldr	r3, [r7, #12]
2400e1b6:	683a      	ldr	r2, [r7, #0]
2400e1b8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
2400e1ba:	68fb      	ldr	r3, [r7, #12]
2400e1bc:	4a48      	ldr	r2, [pc, #288]	; (2400e2e0 <HAL_I2C_Slave_Seq_Receive_DMA+0x280>)
2400e1be:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->hdmarx != NULL)
2400e1c0:	68fb      	ldr	r3, [r7, #12]
2400e1c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e1c4:	2b00      	cmp	r3, #0
2400e1c6:	d020      	beq.n	2400e20a <HAL_I2C_Slave_Seq_Receive_DMA+0x1aa>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMASlaveReceiveCplt;
2400e1c8:	68fb      	ldr	r3, [r7, #12]
2400e1ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e1cc:	4a45      	ldr	r2, [pc, #276]	; (2400e2e4 <HAL_I2C_Slave_Seq_Receive_DMA+0x284>)
2400e1ce:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
2400e1d0:	68fb      	ldr	r3, [r7, #12]
2400e1d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e1d4:	4a44      	ldr	r2, [pc, #272]	; (2400e2e8 <HAL_I2C_Slave_Seq_Receive_DMA+0x288>)
2400e1d6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
2400e1d8:	68fb      	ldr	r3, [r7, #12]
2400e1da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e1dc:	2200      	movs	r2, #0
2400e1de:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
2400e1e0:	68fb      	ldr	r3, [r7, #12]
2400e1e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e1e4:	2200      	movs	r2, #0
2400e1e6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream or channel depends on Instance */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR,
2400e1e8:	68fb      	ldr	r3, [r7, #12]
2400e1ea:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
2400e1ec:	68fb      	ldr	r3, [r7, #12]
2400e1ee:	681b      	ldr	r3, [r3, #0]
2400e1f0:	3324      	adds	r3, #36	; 0x24
2400e1f2:	4619      	mov	r1, r3
2400e1f4:	68ba      	ldr	r2, [r7, #8]
                                       (uint32_t)pData, hi2c->XferSize);
2400e1f6:	68fb      	ldr	r3, [r7, #12]
2400e1f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR,
2400e1fa:	f7f6 fced 	bl	24004bd8 <HAL_DMA_Start_IT>
2400e1fe:	4603      	mov	r3, r0
2400e200:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
2400e202:	7dfb      	ldrb	r3, [r7, #23]
2400e204:	2b00      	cmp	r3, #0
2400e206:	d136      	bne.n	2400e276 <HAL_I2C_Slave_Seq_Receive_DMA+0x216>
2400e208:	e013      	b.n	2400e232 <HAL_I2C_Slave_Seq_Receive_DMA+0x1d2>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
2400e20a:	68fb      	ldr	r3, [r7, #12]
2400e20c:	2228      	movs	r2, #40	; 0x28
2400e20e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
2400e212:	68fb      	ldr	r3, [r7, #12]
2400e214:	2200      	movs	r2, #0
2400e216:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
2400e21a:	68fb      	ldr	r3, [r7, #12]
2400e21c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400e21e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
2400e222:	68fb      	ldr	r3, [r7, #12]
2400e224:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
2400e226:	68fb      	ldr	r3, [r7, #12]
2400e228:	2200      	movs	r2, #0
2400e22a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
2400e22e:	2301      	movs	r3, #1
2400e230:	e050      	b.n	2400e2d4 <HAL_I2C_Slave_Seq_Receive_DMA+0x274>
    {
      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
2400e232:	68fb      	ldr	r3, [r7, #12]
2400e234:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400e236:	b29a      	uxth	r2, r3
2400e238:	68fb      	ldr	r3, [r7, #12]
2400e23a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400e23c:	1ad3      	subs	r3, r2, r3
2400e23e:	b29a      	uxth	r2, r3
2400e240:	68fb      	ldr	r3, [r7, #12]
2400e242:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Reset XferSize */
      hi2c->XferSize = 0;
2400e244:	68fb      	ldr	r3, [r7, #12]
2400e246:	2200      	movs	r2, #0
2400e248:	851a      	strh	r2, [r3, #40]	; 0x28
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
2400e24a:	68fb      	ldr	r3, [r7, #12]
2400e24c:	681b      	ldr	r3, [r3, #0]
2400e24e:	699b      	ldr	r3, [r3, #24]
2400e250:	f003 0308 	and.w	r3, r3, #8
2400e254:	2b08      	cmp	r3, #8
2400e256:	bf0c      	ite	eq
2400e258:	2301      	moveq	r3, #1
2400e25a:	2300      	movne	r3, #0
2400e25c:	b2db      	uxtb	r3, r3
2400e25e:	75bb      	strb	r3, [r7, #22]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT) && (tmp != RESET))
2400e260:	68fb      	ldr	r3, [r7, #12]
2400e262:	681b      	ldr	r3, [r3, #0]
2400e264:	699b      	ldr	r3, [r3, #24]
2400e266:	0c1b      	lsrs	r3, r3, #16
2400e268:	b2db      	uxtb	r3, r3
2400e26a:	f003 0301 	and.w	r3, r3, #1
2400e26e:	b2db      	uxtb	r3, r3
2400e270:	2b00      	cmp	r3, #0
2400e272:	d11b      	bne.n	2400e2ac <HAL_I2C_Slave_Seq_Receive_DMA+0x24c>
2400e274:	e013      	b.n	2400e29e <HAL_I2C_Slave_Seq_Receive_DMA+0x23e>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
2400e276:	68fb      	ldr	r3, [r7, #12]
2400e278:	2228      	movs	r2, #40	; 0x28
2400e27a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
2400e27e:	68fb      	ldr	r3, [r7, #12]
2400e280:	2200      	movs	r2, #0
2400e282:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
2400e286:	68fb      	ldr	r3, [r7, #12]
2400e288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400e28a:	f043 0210 	orr.w	r2, r3, #16
2400e28e:	68fb      	ldr	r3, [r7, #12]
2400e290:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
2400e292:	68fb      	ldr	r3, [r7, #12]
2400e294:	2200      	movs	r2, #0
2400e296:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
2400e29a:	2301      	movs	r3, #1
2400e29c:	e01a      	b.n	2400e2d4 <HAL_I2C_Slave_Seq_Receive_DMA+0x274>
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT) && (tmp != RESET))
2400e29e:	7dbb      	ldrb	r3, [r7, #22]
2400e2a0:	2b00      	cmp	r3, #0
2400e2a2:	d003      	beq.n	2400e2ac <HAL_I2C_Slave_Seq_Receive_DMA+0x24c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
2400e2a4:	68fb      	ldr	r3, [r7, #12]
2400e2a6:	681b      	ldr	r3, [r3, #0]
2400e2a8:	2208      	movs	r2, #8
2400e2aa:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400e2ac:	68fb      	ldr	r3, [r7, #12]
2400e2ae:	2200      	movs	r2, #0
2400e2b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable DMA Request */
    hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
2400e2b4:	68fb      	ldr	r3, [r7, #12]
2400e2b6:	681b      	ldr	r3, [r3, #0]
2400e2b8:	681a      	ldr	r2, [r3, #0]
2400e2ba:	68fb      	ldr	r3, [r7, #12]
2400e2bc:	681b      	ldr	r3, [r3, #0]
2400e2be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2400e2c2:	601a      	str	r2, [r3, #0]

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
2400e2c4:	f248 0102 	movw	r1, #32770	; 0x8002
2400e2c8:	68f8      	ldr	r0, [r7, #12]
2400e2ca:	f002 fc09 	bl	24010ae0 <I2C_Enable_IRQ>

    return HAL_OK;
2400e2ce:	2300      	movs	r3, #0
2400e2d0:	e000      	b.n	2400e2d4 <HAL_I2C_Slave_Seq_Receive_DMA+0x274>
  }
  else
  {
    return HAL_ERROR;
2400e2d2:	2301      	movs	r3, #1
  }
}
2400e2d4:	4618      	mov	r0, r3
2400e2d6:	3718      	adds	r7, #24
2400e2d8:	46bd      	mov	sp, r7
2400e2da:	bd80      	pop	{r7, pc}
2400e2dc:	240105c9 	.word	0x240105c9
2400e2e0:	2400f0ad 	.word	0x2400f0ad
2400e2e4:	240101f1 	.word	0x240101f1
2400e2e8:	24010355 	.word	0x24010355

2400e2ec <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
2400e2ec:	b580      	push	{r7, lr}
2400e2ee:	b082      	sub	sp, #8
2400e2f0:	af00      	add	r7, sp, #0
2400e2f2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
2400e2f4:	687b      	ldr	r3, [r7, #4]
2400e2f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400e2fa:	b2db      	uxtb	r3, r3
2400e2fc:	2b20      	cmp	r3, #32
2400e2fe:	d10d      	bne.n	2400e31c <HAL_I2C_EnableListen_IT+0x30>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
2400e300:	687b      	ldr	r3, [r7, #4]
2400e302:	2228      	movs	r2, #40	; 0x28
2400e304:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR = I2C_Slave_ISR_IT;
2400e308:	687b      	ldr	r3, [r7, #4]
2400e30a:	4a07      	ldr	r2, [pc, #28]	; (2400e328 <HAL_I2C_EnableListen_IT+0x3c>)
2400e30c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the Address Match interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
2400e30e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
2400e312:	6878      	ldr	r0, [r7, #4]
2400e314:	f002 fbe4 	bl	24010ae0 <I2C_Enable_IRQ>

    return HAL_OK;
2400e318:	2300      	movs	r3, #0
2400e31a:	e000      	b.n	2400e31e <HAL_I2C_EnableListen_IT+0x32>
  }
  else
  {
    return HAL_BUSY;
2400e31c:	2302      	movs	r3, #2
  }
}
2400e31e:	4618      	mov	r0, r3
2400e320:	3708      	adds	r7, #8
2400e322:	46bd      	mov	sp, r7
2400e324:	bd80      	pop	{r7, pc}
2400e326:	bf00      	nop
2400e328:	2400eab1 	.word	0x2400eab1

2400e32c <HAL_I2C_DisableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DisableListen_IT(I2C_HandleTypeDef *hi2c)
{
2400e32c:	b580      	push	{r7, lr}
2400e32e:	b084      	sub	sp, #16
2400e330:	af00      	add	r7, sp, #0
2400e332:	6078      	str	r0, [r7, #4]
  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp;

  /* Disable Address listen mode only if a transfer is not ongoing */
  if (hi2c->State == HAL_I2C_STATE_LISTEN)
2400e334:	687b      	ldr	r3, [r7, #4]
2400e336:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400e33a:	b2db      	uxtb	r3, r3
2400e33c:	2b28      	cmp	r3, #40	; 0x28
2400e33e:	d121      	bne.n	2400e384 <HAL_I2C_DisableListen_IT+0x58>
  {
    tmp = (uint32_t)(hi2c->State) & I2C_STATE_MSK;
2400e340:	687b      	ldr	r3, [r7, #4]
2400e342:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400e346:	b2db      	uxtb	r3, r3
2400e348:	f003 0303 	and.w	r3, r3, #3
2400e34c:	60fb      	str	r3, [r7, #12]
    hi2c->PreviousState = tmp | (uint32_t)(hi2c->Mode);
2400e34e:	687b      	ldr	r3, [r7, #4]
2400e350:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
2400e354:	b2db      	uxtb	r3, r3
2400e356:	461a      	mov	r2, r3
2400e358:	68fb      	ldr	r3, [r7, #12]
2400e35a:	431a      	orrs	r2, r3
2400e35c:	687b      	ldr	r3, [r7, #4]
2400e35e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
2400e360:	687b      	ldr	r3, [r7, #4]
2400e362:	2220      	movs	r2, #32
2400e364:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
2400e368:	687b      	ldr	r3, [r7, #4]
2400e36a:	2200      	movs	r2, #0
2400e36c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->XferISR = NULL;
2400e370:	687b      	ldr	r3, [r7, #4]
2400e372:	2200      	movs	r2, #0
2400e374:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable the Address Match interrupt */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
2400e376:	f44f 4100 	mov.w	r1, #32768	; 0x8000
2400e37a:	6878      	ldr	r0, [r7, #4]
2400e37c:	f002 fc1a 	bl	24010bb4 <I2C_Disable_IRQ>

    return HAL_OK;
2400e380:	2300      	movs	r3, #0
2400e382:	e000      	b.n	2400e386 <HAL_I2C_DisableListen_IT+0x5a>
  }
  else
  {
    return HAL_BUSY;
2400e384:	2302      	movs	r3, #2
  }
}
2400e386:	4618      	mov	r0, r3
2400e388:	3710      	adds	r7, #16
2400e38a:	46bd      	mov	sp, r7
2400e38c:	bd80      	pop	{r7, pc}
	...

2400e390 <HAL_I2C_Master_Abort_IT>:
  * @param  DevAddress Target device address: The device 7 bits address value
  *         in datasheet must be shifted to the left before calling the interface
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Abort_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress)
{
2400e390:	b580      	push	{r7, lr}
2400e392:	b084      	sub	sp, #16
2400e394:	af02      	add	r7, sp, #8
2400e396:	6078      	str	r0, [r7, #4]
2400e398:	460b      	mov	r3, r1
2400e39a:	807b      	strh	r3, [r7, #2]
  if (hi2c->Mode == HAL_I2C_MODE_MASTER)
2400e39c:	687b      	ldr	r3, [r7, #4]
2400e39e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
2400e3a2:	b2db      	uxtb	r3, r3
2400e3a4:	2b10      	cmp	r3, #16
2400e3a6:	d13c      	bne.n	2400e422 <HAL_I2C_Master_Abort_IT+0x92>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
2400e3a8:	687b      	ldr	r3, [r7, #4]
2400e3aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400e3ae:	2b01      	cmp	r3, #1
2400e3b0:	d101      	bne.n	2400e3b6 <HAL_I2C_Master_Abort_IT+0x26>
2400e3b2:	2302      	movs	r3, #2
2400e3b4:	e036      	b.n	2400e424 <HAL_I2C_Master_Abort_IT+0x94>
2400e3b6:	687b      	ldr	r3, [r7, #4]
2400e3b8:	2201      	movs	r2, #1
2400e3ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Disable Interrupts and Store Previous state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
2400e3be:	687b      	ldr	r3, [r7, #4]
2400e3c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400e3c4:	b2db      	uxtb	r3, r3
2400e3c6:	2b21      	cmp	r3, #33	; 0x21
2400e3c8:	d107      	bne.n	2400e3da <HAL_I2C_Master_Abort_IT+0x4a>
    {
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
2400e3ca:	2101      	movs	r1, #1
2400e3cc:	6878      	ldr	r0, [r7, #4]
2400e3ce:	f002 fbf1 	bl	24010bb4 <I2C_Disable_IRQ>
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
2400e3d2:	687b      	ldr	r3, [r7, #4]
2400e3d4:	2211      	movs	r2, #17
2400e3d6:	631a      	str	r2, [r3, #48]	; 0x30
2400e3d8:	e00c      	b.n	2400e3f4 <HAL_I2C_Master_Abort_IT+0x64>
    }
    else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
2400e3da:	687b      	ldr	r3, [r7, #4]
2400e3dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400e3e0:	b2db      	uxtb	r3, r3
2400e3e2:	2b22      	cmp	r3, #34	; 0x22
2400e3e4:	d106      	bne.n	2400e3f4 <HAL_I2C_Master_Abort_IT+0x64>
    {
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
2400e3e6:	2102      	movs	r1, #2
2400e3e8:	6878      	ldr	r0, [r7, #4]
2400e3ea:	f002 fbe3 	bl	24010bb4 <I2C_Disable_IRQ>
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
2400e3ee:	687b      	ldr	r3, [r7, #4]
2400e3f0:	2212      	movs	r2, #18
2400e3f2:	631a      	str	r2, [r3, #48]	; 0x30
    {
      /* Do nothing */
    }

    /* Set State at HAL_I2C_STATE_ABORT */
    hi2c->State = HAL_I2C_STATE_ABORT;
2400e3f4:	687b      	ldr	r3, [r7, #4]
2400e3f6:	2260      	movs	r2, #96	; 0x60
2400e3f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set NBYTES to 1 to generate a dummy read on I2C peripheral */
    /* Set AUTOEND mode, this will generate a NACK then STOP condition to abort the current transfer */
    I2C_TransferConfig(hi2c, DevAddress, 1, I2C_AUTOEND_MODE, I2C_GENERATE_STOP);
2400e3fc:	8879      	ldrh	r1, [r7, #2]
2400e3fe:	4b0b      	ldr	r3, [pc, #44]	; (2400e42c <HAL_I2C_Master_Abort_IT+0x9c>)
2400e400:	9300      	str	r3, [sp, #0]
2400e402:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400e406:	2201      	movs	r2, #1
2400e408:	6878      	ldr	r0, [r7, #4]
2400e40a:	f002 fb37 	bl	24010a7c <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400e40e:	687b      	ldr	r3, [r7, #4]
2400e410:	2200      	movs	r2, #0
2400e412:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
2400e416:	2120      	movs	r1, #32
2400e418:	6878      	ldr	r0, [r7, #4]
2400e41a:	f002 fb61 	bl	24010ae0 <I2C_Enable_IRQ>

    return HAL_OK;
2400e41e:	2300      	movs	r3, #0
2400e420:	e000      	b.n	2400e424 <HAL_I2C_Master_Abort_IT+0x94>
  }
  else
  {
    /* Wrong usage of abort function */
    /* This function should be used only in case of abort monitored by master device */
    return HAL_ERROR;
2400e422:	2301      	movs	r3, #1
  }
}
2400e424:	4618      	mov	r0, r3
2400e426:	3708      	adds	r7, #8
2400e428:	46bd      	mov	sp, r7
2400e42a:	bd80      	pop	{r7, pc}
2400e42c:	80004000 	.word	0x80004000

2400e430 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
2400e430:	b580      	push	{r7, lr}
2400e432:	b084      	sub	sp, #16
2400e434:	af00      	add	r7, sp, #0
2400e436:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
2400e438:	687b      	ldr	r3, [r7, #4]
2400e43a:	681b      	ldr	r3, [r3, #0]
2400e43c:	699b      	ldr	r3, [r3, #24]
2400e43e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
2400e440:	687b      	ldr	r3, [r7, #4]
2400e442:	681b      	ldr	r3, [r3, #0]
2400e444:	681b      	ldr	r3, [r3, #0]
2400e446:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
2400e448:	687b      	ldr	r3, [r7, #4]
2400e44a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2400e44c:	2b00      	cmp	r3, #0
2400e44e:	d005      	beq.n	2400e45c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
2400e450:	687b      	ldr	r3, [r7, #4]
2400e452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2400e454:	68ba      	ldr	r2, [r7, #8]
2400e456:	68f9      	ldr	r1, [r7, #12]
2400e458:	6878      	ldr	r0, [r7, #4]
2400e45a:	4798      	blx	r3
  }
}
2400e45c:	bf00      	nop
2400e45e:	3710      	adds	r7, #16
2400e460:	46bd      	mov	sp, r7
2400e462:	bd80      	pop	{r7, pc}

2400e464 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
2400e464:	b580      	push	{r7, lr}
2400e466:	b086      	sub	sp, #24
2400e468:	af00      	add	r7, sp, #0
2400e46a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
2400e46c:	687b      	ldr	r3, [r7, #4]
2400e46e:	681b      	ldr	r3, [r3, #0]
2400e470:	699b      	ldr	r3, [r3, #24]
2400e472:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
2400e474:	687b      	ldr	r3, [r7, #4]
2400e476:	681b      	ldr	r3, [r3, #0]
2400e478:	681b      	ldr	r3, [r3, #0]
2400e47a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
2400e47c:	697b      	ldr	r3, [r7, #20]
2400e47e:	f403 7380 	and.w	r3, r3, #256	; 0x100
2400e482:	2b00      	cmp	r3, #0
2400e484:	d00f      	beq.n	2400e4a6 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
2400e486:	693b      	ldr	r3, [r7, #16]
2400e488:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
2400e48c:	2b00      	cmp	r3, #0
2400e48e:	d00a      	beq.n	2400e4a6 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
2400e490:	687b      	ldr	r3, [r7, #4]
2400e492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400e494:	f043 0201 	orr.w	r2, r3, #1
2400e498:	687b      	ldr	r3, [r7, #4]
2400e49a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
2400e49c:	687b      	ldr	r3, [r7, #4]
2400e49e:	681b      	ldr	r3, [r3, #0]
2400e4a0:	f44f 7280 	mov.w	r2, #256	; 0x100
2400e4a4:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
2400e4a6:	697b      	ldr	r3, [r7, #20]
2400e4a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
2400e4ac:	2b00      	cmp	r3, #0
2400e4ae:	d00f      	beq.n	2400e4d0 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
2400e4b0:	693b      	ldr	r3, [r7, #16]
2400e4b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
2400e4b6:	2b00      	cmp	r3, #0
2400e4b8:	d00a      	beq.n	2400e4d0 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
2400e4ba:	687b      	ldr	r3, [r7, #4]
2400e4bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400e4be:	f043 0208 	orr.w	r2, r3, #8
2400e4c2:	687b      	ldr	r3, [r7, #4]
2400e4c4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
2400e4c6:	687b      	ldr	r3, [r7, #4]
2400e4c8:	681b      	ldr	r3, [r3, #0]
2400e4ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
2400e4ce:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
2400e4d0:	697b      	ldr	r3, [r7, #20]
2400e4d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
2400e4d6:	2b00      	cmp	r3, #0
2400e4d8:	d00f      	beq.n	2400e4fa <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
2400e4da:	693b      	ldr	r3, [r7, #16]
2400e4dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
2400e4e0:	2b00      	cmp	r3, #0
2400e4e2:	d00a      	beq.n	2400e4fa <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
2400e4e4:	687b      	ldr	r3, [r7, #4]
2400e4e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400e4e8:	f043 0202 	orr.w	r2, r3, #2
2400e4ec:	687b      	ldr	r3, [r7, #4]
2400e4ee:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
2400e4f0:	687b      	ldr	r3, [r7, #4]
2400e4f2:	681b      	ldr	r3, [r3, #0]
2400e4f4:	f44f 7200 	mov.w	r2, #512	; 0x200
2400e4f8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
2400e4fa:	687b      	ldr	r3, [r7, #4]
2400e4fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400e4fe:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
2400e500:	68fb      	ldr	r3, [r7, #12]
2400e502:	f003 030b 	and.w	r3, r3, #11
2400e506:	2b00      	cmp	r3, #0
2400e508:	d003      	beq.n	2400e512 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
2400e50a:	68f9      	ldr	r1, [r7, #12]
2400e50c:	6878      	ldr	r0, [r7, #4]
2400e50e:	f001 fc7d 	bl	2400fe0c <I2C_ITError>
  }
}
2400e512:	bf00      	nop
2400e514:	3718      	adds	r7, #24
2400e516:	46bd      	mov	sp, r7
2400e518:	bd80      	pop	{r7, pc}

2400e51a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
2400e51a:	b480      	push	{r7}
2400e51c:	b083      	sub	sp, #12
2400e51e:	af00      	add	r7, sp, #0
2400e520:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
2400e522:	bf00      	nop
2400e524:	370c      	adds	r7, #12
2400e526:	46bd      	mov	sp, r7
2400e528:	f85d 7b04 	ldr.w	r7, [sp], #4
2400e52c:	4770      	bx	lr

2400e52e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
2400e52e:	b480      	push	{r7}
2400e530:	b083      	sub	sp, #12
2400e532:	af00      	add	r7, sp, #0
2400e534:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
2400e536:	bf00      	nop
2400e538:	370c      	adds	r7, #12
2400e53a:	46bd      	mov	sp, r7
2400e53c:	f85d 7b04 	ldr.w	r7, [sp], #4
2400e540:	4770      	bx	lr

2400e542 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
2400e542:	b480      	push	{r7}
2400e544:	b083      	sub	sp, #12
2400e546:	af00      	add	r7, sp, #0
2400e548:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
2400e54a:	bf00      	nop
2400e54c:	370c      	adds	r7, #12
2400e54e:	46bd      	mov	sp, r7
2400e550:	f85d 7b04 	ldr.w	r7, [sp], #4
2400e554:	4770      	bx	lr

2400e556 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
2400e556:	b480      	push	{r7}
2400e558:	b083      	sub	sp, #12
2400e55a:	af00      	add	r7, sp, #0
2400e55c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
2400e55e:	bf00      	nop
2400e560:	370c      	adds	r7, #12
2400e562:	46bd      	mov	sp, r7
2400e564:	f85d 7b04 	ldr.w	r7, [sp], #4
2400e568:	4770      	bx	lr

2400e56a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
2400e56a:	b480      	push	{r7}
2400e56c:	b083      	sub	sp, #12
2400e56e:	af00      	add	r7, sp, #0
2400e570:	6078      	str	r0, [r7, #4]
2400e572:	460b      	mov	r3, r1
2400e574:	70fb      	strb	r3, [r7, #3]
2400e576:	4613      	mov	r3, r2
2400e578:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
2400e57a:	bf00      	nop
2400e57c:	370c      	adds	r7, #12
2400e57e:	46bd      	mov	sp, r7
2400e580:	f85d 7b04 	ldr.w	r7, [sp], #4
2400e584:	4770      	bx	lr

2400e586 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
2400e586:	b480      	push	{r7}
2400e588:	b083      	sub	sp, #12
2400e58a:	af00      	add	r7, sp, #0
2400e58c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
2400e58e:	bf00      	nop
2400e590:	370c      	adds	r7, #12
2400e592:	46bd      	mov	sp, r7
2400e594:	f85d 7b04 	ldr.w	r7, [sp], #4
2400e598:	4770      	bx	lr

2400e59a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
2400e59a:	b480      	push	{r7}
2400e59c:	b083      	sub	sp, #12
2400e59e:	af00      	add	r7, sp, #0
2400e5a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
2400e5a2:	bf00      	nop
2400e5a4:	370c      	adds	r7, #12
2400e5a6:	46bd      	mov	sp, r7
2400e5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
2400e5ac:	4770      	bx	lr

2400e5ae <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
2400e5ae:	b480      	push	{r7}
2400e5b0:	b083      	sub	sp, #12
2400e5b2:	af00      	add	r7, sp, #0
2400e5b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
2400e5b6:	bf00      	nop
2400e5b8:	370c      	adds	r7, #12
2400e5ba:	46bd      	mov	sp, r7
2400e5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
2400e5c0:	4770      	bx	lr

2400e5c2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
2400e5c2:	b480      	push	{r7}
2400e5c4:	b083      	sub	sp, #12
2400e5c6:	af00      	add	r7, sp, #0
2400e5c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
2400e5ca:	bf00      	nop
2400e5cc:	370c      	adds	r7, #12
2400e5ce:	46bd      	mov	sp, r7
2400e5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
2400e5d4:	4770      	bx	lr

2400e5d6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
2400e5d6:	b480      	push	{r7}
2400e5d8:	b083      	sub	sp, #12
2400e5da:	af00      	add	r7, sp, #0
2400e5dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
2400e5de:	bf00      	nop
2400e5e0:	370c      	adds	r7, #12
2400e5e2:	46bd      	mov	sp, r7
2400e5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
2400e5e8:	4770      	bx	lr

2400e5ea <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
2400e5ea:	b480      	push	{r7}
2400e5ec:	b083      	sub	sp, #12
2400e5ee:	af00      	add	r7, sp, #0
2400e5f0:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
2400e5f2:	687b      	ldr	r3, [r7, #4]
2400e5f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400e5f8:	b2db      	uxtb	r3, r3
}
2400e5fa:	4618      	mov	r0, r3
2400e5fc:	370c      	adds	r7, #12
2400e5fe:	46bd      	mov	sp, r7
2400e600:	f85d 7b04 	ldr.w	r7, [sp], #4
2400e604:	4770      	bx	lr

2400e606 <HAL_I2C_GetMode>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL mode
  */
HAL_I2C_ModeTypeDef HAL_I2C_GetMode(I2C_HandleTypeDef *hi2c)
{
2400e606:	b480      	push	{r7}
2400e608:	b083      	sub	sp, #12
2400e60a:	af00      	add	r7, sp, #0
2400e60c:	6078      	str	r0, [r7, #4]
  return hi2c->Mode;
2400e60e:	687b      	ldr	r3, [r7, #4]
2400e610:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
2400e614:	b2db      	uxtb	r3, r3
}
2400e616:	4618      	mov	r0, r3
2400e618:	370c      	adds	r7, #12
2400e61a:	46bd      	mov	sp, r7
2400e61c:	f85d 7b04 	ldr.w	r7, [sp], #4
2400e620:	4770      	bx	lr

2400e622 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
2400e622:	b480      	push	{r7}
2400e624:	b083      	sub	sp, #12
2400e626:	af00      	add	r7, sp, #0
2400e628:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
2400e62a:	687b      	ldr	r3, [r7, #4]
2400e62c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
2400e62e:	4618      	mov	r0, r3
2400e630:	370c      	adds	r7, #12
2400e632:	46bd      	mov	sp, r7
2400e634:	f85d 7b04 	ldr.w	r7, [sp], #4
2400e638:	4770      	bx	lr

2400e63a <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
2400e63a:	b580      	push	{r7, lr}
2400e63c:	b088      	sub	sp, #32
2400e63e:	af02      	add	r7, sp, #8
2400e640:	60f8      	str	r0, [r7, #12]
2400e642:	60b9      	str	r1, [r7, #8]
2400e644:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
2400e646:	68bb      	ldr	r3, [r7, #8]
2400e648:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
2400e64a:	68fb      	ldr	r3, [r7, #12]
2400e64c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400e650:	2b01      	cmp	r3, #1
2400e652:	d101      	bne.n	2400e658 <I2C_Master_ISR_IT+0x1e>
2400e654:	2302      	movs	r3, #2
2400e656:	e108      	b.n	2400e86a <I2C_Master_ISR_IT+0x230>
2400e658:	68fb      	ldr	r3, [r7, #12]
2400e65a:	2201      	movs	r2, #1
2400e65c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
2400e660:	697b      	ldr	r3, [r7, #20]
2400e662:	f003 0310 	and.w	r3, r3, #16
2400e666:	2b00      	cmp	r3, #0
2400e668:	d012      	beq.n	2400e690 <I2C_Master_ISR_IT+0x56>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
2400e66a:	687b      	ldr	r3, [r7, #4]
2400e66c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
2400e670:	2b00      	cmp	r3, #0
2400e672:	d00d      	beq.n	2400e690 <I2C_Master_ISR_IT+0x56>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400e674:	68fb      	ldr	r3, [r7, #12]
2400e676:	681b      	ldr	r3, [r3, #0]
2400e678:	2210      	movs	r2, #16
2400e67a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
2400e67c:	68fb      	ldr	r3, [r7, #12]
2400e67e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400e680:	f043 0204 	orr.w	r2, r3, #4
2400e684:	68fb      	ldr	r3, [r7, #12]
2400e686:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
2400e688:	68f8      	ldr	r0, [r7, #12]
2400e68a:	f001 fcd6 	bl	2401003a <I2C_Flush_TXDR>
2400e68e:	e0d9      	b.n	2400e844 <I2C_Master_ISR_IT+0x20a>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
2400e690:	697b      	ldr	r3, [r7, #20]
2400e692:	f003 0304 	and.w	r3, r3, #4
2400e696:	2b00      	cmp	r3, #0
2400e698:	d022      	beq.n	2400e6e0 <I2C_Master_ISR_IT+0xa6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
2400e69a:	687b      	ldr	r3, [r7, #4]
2400e69c:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
2400e6a0:	2b00      	cmp	r3, #0
2400e6a2:	d01d      	beq.n	2400e6e0 <I2C_Master_ISR_IT+0xa6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
2400e6a4:	697b      	ldr	r3, [r7, #20]
2400e6a6:	f023 0304 	bic.w	r3, r3, #4
2400e6aa:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
2400e6ac:	68fb      	ldr	r3, [r7, #12]
2400e6ae:	681b      	ldr	r3, [r3, #0]
2400e6b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
2400e6b2:	68fb      	ldr	r3, [r7, #12]
2400e6b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400e6b6:	b2d2      	uxtb	r2, r2
2400e6b8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
2400e6ba:	68fb      	ldr	r3, [r7, #12]
2400e6bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400e6be:	1c5a      	adds	r2, r3, #1
2400e6c0:	68fb      	ldr	r3, [r7, #12]
2400e6c2:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
2400e6c4:	68fb      	ldr	r3, [r7, #12]
2400e6c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400e6c8:	3b01      	subs	r3, #1
2400e6ca:	b29a      	uxth	r2, r3
2400e6cc:	68fb      	ldr	r3, [r7, #12]
2400e6ce:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
2400e6d0:	68fb      	ldr	r3, [r7, #12]
2400e6d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400e6d4:	b29b      	uxth	r3, r3
2400e6d6:	3b01      	subs	r3, #1
2400e6d8:	b29a      	uxth	r2, r3
2400e6da:	68fb      	ldr	r3, [r7, #12]
2400e6dc:	855a      	strh	r2, [r3, #42]	; 0x2a
2400e6de:	e0b1      	b.n	2400e844 <I2C_Master_ISR_IT+0x20a>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
2400e6e0:	697b      	ldr	r3, [r7, #20]
2400e6e2:	f003 0302 	and.w	r3, r3, #2
2400e6e6:	2b00      	cmp	r3, #0
2400e6e8:	d01d      	beq.n	2400e726 <I2C_Master_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
2400e6ea:	687b      	ldr	r3, [r7, #4]
2400e6ec:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
2400e6f0:	2b00      	cmp	r3, #0
2400e6f2:	d018      	beq.n	2400e726 <I2C_Master_ISR_IT+0xec>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
2400e6f4:	68fb      	ldr	r3, [r7, #12]
2400e6f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400e6f8:	781a      	ldrb	r2, [r3, #0]
2400e6fa:	68fb      	ldr	r3, [r7, #12]
2400e6fc:	681b      	ldr	r3, [r3, #0]
2400e6fe:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
2400e700:	68fb      	ldr	r3, [r7, #12]
2400e702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400e704:	1c5a      	adds	r2, r3, #1
2400e706:	68fb      	ldr	r3, [r7, #12]
2400e708:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
2400e70a:	68fb      	ldr	r3, [r7, #12]
2400e70c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400e70e:	3b01      	subs	r3, #1
2400e710:	b29a      	uxth	r2, r3
2400e712:	68fb      	ldr	r3, [r7, #12]
2400e714:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
2400e716:	68fb      	ldr	r3, [r7, #12]
2400e718:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400e71a:	b29b      	uxth	r3, r3
2400e71c:	3b01      	subs	r3, #1
2400e71e:	b29a      	uxth	r2, r3
2400e720:	68fb      	ldr	r3, [r7, #12]
2400e722:	855a      	strh	r2, [r3, #42]	; 0x2a
2400e724:	e08e      	b.n	2400e844 <I2C_Master_ISR_IT+0x20a>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
2400e726:	697b      	ldr	r3, [r7, #20]
2400e728:	f003 0380 	and.w	r3, r3, #128	; 0x80
2400e72c:	2b00      	cmp	r3, #0
2400e72e:	d05c      	beq.n	2400e7ea <I2C_Master_ISR_IT+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
2400e730:	687b      	ldr	r3, [r7, #4]
2400e732:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
2400e736:	2b00      	cmp	r3, #0
2400e738:	d057      	beq.n	2400e7ea <I2C_Master_ISR_IT+0x1b0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
2400e73a:	68fb      	ldr	r3, [r7, #12]
2400e73c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400e73e:	b29b      	uxth	r3, r3
2400e740:	2b00      	cmp	r3, #0
2400e742:	d040      	beq.n	2400e7c6 <I2C_Master_ISR_IT+0x18c>
2400e744:	68fb      	ldr	r3, [r7, #12]
2400e746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400e748:	2b00      	cmp	r3, #0
2400e74a:	d13c      	bne.n	2400e7c6 <I2C_Master_ISR_IT+0x18c>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
2400e74c:	68fb      	ldr	r3, [r7, #12]
2400e74e:	681b      	ldr	r3, [r3, #0]
2400e750:	685b      	ldr	r3, [r3, #4]
2400e752:	b29b      	uxth	r3, r3
2400e754:	f3c3 0309 	ubfx	r3, r3, #0, #10
2400e758:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400e75a:	68fb      	ldr	r3, [r7, #12]
2400e75c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400e75e:	b29b      	uxth	r3, r3
2400e760:	2bff      	cmp	r3, #255	; 0xff
2400e762:	d90e      	bls.n	2400e782 <I2C_Master_ISR_IT+0x148>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
2400e764:	68fb      	ldr	r3, [r7, #12]
2400e766:	22ff      	movs	r2, #255	; 0xff
2400e768:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
2400e76a:	68fb      	ldr	r3, [r7, #12]
2400e76c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400e76e:	b2da      	uxtb	r2, r3
2400e770:	8a79      	ldrh	r1, [r7, #18]
2400e772:	2300      	movs	r3, #0
2400e774:	9300      	str	r3, [sp, #0]
2400e776:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400e77a:	68f8      	ldr	r0, [r7, #12]
2400e77c:	f002 f97e 	bl	24010a7c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400e780:	e032      	b.n	2400e7e8 <I2C_Master_ISR_IT+0x1ae>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
2400e782:	68fb      	ldr	r3, [r7, #12]
2400e784:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400e786:	b29a      	uxth	r2, r3
2400e788:	68fb      	ldr	r3, [r7, #12]
2400e78a:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
2400e78c:	68fb      	ldr	r3, [r7, #12]
2400e78e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400e790:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
2400e794:	d00b      	beq.n	2400e7ae <I2C_Master_ISR_IT+0x174>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
2400e796:	68fb      	ldr	r3, [r7, #12]
2400e798:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400e79a:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
2400e79c:	68fb      	ldr	r3, [r7, #12]
2400e79e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
2400e7a0:	8a79      	ldrh	r1, [r7, #18]
2400e7a2:	2000      	movs	r0, #0
2400e7a4:	9000      	str	r0, [sp, #0]
2400e7a6:	68f8      	ldr	r0, [r7, #12]
2400e7a8:	f002 f968 	bl	24010a7c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400e7ac:	e01c      	b.n	2400e7e8 <I2C_Master_ISR_IT+0x1ae>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
2400e7ae:	68fb      	ldr	r3, [r7, #12]
2400e7b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400e7b2:	b2da      	uxtb	r2, r3
2400e7b4:	8a79      	ldrh	r1, [r7, #18]
2400e7b6:	2300      	movs	r3, #0
2400e7b8:	9300      	str	r3, [sp, #0]
2400e7ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400e7be:	68f8      	ldr	r0, [r7, #12]
2400e7c0:	f002 f95c 	bl	24010a7c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400e7c4:	e010      	b.n	2400e7e8 <I2C_Master_ISR_IT+0x1ae>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
2400e7c6:	68fb      	ldr	r3, [r7, #12]
2400e7c8:	681b      	ldr	r3, [r3, #0]
2400e7ca:	685b      	ldr	r3, [r3, #4]
2400e7cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2400e7d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
2400e7d4:	d003      	beq.n	2400e7de <I2C_Master_ISR_IT+0x1a4>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
2400e7d6:	68f8      	ldr	r0, [r7, #12]
2400e7d8:	f000 ff6c 	bl	2400f6b4 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
2400e7dc:	e032      	b.n	2400e844 <I2C_Master_ISR_IT+0x20a>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
2400e7de:	2140      	movs	r1, #64	; 0x40
2400e7e0:	68f8      	ldr	r0, [r7, #12]
2400e7e2:	f001 fb13 	bl	2400fe0c <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
2400e7e6:	e02d      	b.n	2400e844 <I2C_Master_ISR_IT+0x20a>
2400e7e8:	e02c      	b.n	2400e844 <I2C_Master_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
2400e7ea:	697b      	ldr	r3, [r7, #20]
2400e7ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
2400e7f0:	2b00      	cmp	r3, #0
2400e7f2:	d027      	beq.n	2400e844 <I2C_Master_ISR_IT+0x20a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
2400e7f4:	687b      	ldr	r3, [r7, #4]
2400e7f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
2400e7fa:	2b00      	cmp	r3, #0
2400e7fc:	d022      	beq.n	2400e844 <I2C_Master_ISR_IT+0x20a>
  {
    if (hi2c->XferCount == 0U)
2400e7fe:	68fb      	ldr	r3, [r7, #12]
2400e800:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400e802:	b29b      	uxth	r3, r3
2400e804:	2b00      	cmp	r3, #0
2400e806:	d119      	bne.n	2400e83c <I2C_Master_ISR_IT+0x202>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
2400e808:	68fb      	ldr	r3, [r7, #12]
2400e80a:	681b      	ldr	r3, [r3, #0]
2400e80c:	685b      	ldr	r3, [r3, #4]
2400e80e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2400e812:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
2400e816:	d015      	beq.n	2400e844 <I2C_Master_ISR_IT+0x20a>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
2400e818:	68fb      	ldr	r3, [r7, #12]
2400e81a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400e81c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
2400e820:	d108      	bne.n	2400e834 <I2C_Master_ISR_IT+0x1fa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
2400e822:	68fb      	ldr	r3, [r7, #12]
2400e824:	681b      	ldr	r3, [r3, #0]
2400e826:	685a      	ldr	r2, [r3, #4]
2400e828:	68fb      	ldr	r3, [r7, #12]
2400e82a:	681b      	ldr	r3, [r3, #0]
2400e82c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
2400e830:	605a      	str	r2, [r3, #4]
2400e832:	e007      	b.n	2400e844 <I2C_Master_ISR_IT+0x20a>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
2400e834:	68f8      	ldr	r0, [r7, #12]
2400e836:	f000 ff3d 	bl	2400f6b4 <I2C_ITMasterSeqCplt>
2400e83a:	e003      	b.n	2400e844 <I2C_Master_ISR_IT+0x20a>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
2400e83c:	2140      	movs	r1, #64	; 0x40
2400e83e:	68f8      	ldr	r0, [r7, #12]
2400e840:	f001 fae4 	bl	2400fe0c <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
2400e844:	697b      	ldr	r3, [r7, #20]
2400e846:	f003 0320 	and.w	r3, r3, #32
2400e84a:	2b00      	cmp	r3, #0
2400e84c:	d008      	beq.n	2400e860 <I2C_Master_ISR_IT+0x226>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
2400e84e:	687b      	ldr	r3, [r7, #4]
2400e850:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
2400e854:	2b00      	cmp	r3, #0
2400e856:	d003      	beq.n	2400e860 <I2C_Master_ISR_IT+0x226>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
2400e858:	6979      	ldr	r1, [r7, #20]
2400e85a:	68f8      	ldr	r0, [r7, #12]
2400e85c:	f000 ffc4 	bl	2400f7e8 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
2400e860:	68fb      	ldr	r3, [r7, #12]
2400e862:	2200      	movs	r2, #0
2400e864:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
2400e868:	2300      	movs	r3, #0
}
2400e86a:	4618      	mov	r0, r3
2400e86c:	3718      	adds	r7, #24
2400e86e:	46bd      	mov	sp, r7
2400e870:	bd80      	pop	{r7, pc}
	...

2400e874 <I2C_Mem_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                        uint32_t ITSources)
{
2400e874:	b580      	push	{r7, lr}
2400e876:	b088      	sub	sp, #32
2400e878:	af02      	add	r7, sp, #8
2400e87a:	60f8      	str	r0, [r7, #12]
2400e87c:	60b9      	str	r1, [r7, #8]
2400e87e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
2400e880:	4b89      	ldr	r3, [pc, #548]	; (2400eaa8 <I2C_Mem_ISR_IT+0x234>)
2400e882:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
2400e884:	68bb      	ldr	r3, [r7, #8]
2400e886:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(hi2c);
2400e888:	68fb      	ldr	r3, [r7, #12]
2400e88a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400e88e:	2b01      	cmp	r3, #1
2400e890:	d101      	bne.n	2400e896 <I2C_Mem_ISR_IT+0x22>
2400e892:	2302      	movs	r3, #2
2400e894:	e104      	b.n	2400eaa0 <I2C_Mem_ISR_IT+0x22c>
2400e896:	68fb      	ldr	r3, [r7, #12]
2400e898:	2201      	movs	r2, #1
2400e89a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
2400e89e:	693b      	ldr	r3, [r7, #16]
2400e8a0:	f003 0310 	and.w	r3, r3, #16
2400e8a4:	2b00      	cmp	r3, #0
2400e8a6:	d012      	beq.n	2400e8ce <I2C_Mem_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
2400e8a8:	687b      	ldr	r3, [r7, #4]
2400e8aa:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
2400e8ae:	2b00      	cmp	r3, #0
2400e8b0:	d00d      	beq.n	2400e8ce <I2C_Mem_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400e8b2:	68fb      	ldr	r3, [r7, #12]
2400e8b4:	681b      	ldr	r3, [r3, #0]
2400e8b6:	2210      	movs	r2, #16
2400e8b8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
2400e8ba:	68fb      	ldr	r3, [r7, #12]
2400e8bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400e8be:	f043 0204 	orr.w	r2, r3, #4
2400e8c2:	68fb      	ldr	r3, [r7, #12]
2400e8c4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
2400e8c6:	68f8      	ldr	r0, [r7, #12]
2400e8c8:	f001 fbb7 	bl	2401003a <I2C_Flush_TXDR>
2400e8cc:	e0d5      	b.n	2400ea7a <I2C_Mem_ISR_IT+0x206>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
2400e8ce:	693b      	ldr	r3, [r7, #16]
2400e8d0:	f003 0304 	and.w	r3, r3, #4
2400e8d4:	2b00      	cmp	r3, #0
2400e8d6:	d022      	beq.n	2400e91e <I2C_Mem_ISR_IT+0xaa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
2400e8d8:	687b      	ldr	r3, [r7, #4]
2400e8da:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
2400e8de:	2b00      	cmp	r3, #0
2400e8e0:	d01d      	beq.n	2400e91e <I2C_Mem_ISR_IT+0xaa>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
2400e8e2:	693b      	ldr	r3, [r7, #16]
2400e8e4:	f023 0304 	bic.w	r3, r3, #4
2400e8e8:	613b      	str	r3, [r7, #16]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
2400e8ea:	68fb      	ldr	r3, [r7, #12]
2400e8ec:	681b      	ldr	r3, [r3, #0]
2400e8ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
2400e8f0:	68fb      	ldr	r3, [r7, #12]
2400e8f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400e8f4:	b2d2      	uxtb	r2, r2
2400e8f6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
2400e8f8:	68fb      	ldr	r3, [r7, #12]
2400e8fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400e8fc:	1c5a      	adds	r2, r3, #1
2400e8fe:	68fb      	ldr	r3, [r7, #12]
2400e900:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
2400e902:	68fb      	ldr	r3, [r7, #12]
2400e904:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400e906:	3b01      	subs	r3, #1
2400e908:	b29a      	uxth	r2, r3
2400e90a:	68fb      	ldr	r3, [r7, #12]
2400e90c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
2400e90e:	68fb      	ldr	r3, [r7, #12]
2400e910:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400e912:	b29b      	uxth	r3, r3
2400e914:	3b01      	subs	r3, #1
2400e916:	b29a      	uxth	r2, r3
2400e918:	68fb      	ldr	r3, [r7, #12]
2400e91a:	855a      	strh	r2, [r3, #42]	; 0x2a
2400e91c:	e0ad      	b.n	2400ea7a <I2C_Mem_ISR_IT+0x206>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
2400e91e:	693b      	ldr	r3, [r7, #16]
2400e920:	f003 0302 	and.w	r3, r3, #2
2400e924:	2b00      	cmp	r3, #0
2400e926:	d02c      	beq.n	2400e982 <I2C_Mem_ISR_IT+0x10e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
2400e928:	687b      	ldr	r3, [r7, #4]
2400e92a:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
2400e92e:	2b00      	cmp	r3, #0
2400e930:	d027      	beq.n	2400e982 <I2C_Mem_ISR_IT+0x10e>
  {
    if (hi2c->Memaddress == 0xFFFFFFFFU)
2400e932:	68fb      	ldr	r3, [r7, #12]
2400e934:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2400e936:	f1b3 3fff 	cmp.w	r3, #4294967295
2400e93a:	d118      	bne.n	2400e96e <I2C_Mem_ISR_IT+0xfa>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
2400e93c:	68fb      	ldr	r3, [r7, #12]
2400e93e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400e940:	781a      	ldrb	r2, [r3, #0]
2400e942:	68fb      	ldr	r3, [r7, #12]
2400e944:	681b      	ldr	r3, [r3, #0]
2400e946:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
2400e948:	68fb      	ldr	r3, [r7, #12]
2400e94a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400e94c:	1c5a      	adds	r2, r3, #1
2400e94e:	68fb      	ldr	r3, [r7, #12]
2400e950:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
2400e952:	68fb      	ldr	r3, [r7, #12]
2400e954:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400e956:	3b01      	subs	r3, #1
2400e958:	b29a      	uxth	r2, r3
2400e95a:	68fb      	ldr	r3, [r7, #12]
2400e95c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
2400e95e:	68fb      	ldr	r3, [r7, #12]
2400e960:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400e962:	b29b      	uxth	r3, r3
2400e964:	3b01      	subs	r3, #1
2400e966:	b29a      	uxth	r2, r3
2400e968:	68fb      	ldr	r3, [r7, #12]
2400e96a:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->Memaddress == 0xFFFFFFFFU)
2400e96c:	e085      	b.n	2400ea7a <I2C_Mem_ISR_IT+0x206>
    }
    else
    {
      /* Write LSB part of Memory Address */
      hi2c->Instance->TXDR = hi2c->Memaddress;
2400e96e:	68fb      	ldr	r3, [r7, #12]
2400e970:	681b      	ldr	r3, [r3, #0]
2400e972:	68fa      	ldr	r2, [r7, #12]
2400e974:	6d12      	ldr	r2, [r2, #80]	; 0x50
2400e976:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
2400e978:	68fb      	ldr	r3, [r7, #12]
2400e97a:	f04f 32ff 	mov.w	r2, #4294967295
2400e97e:	651a      	str	r2, [r3, #80]	; 0x50
    if (hi2c->Memaddress == 0xFFFFFFFFU)
2400e980:	e07b      	b.n	2400ea7a <I2C_Mem_ISR_IT+0x206>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
2400e982:	693b      	ldr	r3, [r7, #16]
2400e984:	f003 0380 	and.w	r3, r3, #128	; 0x80
2400e988:	2b00      	cmp	r3, #0
2400e98a:	d03c      	beq.n	2400ea06 <I2C_Mem_ISR_IT+0x192>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
2400e98c:	687b      	ldr	r3, [r7, #4]
2400e98e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
2400e992:	2b00      	cmp	r3, #0
2400e994:	d037      	beq.n	2400ea06 <I2C_Mem_ISR_IT+0x192>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
2400e996:	68fb      	ldr	r3, [r7, #12]
2400e998:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400e99a:	b29b      	uxth	r3, r3
2400e99c:	2b00      	cmp	r3, #0
2400e99e:	d02c      	beq.n	2400e9fa <I2C_Mem_ISR_IT+0x186>
2400e9a0:	68fb      	ldr	r3, [r7, #12]
2400e9a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400e9a4:	2b00      	cmp	r3, #0
2400e9a6:	d128      	bne.n	2400e9fa <I2C_Mem_ISR_IT+0x186>
    {
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400e9a8:	68fb      	ldr	r3, [r7, #12]
2400e9aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400e9ac:	b29b      	uxth	r3, r3
2400e9ae:	2bff      	cmp	r3, #255	; 0xff
2400e9b0:	d910      	bls.n	2400e9d4 <I2C_Mem_ISR_IT+0x160>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
2400e9b2:	68fb      	ldr	r3, [r7, #12]
2400e9b4:	22ff      	movs	r2, #255	; 0xff
2400e9b6:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
2400e9b8:	68fb      	ldr	r3, [r7, #12]
2400e9ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2400e9bc:	b299      	uxth	r1, r3
2400e9be:	68fb      	ldr	r3, [r7, #12]
2400e9c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400e9c2:	b2da      	uxtb	r2, r3
2400e9c4:	2300      	movs	r3, #0
2400e9c6:	9300      	str	r3, [sp, #0]
2400e9c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400e9cc:	68f8      	ldr	r0, [r7, #12]
2400e9ce:	f002 f855 	bl	24010a7c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400e9d2:	e017      	b.n	2400ea04 <I2C_Mem_ISR_IT+0x190>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
2400e9d4:	68fb      	ldr	r3, [r7, #12]
2400e9d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400e9d8:	b29a      	uxth	r2, r3
2400e9da:	68fb      	ldr	r3, [r7, #12]
2400e9dc:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
2400e9de:	68fb      	ldr	r3, [r7, #12]
2400e9e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2400e9e2:	b299      	uxth	r1, r3
2400e9e4:	68fb      	ldr	r3, [r7, #12]
2400e9e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400e9e8:	b2da      	uxtb	r2, r3
2400e9ea:	2300      	movs	r3, #0
2400e9ec:	9300      	str	r3, [sp, #0]
2400e9ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400e9f2:	68f8      	ldr	r0, [r7, #12]
2400e9f4:	f002 f842 	bl	24010a7c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400e9f8:	e004      	b.n	2400ea04 <I2C_Mem_ISR_IT+0x190>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
2400e9fa:	2140      	movs	r1, #64	; 0x40
2400e9fc:	68f8      	ldr	r0, [r7, #12]
2400e9fe:	f001 fa05 	bl	2400fe0c <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
2400ea02:	e03a      	b.n	2400ea7a <I2C_Mem_ISR_IT+0x206>
2400ea04:	e039      	b.n	2400ea7a <I2C_Mem_ISR_IT+0x206>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
2400ea06:	693b      	ldr	r3, [r7, #16]
2400ea08:	f003 0340 	and.w	r3, r3, #64	; 0x40
2400ea0c:	2b00      	cmp	r3, #0
2400ea0e:	d034      	beq.n	2400ea7a <I2C_Mem_ISR_IT+0x206>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
2400ea10:	687b      	ldr	r3, [r7, #4]
2400ea12:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
2400ea16:	2b00      	cmp	r3, #0
2400ea18:	d02f      	beq.n	2400ea7a <I2C_Mem_ISR_IT+0x206>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
2400ea1a:	68fb      	ldr	r3, [r7, #12]
2400ea1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400ea20:	b2db      	uxtb	r3, r3
2400ea22:	2b22      	cmp	r3, #34	; 0x22
2400ea24:	d101      	bne.n	2400ea2a <I2C_Mem_ISR_IT+0x1b6>
    {
      direction = I2C_GENERATE_START_READ;
2400ea26:	4b21      	ldr	r3, [pc, #132]	; (2400eaac <I2C_Mem_ISR_IT+0x238>)
2400ea28:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400ea2a:	68fb      	ldr	r3, [r7, #12]
2400ea2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400ea2e:	b29b      	uxth	r3, r3
2400ea30:	2bff      	cmp	r3, #255	; 0xff
2400ea32:	d910      	bls.n	2400ea56 <I2C_Mem_ISR_IT+0x1e2>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400ea34:	68fb      	ldr	r3, [r7, #12]
2400ea36:	22ff      	movs	r2, #255	; 0xff
2400ea38:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
2400ea3a:	68fb      	ldr	r3, [r7, #12]
2400ea3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2400ea3e:	b299      	uxth	r1, r3
2400ea40:	68fb      	ldr	r3, [r7, #12]
2400ea42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400ea44:	b2da      	uxtb	r2, r3
2400ea46:	697b      	ldr	r3, [r7, #20]
2400ea48:	9300      	str	r3, [sp, #0]
2400ea4a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400ea4e:	68f8      	ldr	r0, [r7, #12]
2400ea50:	f002 f814 	bl	24010a7c <I2C_TransferConfig>
2400ea54:	e011      	b.n	2400ea7a <I2C_Mem_ISR_IT+0x206>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2400ea56:	68fb      	ldr	r3, [r7, #12]
2400ea58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400ea5a:	b29a      	uxth	r2, r3
2400ea5c:	68fb      	ldr	r3, [r7, #12]
2400ea5e:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
2400ea60:	68fb      	ldr	r3, [r7, #12]
2400ea62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2400ea64:	b299      	uxth	r1, r3
2400ea66:	68fb      	ldr	r3, [r7, #12]
2400ea68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400ea6a:	b2da      	uxtb	r2, r3
2400ea6c:	697b      	ldr	r3, [r7, #20]
2400ea6e:	9300      	str	r3, [sp, #0]
2400ea70:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400ea74:	68f8      	ldr	r0, [r7, #12]
2400ea76:	f002 f801 	bl	24010a7c <I2C_TransferConfig>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
2400ea7a:	693b      	ldr	r3, [r7, #16]
2400ea7c:	f003 0320 	and.w	r3, r3, #32
2400ea80:	2b00      	cmp	r3, #0
2400ea82:	d008      	beq.n	2400ea96 <I2C_Mem_ISR_IT+0x222>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
2400ea84:	687b      	ldr	r3, [r7, #4]
2400ea86:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
2400ea8a:	2b00      	cmp	r3, #0
2400ea8c:	d003      	beq.n	2400ea96 <I2C_Mem_ISR_IT+0x222>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
2400ea8e:	6939      	ldr	r1, [r7, #16]
2400ea90:	68f8      	ldr	r0, [r7, #12]
2400ea92:	f000 fea9 	bl	2400f7e8 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
2400ea96:	68fb      	ldr	r3, [r7, #12]
2400ea98:	2200      	movs	r2, #0
2400ea9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
2400ea9e:	2300      	movs	r3, #0
}
2400eaa0:	4618      	mov	r0, r3
2400eaa2:	3718      	adds	r7, #24
2400eaa4:	46bd      	mov	sp, r7
2400eaa6:	bd80      	pop	{r7, pc}
2400eaa8:	80002000 	.word	0x80002000
2400eaac:	80002400 	.word	0x80002400

2400eab0 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
2400eab0:	b580      	push	{r7, lr}
2400eab2:	b086      	sub	sp, #24
2400eab4:	af00      	add	r7, sp, #0
2400eab6:	60f8      	str	r0, [r7, #12]
2400eab8:	60b9      	str	r1, [r7, #8]
2400eaba:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
2400eabc:	68fb      	ldr	r3, [r7, #12]
2400eabe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400eac0:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
2400eac2:	68bb      	ldr	r3, [r7, #8]
2400eac4:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
2400eac6:	68fb      	ldr	r3, [r7, #12]
2400eac8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400eacc:	2b01      	cmp	r3, #1
2400eace:	d101      	bne.n	2400ead4 <I2C_Slave_ISR_IT+0x24>
2400ead0:	2302      	movs	r3, #2
2400ead2:	e0e1      	b.n	2400ec98 <I2C_Slave_ISR_IT+0x1e8>
2400ead4:	68fb      	ldr	r3, [r7, #12]
2400ead6:	2201      	movs	r2, #1
2400ead8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
2400eadc:	693b      	ldr	r3, [r7, #16]
2400eade:	f003 0320 	and.w	r3, r3, #32
2400eae2:	2b00      	cmp	r3, #0
2400eae4:	d008      	beq.n	2400eaf8 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
2400eae6:	687b      	ldr	r3, [r7, #4]
2400eae8:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
2400eaec:	2b00      	cmp	r3, #0
2400eaee:	d003      	beq.n	2400eaf8 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
2400eaf0:	6939      	ldr	r1, [r7, #16]
2400eaf2:	68f8      	ldr	r0, [r7, #12]
2400eaf4:	f000 ff40 	bl	2400f978 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
2400eaf8:	693b      	ldr	r3, [r7, #16]
2400eafa:	f003 0310 	and.w	r3, r3, #16
2400eafe:	2b00      	cmp	r3, #0
2400eb00:	d04b      	beq.n	2400eb9a <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
2400eb02:	687b      	ldr	r3, [r7, #4]
2400eb04:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
2400eb08:	2b00      	cmp	r3, #0
2400eb0a:	d046      	beq.n	2400eb9a <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
2400eb0c:	68fb      	ldr	r3, [r7, #12]
2400eb0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400eb10:	b29b      	uxth	r3, r3
2400eb12:	2b00      	cmp	r3, #0
2400eb14:	d128      	bne.n	2400eb68 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
2400eb16:	68fb      	ldr	r3, [r7, #12]
2400eb18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400eb1c:	b2db      	uxtb	r3, r3
2400eb1e:	2b28      	cmp	r3, #40	; 0x28
2400eb20:	d108      	bne.n	2400eb34 <I2C_Slave_ISR_IT+0x84>
2400eb22:	697b      	ldr	r3, [r7, #20]
2400eb24:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
2400eb28:	d104      	bne.n	2400eb34 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
2400eb2a:	6939      	ldr	r1, [r7, #16]
2400eb2c:	68f8      	ldr	r0, [r7, #12]
2400eb2e:	f001 f919 	bl	2400fd64 <I2C_ITListenCplt>
2400eb32:	e031      	b.n	2400eb98 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
2400eb34:	68fb      	ldr	r3, [r7, #12]
2400eb36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400eb3a:	b2db      	uxtb	r3, r3
2400eb3c:	2b29      	cmp	r3, #41	; 0x29
2400eb3e:	d10e      	bne.n	2400eb5e <I2C_Slave_ISR_IT+0xae>
2400eb40:	697b      	ldr	r3, [r7, #20]
2400eb42:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
2400eb46:	d00a      	beq.n	2400eb5e <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400eb48:	68fb      	ldr	r3, [r7, #12]
2400eb4a:	681b      	ldr	r3, [r3, #0]
2400eb4c:	2210      	movs	r2, #16
2400eb4e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
2400eb50:	68f8      	ldr	r0, [r7, #12]
2400eb52:	f001 fa72 	bl	2401003a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
2400eb56:	68f8      	ldr	r0, [r7, #12]
2400eb58:	f000 fde9 	bl	2400f72e <I2C_ITSlaveSeqCplt>
2400eb5c:	e01c      	b.n	2400eb98 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400eb5e:	68fb      	ldr	r3, [r7, #12]
2400eb60:	681b      	ldr	r3, [r3, #0]
2400eb62:	2210      	movs	r2, #16
2400eb64:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
2400eb66:	e08f      	b.n	2400ec88 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400eb68:	68fb      	ldr	r3, [r7, #12]
2400eb6a:	681b      	ldr	r3, [r3, #0]
2400eb6c:	2210      	movs	r2, #16
2400eb6e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
2400eb70:	68fb      	ldr	r3, [r7, #12]
2400eb72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400eb74:	f043 0204 	orr.w	r2, r3, #4
2400eb78:	68fb      	ldr	r3, [r7, #12]
2400eb7a:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
2400eb7c:	697b      	ldr	r3, [r7, #20]
2400eb7e:	2b00      	cmp	r3, #0
2400eb80:	d003      	beq.n	2400eb8a <I2C_Slave_ISR_IT+0xda>
2400eb82:	697b      	ldr	r3, [r7, #20]
2400eb84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
2400eb88:	d17e      	bne.n	2400ec88 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
2400eb8a:	68fb      	ldr	r3, [r7, #12]
2400eb8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400eb8e:	4619      	mov	r1, r3
2400eb90:	68f8      	ldr	r0, [r7, #12]
2400eb92:	f001 f93b 	bl	2400fe0c <I2C_ITError>
    if (hi2c->XferCount == 0U)
2400eb96:	e077      	b.n	2400ec88 <I2C_Slave_ISR_IT+0x1d8>
2400eb98:	e076      	b.n	2400ec88 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
2400eb9a:	693b      	ldr	r3, [r7, #16]
2400eb9c:	f003 0304 	and.w	r3, r3, #4
2400eba0:	2b00      	cmp	r3, #0
2400eba2:	d02f      	beq.n	2400ec04 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
2400eba4:	687b      	ldr	r3, [r7, #4]
2400eba6:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
2400ebaa:	2b00      	cmp	r3, #0
2400ebac:	d02a      	beq.n	2400ec04 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
2400ebae:	68fb      	ldr	r3, [r7, #12]
2400ebb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400ebb2:	b29b      	uxth	r3, r3
2400ebb4:	2b00      	cmp	r3, #0
2400ebb6:	d018      	beq.n	2400ebea <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
2400ebb8:	68fb      	ldr	r3, [r7, #12]
2400ebba:	681b      	ldr	r3, [r3, #0]
2400ebbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
2400ebbe:	68fb      	ldr	r3, [r7, #12]
2400ebc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400ebc2:	b2d2      	uxtb	r2, r2
2400ebc4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
2400ebc6:	68fb      	ldr	r3, [r7, #12]
2400ebc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400ebca:	1c5a      	adds	r2, r3, #1
2400ebcc:	68fb      	ldr	r3, [r7, #12]
2400ebce:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
2400ebd0:	68fb      	ldr	r3, [r7, #12]
2400ebd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400ebd4:	3b01      	subs	r3, #1
2400ebd6:	b29a      	uxth	r2, r3
2400ebd8:	68fb      	ldr	r3, [r7, #12]
2400ebda:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
2400ebdc:	68fb      	ldr	r3, [r7, #12]
2400ebde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400ebe0:	b29b      	uxth	r3, r3
2400ebe2:	3b01      	subs	r3, #1
2400ebe4:	b29a      	uxth	r2, r3
2400ebe6:	68fb      	ldr	r3, [r7, #12]
2400ebe8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
2400ebea:	68fb      	ldr	r3, [r7, #12]
2400ebec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400ebee:	b29b      	uxth	r3, r3
2400ebf0:	2b00      	cmp	r3, #0
2400ebf2:	d14b      	bne.n	2400ec8c <I2C_Slave_ISR_IT+0x1dc>
2400ebf4:	697b      	ldr	r3, [r7, #20]
2400ebf6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
2400ebfa:	d047      	beq.n	2400ec8c <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
2400ebfc:	68f8      	ldr	r0, [r7, #12]
2400ebfe:	f000 fd96 	bl	2400f72e <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
2400ec02:	e043      	b.n	2400ec8c <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
2400ec04:	693b      	ldr	r3, [r7, #16]
2400ec06:	f003 0308 	and.w	r3, r3, #8
2400ec0a:	2b00      	cmp	r3, #0
2400ec0c:	d009      	beq.n	2400ec22 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
2400ec0e:	687b      	ldr	r3, [r7, #4]
2400ec10:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
2400ec14:	2b00      	cmp	r3, #0
2400ec16:	d004      	beq.n	2400ec22 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
2400ec18:	6939      	ldr	r1, [r7, #16]
2400ec1a:	68f8      	ldr	r0, [r7, #12]
2400ec1c:	f000 fcc6 	bl	2400f5ac <I2C_ITAddrCplt>
2400ec20:	e035      	b.n	2400ec8e <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
2400ec22:	693b      	ldr	r3, [r7, #16]
2400ec24:	f003 0302 	and.w	r3, r3, #2
2400ec28:	2b00      	cmp	r3, #0
2400ec2a:	d030      	beq.n	2400ec8e <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
2400ec2c:	687b      	ldr	r3, [r7, #4]
2400ec2e:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
2400ec32:	2b00      	cmp	r3, #0
2400ec34:	d02b      	beq.n	2400ec8e <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
2400ec36:	68fb      	ldr	r3, [r7, #12]
2400ec38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400ec3a:	b29b      	uxth	r3, r3
2400ec3c:	2b00      	cmp	r3, #0
2400ec3e:	d018      	beq.n	2400ec72 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
2400ec40:	68fb      	ldr	r3, [r7, #12]
2400ec42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400ec44:	781a      	ldrb	r2, [r3, #0]
2400ec46:	68fb      	ldr	r3, [r7, #12]
2400ec48:	681b      	ldr	r3, [r3, #0]
2400ec4a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
2400ec4c:	68fb      	ldr	r3, [r7, #12]
2400ec4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400ec50:	1c5a      	adds	r2, r3, #1
2400ec52:	68fb      	ldr	r3, [r7, #12]
2400ec54:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
2400ec56:	68fb      	ldr	r3, [r7, #12]
2400ec58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400ec5a:	b29b      	uxth	r3, r3
2400ec5c:	3b01      	subs	r3, #1
2400ec5e:	b29a      	uxth	r2, r3
2400ec60:	68fb      	ldr	r3, [r7, #12]
2400ec62:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
2400ec64:	68fb      	ldr	r3, [r7, #12]
2400ec66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400ec68:	3b01      	subs	r3, #1
2400ec6a:	b29a      	uxth	r2, r3
2400ec6c:	68fb      	ldr	r3, [r7, #12]
2400ec6e:	851a      	strh	r2, [r3, #40]	; 0x28
2400ec70:	e00d      	b.n	2400ec8e <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
2400ec72:	697b      	ldr	r3, [r7, #20]
2400ec74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
2400ec78:	d002      	beq.n	2400ec80 <I2C_Slave_ISR_IT+0x1d0>
2400ec7a:	697b      	ldr	r3, [r7, #20]
2400ec7c:	2b00      	cmp	r3, #0
2400ec7e:	d106      	bne.n	2400ec8e <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
2400ec80:	68f8      	ldr	r0, [r7, #12]
2400ec82:	f000 fd54 	bl	2400f72e <I2C_ITSlaveSeqCplt>
2400ec86:	e002      	b.n	2400ec8e <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
2400ec88:	bf00      	nop
2400ec8a:	e000      	b.n	2400ec8e <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
2400ec8c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
2400ec8e:	68fb      	ldr	r3, [r7, #12]
2400ec90:	2200      	movs	r2, #0
2400ec92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
2400ec96:	2300      	movs	r3, #0
}
2400ec98:	4618      	mov	r0, r3
2400ec9a:	3718      	adds	r7, #24
2400ec9c:	46bd      	mov	sp, r7
2400ec9e:	bd80      	pop	{r7, pc}

2400eca0 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
2400eca0:	b580      	push	{r7, lr}
2400eca2:	b088      	sub	sp, #32
2400eca4:	af02      	add	r7, sp, #8
2400eca6:	60f8      	str	r0, [r7, #12]
2400eca8:	60b9      	str	r1, [r7, #8]
2400ecaa:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
2400ecac:	68fb      	ldr	r3, [r7, #12]
2400ecae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400ecb2:	2b01      	cmp	r3, #1
2400ecb4:	d101      	bne.n	2400ecba <I2C_Master_ISR_DMA+0x1a>
2400ecb6:	2302      	movs	r3, #2
2400ecb8:	e0d9      	b.n	2400ee6e <I2C_Master_ISR_DMA+0x1ce>
2400ecba:	68fb      	ldr	r3, [r7, #12]
2400ecbc:	2201      	movs	r2, #1
2400ecbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
2400ecc2:	68bb      	ldr	r3, [r7, #8]
2400ecc4:	f003 0310 	and.w	r3, r3, #16
2400ecc8:	2b00      	cmp	r3, #0
2400ecca:	d016      	beq.n	2400ecfa <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
2400eccc:	687b      	ldr	r3, [r7, #4]
2400ecce:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
2400ecd2:	2b00      	cmp	r3, #0
2400ecd4:	d011      	beq.n	2400ecfa <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400ecd6:	68fb      	ldr	r3, [r7, #12]
2400ecd8:	681b      	ldr	r3, [r3, #0]
2400ecda:	2210      	movs	r2, #16
2400ecdc:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
2400ecde:	68fb      	ldr	r3, [r7, #12]
2400ece0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400ece2:	f043 0204 	orr.w	r2, r3, #4
2400ece6:	68fb      	ldr	r3, [r7, #12]
2400ece8:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
2400ecea:	2120      	movs	r1, #32
2400ecec:	68f8      	ldr	r0, [r7, #12]
2400ecee:	f001 fef7 	bl	24010ae0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
2400ecf2:	68f8      	ldr	r0, [r7, #12]
2400ecf4:	f001 f9a1 	bl	2401003a <I2C_Flush_TXDR>
2400ecf8:	e0b4      	b.n	2400ee64 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
2400ecfa:	68bb      	ldr	r3, [r7, #8]
2400ecfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
2400ed00:	2b00      	cmp	r3, #0
2400ed02:	d071      	beq.n	2400ede8 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
2400ed04:	687b      	ldr	r3, [r7, #4]
2400ed06:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
2400ed0a:	2b00      	cmp	r3, #0
2400ed0c:	d06c      	beq.n	2400ede8 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
2400ed0e:	68fb      	ldr	r3, [r7, #12]
2400ed10:	681b      	ldr	r3, [r3, #0]
2400ed12:	681a      	ldr	r2, [r3, #0]
2400ed14:	68fb      	ldr	r3, [r7, #12]
2400ed16:	681b      	ldr	r3, [r3, #0]
2400ed18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
2400ed1c:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
2400ed1e:	68fb      	ldr	r3, [r7, #12]
2400ed20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400ed22:	b29b      	uxth	r3, r3
2400ed24:	2b00      	cmp	r3, #0
2400ed26:	d04e      	beq.n	2400edc6 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
2400ed28:	68fb      	ldr	r3, [r7, #12]
2400ed2a:	681b      	ldr	r3, [r3, #0]
2400ed2c:	685b      	ldr	r3, [r3, #4]
2400ed2e:	b29b      	uxth	r3, r3
2400ed30:	f3c3 0309 	ubfx	r3, r3, #0, #10
2400ed34:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400ed36:	68fb      	ldr	r3, [r7, #12]
2400ed38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400ed3a:	b29b      	uxth	r3, r3
2400ed3c:	2bff      	cmp	r3, #255	; 0xff
2400ed3e:	d906      	bls.n	2400ed4e <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
2400ed40:	68fb      	ldr	r3, [r7, #12]
2400ed42:	22ff      	movs	r2, #255	; 0xff
2400ed44:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
2400ed46:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400ed4a:	617b      	str	r3, [r7, #20]
2400ed4c:	e010      	b.n	2400ed70 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
2400ed4e:	68fb      	ldr	r3, [r7, #12]
2400ed50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400ed52:	b29a      	uxth	r2, r3
2400ed54:	68fb      	ldr	r3, [r7, #12]
2400ed56:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
2400ed58:	68fb      	ldr	r3, [r7, #12]
2400ed5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400ed5c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
2400ed60:	d003      	beq.n	2400ed6a <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
2400ed62:	68fb      	ldr	r3, [r7, #12]
2400ed64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400ed66:	617b      	str	r3, [r7, #20]
2400ed68:	e002      	b.n	2400ed70 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
2400ed6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400ed6e:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
2400ed70:	68fb      	ldr	r3, [r7, #12]
2400ed72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400ed74:	b2da      	uxtb	r2, r3
2400ed76:	8a79      	ldrh	r1, [r7, #18]
2400ed78:	2300      	movs	r3, #0
2400ed7a:	9300      	str	r3, [sp, #0]
2400ed7c:	697b      	ldr	r3, [r7, #20]
2400ed7e:	68f8      	ldr	r0, [r7, #12]
2400ed80:	f001 fe7c 	bl	24010a7c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
2400ed84:	68fb      	ldr	r3, [r7, #12]
2400ed86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400ed88:	b29a      	uxth	r2, r3
2400ed8a:	68fb      	ldr	r3, [r7, #12]
2400ed8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400ed8e:	1ad3      	subs	r3, r2, r3
2400ed90:	b29a      	uxth	r2, r3
2400ed92:	68fb      	ldr	r3, [r7, #12]
2400ed94:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
2400ed96:	68fb      	ldr	r3, [r7, #12]
2400ed98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400ed9c:	b2db      	uxtb	r3, r3
2400ed9e:	2b22      	cmp	r3, #34	; 0x22
2400eda0:	d108      	bne.n	2400edb4 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
2400eda2:	68fb      	ldr	r3, [r7, #12]
2400eda4:	681b      	ldr	r3, [r3, #0]
2400eda6:	681a      	ldr	r2, [r3, #0]
2400eda8:	68fb      	ldr	r3, [r7, #12]
2400edaa:	681b      	ldr	r3, [r3, #0]
2400edac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2400edb0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
2400edb2:	e057      	b.n	2400ee64 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
2400edb4:	68fb      	ldr	r3, [r7, #12]
2400edb6:	681b      	ldr	r3, [r3, #0]
2400edb8:	681a      	ldr	r2, [r3, #0]
2400edba:	68fb      	ldr	r3, [r7, #12]
2400edbc:	681b      	ldr	r3, [r3, #0]
2400edbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
2400edc2:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
2400edc4:	e04e      	b.n	2400ee64 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
2400edc6:	68fb      	ldr	r3, [r7, #12]
2400edc8:	681b      	ldr	r3, [r3, #0]
2400edca:	685b      	ldr	r3, [r3, #4]
2400edcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2400edd0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
2400edd4:	d003      	beq.n	2400edde <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
2400edd6:	68f8      	ldr	r0, [r7, #12]
2400edd8:	f000 fc6c 	bl	2400f6b4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
2400eddc:	e042      	b.n	2400ee64 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
2400edde:	2140      	movs	r1, #64	; 0x40
2400ede0:	68f8      	ldr	r0, [r7, #12]
2400ede2:	f001 f813 	bl	2400fe0c <I2C_ITError>
    if (hi2c->XferCount != 0U)
2400ede6:	e03d      	b.n	2400ee64 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
2400ede8:	68bb      	ldr	r3, [r7, #8]
2400edea:	f003 0340 	and.w	r3, r3, #64	; 0x40
2400edee:	2b00      	cmp	r3, #0
2400edf0:	d028      	beq.n	2400ee44 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
2400edf2:	687b      	ldr	r3, [r7, #4]
2400edf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
2400edf8:	2b00      	cmp	r3, #0
2400edfa:	d023      	beq.n	2400ee44 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
2400edfc:	68fb      	ldr	r3, [r7, #12]
2400edfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400ee00:	b29b      	uxth	r3, r3
2400ee02:	2b00      	cmp	r3, #0
2400ee04:	d119      	bne.n	2400ee3a <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
2400ee06:	68fb      	ldr	r3, [r7, #12]
2400ee08:	681b      	ldr	r3, [r3, #0]
2400ee0a:	685b      	ldr	r3, [r3, #4]
2400ee0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2400ee10:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
2400ee14:	d025      	beq.n	2400ee62 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
2400ee16:	68fb      	ldr	r3, [r7, #12]
2400ee18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400ee1a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
2400ee1e:	d108      	bne.n	2400ee32 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
2400ee20:	68fb      	ldr	r3, [r7, #12]
2400ee22:	681b      	ldr	r3, [r3, #0]
2400ee24:	685a      	ldr	r2, [r3, #4]
2400ee26:	68fb      	ldr	r3, [r7, #12]
2400ee28:	681b      	ldr	r3, [r3, #0]
2400ee2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
2400ee2e:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
2400ee30:	e017      	b.n	2400ee62 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
2400ee32:	68f8      	ldr	r0, [r7, #12]
2400ee34:	f000 fc3e 	bl	2400f6b4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
2400ee38:	e013      	b.n	2400ee62 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
2400ee3a:	2140      	movs	r1, #64	; 0x40
2400ee3c:	68f8      	ldr	r0, [r7, #12]
2400ee3e:	f000 ffe5 	bl	2400fe0c <I2C_ITError>
    if (hi2c->XferCount == 0U)
2400ee42:	e00e      	b.n	2400ee62 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
2400ee44:	68bb      	ldr	r3, [r7, #8]
2400ee46:	f003 0320 	and.w	r3, r3, #32
2400ee4a:	2b00      	cmp	r3, #0
2400ee4c:	d00a      	beq.n	2400ee64 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
2400ee4e:	687b      	ldr	r3, [r7, #4]
2400ee50:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
2400ee54:	2b00      	cmp	r3, #0
2400ee56:	d005      	beq.n	2400ee64 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
2400ee58:	68b9      	ldr	r1, [r7, #8]
2400ee5a:	68f8      	ldr	r0, [r7, #12]
2400ee5c:	f000 fcc4 	bl	2400f7e8 <I2C_ITMasterCplt>
2400ee60:	e000      	b.n	2400ee64 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
2400ee62:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
2400ee64:	68fb      	ldr	r3, [r7, #12]
2400ee66:	2200      	movs	r2, #0
2400ee68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
2400ee6c:	2300      	movs	r3, #0
}
2400ee6e:	4618      	mov	r0, r3
2400ee70:	3718      	adds	r7, #24
2400ee72:	46bd      	mov	sp, r7
2400ee74:	bd80      	pop	{r7, pc}
	...

2400ee78 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
2400ee78:	b580      	push	{r7, lr}
2400ee7a:	b088      	sub	sp, #32
2400ee7c:	af02      	add	r7, sp, #8
2400ee7e:	60f8      	str	r0, [r7, #12]
2400ee80:	60b9      	str	r1, [r7, #8]
2400ee82:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
2400ee84:	4b87      	ldr	r3, [pc, #540]	; (2400f0a4 <I2C_Mem_ISR_DMA+0x22c>)
2400ee86:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
2400ee88:	68fb      	ldr	r3, [r7, #12]
2400ee8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400ee8e:	2b01      	cmp	r3, #1
2400ee90:	d101      	bne.n	2400ee96 <I2C_Mem_ISR_DMA+0x1e>
2400ee92:	2302      	movs	r3, #2
2400ee94:	e102      	b.n	2400f09c <I2C_Mem_ISR_DMA+0x224>
2400ee96:	68fb      	ldr	r3, [r7, #12]
2400ee98:	2201      	movs	r2, #1
2400ee9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
2400ee9e:	68bb      	ldr	r3, [r7, #8]
2400eea0:	f003 0310 	and.w	r3, r3, #16
2400eea4:	2b00      	cmp	r3, #0
2400eea6:	d016      	beq.n	2400eed6 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
2400eea8:	687b      	ldr	r3, [r7, #4]
2400eeaa:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
2400eeae:	2b00      	cmp	r3, #0
2400eeb0:	d011      	beq.n	2400eed6 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400eeb2:	68fb      	ldr	r3, [r7, #12]
2400eeb4:	681b      	ldr	r3, [r3, #0]
2400eeb6:	2210      	movs	r2, #16
2400eeb8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
2400eeba:	68fb      	ldr	r3, [r7, #12]
2400eebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400eebe:	f043 0204 	orr.w	r2, r3, #4
2400eec2:	68fb      	ldr	r3, [r7, #12]
2400eec4:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
2400eec6:	2120      	movs	r1, #32
2400eec8:	68f8      	ldr	r0, [r7, #12]
2400eeca:	f001 fe09 	bl	24010ae0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
2400eece:	68f8      	ldr	r0, [r7, #12]
2400eed0:	f001 f8b3 	bl	2401003a <I2C_Flush_TXDR>
2400eed4:	e0dd      	b.n	2400f092 <I2C_Mem_ISR_DMA+0x21a>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
2400eed6:	68bb      	ldr	r3, [r7, #8]
2400eed8:	f003 0302 	and.w	r3, r3, #2
2400eedc:	2b00      	cmp	r3, #0
2400eede:	d00e      	beq.n	2400eefe <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
2400eee0:	687b      	ldr	r3, [r7, #4]
2400eee2:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
2400eee6:	2b00      	cmp	r3, #0
2400eee8:	d009      	beq.n	2400eefe <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
2400eeea:	68fb      	ldr	r3, [r7, #12]
2400eeec:	681b      	ldr	r3, [r3, #0]
2400eeee:	68fa      	ldr	r2, [r7, #12]
2400eef0:	6d12      	ldr	r2, [r2, #80]	; 0x50
2400eef2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
2400eef4:	68fb      	ldr	r3, [r7, #12]
2400eef6:	f04f 32ff 	mov.w	r2, #4294967295
2400eefa:	651a      	str	r2, [r3, #80]	; 0x50
2400eefc:	e0c9      	b.n	2400f092 <I2C_Mem_ISR_DMA+0x21a>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
2400eefe:	68bb      	ldr	r3, [r7, #8]
2400ef00:	f003 0380 	and.w	r3, r3, #128	; 0x80
2400ef04:	2b00      	cmp	r3, #0
2400ef06:	d05b      	beq.n	2400efc0 <I2C_Mem_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
2400ef08:	687b      	ldr	r3, [r7, #4]
2400ef0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
2400ef0e:	2b00      	cmp	r3, #0
2400ef10:	d056      	beq.n	2400efc0 <I2C_Mem_ISR_DMA+0x148>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
2400ef12:	2110      	movs	r1, #16
2400ef14:	68f8      	ldr	r0, [r7, #12]
2400ef16:	f001 fde3 	bl	24010ae0 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
2400ef1a:	68fb      	ldr	r3, [r7, #12]
2400ef1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400ef1e:	b29b      	uxth	r3, r3
2400ef20:	2b00      	cmp	r3, #0
2400ef22:	d048      	beq.n	2400efb6 <I2C_Mem_ISR_DMA+0x13e>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400ef24:	68fb      	ldr	r3, [r7, #12]
2400ef26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400ef28:	b29b      	uxth	r3, r3
2400ef2a:	2bff      	cmp	r3, #255	; 0xff
2400ef2c:	d910      	bls.n	2400ef50 <I2C_Mem_ISR_DMA+0xd8>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
2400ef2e:	68fb      	ldr	r3, [r7, #12]
2400ef30:	22ff      	movs	r2, #255	; 0xff
2400ef32:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
2400ef34:	68fb      	ldr	r3, [r7, #12]
2400ef36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2400ef38:	b299      	uxth	r1, r3
2400ef3a:	68fb      	ldr	r3, [r7, #12]
2400ef3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400ef3e:	b2da      	uxtb	r2, r3
2400ef40:	2300      	movs	r3, #0
2400ef42:	9300      	str	r3, [sp, #0]
2400ef44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400ef48:	68f8      	ldr	r0, [r7, #12]
2400ef4a:	f001 fd97 	bl	24010a7c <I2C_TransferConfig>
2400ef4e:	e011      	b.n	2400ef74 <I2C_Mem_ISR_DMA+0xfc>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
2400ef50:	68fb      	ldr	r3, [r7, #12]
2400ef52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400ef54:	b29a      	uxth	r2, r3
2400ef56:	68fb      	ldr	r3, [r7, #12]
2400ef58:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
2400ef5a:	68fb      	ldr	r3, [r7, #12]
2400ef5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2400ef5e:	b299      	uxth	r1, r3
2400ef60:	68fb      	ldr	r3, [r7, #12]
2400ef62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400ef64:	b2da      	uxtb	r2, r3
2400ef66:	2300      	movs	r3, #0
2400ef68:	9300      	str	r3, [sp, #0]
2400ef6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400ef6e:	68f8      	ldr	r0, [r7, #12]
2400ef70:	f001 fd84 	bl	24010a7c <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
2400ef74:	68fb      	ldr	r3, [r7, #12]
2400ef76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400ef78:	b29a      	uxth	r2, r3
2400ef7a:	68fb      	ldr	r3, [r7, #12]
2400ef7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400ef7e:	1ad3      	subs	r3, r2, r3
2400ef80:	b29a      	uxth	r2, r3
2400ef82:	68fb      	ldr	r3, [r7, #12]
2400ef84:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
2400ef86:	68fb      	ldr	r3, [r7, #12]
2400ef88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400ef8c:	b2db      	uxtb	r3, r3
2400ef8e:	2b22      	cmp	r3, #34	; 0x22
2400ef90:	d108      	bne.n	2400efa4 <I2C_Mem_ISR_DMA+0x12c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
2400ef92:	68fb      	ldr	r3, [r7, #12]
2400ef94:	681b      	ldr	r3, [r3, #0]
2400ef96:	681a      	ldr	r2, [r3, #0]
2400ef98:	68fb      	ldr	r3, [r7, #12]
2400ef9a:	681b      	ldr	r3, [r3, #0]
2400ef9c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2400efa0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
2400efa2:	e076      	b.n	2400f092 <I2C_Mem_ISR_DMA+0x21a>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
2400efa4:	68fb      	ldr	r3, [r7, #12]
2400efa6:	681b      	ldr	r3, [r3, #0]
2400efa8:	681a      	ldr	r2, [r3, #0]
2400efaa:	68fb      	ldr	r3, [r7, #12]
2400efac:	681b      	ldr	r3, [r3, #0]
2400efae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
2400efb2:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
2400efb4:	e06d      	b.n	2400f092 <I2C_Mem_ISR_DMA+0x21a>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
2400efb6:	2140      	movs	r1, #64	; 0x40
2400efb8:	68f8      	ldr	r0, [r7, #12]
2400efba:	f000 ff27 	bl	2400fe0c <I2C_ITError>
    if (hi2c->XferCount != 0U)
2400efbe:	e068      	b.n	2400f092 <I2C_Mem_ISR_DMA+0x21a>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
2400efc0:	68bb      	ldr	r3, [r7, #8]
2400efc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
2400efc6:	2b00      	cmp	r3, #0
2400efc8:	d055      	beq.n	2400f076 <I2C_Mem_ISR_DMA+0x1fe>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
2400efca:	687b      	ldr	r3, [r7, #4]
2400efcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
2400efd0:	2b00      	cmp	r3, #0
2400efd2:	d050      	beq.n	2400f076 <I2C_Mem_ISR_DMA+0x1fe>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
2400efd4:	68fb      	ldr	r3, [r7, #12]
2400efd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400efda:	b2db      	uxtb	r3, r3
2400efdc:	2b22      	cmp	r3, #34	; 0x22
2400efde:	d101      	bne.n	2400efe4 <I2C_Mem_ISR_DMA+0x16c>
    {
      direction = I2C_GENERATE_START_READ;
2400efe0:	4b31      	ldr	r3, [pc, #196]	; (2400f0a8 <I2C_Mem_ISR_DMA+0x230>)
2400efe2:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400efe4:	68fb      	ldr	r3, [r7, #12]
2400efe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400efe8:	b29b      	uxth	r3, r3
2400efea:	2bff      	cmp	r3, #255	; 0xff
2400efec:	d910      	bls.n	2400f010 <I2C_Mem_ISR_DMA+0x198>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400efee:	68fb      	ldr	r3, [r7, #12]
2400eff0:	22ff      	movs	r2, #255	; 0xff
2400eff2:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
2400eff4:	68fb      	ldr	r3, [r7, #12]
2400eff6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2400eff8:	b299      	uxth	r1, r3
2400effa:	68fb      	ldr	r3, [r7, #12]
2400effc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400effe:	b2da      	uxtb	r2, r3
2400f000:	697b      	ldr	r3, [r7, #20]
2400f002:	9300      	str	r3, [sp, #0]
2400f004:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400f008:	68f8      	ldr	r0, [r7, #12]
2400f00a:	f001 fd37 	bl	24010a7c <I2C_TransferConfig>
2400f00e:	e011      	b.n	2400f034 <I2C_Mem_ISR_DMA+0x1bc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2400f010:	68fb      	ldr	r3, [r7, #12]
2400f012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400f014:	b29a      	uxth	r2, r3
2400f016:	68fb      	ldr	r3, [r7, #12]
2400f018:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
2400f01a:	68fb      	ldr	r3, [r7, #12]
2400f01c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2400f01e:	b299      	uxth	r1, r3
2400f020:	68fb      	ldr	r3, [r7, #12]
2400f022:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400f024:	b2da      	uxtb	r2, r3
2400f026:	697b      	ldr	r3, [r7, #20]
2400f028:	9300      	str	r3, [sp, #0]
2400f02a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400f02e:	68f8      	ldr	r0, [r7, #12]
2400f030:	f001 fd24 	bl	24010a7c <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
2400f034:	68fb      	ldr	r3, [r7, #12]
2400f036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400f038:	b29a      	uxth	r2, r3
2400f03a:	68fb      	ldr	r3, [r7, #12]
2400f03c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400f03e:	1ad3      	subs	r3, r2, r3
2400f040:	b29a      	uxth	r2, r3
2400f042:	68fb      	ldr	r3, [r7, #12]
2400f044:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
2400f046:	68fb      	ldr	r3, [r7, #12]
2400f048:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400f04c:	b2db      	uxtb	r3, r3
2400f04e:	2b22      	cmp	r3, #34	; 0x22
2400f050:	d108      	bne.n	2400f064 <I2C_Mem_ISR_DMA+0x1ec>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
2400f052:	68fb      	ldr	r3, [r7, #12]
2400f054:	681b      	ldr	r3, [r3, #0]
2400f056:	681a      	ldr	r2, [r3, #0]
2400f058:	68fb      	ldr	r3, [r7, #12]
2400f05a:	681b      	ldr	r3, [r3, #0]
2400f05c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2400f060:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
2400f062:	e016      	b.n	2400f092 <I2C_Mem_ISR_DMA+0x21a>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
2400f064:	68fb      	ldr	r3, [r7, #12]
2400f066:	681b      	ldr	r3, [r3, #0]
2400f068:	681a      	ldr	r2, [r3, #0]
2400f06a:	68fb      	ldr	r3, [r7, #12]
2400f06c:	681b      	ldr	r3, [r3, #0]
2400f06e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
2400f072:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
2400f074:	e00d      	b.n	2400f092 <I2C_Mem_ISR_DMA+0x21a>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
2400f076:	68bb      	ldr	r3, [r7, #8]
2400f078:	f003 0320 	and.w	r3, r3, #32
2400f07c:	2b00      	cmp	r3, #0
2400f07e:	d008      	beq.n	2400f092 <I2C_Mem_ISR_DMA+0x21a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
2400f080:	687b      	ldr	r3, [r7, #4]
2400f082:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
2400f086:	2b00      	cmp	r3, #0
2400f088:	d003      	beq.n	2400f092 <I2C_Mem_ISR_DMA+0x21a>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
2400f08a:	68b9      	ldr	r1, [r7, #8]
2400f08c:	68f8      	ldr	r0, [r7, #12]
2400f08e:	f000 fbab 	bl	2400f7e8 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
2400f092:	68fb      	ldr	r3, [r7, #12]
2400f094:	2200      	movs	r2, #0
2400f096:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
2400f09a:	2300      	movs	r3, #0
}
2400f09c:	4618      	mov	r0, r3
2400f09e:	3718      	adds	r7, #24
2400f0a0:	46bd      	mov	sp, r7
2400f0a2:	bd80      	pop	{r7, pc}
2400f0a4:	80002000 	.word	0x80002000
2400f0a8:	80002400 	.word	0x80002400

2400f0ac <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
2400f0ac:	b580      	push	{r7, lr}
2400f0ae:	b088      	sub	sp, #32
2400f0b0:	af00      	add	r7, sp, #0
2400f0b2:	60f8      	str	r0, [r7, #12]
2400f0b4:	60b9      	str	r1, [r7, #8]
2400f0b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
2400f0b8:	68fb      	ldr	r3, [r7, #12]
2400f0ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400f0bc:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
2400f0be:	2300      	movs	r3, #0
2400f0c0:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
2400f0c2:	68fb      	ldr	r3, [r7, #12]
2400f0c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400f0c8:	2b01      	cmp	r3, #1
2400f0ca:	d101      	bne.n	2400f0d0 <I2C_Slave_ISR_DMA+0x24>
2400f0cc:	2302      	movs	r3, #2
2400f0ce:	e1c0      	b.n	2400f452 <I2C_Slave_ISR_DMA+0x3a6>
2400f0d0:	68fb      	ldr	r3, [r7, #12]
2400f0d2:	2201      	movs	r2, #1
2400f0d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
2400f0d8:	68bb      	ldr	r3, [r7, #8]
2400f0da:	f003 0320 	and.w	r3, r3, #32
2400f0de:	2b00      	cmp	r3, #0
2400f0e0:	d008      	beq.n	2400f0f4 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
2400f0e2:	687b      	ldr	r3, [r7, #4]
2400f0e4:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
2400f0e8:	2b00      	cmp	r3, #0
2400f0ea:	d003      	beq.n	2400f0f4 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
2400f0ec:	68b9      	ldr	r1, [r7, #8]
2400f0ee:	68f8      	ldr	r0, [r7, #12]
2400f0f0:	f000 fc42 	bl	2400f978 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
2400f0f4:	68bb      	ldr	r3, [r7, #8]
2400f0f6:	f003 0310 	and.w	r3, r3, #16
2400f0fa:	2b00      	cmp	r3, #0
2400f0fc:	f000 8196 	beq.w	2400f42c <I2C_Slave_ISR_DMA+0x380>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
2400f100:	687b      	ldr	r3, [r7, #4]
2400f102:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
2400f106:	2b00      	cmp	r3, #0
2400f108:	f000 8190 	beq.w	2400f42c <I2C_Slave_ISR_DMA+0x380>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
2400f10c:	687b      	ldr	r3, [r7, #4]
2400f10e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
2400f112:	2b00      	cmp	r3, #0
2400f114:	d105      	bne.n	2400f122 <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
2400f116:	687b      	ldr	r3, [r7, #4]
2400f118:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
2400f11c:	2b00      	cmp	r3, #0
2400f11e:	f000 817e 	beq.w	2400f41e <I2C_Slave_ISR_DMA+0x372>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
2400f122:	68fb      	ldr	r3, [r7, #12]
2400f124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400f126:	2b00      	cmp	r3, #0
2400f128:	d07b      	beq.n	2400f222 <I2C_Slave_ISR_DMA+0x176>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
2400f12a:	687b      	ldr	r3, [r7, #4]
2400f12c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
2400f130:	2b00      	cmp	r3, #0
2400f132:	d076      	beq.n	2400f222 <I2C_Slave_ISR_DMA+0x176>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
2400f134:	68fb      	ldr	r3, [r7, #12]
2400f136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400f138:	681b      	ldr	r3, [r3, #0]
2400f13a:	4a74      	ldr	r2, [pc, #464]	; (2400f30c <I2C_Slave_ISR_DMA+0x260>)
2400f13c:	4293      	cmp	r3, r2
2400f13e:	d059      	beq.n	2400f1f4 <I2C_Slave_ISR_DMA+0x148>
2400f140:	68fb      	ldr	r3, [r7, #12]
2400f142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400f144:	681b      	ldr	r3, [r3, #0]
2400f146:	4a72      	ldr	r2, [pc, #456]	; (2400f310 <I2C_Slave_ISR_DMA+0x264>)
2400f148:	4293      	cmp	r3, r2
2400f14a:	d053      	beq.n	2400f1f4 <I2C_Slave_ISR_DMA+0x148>
2400f14c:	68fb      	ldr	r3, [r7, #12]
2400f14e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400f150:	681b      	ldr	r3, [r3, #0]
2400f152:	4a70      	ldr	r2, [pc, #448]	; (2400f314 <I2C_Slave_ISR_DMA+0x268>)
2400f154:	4293      	cmp	r3, r2
2400f156:	d04d      	beq.n	2400f1f4 <I2C_Slave_ISR_DMA+0x148>
2400f158:	68fb      	ldr	r3, [r7, #12]
2400f15a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400f15c:	681b      	ldr	r3, [r3, #0]
2400f15e:	4a6e      	ldr	r2, [pc, #440]	; (2400f318 <I2C_Slave_ISR_DMA+0x26c>)
2400f160:	4293      	cmp	r3, r2
2400f162:	d047      	beq.n	2400f1f4 <I2C_Slave_ISR_DMA+0x148>
2400f164:	68fb      	ldr	r3, [r7, #12]
2400f166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400f168:	681b      	ldr	r3, [r3, #0]
2400f16a:	4a6c      	ldr	r2, [pc, #432]	; (2400f31c <I2C_Slave_ISR_DMA+0x270>)
2400f16c:	4293      	cmp	r3, r2
2400f16e:	d041      	beq.n	2400f1f4 <I2C_Slave_ISR_DMA+0x148>
2400f170:	68fb      	ldr	r3, [r7, #12]
2400f172:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400f174:	681b      	ldr	r3, [r3, #0]
2400f176:	4a6a      	ldr	r2, [pc, #424]	; (2400f320 <I2C_Slave_ISR_DMA+0x274>)
2400f178:	4293      	cmp	r3, r2
2400f17a:	d03b      	beq.n	2400f1f4 <I2C_Slave_ISR_DMA+0x148>
2400f17c:	68fb      	ldr	r3, [r7, #12]
2400f17e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400f180:	681b      	ldr	r3, [r3, #0]
2400f182:	4a68      	ldr	r2, [pc, #416]	; (2400f324 <I2C_Slave_ISR_DMA+0x278>)
2400f184:	4293      	cmp	r3, r2
2400f186:	d035      	beq.n	2400f1f4 <I2C_Slave_ISR_DMA+0x148>
2400f188:	68fb      	ldr	r3, [r7, #12]
2400f18a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400f18c:	681b      	ldr	r3, [r3, #0]
2400f18e:	4a66      	ldr	r2, [pc, #408]	; (2400f328 <I2C_Slave_ISR_DMA+0x27c>)
2400f190:	4293      	cmp	r3, r2
2400f192:	d02f      	beq.n	2400f1f4 <I2C_Slave_ISR_DMA+0x148>
2400f194:	68fb      	ldr	r3, [r7, #12]
2400f196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400f198:	681b      	ldr	r3, [r3, #0]
2400f19a:	4a64      	ldr	r2, [pc, #400]	; (2400f32c <I2C_Slave_ISR_DMA+0x280>)
2400f19c:	4293      	cmp	r3, r2
2400f19e:	d029      	beq.n	2400f1f4 <I2C_Slave_ISR_DMA+0x148>
2400f1a0:	68fb      	ldr	r3, [r7, #12]
2400f1a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400f1a4:	681b      	ldr	r3, [r3, #0]
2400f1a6:	4a62      	ldr	r2, [pc, #392]	; (2400f330 <I2C_Slave_ISR_DMA+0x284>)
2400f1a8:	4293      	cmp	r3, r2
2400f1aa:	d023      	beq.n	2400f1f4 <I2C_Slave_ISR_DMA+0x148>
2400f1ac:	68fb      	ldr	r3, [r7, #12]
2400f1ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400f1b0:	681b      	ldr	r3, [r3, #0]
2400f1b2:	4a60      	ldr	r2, [pc, #384]	; (2400f334 <I2C_Slave_ISR_DMA+0x288>)
2400f1b4:	4293      	cmp	r3, r2
2400f1b6:	d01d      	beq.n	2400f1f4 <I2C_Slave_ISR_DMA+0x148>
2400f1b8:	68fb      	ldr	r3, [r7, #12]
2400f1ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400f1bc:	681b      	ldr	r3, [r3, #0]
2400f1be:	4a5e      	ldr	r2, [pc, #376]	; (2400f338 <I2C_Slave_ISR_DMA+0x28c>)
2400f1c0:	4293      	cmp	r3, r2
2400f1c2:	d017      	beq.n	2400f1f4 <I2C_Slave_ISR_DMA+0x148>
2400f1c4:	68fb      	ldr	r3, [r7, #12]
2400f1c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400f1c8:	681b      	ldr	r3, [r3, #0]
2400f1ca:	4a5c      	ldr	r2, [pc, #368]	; (2400f33c <I2C_Slave_ISR_DMA+0x290>)
2400f1cc:	4293      	cmp	r3, r2
2400f1ce:	d011      	beq.n	2400f1f4 <I2C_Slave_ISR_DMA+0x148>
2400f1d0:	68fb      	ldr	r3, [r7, #12]
2400f1d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400f1d4:	681b      	ldr	r3, [r3, #0]
2400f1d6:	4a5a      	ldr	r2, [pc, #360]	; (2400f340 <I2C_Slave_ISR_DMA+0x294>)
2400f1d8:	4293      	cmp	r3, r2
2400f1da:	d00b      	beq.n	2400f1f4 <I2C_Slave_ISR_DMA+0x148>
2400f1dc:	68fb      	ldr	r3, [r7, #12]
2400f1de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400f1e0:	681b      	ldr	r3, [r3, #0]
2400f1e2:	4a58      	ldr	r2, [pc, #352]	; (2400f344 <I2C_Slave_ISR_DMA+0x298>)
2400f1e4:	4293      	cmp	r3, r2
2400f1e6:	d005      	beq.n	2400f1f4 <I2C_Slave_ISR_DMA+0x148>
2400f1e8:	68fb      	ldr	r3, [r7, #12]
2400f1ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400f1ec:	681b      	ldr	r3, [r3, #0]
2400f1ee:	4a56      	ldr	r2, [pc, #344]	; (2400f348 <I2C_Slave_ISR_DMA+0x29c>)
2400f1f0:	4293      	cmp	r3, r2
2400f1f2:	d109      	bne.n	2400f208 <I2C_Slave_ISR_DMA+0x15c>
2400f1f4:	68fb      	ldr	r3, [r7, #12]
2400f1f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400f1f8:	681b      	ldr	r3, [r3, #0]
2400f1fa:	685b      	ldr	r3, [r3, #4]
2400f1fc:	2b00      	cmp	r3, #0
2400f1fe:	bf0c      	ite	eq
2400f200:	2301      	moveq	r3, #1
2400f202:	2300      	movne	r3, #0
2400f204:	b2db      	uxtb	r3, r3
2400f206:	e008      	b.n	2400f21a <I2C_Slave_ISR_DMA+0x16e>
2400f208:	68fb      	ldr	r3, [r7, #12]
2400f20a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400f20c:	681b      	ldr	r3, [r3, #0]
2400f20e:	685b      	ldr	r3, [r3, #4]
2400f210:	2b00      	cmp	r3, #0
2400f212:	bf0c      	ite	eq
2400f214:	2301      	moveq	r3, #1
2400f216:	2300      	movne	r3, #0
2400f218:	b2db      	uxtb	r3, r3
2400f21a:	2b00      	cmp	r3, #0
2400f21c:	d001      	beq.n	2400f222 <I2C_Slave_ISR_DMA+0x176>
          {
            treatdmanack = 1U;
2400f21e:	2301      	movs	r3, #1
2400f220:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
2400f222:	68fb      	ldr	r3, [r7, #12]
2400f224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400f226:	2b00      	cmp	r3, #0
2400f228:	f000 809d 	beq.w	2400f366 <I2C_Slave_ISR_DMA+0x2ba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
2400f22c:	687b      	ldr	r3, [r7, #4]
2400f22e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
2400f232:	2b00      	cmp	r3, #0
2400f234:	f000 8097 	beq.w	2400f366 <I2C_Slave_ISR_DMA+0x2ba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
2400f238:	68fb      	ldr	r3, [r7, #12]
2400f23a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400f23c:	681b      	ldr	r3, [r3, #0]
2400f23e:	4a33      	ldr	r2, [pc, #204]	; (2400f30c <I2C_Slave_ISR_DMA+0x260>)
2400f240:	4293      	cmp	r3, r2
2400f242:	d059      	beq.n	2400f2f8 <I2C_Slave_ISR_DMA+0x24c>
2400f244:	68fb      	ldr	r3, [r7, #12]
2400f246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400f248:	681b      	ldr	r3, [r3, #0]
2400f24a:	4a31      	ldr	r2, [pc, #196]	; (2400f310 <I2C_Slave_ISR_DMA+0x264>)
2400f24c:	4293      	cmp	r3, r2
2400f24e:	d053      	beq.n	2400f2f8 <I2C_Slave_ISR_DMA+0x24c>
2400f250:	68fb      	ldr	r3, [r7, #12]
2400f252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400f254:	681b      	ldr	r3, [r3, #0]
2400f256:	4a2f      	ldr	r2, [pc, #188]	; (2400f314 <I2C_Slave_ISR_DMA+0x268>)
2400f258:	4293      	cmp	r3, r2
2400f25a:	d04d      	beq.n	2400f2f8 <I2C_Slave_ISR_DMA+0x24c>
2400f25c:	68fb      	ldr	r3, [r7, #12]
2400f25e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400f260:	681b      	ldr	r3, [r3, #0]
2400f262:	4a2d      	ldr	r2, [pc, #180]	; (2400f318 <I2C_Slave_ISR_DMA+0x26c>)
2400f264:	4293      	cmp	r3, r2
2400f266:	d047      	beq.n	2400f2f8 <I2C_Slave_ISR_DMA+0x24c>
2400f268:	68fb      	ldr	r3, [r7, #12]
2400f26a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400f26c:	681b      	ldr	r3, [r3, #0]
2400f26e:	4a2b      	ldr	r2, [pc, #172]	; (2400f31c <I2C_Slave_ISR_DMA+0x270>)
2400f270:	4293      	cmp	r3, r2
2400f272:	d041      	beq.n	2400f2f8 <I2C_Slave_ISR_DMA+0x24c>
2400f274:	68fb      	ldr	r3, [r7, #12]
2400f276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400f278:	681b      	ldr	r3, [r3, #0]
2400f27a:	4a29      	ldr	r2, [pc, #164]	; (2400f320 <I2C_Slave_ISR_DMA+0x274>)
2400f27c:	4293      	cmp	r3, r2
2400f27e:	d03b      	beq.n	2400f2f8 <I2C_Slave_ISR_DMA+0x24c>
2400f280:	68fb      	ldr	r3, [r7, #12]
2400f282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400f284:	681b      	ldr	r3, [r3, #0]
2400f286:	4a27      	ldr	r2, [pc, #156]	; (2400f324 <I2C_Slave_ISR_DMA+0x278>)
2400f288:	4293      	cmp	r3, r2
2400f28a:	d035      	beq.n	2400f2f8 <I2C_Slave_ISR_DMA+0x24c>
2400f28c:	68fb      	ldr	r3, [r7, #12]
2400f28e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400f290:	681b      	ldr	r3, [r3, #0]
2400f292:	4a25      	ldr	r2, [pc, #148]	; (2400f328 <I2C_Slave_ISR_DMA+0x27c>)
2400f294:	4293      	cmp	r3, r2
2400f296:	d02f      	beq.n	2400f2f8 <I2C_Slave_ISR_DMA+0x24c>
2400f298:	68fb      	ldr	r3, [r7, #12]
2400f29a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400f29c:	681b      	ldr	r3, [r3, #0]
2400f29e:	4a23      	ldr	r2, [pc, #140]	; (2400f32c <I2C_Slave_ISR_DMA+0x280>)
2400f2a0:	4293      	cmp	r3, r2
2400f2a2:	d029      	beq.n	2400f2f8 <I2C_Slave_ISR_DMA+0x24c>
2400f2a4:	68fb      	ldr	r3, [r7, #12]
2400f2a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400f2a8:	681b      	ldr	r3, [r3, #0]
2400f2aa:	4a21      	ldr	r2, [pc, #132]	; (2400f330 <I2C_Slave_ISR_DMA+0x284>)
2400f2ac:	4293      	cmp	r3, r2
2400f2ae:	d023      	beq.n	2400f2f8 <I2C_Slave_ISR_DMA+0x24c>
2400f2b0:	68fb      	ldr	r3, [r7, #12]
2400f2b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400f2b4:	681b      	ldr	r3, [r3, #0]
2400f2b6:	4a1f      	ldr	r2, [pc, #124]	; (2400f334 <I2C_Slave_ISR_DMA+0x288>)
2400f2b8:	4293      	cmp	r3, r2
2400f2ba:	d01d      	beq.n	2400f2f8 <I2C_Slave_ISR_DMA+0x24c>
2400f2bc:	68fb      	ldr	r3, [r7, #12]
2400f2be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400f2c0:	681b      	ldr	r3, [r3, #0]
2400f2c2:	4a1d      	ldr	r2, [pc, #116]	; (2400f338 <I2C_Slave_ISR_DMA+0x28c>)
2400f2c4:	4293      	cmp	r3, r2
2400f2c6:	d017      	beq.n	2400f2f8 <I2C_Slave_ISR_DMA+0x24c>
2400f2c8:	68fb      	ldr	r3, [r7, #12]
2400f2ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400f2cc:	681b      	ldr	r3, [r3, #0]
2400f2ce:	4a1b      	ldr	r2, [pc, #108]	; (2400f33c <I2C_Slave_ISR_DMA+0x290>)
2400f2d0:	4293      	cmp	r3, r2
2400f2d2:	d011      	beq.n	2400f2f8 <I2C_Slave_ISR_DMA+0x24c>
2400f2d4:	68fb      	ldr	r3, [r7, #12]
2400f2d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400f2d8:	681b      	ldr	r3, [r3, #0]
2400f2da:	4a19      	ldr	r2, [pc, #100]	; (2400f340 <I2C_Slave_ISR_DMA+0x294>)
2400f2dc:	4293      	cmp	r3, r2
2400f2de:	d00b      	beq.n	2400f2f8 <I2C_Slave_ISR_DMA+0x24c>
2400f2e0:	68fb      	ldr	r3, [r7, #12]
2400f2e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400f2e4:	681b      	ldr	r3, [r3, #0]
2400f2e6:	4a17      	ldr	r2, [pc, #92]	; (2400f344 <I2C_Slave_ISR_DMA+0x298>)
2400f2e8:	4293      	cmp	r3, r2
2400f2ea:	d005      	beq.n	2400f2f8 <I2C_Slave_ISR_DMA+0x24c>
2400f2ec:	68fb      	ldr	r3, [r7, #12]
2400f2ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400f2f0:	681b      	ldr	r3, [r3, #0]
2400f2f2:	4a15      	ldr	r2, [pc, #84]	; (2400f348 <I2C_Slave_ISR_DMA+0x29c>)
2400f2f4:	4293      	cmp	r3, r2
2400f2f6:	d129      	bne.n	2400f34c <I2C_Slave_ISR_DMA+0x2a0>
2400f2f8:	68fb      	ldr	r3, [r7, #12]
2400f2fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400f2fc:	681b      	ldr	r3, [r3, #0]
2400f2fe:	685b      	ldr	r3, [r3, #4]
2400f300:	2b00      	cmp	r3, #0
2400f302:	bf0c      	ite	eq
2400f304:	2301      	moveq	r3, #1
2400f306:	2300      	movne	r3, #0
2400f308:	b2db      	uxtb	r3, r3
2400f30a:	e028      	b.n	2400f35e <I2C_Slave_ISR_DMA+0x2b2>
2400f30c:	40020010 	.word	0x40020010
2400f310:	40020028 	.word	0x40020028
2400f314:	40020040 	.word	0x40020040
2400f318:	40020058 	.word	0x40020058
2400f31c:	40020070 	.word	0x40020070
2400f320:	40020088 	.word	0x40020088
2400f324:	400200a0 	.word	0x400200a0
2400f328:	400200b8 	.word	0x400200b8
2400f32c:	40020410 	.word	0x40020410
2400f330:	40020428 	.word	0x40020428
2400f334:	40020440 	.word	0x40020440
2400f338:	40020458 	.word	0x40020458
2400f33c:	40020470 	.word	0x40020470
2400f340:	40020488 	.word	0x40020488
2400f344:	400204a0 	.word	0x400204a0
2400f348:	400204b8 	.word	0x400204b8
2400f34c:	68fb      	ldr	r3, [r7, #12]
2400f34e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400f350:	681b      	ldr	r3, [r3, #0]
2400f352:	685b      	ldr	r3, [r3, #4]
2400f354:	2b00      	cmp	r3, #0
2400f356:	bf0c      	ite	eq
2400f358:	2301      	moveq	r3, #1
2400f35a:	2300      	movne	r3, #0
2400f35c:	b2db      	uxtb	r3, r3
2400f35e:	2b00      	cmp	r3, #0
2400f360:	d001      	beq.n	2400f366 <I2C_Slave_ISR_DMA+0x2ba>
          {
            treatdmanack = 1U;
2400f362:	2301      	movs	r3, #1
2400f364:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
2400f366:	69fb      	ldr	r3, [r7, #28]
2400f368:	2b01      	cmp	r3, #1
2400f36a:	d128      	bne.n	2400f3be <I2C_Slave_ISR_DMA+0x312>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
2400f36c:	68fb      	ldr	r3, [r7, #12]
2400f36e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400f372:	b2db      	uxtb	r3, r3
2400f374:	2b28      	cmp	r3, #40	; 0x28
2400f376:	d108      	bne.n	2400f38a <I2C_Slave_ISR_DMA+0x2de>
2400f378:	69bb      	ldr	r3, [r7, #24]
2400f37a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
2400f37e:	d104      	bne.n	2400f38a <I2C_Slave_ISR_DMA+0x2de>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
2400f380:	68b9      	ldr	r1, [r7, #8]
2400f382:	68f8      	ldr	r0, [r7, #12]
2400f384:	f000 fcee 	bl	2400fd64 <I2C_ITListenCplt>
2400f388:	e048      	b.n	2400f41c <I2C_Slave_ISR_DMA+0x370>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
2400f38a:	68fb      	ldr	r3, [r7, #12]
2400f38c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400f390:	b2db      	uxtb	r3, r3
2400f392:	2b29      	cmp	r3, #41	; 0x29
2400f394:	d10e      	bne.n	2400f3b4 <I2C_Slave_ISR_DMA+0x308>
2400f396:	69bb      	ldr	r3, [r7, #24]
2400f398:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
2400f39c:	d00a      	beq.n	2400f3b4 <I2C_Slave_ISR_DMA+0x308>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400f39e:	68fb      	ldr	r3, [r7, #12]
2400f3a0:	681b      	ldr	r3, [r3, #0]
2400f3a2:	2210      	movs	r2, #16
2400f3a4:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
2400f3a6:	68f8      	ldr	r0, [r7, #12]
2400f3a8:	f000 fe47 	bl	2401003a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
2400f3ac:	68f8      	ldr	r0, [r7, #12]
2400f3ae:	f000 f9be 	bl	2400f72e <I2C_ITSlaveSeqCplt>
2400f3b2:	e033      	b.n	2400f41c <I2C_Slave_ISR_DMA+0x370>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400f3b4:	68fb      	ldr	r3, [r7, #12]
2400f3b6:	681b      	ldr	r3, [r3, #0]
2400f3b8:	2210      	movs	r2, #16
2400f3ba:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
2400f3bc:	e034      	b.n	2400f428 <I2C_Slave_ISR_DMA+0x37c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400f3be:	68fb      	ldr	r3, [r7, #12]
2400f3c0:	681b      	ldr	r3, [r3, #0]
2400f3c2:	2210      	movs	r2, #16
2400f3c4:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
2400f3c6:	68fb      	ldr	r3, [r7, #12]
2400f3c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400f3ca:	f043 0204 	orr.w	r2, r3, #4
2400f3ce:	68fb      	ldr	r3, [r7, #12]
2400f3d0:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
2400f3d2:	68fb      	ldr	r3, [r7, #12]
2400f3d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400f3d8:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
2400f3da:	69bb      	ldr	r3, [r7, #24]
2400f3dc:	2b00      	cmp	r3, #0
2400f3de:	d003      	beq.n	2400f3e8 <I2C_Slave_ISR_DMA+0x33c>
2400f3e0:	69bb      	ldr	r3, [r7, #24]
2400f3e2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
2400f3e6:	d11f      	bne.n	2400f428 <I2C_Slave_ISR_DMA+0x37c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
2400f3e8:	7dfb      	ldrb	r3, [r7, #23]
2400f3ea:	2b21      	cmp	r3, #33	; 0x21
2400f3ec:	d002      	beq.n	2400f3f4 <I2C_Slave_ISR_DMA+0x348>
2400f3ee:	7dfb      	ldrb	r3, [r7, #23]
2400f3f0:	2b29      	cmp	r3, #41	; 0x29
2400f3f2:	d103      	bne.n	2400f3fc <I2C_Slave_ISR_DMA+0x350>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
2400f3f4:	68fb      	ldr	r3, [r7, #12]
2400f3f6:	2221      	movs	r2, #33	; 0x21
2400f3f8:	631a      	str	r2, [r3, #48]	; 0x30
2400f3fa:	e008      	b.n	2400f40e <I2C_Slave_ISR_DMA+0x362>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
2400f3fc:	7dfb      	ldrb	r3, [r7, #23]
2400f3fe:	2b22      	cmp	r3, #34	; 0x22
2400f400:	d002      	beq.n	2400f408 <I2C_Slave_ISR_DMA+0x35c>
2400f402:	7dfb      	ldrb	r3, [r7, #23]
2400f404:	2b2a      	cmp	r3, #42	; 0x2a
2400f406:	d102      	bne.n	2400f40e <I2C_Slave_ISR_DMA+0x362>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
2400f408:	68fb      	ldr	r3, [r7, #12]
2400f40a:	2222      	movs	r2, #34	; 0x22
2400f40c:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
2400f40e:	68fb      	ldr	r3, [r7, #12]
2400f410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400f412:	4619      	mov	r1, r3
2400f414:	68f8      	ldr	r0, [r7, #12]
2400f416:	f000 fcf9 	bl	2400fe0c <I2C_ITError>
      if (treatdmanack == 1U)
2400f41a:	e005      	b.n	2400f428 <I2C_Slave_ISR_DMA+0x37c>
2400f41c:	e004      	b.n	2400f428 <I2C_Slave_ISR_DMA+0x37c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400f41e:	68fb      	ldr	r3, [r7, #12]
2400f420:	681b      	ldr	r3, [r3, #0]
2400f422:	2210      	movs	r2, #16
2400f424:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
2400f426:	e00f      	b.n	2400f448 <I2C_Slave_ISR_DMA+0x39c>
      if (treatdmanack == 1U)
2400f428:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
2400f42a:	e00d      	b.n	2400f448 <I2C_Slave_ISR_DMA+0x39c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
2400f42c:	68bb      	ldr	r3, [r7, #8]
2400f42e:	f003 0308 	and.w	r3, r3, #8
2400f432:	2b00      	cmp	r3, #0
2400f434:	d008      	beq.n	2400f448 <I2C_Slave_ISR_DMA+0x39c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
2400f436:	687b      	ldr	r3, [r7, #4]
2400f438:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
2400f43c:	2b00      	cmp	r3, #0
2400f43e:	d003      	beq.n	2400f448 <I2C_Slave_ISR_DMA+0x39c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
2400f440:	68b9      	ldr	r1, [r7, #8]
2400f442:	68f8      	ldr	r0, [r7, #12]
2400f444:	f000 f8b2 	bl	2400f5ac <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
2400f448:	68fb      	ldr	r3, [r7, #12]
2400f44a:	2200      	movs	r2, #0
2400f44c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
2400f450:	2300      	movs	r3, #0
}
2400f452:	4618      	mov	r0, r3
2400f454:	3720      	adds	r7, #32
2400f456:	46bd      	mov	sp, r7
2400f458:	bd80      	pop	{r7, pc}
2400f45a:	bf00      	nop

2400f45c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
2400f45c:	b580      	push	{r7, lr}
2400f45e:	b086      	sub	sp, #24
2400f460:	af02      	add	r7, sp, #8
2400f462:	60f8      	str	r0, [r7, #12]
2400f464:	4608      	mov	r0, r1
2400f466:	4611      	mov	r1, r2
2400f468:	461a      	mov	r2, r3
2400f46a:	4603      	mov	r3, r0
2400f46c:	817b      	strh	r3, [r7, #10]
2400f46e:	460b      	mov	r3, r1
2400f470:	813b      	strh	r3, [r7, #8]
2400f472:	4613      	mov	r3, r2
2400f474:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
2400f476:	88fb      	ldrh	r3, [r7, #6]
2400f478:	b2da      	uxtb	r2, r3
2400f47a:	8979      	ldrh	r1, [r7, #10]
2400f47c:	4b20      	ldr	r3, [pc, #128]	; (2400f500 <I2C_RequestMemoryWrite+0xa4>)
2400f47e:	9300      	str	r3, [sp, #0]
2400f480:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400f484:	68f8      	ldr	r0, [r7, #12]
2400f486:	f001 faf9 	bl	24010a7c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
2400f48a:	69fa      	ldr	r2, [r7, #28]
2400f48c:	69b9      	ldr	r1, [r7, #24]
2400f48e:	68f8      	ldr	r0, [r7, #12]
2400f490:	f001 f907 	bl	240106a2 <I2C_WaitOnTXISFlagUntilTimeout>
2400f494:	4603      	mov	r3, r0
2400f496:	2b00      	cmp	r3, #0
2400f498:	d001      	beq.n	2400f49e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
2400f49a:	2301      	movs	r3, #1
2400f49c:	e02c      	b.n	2400f4f8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
2400f49e:	88fb      	ldrh	r3, [r7, #6]
2400f4a0:	2b01      	cmp	r3, #1
2400f4a2:	d105      	bne.n	2400f4b0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
2400f4a4:	893b      	ldrh	r3, [r7, #8]
2400f4a6:	b2da      	uxtb	r2, r3
2400f4a8:	68fb      	ldr	r3, [r7, #12]
2400f4aa:	681b      	ldr	r3, [r3, #0]
2400f4ac:	629a      	str	r2, [r3, #40]	; 0x28
2400f4ae:	e015      	b.n	2400f4dc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
2400f4b0:	893b      	ldrh	r3, [r7, #8]
2400f4b2:	0a1b      	lsrs	r3, r3, #8
2400f4b4:	b29b      	uxth	r3, r3
2400f4b6:	b2da      	uxtb	r2, r3
2400f4b8:	68fb      	ldr	r3, [r7, #12]
2400f4ba:	681b      	ldr	r3, [r3, #0]
2400f4bc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
2400f4be:	69fa      	ldr	r2, [r7, #28]
2400f4c0:	69b9      	ldr	r1, [r7, #24]
2400f4c2:	68f8      	ldr	r0, [r7, #12]
2400f4c4:	f001 f8ed 	bl	240106a2 <I2C_WaitOnTXISFlagUntilTimeout>
2400f4c8:	4603      	mov	r3, r0
2400f4ca:	2b00      	cmp	r3, #0
2400f4cc:	d001      	beq.n	2400f4d2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
2400f4ce:	2301      	movs	r3, #1
2400f4d0:	e012      	b.n	2400f4f8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
2400f4d2:	893b      	ldrh	r3, [r7, #8]
2400f4d4:	b2da      	uxtb	r2, r3
2400f4d6:	68fb      	ldr	r3, [r7, #12]
2400f4d8:	681b      	ldr	r3, [r3, #0]
2400f4da:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
2400f4dc:	69fb      	ldr	r3, [r7, #28]
2400f4de:	9300      	str	r3, [sp, #0]
2400f4e0:	69bb      	ldr	r3, [r7, #24]
2400f4e2:	2200      	movs	r2, #0
2400f4e4:	2180      	movs	r1, #128	; 0x80
2400f4e6:	68f8      	ldr	r0, [r7, #12]
2400f4e8:	f001 f88c 	bl	24010604 <I2C_WaitOnFlagUntilTimeout>
2400f4ec:	4603      	mov	r3, r0
2400f4ee:	2b00      	cmp	r3, #0
2400f4f0:	d001      	beq.n	2400f4f6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
2400f4f2:	2301      	movs	r3, #1
2400f4f4:	e000      	b.n	2400f4f8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
2400f4f6:	2300      	movs	r3, #0
}
2400f4f8:	4618      	mov	r0, r3
2400f4fa:	3710      	adds	r7, #16
2400f4fc:	46bd      	mov	sp, r7
2400f4fe:	bd80      	pop	{r7, pc}
2400f500:	80002000 	.word	0x80002000

2400f504 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
2400f504:	b580      	push	{r7, lr}
2400f506:	b086      	sub	sp, #24
2400f508:	af02      	add	r7, sp, #8
2400f50a:	60f8      	str	r0, [r7, #12]
2400f50c:	4608      	mov	r0, r1
2400f50e:	4611      	mov	r1, r2
2400f510:	461a      	mov	r2, r3
2400f512:	4603      	mov	r3, r0
2400f514:	817b      	strh	r3, [r7, #10]
2400f516:	460b      	mov	r3, r1
2400f518:	813b      	strh	r3, [r7, #8]
2400f51a:	4613      	mov	r3, r2
2400f51c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
2400f51e:	88fb      	ldrh	r3, [r7, #6]
2400f520:	b2da      	uxtb	r2, r3
2400f522:	8979      	ldrh	r1, [r7, #10]
2400f524:	4b20      	ldr	r3, [pc, #128]	; (2400f5a8 <I2C_RequestMemoryRead+0xa4>)
2400f526:	9300      	str	r3, [sp, #0]
2400f528:	2300      	movs	r3, #0
2400f52a:	68f8      	ldr	r0, [r7, #12]
2400f52c:	f001 faa6 	bl	24010a7c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
2400f530:	69fa      	ldr	r2, [r7, #28]
2400f532:	69b9      	ldr	r1, [r7, #24]
2400f534:	68f8      	ldr	r0, [r7, #12]
2400f536:	f001 f8b4 	bl	240106a2 <I2C_WaitOnTXISFlagUntilTimeout>
2400f53a:	4603      	mov	r3, r0
2400f53c:	2b00      	cmp	r3, #0
2400f53e:	d001      	beq.n	2400f544 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
2400f540:	2301      	movs	r3, #1
2400f542:	e02c      	b.n	2400f59e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
2400f544:	88fb      	ldrh	r3, [r7, #6]
2400f546:	2b01      	cmp	r3, #1
2400f548:	d105      	bne.n	2400f556 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
2400f54a:	893b      	ldrh	r3, [r7, #8]
2400f54c:	b2da      	uxtb	r2, r3
2400f54e:	68fb      	ldr	r3, [r7, #12]
2400f550:	681b      	ldr	r3, [r3, #0]
2400f552:	629a      	str	r2, [r3, #40]	; 0x28
2400f554:	e015      	b.n	2400f582 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
2400f556:	893b      	ldrh	r3, [r7, #8]
2400f558:	0a1b      	lsrs	r3, r3, #8
2400f55a:	b29b      	uxth	r3, r3
2400f55c:	b2da      	uxtb	r2, r3
2400f55e:	68fb      	ldr	r3, [r7, #12]
2400f560:	681b      	ldr	r3, [r3, #0]
2400f562:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
2400f564:	69fa      	ldr	r2, [r7, #28]
2400f566:	69b9      	ldr	r1, [r7, #24]
2400f568:	68f8      	ldr	r0, [r7, #12]
2400f56a:	f001 f89a 	bl	240106a2 <I2C_WaitOnTXISFlagUntilTimeout>
2400f56e:	4603      	mov	r3, r0
2400f570:	2b00      	cmp	r3, #0
2400f572:	d001      	beq.n	2400f578 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
2400f574:	2301      	movs	r3, #1
2400f576:	e012      	b.n	2400f59e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
2400f578:	893b      	ldrh	r3, [r7, #8]
2400f57a:	b2da      	uxtb	r2, r3
2400f57c:	68fb      	ldr	r3, [r7, #12]
2400f57e:	681b      	ldr	r3, [r3, #0]
2400f580:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
2400f582:	69fb      	ldr	r3, [r7, #28]
2400f584:	9300      	str	r3, [sp, #0]
2400f586:	69bb      	ldr	r3, [r7, #24]
2400f588:	2200      	movs	r2, #0
2400f58a:	2140      	movs	r1, #64	; 0x40
2400f58c:	68f8      	ldr	r0, [r7, #12]
2400f58e:	f001 f839 	bl	24010604 <I2C_WaitOnFlagUntilTimeout>
2400f592:	4603      	mov	r3, r0
2400f594:	2b00      	cmp	r3, #0
2400f596:	d001      	beq.n	2400f59c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
2400f598:	2301      	movs	r3, #1
2400f59a:	e000      	b.n	2400f59e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
2400f59c:	2300      	movs	r3, #0
}
2400f59e:	4618      	mov	r0, r3
2400f5a0:	3710      	adds	r7, #16
2400f5a2:	46bd      	mov	sp, r7
2400f5a4:	bd80      	pop	{r7, pc}
2400f5a6:	bf00      	nop
2400f5a8:	80002000 	.word	0x80002000

2400f5ac <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
2400f5ac:	b580      	push	{r7, lr}
2400f5ae:	b084      	sub	sp, #16
2400f5b0:	af00      	add	r7, sp, #0
2400f5b2:	6078      	str	r0, [r7, #4]
2400f5b4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
2400f5b6:	687b      	ldr	r3, [r7, #4]
2400f5b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400f5bc:	b2db      	uxtb	r3, r3
2400f5be:	f003 0328 	and.w	r3, r3, #40	; 0x28
2400f5c2:	2b28      	cmp	r3, #40	; 0x28
2400f5c4:	d16a      	bne.n	2400f69c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
2400f5c6:	687b      	ldr	r3, [r7, #4]
2400f5c8:	681b      	ldr	r3, [r3, #0]
2400f5ca:	699b      	ldr	r3, [r3, #24]
2400f5cc:	0c1b      	lsrs	r3, r3, #16
2400f5ce:	b2db      	uxtb	r3, r3
2400f5d0:	f003 0301 	and.w	r3, r3, #1
2400f5d4:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
2400f5d6:	687b      	ldr	r3, [r7, #4]
2400f5d8:	681b      	ldr	r3, [r3, #0]
2400f5da:	699b      	ldr	r3, [r3, #24]
2400f5dc:	0c1b      	lsrs	r3, r3, #16
2400f5de:	b29b      	uxth	r3, r3
2400f5e0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
2400f5e4:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
2400f5e6:	687b      	ldr	r3, [r7, #4]
2400f5e8:	681b      	ldr	r3, [r3, #0]
2400f5ea:	689b      	ldr	r3, [r3, #8]
2400f5ec:	b29b      	uxth	r3, r3
2400f5ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
2400f5f2:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
2400f5f4:	687b      	ldr	r3, [r7, #4]
2400f5f6:	681b      	ldr	r3, [r3, #0]
2400f5f8:	68db      	ldr	r3, [r3, #12]
2400f5fa:	b29b      	uxth	r3, r3
2400f5fc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
2400f600:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
2400f602:	687b      	ldr	r3, [r7, #4]
2400f604:	68db      	ldr	r3, [r3, #12]
2400f606:	2b02      	cmp	r3, #2
2400f608:	d138      	bne.n	2400f67c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
2400f60a:	897b      	ldrh	r3, [r7, #10]
2400f60c:	09db      	lsrs	r3, r3, #7
2400f60e:	b29a      	uxth	r2, r3
2400f610:	89bb      	ldrh	r3, [r7, #12]
2400f612:	4053      	eors	r3, r2
2400f614:	b29b      	uxth	r3, r3
2400f616:	f003 0306 	and.w	r3, r3, #6
2400f61a:	2b00      	cmp	r3, #0
2400f61c:	d11c      	bne.n	2400f658 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
2400f61e:	897b      	ldrh	r3, [r7, #10]
2400f620:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
2400f622:	687b      	ldr	r3, [r7, #4]
2400f624:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2400f626:	1c5a      	adds	r2, r3, #1
2400f628:	687b      	ldr	r3, [r7, #4]
2400f62a:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
2400f62c:	687b      	ldr	r3, [r7, #4]
2400f62e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2400f630:	2b02      	cmp	r3, #2
2400f632:	d13b      	bne.n	2400f6ac <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
2400f634:	687b      	ldr	r3, [r7, #4]
2400f636:	2200      	movs	r2, #0
2400f638:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
2400f63a:	687b      	ldr	r3, [r7, #4]
2400f63c:	681b      	ldr	r3, [r3, #0]
2400f63e:	2208      	movs	r2, #8
2400f640:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
2400f642:	687b      	ldr	r3, [r7, #4]
2400f644:	2200      	movs	r2, #0
2400f646:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
2400f64a:	89ba      	ldrh	r2, [r7, #12]
2400f64c:	7bfb      	ldrb	r3, [r7, #15]
2400f64e:	4619      	mov	r1, r3
2400f650:	6878      	ldr	r0, [r7, #4]
2400f652:	f7fe ff8a 	bl	2400e56a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
2400f656:	e029      	b.n	2400f6ac <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
2400f658:	893b      	ldrh	r3, [r7, #8]
2400f65a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
2400f65c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
2400f660:	6878      	ldr	r0, [r7, #4]
2400f662:	f001 faa7 	bl	24010bb4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
2400f666:	687b      	ldr	r3, [r7, #4]
2400f668:	2200      	movs	r2, #0
2400f66a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
2400f66e:	89ba      	ldrh	r2, [r7, #12]
2400f670:	7bfb      	ldrb	r3, [r7, #15]
2400f672:	4619      	mov	r1, r3
2400f674:	6878      	ldr	r0, [r7, #4]
2400f676:	f7fe ff78 	bl	2400e56a <HAL_I2C_AddrCallback>
}
2400f67a:	e017      	b.n	2400f6ac <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
2400f67c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
2400f680:	6878      	ldr	r0, [r7, #4]
2400f682:	f001 fa97 	bl	24010bb4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
2400f686:	687b      	ldr	r3, [r7, #4]
2400f688:	2200      	movs	r2, #0
2400f68a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
2400f68e:	89ba      	ldrh	r2, [r7, #12]
2400f690:	7bfb      	ldrb	r3, [r7, #15]
2400f692:	4619      	mov	r1, r3
2400f694:	6878      	ldr	r0, [r7, #4]
2400f696:	f7fe ff68 	bl	2400e56a <HAL_I2C_AddrCallback>
}
2400f69a:	e007      	b.n	2400f6ac <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
2400f69c:	687b      	ldr	r3, [r7, #4]
2400f69e:	681b      	ldr	r3, [r3, #0]
2400f6a0:	2208      	movs	r2, #8
2400f6a2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
2400f6a4:	687b      	ldr	r3, [r7, #4]
2400f6a6:	2200      	movs	r2, #0
2400f6a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
2400f6ac:	bf00      	nop
2400f6ae:	3710      	adds	r7, #16
2400f6b0:	46bd      	mov	sp, r7
2400f6b2:	bd80      	pop	{r7, pc}

2400f6b4 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
2400f6b4:	b580      	push	{r7, lr}
2400f6b6:	b082      	sub	sp, #8
2400f6b8:	af00      	add	r7, sp, #0
2400f6ba:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
2400f6bc:	687b      	ldr	r3, [r7, #4]
2400f6be:	2200      	movs	r2, #0
2400f6c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
2400f6c4:	687b      	ldr	r3, [r7, #4]
2400f6c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400f6ca:	b2db      	uxtb	r3, r3
2400f6cc:	2b21      	cmp	r3, #33	; 0x21
2400f6ce:	d115      	bne.n	2400f6fc <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
2400f6d0:	687b      	ldr	r3, [r7, #4]
2400f6d2:	2220      	movs	r2, #32
2400f6d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
2400f6d8:	687b      	ldr	r3, [r7, #4]
2400f6da:	2211      	movs	r2, #17
2400f6dc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
2400f6de:	687b      	ldr	r3, [r7, #4]
2400f6e0:	2200      	movs	r2, #0
2400f6e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
2400f6e4:	2101      	movs	r1, #1
2400f6e6:	6878      	ldr	r0, [r7, #4]
2400f6e8:	f001 fa64 	bl	24010bb4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400f6ec:	687b      	ldr	r3, [r7, #4]
2400f6ee:	2200      	movs	r2, #0
2400f6f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
2400f6f4:	6878      	ldr	r0, [r7, #4]
2400f6f6:	f7fe ff10 	bl	2400e51a <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
2400f6fa:	e014      	b.n	2400f726 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
2400f6fc:	687b      	ldr	r3, [r7, #4]
2400f6fe:	2220      	movs	r2, #32
2400f700:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
2400f704:	687b      	ldr	r3, [r7, #4]
2400f706:	2212      	movs	r2, #18
2400f708:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
2400f70a:	687b      	ldr	r3, [r7, #4]
2400f70c:	2200      	movs	r2, #0
2400f70e:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
2400f710:	2102      	movs	r1, #2
2400f712:	6878      	ldr	r0, [r7, #4]
2400f714:	f001 fa4e 	bl	24010bb4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
2400f718:	687b      	ldr	r3, [r7, #4]
2400f71a:	2200      	movs	r2, #0
2400f71c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
2400f720:	6878      	ldr	r0, [r7, #4]
2400f722:	f7fe ff04 	bl	2400e52e <HAL_I2C_MasterRxCpltCallback>
}
2400f726:	bf00      	nop
2400f728:	3708      	adds	r7, #8
2400f72a:	46bd      	mov	sp, r7
2400f72c:	bd80      	pop	{r7, pc}

2400f72e <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
2400f72e:	b580      	push	{r7, lr}
2400f730:	b084      	sub	sp, #16
2400f732:	af00      	add	r7, sp, #0
2400f734:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
2400f736:	687b      	ldr	r3, [r7, #4]
2400f738:	681b      	ldr	r3, [r3, #0]
2400f73a:	681b      	ldr	r3, [r3, #0]
2400f73c:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
2400f73e:	687b      	ldr	r3, [r7, #4]
2400f740:	2200      	movs	r2, #0
2400f742:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
2400f746:	68fb      	ldr	r3, [r7, #12]
2400f748:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
2400f74c:	2b00      	cmp	r3, #0
2400f74e:	d008      	beq.n	2400f762 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
2400f750:	687b      	ldr	r3, [r7, #4]
2400f752:	681b      	ldr	r3, [r3, #0]
2400f754:	681a      	ldr	r2, [r3, #0]
2400f756:	687b      	ldr	r3, [r7, #4]
2400f758:	681b      	ldr	r3, [r3, #0]
2400f75a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
2400f75e:	601a      	str	r2, [r3, #0]
2400f760:	e00c      	b.n	2400f77c <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
2400f762:	68fb      	ldr	r3, [r7, #12]
2400f764:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
2400f768:	2b00      	cmp	r3, #0
2400f76a:	d007      	beq.n	2400f77c <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
2400f76c:	687b      	ldr	r3, [r7, #4]
2400f76e:	681b      	ldr	r3, [r3, #0]
2400f770:	681a      	ldr	r2, [r3, #0]
2400f772:	687b      	ldr	r3, [r7, #4]
2400f774:	681b      	ldr	r3, [r3, #0]
2400f776:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
2400f77a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
2400f77c:	687b      	ldr	r3, [r7, #4]
2400f77e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400f782:	b2db      	uxtb	r3, r3
2400f784:	2b29      	cmp	r3, #41	; 0x29
2400f786:	d112      	bne.n	2400f7ae <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
2400f788:	687b      	ldr	r3, [r7, #4]
2400f78a:	2228      	movs	r2, #40	; 0x28
2400f78c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
2400f790:	687b      	ldr	r3, [r7, #4]
2400f792:	2221      	movs	r2, #33	; 0x21
2400f794:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
2400f796:	2101      	movs	r1, #1
2400f798:	6878      	ldr	r0, [r7, #4]
2400f79a:	f001 fa0b 	bl	24010bb4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400f79e:	687b      	ldr	r3, [r7, #4]
2400f7a0:	2200      	movs	r2, #0
2400f7a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
2400f7a6:	6878      	ldr	r0, [r7, #4]
2400f7a8:	f7fe fecb 	bl	2400e542 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
2400f7ac:	e017      	b.n	2400f7de <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
2400f7ae:	687b      	ldr	r3, [r7, #4]
2400f7b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400f7b4:	b2db      	uxtb	r3, r3
2400f7b6:	2b2a      	cmp	r3, #42	; 0x2a
2400f7b8:	d111      	bne.n	2400f7de <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
2400f7ba:	687b      	ldr	r3, [r7, #4]
2400f7bc:	2228      	movs	r2, #40	; 0x28
2400f7be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
2400f7c2:	687b      	ldr	r3, [r7, #4]
2400f7c4:	2222      	movs	r2, #34	; 0x22
2400f7c6:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
2400f7c8:	2102      	movs	r1, #2
2400f7ca:	6878      	ldr	r0, [r7, #4]
2400f7cc:	f001 f9f2 	bl	24010bb4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
2400f7d0:	687b      	ldr	r3, [r7, #4]
2400f7d2:	2200      	movs	r2, #0
2400f7d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
2400f7d8:	6878      	ldr	r0, [r7, #4]
2400f7da:	f7fe febc 	bl	2400e556 <HAL_I2C_SlaveRxCpltCallback>
}
2400f7de:	bf00      	nop
2400f7e0:	3710      	adds	r7, #16
2400f7e2:	46bd      	mov	sp, r7
2400f7e4:	bd80      	pop	{r7, pc}
	...

2400f7e8 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
2400f7e8:	b580      	push	{r7, lr}
2400f7ea:	b086      	sub	sp, #24
2400f7ec:	af00      	add	r7, sp, #0
2400f7ee:	6078      	str	r0, [r7, #4]
2400f7f0:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
2400f7f2:	683b      	ldr	r3, [r7, #0]
2400f7f4:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2400f7f6:	687b      	ldr	r3, [r7, #4]
2400f7f8:	681b      	ldr	r3, [r3, #0]
2400f7fa:	2220      	movs	r2, #32
2400f7fc:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
2400f7fe:	687b      	ldr	r3, [r7, #4]
2400f800:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400f804:	b2db      	uxtb	r3, r3
2400f806:	2b21      	cmp	r3, #33	; 0x21
2400f808:	d107      	bne.n	2400f81a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
2400f80a:	2101      	movs	r1, #1
2400f80c:	6878      	ldr	r0, [r7, #4]
2400f80e:	f001 f9d1 	bl	24010bb4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
2400f812:	687b      	ldr	r3, [r7, #4]
2400f814:	2211      	movs	r2, #17
2400f816:	631a      	str	r2, [r3, #48]	; 0x30
2400f818:	e00c      	b.n	2400f834 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
2400f81a:	687b      	ldr	r3, [r7, #4]
2400f81c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400f820:	b2db      	uxtb	r3, r3
2400f822:	2b22      	cmp	r3, #34	; 0x22
2400f824:	d106      	bne.n	2400f834 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
2400f826:	2102      	movs	r1, #2
2400f828:	6878      	ldr	r0, [r7, #4]
2400f82a:	f001 f9c3 	bl	24010bb4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
2400f82e:	687b      	ldr	r3, [r7, #4]
2400f830:	2212      	movs	r2, #18
2400f832:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
2400f834:	687b      	ldr	r3, [r7, #4]
2400f836:	681b      	ldr	r3, [r3, #0]
2400f838:	6859      	ldr	r1, [r3, #4]
2400f83a:	687b      	ldr	r3, [r7, #4]
2400f83c:	681a      	ldr	r2, [r3, #0]
2400f83e:	4b4c      	ldr	r3, [pc, #304]	; (2400f970 <I2C_ITMasterCplt+0x188>)
2400f840:	400b      	ands	r3, r1
2400f842:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
2400f844:	687b      	ldr	r3, [r7, #4]
2400f846:	2200      	movs	r2, #0
2400f848:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
2400f84a:	687b      	ldr	r3, [r7, #4]
2400f84c:	4a49      	ldr	r2, [pc, #292]	; (2400f974 <I2C_ITMasterCplt+0x18c>)
2400f84e:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
2400f850:	697b      	ldr	r3, [r7, #20]
2400f852:	f003 0310 	and.w	r3, r3, #16
2400f856:	2b00      	cmp	r3, #0
2400f858:	d009      	beq.n	2400f86e <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400f85a:	687b      	ldr	r3, [r7, #4]
2400f85c:	681b      	ldr	r3, [r3, #0]
2400f85e:	2210      	movs	r2, #16
2400f860:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
2400f862:	687b      	ldr	r3, [r7, #4]
2400f864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400f866:	f043 0204 	orr.w	r2, r3, #4
2400f86a:	687b      	ldr	r3, [r7, #4]
2400f86c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
2400f86e:	687b      	ldr	r3, [r7, #4]
2400f870:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400f874:	b2db      	uxtb	r3, r3
2400f876:	2b60      	cmp	r3, #96	; 0x60
2400f878:	d10a      	bne.n	2400f890 <I2C_ITMasterCplt+0xa8>
2400f87a:	697b      	ldr	r3, [r7, #20]
2400f87c:	f003 0304 	and.w	r3, r3, #4
2400f880:	2b00      	cmp	r3, #0
2400f882:	d005      	beq.n	2400f890 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
2400f884:	687b      	ldr	r3, [r7, #4]
2400f886:	681b      	ldr	r3, [r3, #0]
2400f888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400f88a:	b2db      	uxtb	r3, r3
2400f88c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
2400f88e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
2400f890:	6878      	ldr	r0, [r7, #4]
2400f892:	f000 fbd2 	bl	2401003a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
2400f896:	687b      	ldr	r3, [r7, #4]
2400f898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400f89a:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
2400f89c:	687b      	ldr	r3, [r7, #4]
2400f89e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400f8a2:	b2db      	uxtb	r3, r3
2400f8a4:	2b60      	cmp	r3, #96	; 0x60
2400f8a6:	d002      	beq.n	2400f8ae <I2C_ITMasterCplt+0xc6>
2400f8a8:	693b      	ldr	r3, [r7, #16]
2400f8aa:	2b00      	cmp	r3, #0
2400f8ac:	d006      	beq.n	2400f8bc <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
2400f8ae:	687b      	ldr	r3, [r7, #4]
2400f8b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400f8b2:	4619      	mov	r1, r3
2400f8b4:	6878      	ldr	r0, [r7, #4]
2400f8b6:	f000 faa9 	bl	2400fe0c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
2400f8ba:	e054      	b.n	2400f966 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
2400f8bc:	687b      	ldr	r3, [r7, #4]
2400f8be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400f8c2:	b2db      	uxtb	r3, r3
2400f8c4:	2b21      	cmp	r3, #33	; 0x21
2400f8c6:	d124      	bne.n	2400f912 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
2400f8c8:	687b      	ldr	r3, [r7, #4]
2400f8ca:	2220      	movs	r2, #32
2400f8cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
2400f8d0:	687b      	ldr	r3, [r7, #4]
2400f8d2:	2200      	movs	r2, #0
2400f8d4:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
2400f8d6:	687b      	ldr	r3, [r7, #4]
2400f8d8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
2400f8dc:	b2db      	uxtb	r3, r3
2400f8de:	2b40      	cmp	r3, #64	; 0x40
2400f8e0:	d10b      	bne.n	2400f8fa <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
2400f8e2:	687b      	ldr	r3, [r7, #4]
2400f8e4:	2200      	movs	r2, #0
2400f8e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
2400f8ea:	687b      	ldr	r3, [r7, #4]
2400f8ec:	2200      	movs	r2, #0
2400f8ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
2400f8f2:	6878      	ldr	r0, [r7, #4]
2400f8f4:	f7fe fe51 	bl	2400e59a <HAL_I2C_MemTxCpltCallback>
}
2400f8f8:	e035      	b.n	2400f966 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
2400f8fa:	687b      	ldr	r3, [r7, #4]
2400f8fc:	2200      	movs	r2, #0
2400f8fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
2400f902:	687b      	ldr	r3, [r7, #4]
2400f904:	2200      	movs	r2, #0
2400f906:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
2400f90a:	6878      	ldr	r0, [r7, #4]
2400f90c:	f7fe fe05 	bl	2400e51a <HAL_I2C_MasterTxCpltCallback>
}
2400f910:	e029      	b.n	2400f966 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
2400f912:	687b      	ldr	r3, [r7, #4]
2400f914:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400f918:	b2db      	uxtb	r3, r3
2400f91a:	2b22      	cmp	r3, #34	; 0x22
2400f91c:	d123      	bne.n	2400f966 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
2400f91e:	687b      	ldr	r3, [r7, #4]
2400f920:	2220      	movs	r2, #32
2400f922:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
2400f926:	687b      	ldr	r3, [r7, #4]
2400f928:	2200      	movs	r2, #0
2400f92a:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
2400f92c:	687b      	ldr	r3, [r7, #4]
2400f92e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
2400f932:	b2db      	uxtb	r3, r3
2400f934:	2b40      	cmp	r3, #64	; 0x40
2400f936:	d10b      	bne.n	2400f950 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
2400f938:	687b      	ldr	r3, [r7, #4]
2400f93a:	2200      	movs	r2, #0
2400f93c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
2400f940:	687b      	ldr	r3, [r7, #4]
2400f942:	2200      	movs	r2, #0
2400f944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
2400f948:	6878      	ldr	r0, [r7, #4]
2400f94a:	f7fe fe30 	bl	2400e5ae <HAL_I2C_MemRxCpltCallback>
}
2400f94e:	e00a      	b.n	2400f966 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
2400f950:	687b      	ldr	r3, [r7, #4]
2400f952:	2200      	movs	r2, #0
2400f954:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
2400f958:	687b      	ldr	r3, [r7, #4]
2400f95a:	2200      	movs	r2, #0
2400f95c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
2400f960:	6878      	ldr	r0, [r7, #4]
2400f962:	f7fe fde4 	bl	2400e52e <HAL_I2C_MasterRxCpltCallback>
}
2400f966:	bf00      	nop
2400f968:	3718      	adds	r7, #24
2400f96a:	46bd      	mov	sp, r7
2400f96c:	bd80      	pop	{r7, pc}
2400f96e:	bf00      	nop
2400f970:	fe00e800 	.word	0xfe00e800
2400f974:	ffff0000 	.word	0xffff0000

2400f978 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
2400f978:	b580      	push	{r7, lr}
2400f97a:	b086      	sub	sp, #24
2400f97c:	af00      	add	r7, sp, #0
2400f97e:	6078      	str	r0, [r7, #4]
2400f980:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
2400f982:	687b      	ldr	r3, [r7, #4]
2400f984:	681b      	ldr	r3, [r3, #0]
2400f986:	681b      	ldr	r3, [r3, #0]
2400f988:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
2400f98a:	683b      	ldr	r3, [r7, #0]
2400f98c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
2400f98e:	687b      	ldr	r3, [r7, #4]
2400f990:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400f994:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2400f996:	687b      	ldr	r3, [r7, #4]
2400f998:	681b      	ldr	r3, [r3, #0]
2400f99a:	2220      	movs	r2, #32
2400f99c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
2400f99e:	7bfb      	ldrb	r3, [r7, #15]
2400f9a0:	2b21      	cmp	r3, #33	; 0x21
2400f9a2:	d002      	beq.n	2400f9aa <I2C_ITSlaveCplt+0x32>
2400f9a4:	7bfb      	ldrb	r3, [r7, #15]
2400f9a6:	2b29      	cmp	r3, #41	; 0x29
2400f9a8:	d108      	bne.n	2400f9bc <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
2400f9aa:	f248 0101 	movw	r1, #32769	; 0x8001
2400f9ae:	6878      	ldr	r0, [r7, #4]
2400f9b0:	f001 f900 	bl	24010bb4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
2400f9b4:	687b      	ldr	r3, [r7, #4]
2400f9b6:	2221      	movs	r2, #33	; 0x21
2400f9b8:	631a      	str	r2, [r3, #48]	; 0x30
2400f9ba:	e00d      	b.n	2400f9d8 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
2400f9bc:	7bfb      	ldrb	r3, [r7, #15]
2400f9be:	2b22      	cmp	r3, #34	; 0x22
2400f9c0:	d002      	beq.n	2400f9c8 <I2C_ITSlaveCplt+0x50>
2400f9c2:	7bfb      	ldrb	r3, [r7, #15]
2400f9c4:	2b2a      	cmp	r3, #42	; 0x2a
2400f9c6:	d107      	bne.n	2400f9d8 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
2400f9c8:	f248 0102 	movw	r1, #32770	; 0x8002
2400f9cc:	6878      	ldr	r0, [r7, #4]
2400f9ce:	f001 f8f1 	bl	24010bb4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
2400f9d2:	687b      	ldr	r3, [r7, #4]
2400f9d4:	2222      	movs	r2, #34	; 0x22
2400f9d6:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
2400f9d8:	687b      	ldr	r3, [r7, #4]
2400f9da:	681b      	ldr	r3, [r3, #0]
2400f9dc:	685a      	ldr	r2, [r3, #4]
2400f9de:	687b      	ldr	r3, [r7, #4]
2400f9e0:	681b      	ldr	r3, [r3, #0]
2400f9e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2400f9e6:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
2400f9e8:	687b      	ldr	r3, [r7, #4]
2400f9ea:	681b      	ldr	r3, [r3, #0]
2400f9ec:	6859      	ldr	r1, [r3, #4]
2400f9ee:	687b      	ldr	r3, [r7, #4]
2400f9f0:	681a      	ldr	r2, [r3, #0]
2400f9f2:	4b7f      	ldr	r3, [pc, #508]	; (2400fbf0 <I2C_ITSlaveCplt+0x278>)
2400f9f4:	400b      	ands	r3, r1
2400f9f6:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
2400f9f8:	6878      	ldr	r0, [r7, #4]
2400f9fa:	f000 fb1e 	bl	2401003a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
2400f9fe:	693b      	ldr	r3, [r7, #16]
2400fa00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
2400fa04:	2b00      	cmp	r3, #0
2400fa06:	d07a      	beq.n	2400fafe <I2C_ITSlaveCplt+0x186>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
2400fa08:	687b      	ldr	r3, [r7, #4]
2400fa0a:	681b      	ldr	r3, [r3, #0]
2400fa0c:	681a      	ldr	r2, [r3, #0]
2400fa0e:	687b      	ldr	r3, [r7, #4]
2400fa10:	681b      	ldr	r3, [r3, #0]
2400fa12:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
2400fa16:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
2400fa18:	687b      	ldr	r3, [r7, #4]
2400fa1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400fa1c:	2b00      	cmp	r3, #0
2400fa1e:	f000 8110 	beq.w	2400fc42 <I2C_ITSlaveCplt+0x2ca>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
2400fa22:	687b      	ldr	r3, [r7, #4]
2400fa24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400fa26:	681b      	ldr	r3, [r3, #0]
2400fa28:	4a72      	ldr	r2, [pc, #456]	; (2400fbf4 <I2C_ITSlaveCplt+0x27c>)
2400fa2a:	4293      	cmp	r3, r2
2400fa2c:	d059      	beq.n	2400fae2 <I2C_ITSlaveCplt+0x16a>
2400fa2e:	687b      	ldr	r3, [r7, #4]
2400fa30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400fa32:	681b      	ldr	r3, [r3, #0]
2400fa34:	4a70      	ldr	r2, [pc, #448]	; (2400fbf8 <I2C_ITSlaveCplt+0x280>)
2400fa36:	4293      	cmp	r3, r2
2400fa38:	d053      	beq.n	2400fae2 <I2C_ITSlaveCplt+0x16a>
2400fa3a:	687b      	ldr	r3, [r7, #4]
2400fa3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400fa3e:	681b      	ldr	r3, [r3, #0]
2400fa40:	4a6e      	ldr	r2, [pc, #440]	; (2400fbfc <I2C_ITSlaveCplt+0x284>)
2400fa42:	4293      	cmp	r3, r2
2400fa44:	d04d      	beq.n	2400fae2 <I2C_ITSlaveCplt+0x16a>
2400fa46:	687b      	ldr	r3, [r7, #4]
2400fa48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400fa4a:	681b      	ldr	r3, [r3, #0]
2400fa4c:	4a6c      	ldr	r2, [pc, #432]	; (2400fc00 <I2C_ITSlaveCplt+0x288>)
2400fa4e:	4293      	cmp	r3, r2
2400fa50:	d047      	beq.n	2400fae2 <I2C_ITSlaveCplt+0x16a>
2400fa52:	687b      	ldr	r3, [r7, #4]
2400fa54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400fa56:	681b      	ldr	r3, [r3, #0]
2400fa58:	4a6a      	ldr	r2, [pc, #424]	; (2400fc04 <I2C_ITSlaveCplt+0x28c>)
2400fa5a:	4293      	cmp	r3, r2
2400fa5c:	d041      	beq.n	2400fae2 <I2C_ITSlaveCplt+0x16a>
2400fa5e:	687b      	ldr	r3, [r7, #4]
2400fa60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400fa62:	681b      	ldr	r3, [r3, #0]
2400fa64:	4a68      	ldr	r2, [pc, #416]	; (2400fc08 <I2C_ITSlaveCplt+0x290>)
2400fa66:	4293      	cmp	r3, r2
2400fa68:	d03b      	beq.n	2400fae2 <I2C_ITSlaveCplt+0x16a>
2400fa6a:	687b      	ldr	r3, [r7, #4]
2400fa6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400fa6e:	681b      	ldr	r3, [r3, #0]
2400fa70:	4a66      	ldr	r2, [pc, #408]	; (2400fc0c <I2C_ITSlaveCplt+0x294>)
2400fa72:	4293      	cmp	r3, r2
2400fa74:	d035      	beq.n	2400fae2 <I2C_ITSlaveCplt+0x16a>
2400fa76:	687b      	ldr	r3, [r7, #4]
2400fa78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400fa7a:	681b      	ldr	r3, [r3, #0]
2400fa7c:	4a64      	ldr	r2, [pc, #400]	; (2400fc10 <I2C_ITSlaveCplt+0x298>)
2400fa7e:	4293      	cmp	r3, r2
2400fa80:	d02f      	beq.n	2400fae2 <I2C_ITSlaveCplt+0x16a>
2400fa82:	687b      	ldr	r3, [r7, #4]
2400fa84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400fa86:	681b      	ldr	r3, [r3, #0]
2400fa88:	4a62      	ldr	r2, [pc, #392]	; (2400fc14 <I2C_ITSlaveCplt+0x29c>)
2400fa8a:	4293      	cmp	r3, r2
2400fa8c:	d029      	beq.n	2400fae2 <I2C_ITSlaveCplt+0x16a>
2400fa8e:	687b      	ldr	r3, [r7, #4]
2400fa90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400fa92:	681b      	ldr	r3, [r3, #0]
2400fa94:	4a60      	ldr	r2, [pc, #384]	; (2400fc18 <I2C_ITSlaveCplt+0x2a0>)
2400fa96:	4293      	cmp	r3, r2
2400fa98:	d023      	beq.n	2400fae2 <I2C_ITSlaveCplt+0x16a>
2400fa9a:	687b      	ldr	r3, [r7, #4]
2400fa9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400fa9e:	681b      	ldr	r3, [r3, #0]
2400faa0:	4a5e      	ldr	r2, [pc, #376]	; (2400fc1c <I2C_ITSlaveCplt+0x2a4>)
2400faa2:	4293      	cmp	r3, r2
2400faa4:	d01d      	beq.n	2400fae2 <I2C_ITSlaveCplt+0x16a>
2400faa6:	687b      	ldr	r3, [r7, #4]
2400faa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400faaa:	681b      	ldr	r3, [r3, #0]
2400faac:	4a5c      	ldr	r2, [pc, #368]	; (2400fc20 <I2C_ITSlaveCplt+0x2a8>)
2400faae:	4293      	cmp	r3, r2
2400fab0:	d017      	beq.n	2400fae2 <I2C_ITSlaveCplt+0x16a>
2400fab2:	687b      	ldr	r3, [r7, #4]
2400fab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400fab6:	681b      	ldr	r3, [r3, #0]
2400fab8:	4a5a      	ldr	r2, [pc, #360]	; (2400fc24 <I2C_ITSlaveCplt+0x2ac>)
2400faba:	4293      	cmp	r3, r2
2400fabc:	d011      	beq.n	2400fae2 <I2C_ITSlaveCplt+0x16a>
2400fabe:	687b      	ldr	r3, [r7, #4]
2400fac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400fac2:	681b      	ldr	r3, [r3, #0]
2400fac4:	4a58      	ldr	r2, [pc, #352]	; (2400fc28 <I2C_ITSlaveCplt+0x2b0>)
2400fac6:	4293      	cmp	r3, r2
2400fac8:	d00b      	beq.n	2400fae2 <I2C_ITSlaveCplt+0x16a>
2400faca:	687b      	ldr	r3, [r7, #4]
2400facc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400face:	681b      	ldr	r3, [r3, #0]
2400fad0:	4a56      	ldr	r2, [pc, #344]	; (2400fc2c <I2C_ITSlaveCplt+0x2b4>)
2400fad2:	4293      	cmp	r3, r2
2400fad4:	d005      	beq.n	2400fae2 <I2C_ITSlaveCplt+0x16a>
2400fad6:	687b      	ldr	r3, [r7, #4]
2400fad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400fada:	681b      	ldr	r3, [r3, #0]
2400fadc:	4a54      	ldr	r2, [pc, #336]	; (2400fc30 <I2C_ITSlaveCplt+0x2b8>)
2400fade:	4293      	cmp	r3, r2
2400fae0:	d105      	bne.n	2400faee <I2C_ITSlaveCplt+0x176>
2400fae2:	687b      	ldr	r3, [r7, #4]
2400fae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400fae6:	681b      	ldr	r3, [r3, #0]
2400fae8:	685b      	ldr	r3, [r3, #4]
2400faea:	b29b      	uxth	r3, r3
2400faec:	e004      	b.n	2400faf8 <I2C_ITSlaveCplt+0x180>
2400faee:	687b      	ldr	r3, [r7, #4]
2400faf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400faf2:	681b      	ldr	r3, [r3, #0]
2400faf4:	685b      	ldr	r3, [r3, #4]
2400faf6:	b29b      	uxth	r3, r3
2400faf8:	687a      	ldr	r2, [r7, #4]
2400fafa:	8553      	strh	r3, [r2, #42]	; 0x2a
2400fafc:	e0a1      	b.n	2400fc42 <I2C_ITSlaveCplt+0x2ca>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
2400fafe:	693b      	ldr	r3, [r7, #16]
2400fb00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
2400fb04:	2b00      	cmp	r3, #0
2400fb06:	f000 809c 	beq.w	2400fc42 <I2C_ITSlaveCplt+0x2ca>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
2400fb0a:	687b      	ldr	r3, [r7, #4]
2400fb0c:	681b      	ldr	r3, [r3, #0]
2400fb0e:	681a      	ldr	r2, [r3, #0]
2400fb10:	687b      	ldr	r3, [r7, #4]
2400fb12:	681b      	ldr	r3, [r3, #0]
2400fb14:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
2400fb18:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
2400fb1a:	687b      	ldr	r3, [r7, #4]
2400fb1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400fb1e:	2b00      	cmp	r3, #0
2400fb20:	f000 808f 	beq.w	2400fc42 <I2C_ITSlaveCplt+0x2ca>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
2400fb24:	687b      	ldr	r3, [r7, #4]
2400fb26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400fb28:	681b      	ldr	r3, [r3, #0]
2400fb2a:	4a32      	ldr	r2, [pc, #200]	; (2400fbf4 <I2C_ITSlaveCplt+0x27c>)
2400fb2c:	4293      	cmp	r3, r2
2400fb2e:	d059      	beq.n	2400fbe4 <I2C_ITSlaveCplt+0x26c>
2400fb30:	687b      	ldr	r3, [r7, #4]
2400fb32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400fb34:	681b      	ldr	r3, [r3, #0]
2400fb36:	4a30      	ldr	r2, [pc, #192]	; (2400fbf8 <I2C_ITSlaveCplt+0x280>)
2400fb38:	4293      	cmp	r3, r2
2400fb3a:	d053      	beq.n	2400fbe4 <I2C_ITSlaveCplt+0x26c>
2400fb3c:	687b      	ldr	r3, [r7, #4]
2400fb3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400fb40:	681b      	ldr	r3, [r3, #0]
2400fb42:	4a2e      	ldr	r2, [pc, #184]	; (2400fbfc <I2C_ITSlaveCplt+0x284>)
2400fb44:	4293      	cmp	r3, r2
2400fb46:	d04d      	beq.n	2400fbe4 <I2C_ITSlaveCplt+0x26c>
2400fb48:	687b      	ldr	r3, [r7, #4]
2400fb4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400fb4c:	681b      	ldr	r3, [r3, #0]
2400fb4e:	4a2c      	ldr	r2, [pc, #176]	; (2400fc00 <I2C_ITSlaveCplt+0x288>)
2400fb50:	4293      	cmp	r3, r2
2400fb52:	d047      	beq.n	2400fbe4 <I2C_ITSlaveCplt+0x26c>
2400fb54:	687b      	ldr	r3, [r7, #4]
2400fb56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400fb58:	681b      	ldr	r3, [r3, #0]
2400fb5a:	4a2a      	ldr	r2, [pc, #168]	; (2400fc04 <I2C_ITSlaveCplt+0x28c>)
2400fb5c:	4293      	cmp	r3, r2
2400fb5e:	d041      	beq.n	2400fbe4 <I2C_ITSlaveCplt+0x26c>
2400fb60:	687b      	ldr	r3, [r7, #4]
2400fb62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400fb64:	681b      	ldr	r3, [r3, #0]
2400fb66:	4a28      	ldr	r2, [pc, #160]	; (2400fc08 <I2C_ITSlaveCplt+0x290>)
2400fb68:	4293      	cmp	r3, r2
2400fb6a:	d03b      	beq.n	2400fbe4 <I2C_ITSlaveCplt+0x26c>
2400fb6c:	687b      	ldr	r3, [r7, #4]
2400fb6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400fb70:	681b      	ldr	r3, [r3, #0]
2400fb72:	4a26      	ldr	r2, [pc, #152]	; (2400fc0c <I2C_ITSlaveCplt+0x294>)
2400fb74:	4293      	cmp	r3, r2
2400fb76:	d035      	beq.n	2400fbe4 <I2C_ITSlaveCplt+0x26c>
2400fb78:	687b      	ldr	r3, [r7, #4]
2400fb7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400fb7c:	681b      	ldr	r3, [r3, #0]
2400fb7e:	4a24      	ldr	r2, [pc, #144]	; (2400fc10 <I2C_ITSlaveCplt+0x298>)
2400fb80:	4293      	cmp	r3, r2
2400fb82:	d02f      	beq.n	2400fbe4 <I2C_ITSlaveCplt+0x26c>
2400fb84:	687b      	ldr	r3, [r7, #4]
2400fb86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400fb88:	681b      	ldr	r3, [r3, #0]
2400fb8a:	4a22      	ldr	r2, [pc, #136]	; (2400fc14 <I2C_ITSlaveCplt+0x29c>)
2400fb8c:	4293      	cmp	r3, r2
2400fb8e:	d029      	beq.n	2400fbe4 <I2C_ITSlaveCplt+0x26c>
2400fb90:	687b      	ldr	r3, [r7, #4]
2400fb92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400fb94:	681b      	ldr	r3, [r3, #0]
2400fb96:	4a20      	ldr	r2, [pc, #128]	; (2400fc18 <I2C_ITSlaveCplt+0x2a0>)
2400fb98:	4293      	cmp	r3, r2
2400fb9a:	d023      	beq.n	2400fbe4 <I2C_ITSlaveCplt+0x26c>
2400fb9c:	687b      	ldr	r3, [r7, #4]
2400fb9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400fba0:	681b      	ldr	r3, [r3, #0]
2400fba2:	4a1e      	ldr	r2, [pc, #120]	; (2400fc1c <I2C_ITSlaveCplt+0x2a4>)
2400fba4:	4293      	cmp	r3, r2
2400fba6:	d01d      	beq.n	2400fbe4 <I2C_ITSlaveCplt+0x26c>
2400fba8:	687b      	ldr	r3, [r7, #4]
2400fbaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400fbac:	681b      	ldr	r3, [r3, #0]
2400fbae:	4a1c      	ldr	r2, [pc, #112]	; (2400fc20 <I2C_ITSlaveCplt+0x2a8>)
2400fbb0:	4293      	cmp	r3, r2
2400fbb2:	d017      	beq.n	2400fbe4 <I2C_ITSlaveCplt+0x26c>
2400fbb4:	687b      	ldr	r3, [r7, #4]
2400fbb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400fbb8:	681b      	ldr	r3, [r3, #0]
2400fbba:	4a1a      	ldr	r2, [pc, #104]	; (2400fc24 <I2C_ITSlaveCplt+0x2ac>)
2400fbbc:	4293      	cmp	r3, r2
2400fbbe:	d011      	beq.n	2400fbe4 <I2C_ITSlaveCplt+0x26c>
2400fbc0:	687b      	ldr	r3, [r7, #4]
2400fbc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400fbc4:	681b      	ldr	r3, [r3, #0]
2400fbc6:	4a18      	ldr	r2, [pc, #96]	; (2400fc28 <I2C_ITSlaveCplt+0x2b0>)
2400fbc8:	4293      	cmp	r3, r2
2400fbca:	d00b      	beq.n	2400fbe4 <I2C_ITSlaveCplt+0x26c>
2400fbcc:	687b      	ldr	r3, [r7, #4]
2400fbce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400fbd0:	681b      	ldr	r3, [r3, #0]
2400fbd2:	4a16      	ldr	r2, [pc, #88]	; (2400fc2c <I2C_ITSlaveCplt+0x2b4>)
2400fbd4:	4293      	cmp	r3, r2
2400fbd6:	d005      	beq.n	2400fbe4 <I2C_ITSlaveCplt+0x26c>
2400fbd8:	687b      	ldr	r3, [r7, #4]
2400fbda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400fbdc:	681b      	ldr	r3, [r3, #0]
2400fbde:	4a14      	ldr	r2, [pc, #80]	; (2400fc30 <I2C_ITSlaveCplt+0x2b8>)
2400fbe0:	4293      	cmp	r3, r2
2400fbe2:	d127      	bne.n	2400fc34 <I2C_ITSlaveCplt+0x2bc>
2400fbe4:	687b      	ldr	r3, [r7, #4]
2400fbe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400fbe8:	681b      	ldr	r3, [r3, #0]
2400fbea:	685b      	ldr	r3, [r3, #4]
2400fbec:	b29b      	uxth	r3, r3
2400fbee:	e026      	b.n	2400fc3e <I2C_ITSlaveCplt+0x2c6>
2400fbf0:	fe00e800 	.word	0xfe00e800
2400fbf4:	40020010 	.word	0x40020010
2400fbf8:	40020028 	.word	0x40020028
2400fbfc:	40020040 	.word	0x40020040
2400fc00:	40020058 	.word	0x40020058
2400fc04:	40020070 	.word	0x40020070
2400fc08:	40020088 	.word	0x40020088
2400fc0c:	400200a0 	.word	0x400200a0
2400fc10:	400200b8 	.word	0x400200b8
2400fc14:	40020410 	.word	0x40020410
2400fc18:	40020428 	.word	0x40020428
2400fc1c:	40020440 	.word	0x40020440
2400fc20:	40020458 	.word	0x40020458
2400fc24:	40020470 	.word	0x40020470
2400fc28:	40020488 	.word	0x40020488
2400fc2c:	400204a0 	.word	0x400204a0
2400fc30:	400204b8 	.word	0x400204b8
2400fc34:	687b      	ldr	r3, [r7, #4]
2400fc36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400fc38:	681b      	ldr	r3, [r3, #0]
2400fc3a:	685b      	ldr	r3, [r3, #4]
2400fc3c:	b29b      	uxth	r3, r3
2400fc3e:	687a      	ldr	r2, [r7, #4]
2400fc40:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
2400fc42:	697b      	ldr	r3, [r7, #20]
2400fc44:	f003 0304 	and.w	r3, r3, #4
2400fc48:	2b00      	cmp	r3, #0
2400fc4a:	d020      	beq.n	2400fc8e <I2C_ITSlaveCplt+0x316>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
2400fc4c:	697b      	ldr	r3, [r7, #20]
2400fc4e:	f023 0304 	bic.w	r3, r3, #4
2400fc52:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
2400fc54:	687b      	ldr	r3, [r7, #4]
2400fc56:	681b      	ldr	r3, [r3, #0]
2400fc58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
2400fc5a:	687b      	ldr	r3, [r7, #4]
2400fc5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400fc5e:	b2d2      	uxtb	r2, r2
2400fc60:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
2400fc62:	687b      	ldr	r3, [r7, #4]
2400fc64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400fc66:	1c5a      	adds	r2, r3, #1
2400fc68:	687b      	ldr	r3, [r7, #4]
2400fc6a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
2400fc6c:	687b      	ldr	r3, [r7, #4]
2400fc6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400fc70:	2b00      	cmp	r3, #0
2400fc72:	d00c      	beq.n	2400fc8e <I2C_ITSlaveCplt+0x316>
    {
      hi2c->XferSize--;
2400fc74:	687b      	ldr	r3, [r7, #4]
2400fc76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400fc78:	3b01      	subs	r3, #1
2400fc7a:	b29a      	uxth	r2, r3
2400fc7c:	687b      	ldr	r3, [r7, #4]
2400fc7e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
2400fc80:	687b      	ldr	r3, [r7, #4]
2400fc82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400fc84:	b29b      	uxth	r3, r3
2400fc86:	3b01      	subs	r3, #1
2400fc88:	b29a      	uxth	r2, r3
2400fc8a:	687b      	ldr	r3, [r7, #4]
2400fc8c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
2400fc8e:	687b      	ldr	r3, [r7, #4]
2400fc90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400fc92:	b29b      	uxth	r3, r3
2400fc94:	2b00      	cmp	r3, #0
2400fc96:	d005      	beq.n	2400fca4 <I2C_ITSlaveCplt+0x32c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
2400fc98:	687b      	ldr	r3, [r7, #4]
2400fc9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400fc9c:	f043 0204 	orr.w	r2, r3, #4
2400fca0:	687b      	ldr	r3, [r7, #4]
2400fca2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
2400fca4:	687b      	ldr	r3, [r7, #4]
2400fca6:	2200      	movs	r2, #0
2400fca8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
2400fcac:	687b      	ldr	r3, [r7, #4]
2400fcae:	2200      	movs	r2, #0
2400fcb0:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
2400fcb2:	687b      	ldr	r3, [r7, #4]
2400fcb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400fcb6:	2b00      	cmp	r3, #0
2400fcb8:	d010      	beq.n	2400fcdc <I2C_ITSlaveCplt+0x364>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
2400fcba:	687b      	ldr	r3, [r7, #4]
2400fcbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400fcbe:	4619      	mov	r1, r3
2400fcc0:	6878      	ldr	r0, [r7, #4]
2400fcc2:	f000 f8a3 	bl	2400fe0c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
2400fcc6:	687b      	ldr	r3, [r7, #4]
2400fcc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400fccc:	b2db      	uxtb	r3, r3
2400fcce:	2b28      	cmp	r3, #40	; 0x28
2400fcd0:	d141      	bne.n	2400fd56 <I2C_ITSlaveCplt+0x3de>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
2400fcd2:	6979      	ldr	r1, [r7, #20]
2400fcd4:	6878      	ldr	r0, [r7, #4]
2400fcd6:	f000 f845 	bl	2400fd64 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
2400fcda:	e03c      	b.n	2400fd56 <I2C_ITSlaveCplt+0x3de>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
2400fcdc:	687b      	ldr	r3, [r7, #4]
2400fcde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400fce0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
2400fce4:	d014      	beq.n	2400fd10 <I2C_ITSlaveCplt+0x398>
    I2C_ITSlaveSeqCplt(hi2c);
2400fce6:	6878      	ldr	r0, [r7, #4]
2400fce8:	f7ff fd21 	bl	2400f72e <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2400fcec:	687b      	ldr	r3, [r7, #4]
2400fcee:	4a1c      	ldr	r2, [pc, #112]	; (2400fd60 <I2C_ITSlaveCplt+0x3e8>)
2400fcf0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
2400fcf2:	687b      	ldr	r3, [r7, #4]
2400fcf4:	2220      	movs	r2, #32
2400fcf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
2400fcfa:	687b      	ldr	r3, [r7, #4]
2400fcfc:	2200      	movs	r2, #0
2400fcfe:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
2400fd00:	687b      	ldr	r3, [r7, #4]
2400fd02:	2200      	movs	r2, #0
2400fd04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
2400fd08:	6878      	ldr	r0, [r7, #4]
2400fd0a:	f7fe fc3c 	bl	2400e586 <HAL_I2C_ListenCpltCallback>
}
2400fd0e:	e022      	b.n	2400fd56 <I2C_ITSlaveCplt+0x3de>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
2400fd10:	687b      	ldr	r3, [r7, #4]
2400fd12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400fd16:	b2db      	uxtb	r3, r3
2400fd18:	2b22      	cmp	r3, #34	; 0x22
2400fd1a:	d10e      	bne.n	2400fd3a <I2C_ITSlaveCplt+0x3c2>
    hi2c->State = HAL_I2C_STATE_READY;
2400fd1c:	687b      	ldr	r3, [r7, #4]
2400fd1e:	2220      	movs	r2, #32
2400fd20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
2400fd24:	687b      	ldr	r3, [r7, #4]
2400fd26:	2200      	movs	r2, #0
2400fd28:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
2400fd2a:	687b      	ldr	r3, [r7, #4]
2400fd2c:	2200      	movs	r2, #0
2400fd2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
2400fd32:	6878      	ldr	r0, [r7, #4]
2400fd34:	f7fe fc0f 	bl	2400e556 <HAL_I2C_SlaveRxCpltCallback>
}
2400fd38:	e00d      	b.n	2400fd56 <I2C_ITSlaveCplt+0x3de>
    hi2c->State = HAL_I2C_STATE_READY;
2400fd3a:	687b      	ldr	r3, [r7, #4]
2400fd3c:	2220      	movs	r2, #32
2400fd3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
2400fd42:	687b      	ldr	r3, [r7, #4]
2400fd44:	2200      	movs	r2, #0
2400fd46:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
2400fd48:	687b      	ldr	r3, [r7, #4]
2400fd4a:	2200      	movs	r2, #0
2400fd4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
2400fd50:	6878      	ldr	r0, [r7, #4]
2400fd52:	f7fe fbf6 	bl	2400e542 <HAL_I2C_SlaveTxCpltCallback>
}
2400fd56:	bf00      	nop
2400fd58:	3718      	adds	r7, #24
2400fd5a:	46bd      	mov	sp, r7
2400fd5c:	bd80      	pop	{r7, pc}
2400fd5e:	bf00      	nop
2400fd60:	ffff0000 	.word	0xffff0000

2400fd64 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
2400fd64:	b580      	push	{r7, lr}
2400fd66:	b082      	sub	sp, #8
2400fd68:	af00      	add	r7, sp, #0
2400fd6a:	6078      	str	r0, [r7, #4]
2400fd6c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2400fd6e:	687b      	ldr	r3, [r7, #4]
2400fd70:	4a25      	ldr	r2, [pc, #148]	; (2400fe08 <I2C_ITListenCplt+0xa4>)
2400fd72:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
2400fd74:	687b      	ldr	r3, [r7, #4]
2400fd76:	2200      	movs	r2, #0
2400fd78:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
2400fd7a:	687b      	ldr	r3, [r7, #4]
2400fd7c:	2220      	movs	r2, #32
2400fd7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
2400fd82:	687b      	ldr	r3, [r7, #4]
2400fd84:	2200      	movs	r2, #0
2400fd86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
2400fd8a:	687b      	ldr	r3, [r7, #4]
2400fd8c:	2200      	movs	r2, #0
2400fd8e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
2400fd90:	683b      	ldr	r3, [r7, #0]
2400fd92:	f003 0304 	and.w	r3, r3, #4
2400fd96:	2b00      	cmp	r3, #0
2400fd98:	d022      	beq.n	2400fde0 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
2400fd9a:	687b      	ldr	r3, [r7, #4]
2400fd9c:	681b      	ldr	r3, [r3, #0]
2400fd9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
2400fda0:	687b      	ldr	r3, [r7, #4]
2400fda2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400fda4:	b2d2      	uxtb	r2, r2
2400fda6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
2400fda8:	687b      	ldr	r3, [r7, #4]
2400fdaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400fdac:	1c5a      	adds	r2, r3, #1
2400fdae:	687b      	ldr	r3, [r7, #4]
2400fdb0:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
2400fdb2:	687b      	ldr	r3, [r7, #4]
2400fdb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400fdb6:	2b00      	cmp	r3, #0
2400fdb8:	d012      	beq.n	2400fde0 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
2400fdba:	687b      	ldr	r3, [r7, #4]
2400fdbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400fdbe:	3b01      	subs	r3, #1
2400fdc0:	b29a      	uxth	r2, r3
2400fdc2:	687b      	ldr	r3, [r7, #4]
2400fdc4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
2400fdc6:	687b      	ldr	r3, [r7, #4]
2400fdc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400fdca:	b29b      	uxth	r3, r3
2400fdcc:	3b01      	subs	r3, #1
2400fdce:	b29a      	uxth	r2, r3
2400fdd0:	687b      	ldr	r3, [r7, #4]
2400fdd2:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
2400fdd4:	687b      	ldr	r3, [r7, #4]
2400fdd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400fdd8:	f043 0204 	orr.w	r2, r3, #4
2400fddc:	687b      	ldr	r3, [r7, #4]
2400fdde:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
2400fde0:	f248 0103 	movw	r1, #32771	; 0x8003
2400fde4:	6878      	ldr	r0, [r7, #4]
2400fde6:	f000 fee5 	bl	24010bb4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400fdea:	687b      	ldr	r3, [r7, #4]
2400fdec:	681b      	ldr	r3, [r3, #0]
2400fdee:	2210      	movs	r2, #16
2400fdf0:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
2400fdf2:	687b      	ldr	r3, [r7, #4]
2400fdf4:	2200      	movs	r2, #0
2400fdf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
2400fdfa:	6878      	ldr	r0, [r7, #4]
2400fdfc:	f7fe fbc3 	bl	2400e586 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
2400fe00:	bf00      	nop
2400fe02:	3708      	adds	r7, #8
2400fe04:	46bd      	mov	sp, r7
2400fe06:	bd80      	pop	{r7, pc}
2400fe08:	ffff0000 	.word	0xffff0000

2400fe0c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
2400fe0c:	b580      	push	{r7, lr}
2400fe0e:	b084      	sub	sp, #16
2400fe10:	af00      	add	r7, sp, #0
2400fe12:	6078      	str	r0, [r7, #4]
2400fe14:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
2400fe16:	687b      	ldr	r3, [r7, #4]
2400fe18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400fe1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
2400fe1e:	687b      	ldr	r3, [r7, #4]
2400fe20:	2200      	movs	r2, #0
2400fe22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
2400fe26:	687b      	ldr	r3, [r7, #4]
2400fe28:	4a6d      	ldr	r2, [pc, #436]	; (2400ffe0 <I2C_ITError+0x1d4>)
2400fe2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
2400fe2c:	687b      	ldr	r3, [r7, #4]
2400fe2e:	2200      	movs	r2, #0
2400fe30:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
2400fe32:	687b      	ldr	r3, [r7, #4]
2400fe34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
2400fe36:	683b      	ldr	r3, [r7, #0]
2400fe38:	431a      	orrs	r2, r3
2400fe3a:	687b      	ldr	r3, [r7, #4]
2400fe3c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
2400fe3e:	7bfb      	ldrb	r3, [r7, #15]
2400fe40:	2b28      	cmp	r3, #40	; 0x28
2400fe42:	d005      	beq.n	2400fe50 <I2C_ITError+0x44>
2400fe44:	7bfb      	ldrb	r3, [r7, #15]
2400fe46:	2b29      	cmp	r3, #41	; 0x29
2400fe48:	d002      	beq.n	2400fe50 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
2400fe4a:	7bfb      	ldrb	r3, [r7, #15]
2400fe4c:	2b2a      	cmp	r3, #42	; 0x2a
2400fe4e:	d10b      	bne.n	2400fe68 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
2400fe50:	2103      	movs	r1, #3
2400fe52:	6878      	ldr	r0, [r7, #4]
2400fe54:	f000 feae 	bl	24010bb4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
2400fe58:	687b      	ldr	r3, [r7, #4]
2400fe5a:	2228      	movs	r2, #40	; 0x28
2400fe5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
2400fe60:	687b      	ldr	r3, [r7, #4]
2400fe62:	4a60      	ldr	r2, [pc, #384]	; (2400ffe4 <I2C_ITError+0x1d8>)
2400fe64:	635a      	str	r2, [r3, #52]	; 0x34
2400fe66:	e030      	b.n	2400feca <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
2400fe68:	f248 0103 	movw	r1, #32771	; 0x8003
2400fe6c:	6878      	ldr	r0, [r7, #4]
2400fe6e:	f000 fea1 	bl	24010bb4 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
2400fe72:	6878      	ldr	r0, [r7, #4]
2400fe74:	f000 f8e1 	bl	2401003a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
2400fe78:	687b      	ldr	r3, [r7, #4]
2400fe7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400fe7e:	b2db      	uxtb	r3, r3
2400fe80:	2b60      	cmp	r3, #96	; 0x60
2400fe82:	d01f      	beq.n	2400fec4 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
2400fe84:	687b      	ldr	r3, [r7, #4]
2400fe86:	2220      	movs	r2, #32
2400fe88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
2400fe8c:	687b      	ldr	r3, [r7, #4]
2400fe8e:	681b      	ldr	r3, [r3, #0]
2400fe90:	699b      	ldr	r3, [r3, #24]
2400fe92:	f003 0320 	and.w	r3, r3, #32
2400fe96:	2b20      	cmp	r3, #32
2400fe98:	d114      	bne.n	2400fec4 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
2400fe9a:	687b      	ldr	r3, [r7, #4]
2400fe9c:	681b      	ldr	r3, [r3, #0]
2400fe9e:	699b      	ldr	r3, [r3, #24]
2400fea0:	f003 0310 	and.w	r3, r3, #16
2400fea4:	2b10      	cmp	r3, #16
2400fea6:	d109      	bne.n	2400febc <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400fea8:	687b      	ldr	r3, [r7, #4]
2400feaa:	681b      	ldr	r3, [r3, #0]
2400feac:	2210      	movs	r2, #16
2400feae:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
2400feb0:	687b      	ldr	r3, [r7, #4]
2400feb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400feb4:	f043 0204 	orr.w	r2, r3, #4
2400feb8:	687b      	ldr	r3, [r7, #4]
2400feba:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2400febc:	687b      	ldr	r3, [r7, #4]
2400febe:	681b      	ldr	r3, [r3, #0]
2400fec0:	2220      	movs	r2, #32
2400fec2:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
2400fec4:	687b      	ldr	r3, [r7, #4]
2400fec6:	2200      	movs	r2, #0
2400fec8:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
2400feca:	687b      	ldr	r3, [r7, #4]
2400fecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2400fece:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
2400fed0:	687b      	ldr	r3, [r7, #4]
2400fed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400fed4:	2b00      	cmp	r3, #0
2400fed6:	d039      	beq.n	2400ff4c <I2C_ITError+0x140>
2400fed8:	68bb      	ldr	r3, [r7, #8]
2400feda:	2b11      	cmp	r3, #17
2400fedc:	d002      	beq.n	2400fee4 <I2C_ITError+0xd8>
2400fede:	68bb      	ldr	r3, [r7, #8]
2400fee0:	2b21      	cmp	r3, #33	; 0x21
2400fee2:	d133      	bne.n	2400ff4c <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
2400fee4:	687b      	ldr	r3, [r7, #4]
2400fee6:	681b      	ldr	r3, [r3, #0]
2400fee8:	681b      	ldr	r3, [r3, #0]
2400feea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
2400feee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
2400fef2:	d107      	bne.n	2400ff04 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
2400fef4:	687b      	ldr	r3, [r7, #4]
2400fef6:	681b      	ldr	r3, [r3, #0]
2400fef8:	681a      	ldr	r2, [r3, #0]
2400fefa:	687b      	ldr	r3, [r7, #4]
2400fefc:	681b      	ldr	r3, [r3, #0]
2400fefe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
2400ff02:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
2400ff04:	687b      	ldr	r3, [r7, #4]
2400ff06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400ff08:	4618      	mov	r0, r3
2400ff0a:	f7f7 f9cf 	bl	240072ac <HAL_DMA_GetState>
2400ff0e:	4603      	mov	r3, r0
2400ff10:	2b01      	cmp	r3, #1
2400ff12:	d017      	beq.n	2400ff44 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
2400ff14:	687b      	ldr	r3, [r7, #4]
2400ff16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400ff18:	4a33      	ldr	r2, [pc, #204]	; (2400ffe8 <I2C_ITError+0x1dc>)
2400ff1a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2400ff1c:	687b      	ldr	r3, [r7, #4]
2400ff1e:	2200      	movs	r2, #0
2400ff20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
2400ff24:	687b      	ldr	r3, [r7, #4]
2400ff26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400ff28:	4618      	mov	r0, r3
2400ff2a:	f7f5 fbdd 	bl	240056e8 <HAL_DMA_Abort_IT>
2400ff2e:	4603      	mov	r3, r0
2400ff30:	2b00      	cmp	r3, #0
2400ff32:	d04d      	beq.n	2400ffd0 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
2400ff34:	687b      	ldr	r3, [r7, #4]
2400ff36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400ff38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2400ff3a:	687a      	ldr	r2, [r7, #4]
2400ff3c:	6b92      	ldr	r2, [r2, #56]	; 0x38
2400ff3e:	4610      	mov	r0, r2
2400ff40:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
2400ff42:	e045      	b.n	2400ffd0 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
2400ff44:	6878      	ldr	r0, [r7, #4]
2400ff46:	f000 f851 	bl	2400ffec <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
2400ff4a:	e041      	b.n	2400ffd0 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
2400ff4c:	687b      	ldr	r3, [r7, #4]
2400ff4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400ff50:	2b00      	cmp	r3, #0
2400ff52:	d039      	beq.n	2400ffc8 <I2C_ITError+0x1bc>
2400ff54:	68bb      	ldr	r3, [r7, #8]
2400ff56:	2b12      	cmp	r3, #18
2400ff58:	d002      	beq.n	2400ff60 <I2C_ITError+0x154>
2400ff5a:	68bb      	ldr	r3, [r7, #8]
2400ff5c:	2b22      	cmp	r3, #34	; 0x22
2400ff5e:	d133      	bne.n	2400ffc8 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
2400ff60:	687b      	ldr	r3, [r7, #4]
2400ff62:	681b      	ldr	r3, [r3, #0]
2400ff64:	681b      	ldr	r3, [r3, #0]
2400ff66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
2400ff6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
2400ff6e:	d107      	bne.n	2400ff80 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
2400ff70:	687b      	ldr	r3, [r7, #4]
2400ff72:	681b      	ldr	r3, [r3, #0]
2400ff74:	681a      	ldr	r2, [r3, #0]
2400ff76:	687b      	ldr	r3, [r7, #4]
2400ff78:	681b      	ldr	r3, [r3, #0]
2400ff7a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
2400ff7e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
2400ff80:	687b      	ldr	r3, [r7, #4]
2400ff82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400ff84:	4618      	mov	r0, r3
2400ff86:	f7f7 f991 	bl	240072ac <HAL_DMA_GetState>
2400ff8a:	4603      	mov	r3, r0
2400ff8c:	2b01      	cmp	r3, #1
2400ff8e:	d017      	beq.n	2400ffc0 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
2400ff90:	687b      	ldr	r3, [r7, #4]
2400ff92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400ff94:	4a14      	ldr	r2, [pc, #80]	; (2400ffe8 <I2C_ITError+0x1dc>)
2400ff96:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2400ff98:	687b      	ldr	r3, [r7, #4]
2400ff9a:	2200      	movs	r2, #0
2400ff9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
2400ffa0:	687b      	ldr	r3, [r7, #4]
2400ffa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400ffa4:	4618      	mov	r0, r3
2400ffa6:	f7f5 fb9f 	bl	240056e8 <HAL_DMA_Abort_IT>
2400ffaa:	4603      	mov	r3, r0
2400ffac:	2b00      	cmp	r3, #0
2400ffae:	d011      	beq.n	2400ffd4 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
2400ffb0:	687b      	ldr	r3, [r7, #4]
2400ffb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400ffb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2400ffb6:	687a      	ldr	r2, [r7, #4]
2400ffb8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
2400ffba:	4610      	mov	r0, r2
2400ffbc:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
2400ffbe:	e009      	b.n	2400ffd4 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
2400ffc0:	6878      	ldr	r0, [r7, #4]
2400ffc2:	f000 f813 	bl	2400ffec <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
2400ffc6:	e005      	b.n	2400ffd4 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
2400ffc8:	6878      	ldr	r0, [r7, #4]
2400ffca:	f000 f80f 	bl	2400ffec <I2C_TreatErrorCallback>
  }
}
2400ffce:	e002      	b.n	2400ffd6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
2400ffd0:	bf00      	nop
2400ffd2:	e000      	b.n	2400ffd6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
2400ffd4:	bf00      	nop
}
2400ffd6:	bf00      	nop
2400ffd8:	3710      	adds	r7, #16
2400ffda:	46bd      	mov	sp, r7
2400ffdc:	bd80      	pop	{r7, pc}
2400ffde:	bf00      	nop
2400ffe0:	ffff0000 	.word	0xffff0000
2400ffe4:	2400eab1 	.word	0x2400eab1
2400ffe8:	240105c9 	.word	0x240105c9

2400ffec <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
2400ffec:	b580      	push	{r7, lr}
2400ffee:	b082      	sub	sp, #8
2400fff0:	af00      	add	r7, sp, #0
2400fff2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
2400fff4:	687b      	ldr	r3, [r7, #4]
2400fff6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400fffa:	b2db      	uxtb	r3, r3
2400fffc:	2b60      	cmp	r3, #96	; 0x60
2400fffe:	d10e      	bne.n	2401001e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
24010000:	687b      	ldr	r3, [r7, #4]
24010002:	2220      	movs	r2, #32
24010004:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
24010008:	687b      	ldr	r3, [r7, #4]
2401000a:	2200      	movs	r2, #0
2401000c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2401000e:	687b      	ldr	r3, [r7, #4]
24010010:	2200      	movs	r2, #0
24010012:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
24010016:	6878      	ldr	r0, [r7, #4]
24010018:	f7fe fadd 	bl	2400e5d6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
2401001c:	e009      	b.n	24010032 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
2401001e:	687b      	ldr	r3, [r7, #4]
24010020:	2200      	movs	r2, #0
24010022:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
24010024:	687b      	ldr	r3, [r7, #4]
24010026:	2200      	movs	r2, #0
24010028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
2401002c:	6878      	ldr	r0, [r7, #4]
2401002e:	f7fe fac8 	bl	2400e5c2 <HAL_I2C_ErrorCallback>
}
24010032:	bf00      	nop
24010034:	3708      	adds	r7, #8
24010036:	46bd      	mov	sp, r7
24010038:	bd80      	pop	{r7, pc}

2401003a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
2401003a:	b480      	push	{r7}
2401003c:	b083      	sub	sp, #12
2401003e:	af00      	add	r7, sp, #0
24010040:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
24010042:	687b      	ldr	r3, [r7, #4]
24010044:	681b      	ldr	r3, [r3, #0]
24010046:	699b      	ldr	r3, [r3, #24]
24010048:	f003 0302 	and.w	r3, r3, #2
2401004c:	2b02      	cmp	r3, #2
2401004e:	d103      	bne.n	24010058 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
24010050:	687b      	ldr	r3, [r7, #4]
24010052:	681b      	ldr	r3, [r3, #0]
24010054:	2200      	movs	r2, #0
24010056:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
24010058:	687b      	ldr	r3, [r7, #4]
2401005a:	681b      	ldr	r3, [r3, #0]
2401005c:	699b      	ldr	r3, [r3, #24]
2401005e:	f003 0301 	and.w	r3, r3, #1
24010062:	2b01      	cmp	r3, #1
24010064:	d007      	beq.n	24010076 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
24010066:	687b      	ldr	r3, [r7, #4]
24010068:	681b      	ldr	r3, [r3, #0]
2401006a:	699a      	ldr	r2, [r3, #24]
2401006c:	687b      	ldr	r3, [r7, #4]
2401006e:	681b      	ldr	r3, [r3, #0]
24010070:	f042 0201 	orr.w	r2, r2, #1
24010074:	619a      	str	r2, [r3, #24]
  }
}
24010076:	bf00      	nop
24010078:	370c      	adds	r7, #12
2401007a:	46bd      	mov	sp, r7
2401007c:	f85d 7b04 	ldr.w	r7, [sp], #4
24010080:	4770      	bx	lr

24010082 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
24010082:	b580      	push	{r7, lr}
24010084:	b084      	sub	sp, #16
24010086:	af00      	add	r7, sp, #0
24010088:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
2401008a:	687b      	ldr	r3, [r7, #4]
2401008c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2401008e:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
24010090:	68fb      	ldr	r3, [r7, #12]
24010092:	681b      	ldr	r3, [r3, #0]
24010094:	681a      	ldr	r2, [r3, #0]
24010096:	68fb      	ldr	r3, [r7, #12]
24010098:	681b      	ldr	r3, [r3, #0]
2401009a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
2401009e:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
240100a0:	68fb      	ldr	r3, [r7, #12]
240100a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
240100a4:	b29b      	uxth	r3, r3
240100a6:	2b00      	cmp	r3, #0
240100a8:	d104      	bne.n	240100b4 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
240100aa:	2120      	movs	r1, #32
240100ac:	68f8      	ldr	r0, [r7, #12]
240100ae:	f000 fd17 	bl	24010ae0 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
240100b2:	e02d      	b.n	24010110 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
240100b4:	68fb      	ldr	r3, [r7, #12]
240100b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
240100b8:	68fa      	ldr	r2, [r7, #12]
240100ba:	8d12      	ldrh	r2, [r2, #40]	; 0x28
240100bc:	441a      	add	r2, r3
240100be:	68fb      	ldr	r3, [r7, #12]
240100c0:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
240100c2:	68fb      	ldr	r3, [r7, #12]
240100c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
240100c6:	b29b      	uxth	r3, r3
240100c8:	2bff      	cmp	r3, #255	; 0xff
240100ca:	d903      	bls.n	240100d4 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
240100cc:	68fb      	ldr	r3, [r7, #12]
240100ce:	22ff      	movs	r2, #255	; 0xff
240100d0:	851a      	strh	r2, [r3, #40]	; 0x28
240100d2:	e004      	b.n	240100de <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
240100d4:	68fb      	ldr	r3, [r7, #12]
240100d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
240100d8:	b29a      	uxth	r2, r3
240100da:	68fb      	ldr	r3, [r7, #12]
240100dc:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
240100de:	68fb      	ldr	r3, [r7, #12]
240100e0:	6b98      	ldr	r0, [r3, #56]	; 0x38
240100e2:	68fb      	ldr	r3, [r7, #12]
240100e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
240100e6:	4619      	mov	r1, r3
240100e8:	68fb      	ldr	r3, [r7, #12]
240100ea:	681b      	ldr	r3, [r3, #0]
240100ec:	3328      	adds	r3, #40	; 0x28
240100ee:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
240100f0:	68fb      	ldr	r3, [r7, #12]
240100f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
240100f4:	f7f4 fd70 	bl	24004bd8 <HAL_DMA_Start_IT>
240100f8:	4603      	mov	r3, r0
240100fa:	2b00      	cmp	r3, #0
240100fc:	d004      	beq.n	24010108 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
240100fe:	2110      	movs	r1, #16
24010100:	68f8      	ldr	r0, [r7, #12]
24010102:	f7ff fe83 	bl	2400fe0c <I2C_ITError>
}
24010106:	e003      	b.n	24010110 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
24010108:	2140      	movs	r1, #64	; 0x40
2401010a:	68f8      	ldr	r0, [r7, #12]
2401010c:	f000 fce8 	bl	24010ae0 <I2C_Enable_IRQ>
}
24010110:	bf00      	nop
24010112:	3710      	adds	r7, #16
24010114:	46bd      	mov	sp, r7
24010116:	bd80      	pop	{r7, pc}

24010118 <I2C_DMASlaveTransmitCplt>:
  * @brief  DMA I2C slave transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveTransmitCplt(DMA_HandleTypeDef *hdma)
{
24010118:	b580      	push	{r7, lr}
2401011a:	b084      	sub	sp, #16
2401011c:	af00      	add	r7, sp, #0
2401011e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
24010120:	687b      	ldr	r3, [r7, #4]
24010122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24010124:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
24010126:	68fb      	ldr	r3, [r7, #12]
24010128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2401012a:	60bb      	str	r3, [r7, #8]

  if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
2401012c:	68bb      	ldr	r3, [r7, #8]
2401012e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
24010132:	d002      	beq.n	2401013a <I2C_DMASlaveTransmitCplt+0x22>
24010134:	68bb      	ldr	r3, [r7, #8]
24010136:	2b00      	cmp	r3, #0
24010138:	d10a      	bne.n	24010150 <I2C_DMASlaveTransmitCplt+0x38>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
2401013a:	68fb      	ldr	r3, [r7, #12]
2401013c:	681b      	ldr	r3, [r3, #0]
2401013e:	681a      	ldr	r2, [r3, #0]
24010140:	68fb      	ldr	r3, [r7, #12]
24010142:	681b      	ldr	r3, [r3, #0]
24010144:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
24010148:	601a      	str	r2, [r3, #0]

    /* Last Byte is Transmitted */
    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
2401014a:	68f8      	ldr	r0, [r7, #12]
2401014c:	f7ff faef 	bl	2400f72e <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
24010150:	bf00      	nop
24010152:	3710      	adds	r7, #16
24010154:	46bd      	mov	sp, r7
24010156:	bd80      	pop	{r7, pc}

24010158 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
24010158:	b580      	push	{r7, lr}
2401015a:	b084      	sub	sp, #16
2401015c:	af00      	add	r7, sp, #0
2401015e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
24010160:	687b      	ldr	r3, [r7, #4]
24010162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24010164:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
24010166:	68fb      	ldr	r3, [r7, #12]
24010168:	681b      	ldr	r3, [r3, #0]
2401016a:	681a      	ldr	r2, [r3, #0]
2401016c:	68fb      	ldr	r3, [r7, #12]
2401016e:	681b      	ldr	r3, [r3, #0]
24010170:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
24010174:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
24010176:	68fb      	ldr	r3, [r7, #12]
24010178:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2401017a:	b29b      	uxth	r3, r3
2401017c:	2b00      	cmp	r3, #0
2401017e:	d104      	bne.n	2401018a <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
24010180:	2120      	movs	r1, #32
24010182:	68f8      	ldr	r0, [r7, #12]
24010184:	f000 fcac 	bl	24010ae0 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
24010188:	e02d      	b.n	240101e6 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
2401018a:	68fb      	ldr	r3, [r7, #12]
2401018c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2401018e:	68fa      	ldr	r2, [r7, #12]
24010190:	8d12      	ldrh	r2, [r2, #40]	; 0x28
24010192:	441a      	add	r2, r3
24010194:	68fb      	ldr	r3, [r7, #12]
24010196:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
24010198:	68fb      	ldr	r3, [r7, #12]
2401019a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2401019c:	b29b      	uxth	r3, r3
2401019e:	2bff      	cmp	r3, #255	; 0xff
240101a0:	d903      	bls.n	240101aa <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
240101a2:	68fb      	ldr	r3, [r7, #12]
240101a4:	22ff      	movs	r2, #255	; 0xff
240101a6:	851a      	strh	r2, [r3, #40]	; 0x28
240101a8:	e004      	b.n	240101b4 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
240101aa:	68fb      	ldr	r3, [r7, #12]
240101ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
240101ae:	b29a      	uxth	r2, r3
240101b0:	68fb      	ldr	r3, [r7, #12]
240101b2:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
240101b4:	68fb      	ldr	r3, [r7, #12]
240101b6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
240101b8:	68fb      	ldr	r3, [r7, #12]
240101ba:	681b      	ldr	r3, [r3, #0]
240101bc:	3324      	adds	r3, #36	; 0x24
240101be:	4619      	mov	r1, r3
240101c0:	68fb      	ldr	r3, [r7, #12]
240101c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
240101c4:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
240101c6:	68fb      	ldr	r3, [r7, #12]
240101c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
240101ca:	f7f4 fd05 	bl	24004bd8 <HAL_DMA_Start_IT>
240101ce:	4603      	mov	r3, r0
240101d0:	2b00      	cmp	r3, #0
240101d2:	d004      	beq.n	240101de <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
240101d4:	2110      	movs	r1, #16
240101d6:	68f8      	ldr	r0, [r7, #12]
240101d8:	f7ff fe18 	bl	2400fe0c <I2C_ITError>
}
240101dc:	e003      	b.n	240101e6 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
240101de:	2140      	movs	r1, #64	; 0x40
240101e0:	68f8      	ldr	r0, [r7, #12]
240101e2:	f000 fc7d 	bl	24010ae0 <I2C_Enable_IRQ>
}
240101e6:	bf00      	nop
240101e8:	3710      	adds	r7, #16
240101ea:	46bd      	mov	sp, r7
240101ec:	bd80      	pop	{r7, pc}
	...

240101f0 <I2C_DMASlaveReceiveCplt>:
  * @brief  DMA I2C slave receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveReceiveCplt(DMA_HandleTypeDef *hdma)
{
240101f0:	b580      	push	{r7, lr}
240101f2:	b084      	sub	sp, #16
240101f4:	af00      	add	r7, sp, #0
240101f6:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
240101f8:	687b      	ldr	r3, [r7, #4]
240101fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
240101fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
240101fe:	68fb      	ldr	r3, [r7, #12]
24010200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24010202:	60bb      	str	r3, [r7, #8]

  if ((I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U) && \
24010204:	68fb      	ldr	r3, [r7, #12]
24010206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24010208:	681b      	ldr	r3, [r3, #0]
2401020a:	4a42      	ldr	r2, [pc, #264]	; (24010314 <I2C_DMASlaveReceiveCplt+0x124>)
2401020c:	4293      	cmp	r3, r2
2401020e:	d059      	beq.n	240102c4 <I2C_DMASlaveReceiveCplt+0xd4>
24010210:	68fb      	ldr	r3, [r7, #12]
24010212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24010214:	681b      	ldr	r3, [r3, #0]
24010216:	4a40      	ldr	r2, [pc, #256]	; (24010318 <I2C_DMASlaveReceiveCplt+0x128>)
24010218:	4293      	cmp	r3, r2
2401021a:	d053      	beq.n	240102c4 <I2C_DMASlaveReceiveCplt+0xd4>
2401021c:	68fb      	ldr	r3, [r7, #12]
2401021e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24010220:	681b      	ldr	r3, [r3, #0]
24010222:	4a3e      	ldr	r2, [pc, #248]	; (2401031c <I2C_DMASlaveReceiveCplt+0x12c>)
24010224:	4293      	cmp	r3, r2
24010226:	d04d      	beq.n	240102c4 <I2C_DMASlaveReceiveCplt+0xd4>
24010228:	68fb      	ldr	r3, [r7, #12]
2401022a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2401022c:	681b      	ldr	r3, [r3, #0]
2401022e:	4a3c      	ldr	r2, [pc, #240]	; (24010320 <I2C_DMASlaveReceiveCplt+0x130>)
24010230:	4293      	cmp	r3, r2
24010232:	d047      	beq.n	240102c4 <I2C_DMASlaveReceiveCplt+0xd4>
24010234:	68fb      	ldr	r3, [r7, #12]
24010236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24010238:	681b      	ldr	r3, [r3, #0]
2401023a:	4a3a      	ldr	r2, [pc, #232]	; (24010324 <I2C_DMASlaveReceiveCplt+0x134>)
2401023c:	4293      	cmp	r3, r2
2401023e:	d041      	beq.n	240102c4 <I2C_DMASlaveReceiveCplt+0xd4>
24010240:	68fb      	ldr	r3, [r7, #12]
24010242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24010244:	681b      	ldr	r3, [r3, #0]
24010246:	4a38      	ldr	r2, [pc, #224]	; (24010328 <I2C_DMASlaveReceiveCplt+0x138>)
24010248:	4293      	cmp	r3, r2
2401024a:	d03b      	beq.n	240102c4 <I2C_DMASlaveReceiveCplt+0xd4>
2401024c:	68fb      	ldr	r3, [r7, #12]
2401024e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24010250:	681b      	ldr	r3, [r3, #0]
24010252:	4a36      	ldr	r2, [pc, #216]	; (2401032c <I2C_DMASlaveReceiveCplt+0x13c>)
24010254:	4293      	cmp	r3, r2
24010256:	d035      	beq.n	240102c4 <I2C_DMASlaveReceiveCplt+0xd4>
24010258:	68fb      	ldr	r3, [r7, #12]
2401025a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2401025c:	681b      	ldr	r3, [r3, #0]
2401025e:	4a34      	ldr	r2, [pc, #208]	; (24010330 <I2C_DMASlaveReceiveCplt+0x140>)
24010260:	4293      	cmp	r3, r2
24010262:	d02f      	beq.n	240102c4 <I2C_DMASlaveReceiveCplt+0xd4>
24010264:	68fb      	ldr	r3, [r7, #12]
24010266:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24010268:	681b      	ldr	r3, [r3, #0]
2401026a:	4a32      	ldr	r2, [pc, #200]	; (24010334 <I2C_DMASlaveReceiveCplt+0x144>)
2401026c:	4293      	cmp	r3, r2
2401026e:	d029      	beq.n	240102c4 <I2C_DMASlaveReceiveCplt+0xd4>
24010270:	68fb      	ldr	r3, [r7, #12]
24010272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24010274:	681b      	ldr	r3, [r3, #0]
24010276:	4a30      	ldr	r2, [pc, #192]	; (24010338 <I2C_DMASlaveReceiveCplt+0x148>)
24010278:	4293      	cmp	r3, r2
2401027a:	d023      	beq.n	240102c4 <I2C_DMASlaveReceiveCplt+0xd4>
2401027c:	68fb      	ldr	r3, [r7, #12]
2401027e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24010280:	681b      	ldr	r3, [r3, #0]
24010282:	4a2e      	ldr	r2, [pc, #184]	; (2401033c <I2C_DMASlaveReceiveCplt+0x14c>)
24010284:	4293      	cmp	r3, r2
24010286:	d01d      	beq.n	240102c4 <I2C_DMASlaveReceiveCplt+0xd4>
24010288:	68fb      	ldr	r3, [r7, #12]
2401028a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2401028c:	681b      	ldr	r3, [r3, #0]
2401028e:	4a2c      	ldr	r2, [pc, #176]	; (24010340 <I2C_DMASlaveReceiveCplt+0x150>)
24010290:	4293      	cmp	r3, r2
24010292:	d017      	beq.n	240102c4 <I2C_DMASlaveReceiveCplt+0xd4>
24010294:	68fb      	ldr	r3, [r7, #12]
24010296:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24010298:	681b      	ldr	r3, [r3, #0]
2401029a:	4a2a      	ldr	r2, [pc, #168]	; (24010344 <I2C_DMASlaveReceiveCplt+0x154>)
2401029c:	4293      	cmp	r3, r2
2401029e:	d011      	beq.n	240102c4 <I2C_DMASlaveReceiveCplt+0xd4>
240102a0:	68fb      	ldr	r3, [r7, #12]
240102a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
240102a4:	681b      	ldr	r3, [r3, #0]
240102a6:	4a28      	ldr	r2, [pc, #160]	; (24010348 <I2C_DMASlaveReceiveCplt+0x158>)
240102a8:	4293      	cmp	r3, r2
240102aa:	d00b      	beq.n	240102c4 <I2C_DMASlaveReceiveCplt+0xd4>
240102ac:	68fb      	ldr	r3, [r7, #12]
240102ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
240102b0:	681b      	ldr	r3, [r3, #0]
240102b2:	4a26      	ldr	r2, [pc, #152]	; (2401034c <I2C_DMASlaveReceiveCplt+0x15c>)
240102b4:	4293      	cmp	r3, r2
240102b6:	d005      	beq.n	240102c4 <I2C_DMASlaveReceiveCplt+0xd4>
240102b8:	68fb      	ldr	r3, [r7, #12]
240102ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
240102bc:	681b      	ldr	r3, [r3, #0]
240102be:	4a24      	ldr	r2, [pc, #144]	; (24010350 <I2C_DMASlaveReceiveCplt+0x160>)
240102c0:	4293      	cmp	r3, r2
240102c2:	d109      	bne.n	240102d8 <I2C_DMASlaveReceiveCplt+0xe8>
240102c4:	68fb      	ldr	r3, [r7, #12]
240102c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
240102c8:	681b      	ldr	r3, [r3, #0]
240102ca:	685b      	ldr	r3, [r3, #4]
240102cc:	2b00      	cmp	r3, #0
240102ce:	bf0c      	ite	eq
240102d0:	2301      	moveq	r3, #1
240102d2:	2300      	movne	r3, #0
240102d4:	b2db      	uxtb	r3, r3
240102d6:	e008      	b.n	240102ea <I2C_DMASlaveReceiveCplt+0xfa>
240102d8:	68fb      	ldr	r3, [r7, #12]
240102da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
240102dc:	681b      	ldr	r3, [r3, #0]
240102de:	685b      	ldr	r3, [r3, #4]
240102e0:	2b00      	cmp	r3, #0
240102e2:	bf0c      	ite	eq
240102e4:	2301      	moveq	r3, #1
240102e6:	2300      	movne	r3, #0
240102e8:	b2db      	uxtb	r3, r3
240102ea:	2b00      	cmp	r3, #0
240102ec:	d00e      	beq.n	2401030c <I2C_DMASlaveReceiveCplt+0x11c>
240102ee:	68bb      	ldr	r3, [r7, #8]
240102f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
240102f4:	d00a      	beq.n	2401030c <I2C_DMASlaveReceiveCplt+0x11c>
      (tmpoptions != I2C_NO_OPTION_FRAME))
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
240102f6:	68fb      	ldr	r3, [r7, #12]
240102f8:	681b      	ldr	r3, [r3, #0]
240102fa:	681a      	ldr	r2, [r3, #0]
240102fc:	68fb      	ldr	r3, [r7, #12]
240102fe:	681b      	ldr	r3, [r3, #0]
24010300:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
24010304:	601a      	str	r2, [r3, #0]

    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
24010306:	68f8      	ldr	r0, [r7, #12]
24010308:	f7ff fa11 	bl	2400f72e <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
2401030c:	bf00      	nop
2401030e:	3710      	adds	r7, #16
24010310:	46bd      	mov	sp, r7
24010312:	bd80      	pop	{r7, pc}
24010314:	40020010 	.word	0x40020010
24010318:	40020028 	.word	0x40020028
2401031c:	40020040 	.word	0x40020040
24010320:	40020058 	.word	0x40020058
24010324:	40020070 	.word	0x40020070
24010328:	40020088 	.word	0x40020088
2401032c:	400200a0 	.word	0x400200a0
24010330:	400200b8 	.word	0x400200b8
24010334:	40020410 	.word	0x40020410
24010338:	40020428 	.word	0x40020428
2401033c:	40020440 	.word	0x40020440
24010340:	40020458 	.word	0x40020458
24010344:	40020470 	.word	0x40020470
24010348:	40020488 	.word	0x40020488
2401034c:	400204a0 	.word	0x400204a0
24010350:	400204b8 	.word	0x400204b8

24010354 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
24010354:	b580      	push	{r7, lr}
24010356:	b084      	sub	sp, #16
24010358:	af00      	add	r7, sp, #0
2401035a:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
2401035c:	2300      	movs	r3, #0
2401035e:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
24010360:	687b      	ldr	r3, [r7, #4]
24010362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24010364:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
24010366:	68bb      	ldr	r3, [r7, #8]
24010368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2401036a:	2b00      	cmp	r3, #0
2401036c:	d076      	beq.n	2401045c <I2C_DMAError+0x108>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
2401036e:	68bb      	ldr	r3, [r7, #8]
24010370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24010372:	681b      	ldr	r3, [r3, #0]
24010374:	4a71      	ldr	r2, [pc, #452]	; (2401053c <I2C_DMAError+0x1e8>)
24010376:	4293      	cmp	r3, r2
24010378:	d059      	beq.n	2401042e <I2C_DMAError+0xda>
2401037a:	68bb      	ldr	r3, [r7, #8]
2401037c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2401037e:	681b      	ldr	r3, [r3, #0]
24010380:	4a6f      	ldr	r2, [pc, #444]	; (24010540 <I2C_DMAError+0x1ec>)
24010382:	4293      	cmp	r3, r2
24010384:	d053      	beq.n	2401042e <I2C_DMAError+0xda>
24010386:	68bb      	ldr	r3, [r7, #8]
24010388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2401038a:	681b      	ldr	r3, [r3, #0]
2401038c:	4a6d      	ldr	r2, [pc, #436]	; (24010544 <I2C_DMAError+0x1f0>)
2401038e:	4293      	cmp	r3, r2
24010390:	d04d      	beq.n	2401042e <I2C_DMAError+0xda>
24010392:	68bb      	ldr	r3, [r7, #8]
24010394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24010396:	681b      	ldr	r3, [r3, #0]
24010398:	4a6b      	ldr	r2, [pc, #428]	; (24010548 <I2C_DMAError+0x1f4>)
2401039a:	4293      	cmp	r3, r2
2401039c:	d047      	beq.n	2401042e <I2C_DMAError+0xda>
2401039e:	68bb      	ldr	r3, [r7, #8]
240103a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
240103a2:	681b      	ldr	r3, [r3, #0]
240103a4:	4a69      	ldr	r2, [pc, #420]	; (2401054c <I2C_DMAError+0x1f8>)
240103a6:	4293      	cmp	r3, r2
240103a8:	d041      	beq.n	2401042e <I2C_DMAError+0xda>
240103aa:	68bb      	ldr	r3, [r7, #8]
240103ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
240103ae:	681b      	ldr	r3, [r3, #0]
240103b0:	4a67      	ldr	r2, [pc, #412]	; (24010550 <I2C_DMAError+0x1fc>)
240103b2:	4293      	cmp	r3, r2
240103b4:	d03b      	beq.n	2401042e <I2C_DMAError+0xda>
240103b6:	68bb      	ldr	r3, [r7, #8]
240103b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
240103ba:	681b      	ldr	r3, [r3, #0]
240103bc:	4a65      	ldr	r2, [pc, #404]	; (24010554 <I2C_DMAError+0x200>)
240103be:	4293      	cmp	r3, r2
240103c0:	d035      	beq.n	2401042e <I2C_DMAError+0xda>
240103c2:	68bb      	ldr	r3, [r7, #8]
240103c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
240103c6:	681b      	ldr	r3, [r3, #0]
240103c8:	4a63      	ldr	r2, [pc, #396]	; (24010558 <I2C_DMAError+0x204>)
240103ca:	4293      	cmp	r3, r2
240103cc:	d02f      	beq.n	2401042e <I2C_DMAError+0xda>
240103ce:	68bb      	ldr	r3, [r7, #8]
240103d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
240103d2:	681b      	ldr	r3, [r3, #0]
240103d4:	4a61      	ldr	r2, [pc, #388]	; (2401055c <I2C_DMAError+0x208>)
240103d6:	4293      	cmp	r3, r2
240103d8:	d029      	beq.n	2401042e <I2C_DMAError+0xda>
240103da:	68bb      	ldr	r3, [r7, #8]
240103dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
240103de:	681b      	ldr	r3, [r3, #0]
240103e0:	4a5f      	ldr	r2, [pc, #380]	; (24010560 <I2C_DMAError+0x20c>)
240103e2:	4293      	cmp	r3, r2
240103e4:	d023      	beq.n	2401042e <I2C_DMAError+0xda>
240103e6:	68bb      	ldr	r3, [r7, #8]
240103e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
240103ea:	681b      	ldr	r3, [r3, #0]
240103ec:	4a5d      	ldr	r2, [pc, #372]	; (24010564 <I2C_DMAError+0x210>)
240103ee:	4293      	cmp	r3, r2
240103f0:	d01d      	beq.n	2401042e <I2C_DMAError+0xda>
240103f2:	68bb      	ldr	r3, [r7, #8]
240103f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
240103f6:	681b      	ldr	r3, [r3, #0]
240103f8:	4a5b      	ldr	r2, [pc, #364]	; (24010568 <I2C_DMAError+0x214>)
240103fa:	4293      	cmp	r3, r2
240103fc:	d017      	beq.n	2401042e <I2C_DMAError+0xda>
240103fe:	68bb      	ldr	r3, [r7, #8]
24010400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24010402:	681b      	ldr	r3, [r3, #0]
24010404:	4a59      	ldr	r2, [pc, #356]	; (2401056c <I2C_DMAError+0x218>)
24010406:	4293      	cmp	r3, r2
24010408:	d011      	beq.n	2401042e <I2C_DMAError+0xda>
2401040a:	68bb      	ldr	r3, [r7, #8]
2401040c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2401040e:	681b      	ldr	r3, [r3, #0]
24010410:	4a57      	ldr	r2, [pc, #348]	; (24010570 <I2C_DMAError+0x21c>)
24010412:	4293      	cmp	r3, r2
24010414:	d00b      	beq.n	2401042e <I2C_DMAError+0xda>
24010416:	68bb      	ldr	r3, [r7, #8]
24010418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2401041a:	681b      	ldr	r3, [r3, #0]
2401041c:	4a55      	ldr	r2, [pc, #340]	; (24010574 <I2C_DMAError+0x220>)
2401041e:	4293      	cmp	r3, r2
24010420:	d005      	beq.n	2401042e <I2C_DMAError+0xda>
24010422:	68bb      	ldr	r3, [r7, #8]
24010424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24010426:	681b      	ldr	r3, [r3, #0]
24010428:	4a53      	ldr	r2, [pc, #332]	; (24010578 <I2C_DMAError+0x224>)
2401042a:	4293      	cmp	r3, r2
2401042c:	d109      	bne.n	24010442 <I2C_DMAError+0xee>
2401042e:	68bb      	ldr	r3, [r7, #8]
24010430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24010432:	681b      	ldr	r3, [r3, #0]
24010434:	685b      	ldr	r3, [r3, #4]
24010436:	2b00      	cmp	r3, #0
24010438:	bf0c      	ite	eq
2401043a:	2301      	moveq	r3, #1
2401043c:	2300      	movne	r3, #0
2401043e:	b2db      	uxtb	r3, r3
24010440:	e008      	b.n	24010454 <I2C_DMAError+0x100>
24010442:	68bb      	ldr	r3, [r7, #8]
24010444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24010446:	681b      	ldr	r3, [r3, #0]
24010448:	685b      	ldr	r3, [r3, #4]
2401044a:	2b00      	cmp	r3, #0
2401044c:	bf0c      	ite	eq
2401044e:	2301      	moveq	r3, #1
24010450:	2300      	movne	r3, #0
24010452:	b2db      	uxtb	r3, r3
24010454:	2b00      	cmp	r3, #0
24010456:	d001      	beq.n	2401045c <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
24010458:	2301      	movs	r3, #1
2401045a:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
2401045c:	68bb      	ldr	r3, [r7, #8]
2401045e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24010460:	2b00      	cmp	r3, #0
24010462:	f000 8098 	beq.w	24010596 <I2C_DMAError+0x242>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
24010466:	68bb      	ldr	r3, [r7, #8]
24010468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2401046a:	681b      	ldr	r3, [r3, #0]
2401046c:	4a33      	ldr	r2, [pc, #204]	; (2401053c <I2C_DMAError+0x1e8>)
2401046e:	4293      	cmp	r3, r2
24010470:	d059      	beq.n	24010526 <I2C_DMAError+0x1d2>
24010472:	68bb      	ldr	r3, [r7, #8]
24010474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24010476:	681b      	ldr	r3, [r3, #0]
24010478:	4a31      	ldr	r2, [pc, #196]	; (24010540 <I2C_DMAError+0x1ec>)
2401047a:	4293      	cmp	r3, r2
2401047c:	d053      	beq.n	24010526 <I2C_DMAError+0x1d2>
2401047e:	68bb      	ldr	r3, [r7, #8]
24010480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24010482:	681b      	ldr	r3, [r3, #0]
24010484:	4a2f      	ldr	r2, [pc, #188]	; (24010544 <I2C_DMAError+0x1f0>)
24010486:	4293      	cmp	r3, r2
24010488:	d04d      	beq.n	24010526 <I2C_DMAError+0x1d2>
2401048a:	68bb      	ldr	r3, [r7, #8]
2401048c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2401048e:	681b      	ldr	r3, [r3, #0]
24010490:	4a2d      	ldr	r2, [pc, #180]	; (24010548 <I2C_DMAError+0x1f4>)
24010492:	4293      	cmp	r3, r2
24010494:	d047      	beq.n	24010526 <I2C_DMAError+0x1d2>
24010496:	68bb      	ldr	r3, [r7, #8]
24010498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2401049a:	681b      	ldr	r3, [r3, #0]
2401049c:	4a2b      	ldr	r2, [pc, #172]	; (2401054c <I2C_DMAError+0x1f8>)
2401049e:	4293      	cmp	r3, r2
240104a0:	d041      	beq.n	24010526 <I2C_DMAError+0x1d2>
240104a2:	68bb      	ldr	r3, [r7, #8]
240104a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
240104a6:	681b      	ldr	r3, [r3, #0]
240104a8:	4a29      	ldr	r2, [pc, #164]	; (24010550 <I2C_DMAError+0x1fc>)
240104aa:	4293      	cmp	r3, r2
240104ac:	d03b      	beq.n	24010526 <I2C_DMAError+0x1d2>
240104ae:	68bb      	ldr	r3, [r7, #8]
240104b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
240104b2:	681b      	ldr	r3, [r3, #0]
240104b4:	4a27      	ldr	r2, [pc, #156]	; (24010554 <I2C_DMAError+0x200>)
240104b6:	4293      	cmp	r3, r2
240104b8:	d035      	beq.n	24010526 <I2C_DMAError+0x1d2>
240104ba:	68bb      	ldr	r3, [r7, #8]
240104bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
240104be:	681b      	ldr	r3, [r3, #0]
240104c0:	4a25      	ldr	r2, [pc, #148]	; (24010558 <I2C_DMAError+0x204>)
240104c2:	4293      	cmp	r3, r2
240104c4:	d02f      	beq.n	24010526 <I2C_DMAError+0x1d2>
240104c6:	68bb      	ldr	r3, [r7, #8]
240104c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
240104ca:	681b      	ldr	r3, [r3, #0]
240104cc:	4a23      	ldr	r2, [pc, #140]	; (2401055c <I2C_DMAError+0x208>)
240104ce:	4293      	cmp	r3, r2
240104d0:	d029      	beq.n	24010526 <I2C_DMAError+0x1d2>
240104d2:	68bb      	ldr	r3, [r7, #8]
240104d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
240104d6:	681b      	ldr	r3, [r3, #0]
240104d8:	4a21      	ldr	r2, [pc, #132]	; (24010560 <I2C_DMAError+0x20c>)
240104da:	4293      	cmp	r3, r2
240104dc:	d023      	beq.n	24010526 <I2C_DMAError+0x1d2>
240104de:	68bb      	ldr	r3, [r7, #8]
240104e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
240104e2:	681b      	ldr	r3, [r3, #0]
240104e4:	4a1f      	ldr	r2, [pc, #124]	; (24010564 <I2C_DMAError+0x210>)
240104e6:	4293      	cmp	r3, r2
240104e8:	d01d      	beq.n	24010526 <I2C_DMAError+0x1d2>
240104ea:	68bb      	ldr	r3, [r7, #8]
240104ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
240104ee:	681b      	ldr	r3, [r3, #0]
240104f0:	4a1d      	ldr	r2, [pc, #116]	; (24010568 <I2C_DMAError+0x214>)
240104f2:	4293      	cmp	r3, r2
240104f4:	d017      	beq.n	24010526 <I2C_DMAError+0x1d2>
240104f6:	68bb      	ldr	r3, [r7, #8]
240104f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
240104fa:	681b      	ldr	r3, [r3, #0]
240104fc:	4a1b      	ldr	r2, [pc, #108]	; (2401056c <I2C_DMAError+0x218>)
240104fe:	4293      	cmp	r3, r2
24010500:	d011      	beq.n	24010526 <I2C_DMAError+0x1d2>
24010502:	68bb      	ldr	r3, [r7, #8]
24010504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24010506:	681b      	ldr	r3, [r3, #0]
24010508:	4a19      	ldr	r2, [pc, #100]	; (24010570 <I2C_DMAError+0x21c>)
2401050a:	4293      	cmp	r3, r2
2401050c:	d00b      	beq.n	24010526 <I2C_DMAError+0x1d2>
2401050e:	68bb      	ldr	r3, [r7, #8]
24010510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24010512:	681b      	ldr	r3, [r3, #0]
24010514:	4a17      	ldr	r2, [pc, #92]	; (24010574 <I2C_DMAError+0x220>)
24010516:	4293      	cmp	r3, r2
24010518:	d005      	beq.n	24010526 <I2C_DMAError+0x1d2>
2401051a:	68bb      	ldr	r3, [r7, #8]
2401051c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2401051e:	681b      	ldr	r3, [r3, #0]
24010520:	4a15      	ldr	r2, [pc, #84]	; (24010578 <I2C_DMAError+0x224>)
24010522:	4293      	cmp	r3, r2
24010524:	d12a      	bne.n	2401057c <I2C_DMAError+0x228>
24010526:	68bb      	ldr	r3, [r7, #8]
24010528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2401052a:	681b      	ldr	r3, [r3, #0]
2401052c:	685b      	ldr	r3, [r3, #4]
2401052e:	2b00      	cmp	r3, #0
24010530:	bf0c      	ite	eq
24010532:	2301      	moveq	r3, #1
24010534:	2300      	movne	r3, #0
24010536:	b2db      	uxtb	r3, r3
24010538:	e029      	b.n	2401058e <I2C_DMAError+0x23a>
2401053a:	bf00      	nop
2401053c:	40020010 	.word	0x40020010
24010540:	40020028 	.word	0x40020028
24010544:	40020040 	.word	0x40020040
24010548:	40020058 	.word	0x40020058
2401054c:	40020070 	.word	0x40020070
24010550:	40020088 	.word	0x40020088
24010554:	400200a0 	.word	0x400200a0
24010558:	400200b8 	.word	0x400200b8
2401055c:	40020410 	.word	0x40020410
24010560:	40020428 	.word	0x40020428
24010564:	40020440 	.word	0x40020440
24010568:	40020458 	.word	0x40020458
2401056c:	40020470 	.word	0x40020470
24010570:	40020488 	.word	0x40020488
24010574:	400204a0 	.word	0x400204a0
24010578:	400204b8 	.word	0x400204b8
2401057c:	68bb      	ldr	r3, [r7, #8]
2401057e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24010580:	681b      	ldr	r3, [r3, #0]
24010582:	685b      	ldr	r3, [r3, #4]
24010584:	2b00      	cmp	r3, #0
24010586:	bf0c      	ite	eq
24010588:	2301      	moveq	r3, #1
2401058a:	2300      	movne	r3, #0
2401058c:	b2db      	uxtb	r3, r3
2401058e:	2b00      	cmp	r3, #0
24010590:	d001      	beq.n	24010596 <I2C_DMAError+0x242>
    {
      treatdmaerror = 1U;
24010592:	2301      	movs	r3, #1
24010594:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
24010596:	6878      	ldr	r0, [r7, #4]
24010598:	f7f6 fe96 	bl	240072c8 <HAL_DMA_GetError>
2401059c:	4603      	mov	r3, r0
2401059e:	2b02      	cmp	r3, #2
240105a0:	d00e      	beq.n	240105c0 <I2C_DMAError+0x26c>
240105a2:	68fb      	ldr	r3, [r7, #12]
240105a4:	2b00      	cmp	r3, #0
240105a6:	d00b      	beq.n	240105c0 <I2C_DMAError+0x26c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
240105a8:	68bb      	ldr	r3, [r7, #8]
240105aa:	681b      	ldr	r3, [r3, #0]
240105ac:	685a      	ldr	r2, [r3, #4]
240105ae:	68bb      	ldr	r3, [r7, #8]
240105b0:	681b      	ldr	r3, [r3, #0]
240105b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
240105b6:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
240105b8:	2110      	movs	r1, #16
240105ba:	68b8      	ldr	r0, [r7, #8]
240105bc:	f7ff fc26 	bl	2400fe0c <I2C_ITError>
  }
}
240105c0:	bf00      	nop
240105c2:	3710      	adds	r7, #16
240105c4:	46bd      	mov	sp, r7
240105c6:	bd80      	pop	{r7, pc}

240105c8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
240105c8:	b580      	push	{r7, lr}
240105ca:	b084      	sub	sp, #16
240105cc:	af00      	add	r7, sp, #0
240105ce:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
240105d0:	687b      	ldr	r3, [r7, #4]
240105d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
240105d4:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
240105d6:	68fb      	ldr	r3, [r7, #12]
240105d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
240105da:	2b00      	cmp	r3, #0
240105dc:	d003      	beq.n	240105e6 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
240105de:	68fb      	ldr	r3, [r7, #12]
240105e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
240105e2:	2200      	movs	r2, #0
240105e4:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
240105e6:	68fb      	ldr	r3, [r7, #12]
240105e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
240105ea:	2b00      	cmp	r3, #0
240105ec:	d003      	beq.n	240105f6 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
240105ee:	68fb      	ldr	r3, [r7, #12]
240105f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
240105f2:	2200      	movs	r2, #0
240105f4:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
240105f6:	68f8      	ldr	r0, [r7, #12]
240105f8:	f7ff fcf8 	bl	2400ffec <I2C_TreatErrorCallback>
}
240105fc:	bf00      	nop
240105fe:	3710      	adds	r7, #16
24010600:	46bd      	mov	sp, r7
24010602:	bd80      	pop	{r7, pc}

24010604 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
24010604:	b580      	push	{r7, lr}
24010606:	b084      	sub	sp, #16
24010608:	af00      	add	r7, sp, #0
2401060a:	60f8      	str	r0, [r7, #12]
2401060c:	60b9      	str	r1, [r7, #8]
2401060e:	603b      	str	r3, [r7, #0]
24010610:	4613      	mov	r3, r2
24010612:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
24010614:	e031      	b.n	2401067a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
24010616:	683b      	ldr	r3, [r7, #0]
24010618:	f1b3 3fff 	cmp.w	r3, #4294967295
2401061c:	d02d      	beq.n	2401067a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
2401061e:	f7f2 fd41 	bl	240030a4 <HAL_GetTick>
24010622:	4602      	mov	r2, r0
24010624:	69bb      	ldr	r3, [r7, #24]
24010626:	1ad3      	subs	r3, r2, r3
24010628:	683a      	ldr	r2, [r7, #0]
2401062a:	429a      	cmp	r2, r3
2401062c:	d302      	bcc.n	24010634 <I2C_WaitOnFlagUntilTimeout+0x30>
2401062e:	683b      	ldr	r3, [r7, #0]
24010630:	2b00      	cmp	r3, #0
24010632:	d122      	bne.n	2401067a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
24010634:	68fb      	ldr	r3, [r7, #12]
24010636:	681b      	ldr	r3, [r3, #0]
24010638:	699a      	ldr	r2, [r3, #24]
2401063a:	68bb      	ldr	r3, [r7, #8]
2401063c:	4013      	ands	r3, r2
2401063e:	68ba      	ldr	r2, [r7, #8]
24010640:	429a      	cmp	r2, r3
24010642:	bf0c      	ite	eq
24010644:	2301      	moveq	r3, #1
24010646:	2300      	movne	r3, #0
24010648:	b2db      	uxtb	r3, r3
2401064a:	461a      	mov	r2, r3
2401064c:	79fb      	ldrb	r3, [r7, #7]
2401064e:	429a      	cmp	r2, r3
24010650:	d113      	bne.n	2401067a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
24010652:	68fb      	ldr	r3, [r7, #12]
24010654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24010656:	f043 0220 	orr.w	r2, r3, #32
2401065a:	68fb      	ldr	r3, [r7, #12]
2401065c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
2401065e:	68fb      	ldr	r3, [r7, #12]
24010660:	2220      	movs	r2, #32
24010662:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
24010666:	68fb      	ldr	r3, [r7, #12]
24010668:	2200      	movs	r2, #0
2401066a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
2401066e:	68fb      	ldr	r3, [r7, #12]
24010670:	2200      	movs	r2, #0
24010672:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
24010676:	2301      	movs	r3, #1
24010678:	e00f      	b.n	2401069a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
2401067a:	68fb      	ldr	r3, [r7, #12]
2401067c:	681b      	ldr	r3, [r3, #0]
2401067e:	699a      	ldr	r2, [r3, #24]
24010680:	68bb      	ldr	r3, [r7, #8]
24010682:	4013      	ands	r3, r2
24010684:	68ba      	ldr	r2, [r7, #8]
24010686:	429a      	cmp	r2, r3
24010688:	bf0c      	ite	eq
2401068a:	2301      	moveq	r3, #1
2401068c:	2300      	movne	r3, #0
2401068e:	b2db      	uxtb	r3, r3
24010690:	461a      	mov	r2, r3
24010692:	79fb      	ldrb	r3, [r7, #7]
24010694:	429a      	cmp	r2, r3
24010696:	d0be      	beq.n	24010616 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
24010698:	2300      	movs	r3, #0
}
2401069a:	4618      	mov	r0, r3
2401069c:	3710      	adds	r7, #16
2401069e:	46bd      	mov	sp, r7
240106a0:	bd80      	pop	{r7, pc}

240106a2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
240106a2:	b580      	push	{r7, lr}
240106a4:	b084      	sub	sp, #16
240106a6:	af00      	add	r7, sp, #0
240106a8:	60f8      	str	r0, [r7, #12]
240106aa:	60b9      	str	r1, [r7, #8]
240106ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
240106ae:	e033      	b.n	24010718 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
240106b0:	687a      	ldr	r2, [r7, #4]
240106b2:	68b9      	ldr	r1, [r7, #8]
240106b4:	68f8      	ldr	r0, [r7, #12]
240106b6:	f000 f901 	bl	240108bc <I2C_IsErrorOccurred>
240106ba:	4603      	mov	r3, r0
240106bc:	2b00      	cmp	r3, #0
240106be:	d001      	beq.n	240106c4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
240106c0:	2301      	movs	r3, #1
240106c2:	e031      	b.n	24010728 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
240106c4:	68bb      	ldr	r3, [r7, #8]
240106c6:	f1b3 3fff 	cmp.w	r3, #4294967295
240106ca:	d025      	beq.n	24010718 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
240106cc:	f7f2 fcea 	bl	240030a4 <HAL_GetTick>
240106d0:	4602      	mov	r2, r0
240106d2:	687b      	ldr	r3, [r7, #4]
240106d4:	1ad3      	subs	r3, r2, r3
240106d6:	68ba      	ldr	r2, [r7, #8]
240106d8:	429a      	cmp	r2, r3
240106da:	d302      	bcc.n	240106e2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
240106dc:	68bb      	ldr	r3, [r7, #8]
240106de:	2b00      	cmp	r3, #0
240106e0:	d11a      	bne.n	24010718 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
240106e2:	68fb      	ldr	r3, [r7, #12]
240106e4:	681b      	ldr	r3, [r3, #0]
240106e6:	699b      	ldr	r3, [r3, #24]
240106e8:	f003 0302 	and.w	r3, r3, #2
240106ec:	2b02      	cmp	r3, #2
240106ee:	d013      	beq.n	24010718 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
240106f0:	68fb      	ldr	r3, [r7, #12]
240106f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
240106f4:	f043 0220 	orr.w	r2, r3, #32
240106f8:	68fb      	ldr	r3, [r7, #12]
240106fa:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
240106fc:	68fb      	ldr	r3, [r7, #12]
240106fe:	2220      	movs	r2, #32
24010700:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
24010704:	68fb      	ldr	r3, [r7, #12]
24010706:	2200      	movs	r2, #0
24010708:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
2401070c:	68fb      	ldr	r3, [r7, #12]
2401070e:	2200      	movs	r2, #0
24010710:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
24010714:	2301      	movs	r3, #1
24010716:	e007      	b.n	24010728 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
24010718:	68fb      	ldr	r3, [r7, #12]
2401071a:	681b      	ldr	r3, [r3, #0]
2401071c:	699b      	ldr	r3, [r3, #24]
2401071e:	f003 0302 	and.w	r3, r3, #2
24010722:	2b02      	cmp	r3, #2
24010724:	d1c4      	bne.n	240106b0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
24010726:	2300      	movs	r3, #0
}
24010728:	4618      	mov	r0, r3
2401072a:	3710      	adds	r7, #16
2401072c:	46bd      	mov	sp, r7
2401072e:	bd80      	pop	{r7, pc}

24010730 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
24010730:	b580      	push	{r7, lr}
24010732:	b084      	sub	sp, #16
24010734:	af00      	add	r7, sp, #0
24010736:	60f8      	str	r0, [r7, #12]
24010738:	60b9      	str	r1, [r7, #8]
2401073a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
2401073c:	e02f      	b.n	2401079e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
2401073e:	687a      	ldr	r2, [r7, #4]
24010740:	68b9      	ldr	r1, [r7, #8]
24010742:	68f8      	ldr	r0, [r7, #12]
24010744:	f000 f8ba 	bl	240108bc <I2C_IsErrorOccurred>
24010748:	4603      	mov	r3, r0
2401074a:	2b00      	cmp	r3, #0
2401074c:	d001      	beq.n	24010752 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
2401074e:	2301      	movs	r3, #1
24010750:	e02d      	b.n	240107ae <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
24010752:	f7f2 fca7 	bl	240030a4 <HAL_GetTick>
24010756:	4602      	mov	r2, r0
24010758:	687b      	ldr	r3, [r7, #4]
2401075a:	1ad3      	subs	r3, r2, r3
2401075c:	68ba      	ldr	r2, [r7, #8]
2401075e:	429a      	cmp	r2, r3
24010760:	d302      	bcc.n	24010768 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
24010762:	68bb      	ldr	r3, [r7, #8]
24010764:	2b00      	cmp	r3, #0
24010766:	d11a      	bne.n	2401079e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
24010768:	68fb      	ldr	r3, [r7, #12]
2401076a:	681b      	ldr	r3, [r3, #0]
2401076c:	699b      	ldr	r3, [r3, #24]
2401076e:	f003 0320 	and.w	r3, r3, #32
24010772:	2b20      	cmp	r3, #32
24010774:	d013      	beq.n	2401079e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
24010776:	68fb      	ldr	r3, [r7, #12]
24010778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2401077a:	f043 0220 	orr.w	r2, r3, #32
2401077e:	68fb      	ldr	r3, [r7, #12]
24010780:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
24010782:	68fb      	ldr	r3, [r7, #12]
24010784:	2220      	movs	r2, #32
24010786:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
2401078a:	68fb      	ldr	r3, [r7, #12]
2401078c:	2200      	movs	r2, #0
2401078e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
24010792:	68fb      	ldr	r3, [r7, #12]
24010794:	2200      	movs	r2, #0
24010796:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
2401079a:	2301      	movs	r3, #1
2401079c:	e007      	b.n	240107ae <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
2401079e:	68fb      	ldr	r3, [r7, #12]
240107a0:	681b      	ldr	r3, [r3, #0]
240107a2:	699b      	ldr	r3, [r3, #24]
240107a4:	f003 0320 	and.w	r3, r3, #32
240107a8:	2b20      	cmp	r3, #32
240107aa:	d1c8      	bne.n	2401073e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
240107ac:	2300      	movs	r3, #0
}
240107ae:	4618      	mov	r0, r3
240107b0:	3710      	adds	r7, #16
240107b2:	46bd      	mov	sp, r7
240107b4:	bd80      	pop	{r7, pc}
	...

240107b8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
240107b8:	b580      	push	{r7, lr}
240107ba:	b084      	sub	sp, #16
240107bc:	af00      	add	r7, sp, #0
240107be:	60f8      	str	r0, [r7, #12]
240107c0:	60b9      	str	r1, [r7, #8]
240107c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
240107c4:	e06b      	b.n	2401089e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
240107c6:	687a      	ldr	r2, [r7, #4]
240107c8:	68b9      	ldr	r1, [r7, #8]
240107ca:	68f8      	ldr	r0, [r7, #12]
240107cc:	f000 f876 	bl	240108bc <I2C_IsErrorOccurred>
240107d0:	4603      	mov	r3, r0
240107d2:	2b00      	cmp	r3, #0
240107d4:	d001      	beq.n	240107da <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
240107d6:	2301      	movs	r3, #1
240107d8:	e069      	b.n	240108ae <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
240107da:	68fb      	ldr	r3, [r7, #12]
240107dc:	681b      	ldr	r3, [r3, #0]
240107de:	699b      	ldr	r3, [r3, #24]
240107e0:	f003 0320 	and.w	r3, r3, #32
240107e4:	2b20      	cmp	r3, #32
240107e6:	d138      	bne.n	2401085a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
240107e8:	68fb      	ldr	r3, [r7, #12]
240107ea:	681b      	ldr	r3, [r3, #0]
240107ec:	699b      	ldr	r3, [r3, #24]
240107ee:	f003 0304 	and.w	r3, r3, #4
240107f2:	2b04      	cmp	r3, #4
240107f4:	d105      	bne.n	24010802 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
240107f6:	68fb      	ldr	r3, [r7, #12]
240107f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
240107fa:	2b00      	cmp	r3, #0
240107fc:	d001      	beq.n	24010802 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
240107fe:	2300      	movs	r3, #0
24010800:	e055      	b.n	240108ae <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
24010802:	68fb      	ldr	r3, [r7, #12]
24010804:	681b      	ldr	r3, [r3, #0]
24010806:	699b      	ldr	r3, [r3, #24]
24010808:	f003 0310 	and.w	r3, r3, #16
2401080c:	2b10      	cmp	r3, #16
2401080e:	d107      	bne.n	24010820 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
24010810:	68fb      	ldr	r3, [r7, #12]
24010812:	681b      	ldr	r3, [r3, #0]
24010814:	2210      	movs	r2, #16
24010816:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
24010818:	68fb      	ldr	r3, [r7, #12]
2401081a:	2204      	movs	r2, #4
2401081c:	645a      	str	r2, [r3, #68]	; 0x44
2401081e:	e002      	b.n	24010826 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
24010820:	68fb      	ldr	r3, [r7, #12]
24010822:	2200      	movs	r2, #0
24010824:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
24010826:	68fb      	ldr	r3, [r7, #12]
24010828:	681b      	ldr	r3, [r3, #0]
2401082a:	2220      	movs	r2, #32
2401082c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
2401082e:	68fb      	ldr	r3, [r7, #12]
24010830:	681b      	ldr	r3, [r3, #0]
24010832:	6859      	ldr	r1, [r3, #4]
24010834:	68fb      	ldr	r3, [r7, #12]
24010836:	681a      	ldr	r2, [r3, #0]
24010838:	4b1f      	ldr	r3, [pc, #124]	; (240108b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
2401083a:	400b      	ands	r3, r1
2401083c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
2401083e:	68fb      	ldr	r3, [r7, #12]
24010840:	2220      	movs	r2, #32
24010842:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
24010846:	68fb      	ldr	r3, [r7, #12]
24010848:	2200      	movs	r2, #0
2401084a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
2401084e:	68fb      	ldr	r3, [r7, #12]
24010850:	2200      	movs	r2, #0
24010852:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
24010856:	2301      	movs	r3, #1
24010858:	e029      	b.n	240108ae <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
2401085a:	f7f2 fc23 	bl	240030a4 <HAL_GetTick>
2401085e:	4602      	mov	r2, r0
24010860:	687b      	ldr	r3, [r7, #4]
24010862:	1ad3      	subs	r3, r2, r3
24010864:	68ba      	ldr	r2, [r7, #8]
24010866:	429a      	cmp	r2, r3
24010868:	d302      	bcc.n	24010870 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
2401086a:	68bb      	ldr	r3, [r7, #8]
2401086c:	2b00      	cmp	r3, #0
2401086e:	d116      	bne.n	2401089e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
24010870:	68fb      	ldr	r3, [r7, #12]
24010872:	681b      	ldr	r3, [r3, #0]
24010874:	699b      	ldr	r3, [r3, #24]
24010876:	f003 0304 	and.w	r3, r3, #4
2401087a:	2b04      	cmp	r3, #4
2401087c:	d00f      	beq.n	2401089e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
2401087e:	68fb      	ldr	r3, [r7, #12]
24010880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24010882:	f043 0220 	orr.w	r2, r3, #32
24010886:	68fb      	ldr	r3, [r7, #12]
24010888:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
2401088a:	68fb      	ldr	r3, [r7, #12]
2401088c:	2220      	movs	r2, #32
2401088e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
24010892:	68fb      	ldr	r3, [r7, #12]
24010894:	2200      	movs	r2, #0
24010896:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
2401089a:	2301      	movs	r3, #1
2401089c:	e007      	b.n	240108ae <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
2401089e:	68fb      	ldr	r3, [r7, #12]
240108a0:	681b      	ldr	r3, [r3, #0]
240108a2:	699b      	ldr	r3, [r3, #24]
240108a4:	f003 0304 	and.w	r3, r3, #4
240108a8:	2b04      	cmp	r3, #4
240108aa:	d18c      	bne.n	240107c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
240108ac:	2300      	movs	r3, #0
}
240108ae:	4618      	mov	r0, r3
240108b0:	3710      	adds	r7, #16
240108b2:	46bd      	mov	sp, r7
240108b4:	bd80      	pop	{r7, pc}
240108b6:	bf00      	nop
240108b8:	fe00e800 	.word	0xfe00e800

240108bc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
240108bc:	b580      	push	{r7, lr}
240108be:	b08a      	sub	sp, #40	; 0x28
240108c0:	af00      	add	r7, sp, #0
240108c2:	60f8      	str	r0, [r7, #12]
240108c4:	60b9      	str	r1, [r7, #8]
240108c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
240108c8:	2300      	movs	r3, #0
240108ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
240108ce:	68fb      	ldr	r3, [r7, #12]
240108d0:	681b      	ldr	r3, [r3, #0]
240108d2:	699b      	ldr	r3, [r3, #24]
240108d4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
240108d6:	2300      	movs	r3, #0
240108d8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
240108da:	687b      	ldr	r3, [r7, #4]
240108dc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
240108de:	69bb      	ldr	r3, [r7, #24]
240108e0:	f003 0310 	and.w	r3, r3, #16
240108e4:	2b00      	cmp	r3, #0
240108e6:	d068      	beq.n	240109ba <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
240108e8:	68fb      	ldr	r3, [r7, #12]
240108ea:	681b      	ldr	r3, [r3, #0]
240108ec:	2210      	movs	r2, #16
240108ee:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
240108f0:	e049      	b.n	24010986 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
240108f2:	68bb      	ldr	r3, [r7, #8]
240108f4:	f1b3 3fff 	cmp.w	r3, #4294967295
240108f8:	d045      	beq.n	24010986 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
240108fa:	f7f2 fbd3 	bl	240030a4 <HAL_GetTick>
240108fe:	4602      	mov	r2, r0
24010900:	69fb      	ldr	r3, [r7, #28]
24010902:	1ad3      	subs	r3, r2, r3
24010904:	68ba      	ldr	r2, [r7, #8]
24010906:	429a      	cmp	r2, r3
24010908:	d302      	bcc.n	24010910 <I2C_IsErrorOccurred+0x54>
2401090a:	68bb      	ldr	r3, [r7, #8]
2401090c:	2b00      	cmp	r3, #0
2401090e:	d13a      	bne.n	24010986 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
24010910:	68fb      	ldr	r3, [r7, #12]
24010912:	681b      	ldr	r3, [r3, #0]
24010914:	685b      	ldr	r3, [r3, #4]
24010916:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
2401091a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
2401091c:	68fb      	ldr	r3, [r7, #12]
2401091e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
24010922:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
24010924:	68fb      	ldr	r3, [r7, #12]
24010926:	681b      	ldr	r3, [r3, #0]
24010928:	699b      	ldr	r3, [r3, #24]
2401092a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
2401092e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
24010932:	d121      	bne.n	24010978 <I2C_IsErrorOccurred+0xbc>
24010934:	697b      	ldr	r3, [r7, #20]
24010936:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
2401093a:	d01d      	beq.n	24010978 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
2401093c:	7cfb      	ldrb	r3, [r7, #19]
2401093e:	2b20      	cmp	r3, #32
24010940:	d01a      	beq.n	24010978 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
24010942:	68fb      	ldr	r3, [r7, #12]
24010944:	681b      	ldr	r3, [r3, #0]
24010946:	685a      	ldr	r2, [r3, #4]
24010948:	68fb      	ldr	r3, [r7, #12]
2401094a:	681b      	ldr	r3, [r3, #0]
2401094c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
24010950:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
24010952:	f7f2 fba7 	bl	240030a4 <HAL_GetTick>
24010956:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
24010958:	e00e      	b.n	24010978 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
2401095a:	f7f2 fba3 	bl	240030a4 <HAL_GetTick>
2401095e:	4602      	mov	r2, r0
24010960:	69fb      	ldr	r3, [r7, #28]
24010962:	1ad3      	subs	r3, r2, r3
24010964:	2b19      	cmp	r3, #25
24010966:	d907      	bls.n	24010978 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
24010968:	6a3b      	ldr	r3, [r7, #32]
2401096a:	f043 0320 	orr.w	r3, r3, #32
2401096e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
24010970:	2301      	movs	r3, #1
24010972:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
24010976:	e006      	b.n	24010986 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
24010978:	68fb      	ldr	r3, [r7, #12]
2401097a:	681b      	ldr	r3, [r3, #0]
2401097c:	699b      	ldr	r3, [r3, #24]
2401097e:	f003 0320 	and.w	r3, r3, #32
24010982:	2b20      	cmp	r3, #32
24010984:	d1e9      	bne.n	2401095a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
24010986:	68fb      	ldr	r3, [r7, #12]
24010988:	681b      	ldr	r3, [r3, #0]
2401098a:	699b      	ldr	r3, [r3, #24]
2401098c:	f003 0320 	and.w	r3, r3, #32
24010990:	2b20      	cmp	r3, #32
24010992:	d003      	beq.n	2401099c <I2C_IsErrorOccurred+0xe0>
24010994:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
24010998:	2b00      	cmp	r3, #0
2401099a:	d0aa      	beq.n	240108f2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
2401099c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
240109a0:	2b00      	cmp	r3, #0
240109a2:	d103      	bne.n	240109ac <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
240109a4:	68fb      	ldr	r3, [r7, #12]
240109a6:	681b      	ldr	r3, [r3, #0]
240109a8:	2220      	movs	r2, #32
240109aa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
240109ac:	6a3b      	ldr	r3, [r7, #32]
240109ae:	f043 0304 	orr.w	r3, r3, #4
240109b2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
240109b4:	2301      	movs	r3, #1
240109b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
240109ba:	68fb      	ldr	r3, [r7, #12]
240109bc:	681b      	ldr	r3, [r3, #0]
240109be:	699b      	ldr	r3, [r3, #24]
240109c0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
240109c2:	69bb      	ldr	r3, [r7, #24]
240109c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
240109c8:	2b00      	cmp	r3, #0
240109ca:	d00b      	beq.n	240109e4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
240109cc:	6a3b      	ldr	r3, [r7, #32]
240109ce:	f043 0301 	orr.w	r3, r3, #1
240109d2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
240109d4:	68fb      	ldr	r3, [r7, #12]
240109d6:	681b      	ldr	r3, [r3, #0]
240109d8:	f44f 7280 	mov.w	r2, #256	; 0x100
240109dc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
240109de:	2301      	movs	r3, #1
240109e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
240109e4:	69bb      	ldr	r3, [r7, #24]
240109e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
240109ea:	2b00      	cmp	r3, #0
240109ec:	d00b      	beq.n	24010a06 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
240109ee:	6a3b      	ldr	r3, [r7, #32]
240109f0:	f043 0308 	orr.w	r3, r3, #8
240109f4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
240109f6:	68fb      	ldr	r3, [r7, #12]
240109f8:	681b      	ldr	r3, [r3, #0]
240109fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
240109fe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
24010a00:	2301      	movs	r3, #1
24010a02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
24010a06:	69bb      	ldr	r3, [r7, #24]
24010a08:	f403 7300 	and.w	r3, r3, #512	; 0x200
24010a0c:	2b00      	cmp	r3, #0
24010a0e:	d00b      	beq.n	24010a28 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
24010a10:	6a3b      	ldr	r3, [r7, #32]
24010a12:	f043 0302 	orr.w	r3, r3, #2
24010a16:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
24010a18:	68fb      	ldr	r3, [r7, #12]
24010a1a:	681b      	ldr	r3, [r3, #0]
24010a1c:	f44f 7200 	mov.w	r2, #512	; 0x200
24010a20:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
24010a22:	2301      	movs	r3, #1
24010a24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
24010a28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
24010a2c:	2b00      	cmp	r3, #0
24010a2e:	d01c      	beq.n	24010a6a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
24010a30:	68f8      	ldr	r0, [r7, #12]
24010a32:	f7ff fb02 	bl	2401003a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
24010a36:	68fb      	ldr	r3, [r7, #12]
24010a38:	681b      	ldr	r3, [r3, #0]
24010a3a:	6859      	ldr	r1, [r3, #4]
24010a3c:	68fb      	ldr	r3, [r7, #12]
24010a3e:	681a      	ldr	r2, [r3, #0]
24010a40:	4b0d      	ldr	r3, [pc, #52]	; (24010a78 <I2C_IsErrorOccurred+0x1bc>)
24010a42:	400b      	ands	r3, r1
24010a44:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
24010a46:	68fb      	ldr	r3, [r7, #12]
24010a48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
24010a4a:	6a3b      	ldr	r3, [r7, #32]
24010a4c:	431a      	orrs	r2, r3
24010a4e:	68fb      	ldr	r3, [r7, #12]
24010a50:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
24010a52:	68fb      	ldr	r3, [r7, #12]
24010a54:	2220      	movs	r2, #32
24010a56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
24010a5a:	68fb      	ldr	r3, [r7, #12]
24010a5c:	2200      	movs	r2, #0
24010a5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
24010a62:	68fb      	ldr	r3, [r7, #12]
24010a64:	2200      	movs	r2, #0
24010a66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
24010a6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
24010a6e:	4618      	mov	r0, r3
24010a70:	3728      	adds	r7, #40	; 0x28
24010a72:	46bd      	mov	sp, r7
24010a74:	bd80      	pop	{r7, pc}
24010a76:	bf00      	nop
24010a78:	fe00e800 	.word	0xfe00e800

24010a7c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
24010a7c:	b480      	push	{r7}
24010a7e:	b087      	sub	sp, #28
24010a80:	af00      	add	r7, sp, #0
24010a82:	60f8      	str	r0, [r7, #12]
24010a84:	607b      	str	r3, [r7, #4]
24010a86:	460b      	mov	r3, r1
24010a88:	817b      	strh	r3, [r7, #10]
24010a8a:	4613      	mov	r3, r2
24010a8c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
24010a8e:	897b      	ldrh	r3, [r7, #10]
24010a90:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
24010a94:	7a7b      	ldrb	r3, [r7, #9]
24010a96:	041b      	lsls	r3, r3, #16
24010a98:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
24010a9c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
24010a9e:	687b      	ldr	r3, [r7, #4]
24010aa0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
24010aa2:	6a3b      	ldr	r3, [r7, #32]
24010aa4:	4313      	orrs	r3, r2
24010aa6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
24010aaa:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
24010aac:	68fb      	ldr	r3, [r7, #12]
24010aae:	681b      	ldr	r3, [r3, #0]
24010ab0:	685a      	ldr	r2, [r3, #4]
24010ab2:	6a3b      	ldr	r3, [r7, #32]
24010ab4:	0d5b      	lsrs	r3, r3, #21
24010ab6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
24010aba:	4b08      	ldr	r3, [pc, #32]	; (24010adc <I2C_TransferConfig+0x60>)
24010abc:	430b      	orrs	r3, r1
24010abe:	43db      	mvns	r3, r3
24010ac0:	ea02 0103 	and.w	r1, r2, r3
24010ac4:	68fb      	ldr	r3, [r7, #12]
24010ac6:	681b      	ldr	r3, [r3, #0]
24010ac8:	697a      	ldr	r2, [r7, #20]
24010aca:	430a      	orrs	r2, r1
24010acc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
24010ace:	bf00      	nop
24010ad0:	371c      	adds	r7, #28
24010ad2:	46bd      	mov	sp, r7
24010ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
24010ad8:	4770      	bx	lr
24010ada:	bf00      	nop
24010adc:	03ff63ff 	.word	0x03ff63ff

24010ae0 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
24010ae0:	b480      	push	{r7}
24010ae2:	b085      	sub	sp, #20
24010ae4:	af00      	add	r7, sp, #0
24010ae6:	6078      	str	r0, [r7, #4]
24010ae8:	460b      	mov	r3, r1
24010aea:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
24010aec:	2300      	movs	r3, #0
24010aee:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
24010af0:	687b      	ldr	r3, [r7, #4]
24010af2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24010af4:	4a2d      	ldr	r2, [pc, #180]	; (24010bac <I2C_Enable_IRQ+0xcc>)
24010af6:	4293      	cmp	r3, r2
24010af8:	d004      	beq.n	24010b04 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
24010afa:	687b      	ldr	r3, [r7, #4]
24010afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
24010afe:	4a2c      	ldr	r2, [pc, #176]	; (24010bb0 <I2C_Enable_IRQ+0xd0>)
24010b00:	4293      	cmp	r3, r2
24010b02:	d11d      	bne.n	24010b40 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
24010b04:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
24010b08:	2b00      	cmp	r3, #0
24010b0a:	da03      	bge.n	24010b14 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
24010b0c:	68fb      	ldr	r3, [r7, #12]
24010b0e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
24010b12:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
24010b14:	887b      	ldrh	r3, [r7, #2]
24010b16:	2b10      	cmp	r3, #16
24010b18:	d103      	bne.n	24010b22 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
24010b1a:	68fb      	ldr	r3, [r7, #12]
24010b1c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
24010b20:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
24010b22:	887b      	ldrh	r3, [r7, #2]
24010b24:	2b20      	cmp	r3, #32
24010b26:	d103      	bne.n	24010b30 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
24010b28:	68fb      	ldr	r3, [r7, #12]
24010b2a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
24010b2e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
24010b30:	887b      	ldrh	r3, [r7, #2]
24010b32:	2b40      	cmp	r3, #64	; 0x40
24010b34:	d12c      	bne.n	24010b90 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
24010b36:	68fb      	ldr	r3, [r7, #12]
24010b38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
24010b3c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
24010b3e:	e027      	b.n	24010b90 <I2C_Enable_IRQ+0xb0>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
24010b40:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
24010b44:	2b00      	cmp	r3, #0
24010b46:	da03      	bge.n	24010b50 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
24010b48:	68fb      	ldr	r3, [r7, #12]
24010b4a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
24010b4e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
24010b50:	887b      	ldrh	r3, [r7, #2]
24010b52:	f003 0301 	and.w	r3, r3, #1
24010b56:	2b00      	cmp	r3, #0
24010b58:	d003      	beq.n	24010b62 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
24010b5a:	68fb      	ldr	r3, [r7, #12]
24010b5c:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
24010b60:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
24010b62:	887b      	ldrh	r3, [r7, #2]
24010b64:	f003 0302 	and.w	r3, r3, #2
24010b68:	2b00      	cmp	r3, #0
24010b6a:	d003      	beq.n	24010b74 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
24010b6c:	68fb      	ldr	r3, [r7, #12]
24010b6e:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
24010b72:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
24010b74:	887b      	ldrh	r3, [r7, #2]
24010b76:	2b10      	cmp	r3, #16
24010b78:	d103      	bne.n	24010b82 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
24010b7a:	68fb      	ldr	r3, [r7, #12]
24010b7c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
24010b80:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
24010b82:	887b      	ldrh	r3, [r7, #2]
24010b84:	2b20      	cmp	r3, #32
24010b86:	d103      	bne.n	24010b90 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
24010b88:	68fb      	ldr	r3, [r7, #12]
24010b8a:	f043 0320 	orr.w	r3, r3, #32
24010b8e:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
24010b90:	687b      	ldr	r3, [r7, #4]
24010b92:	681b      	ldr	r3, [r3, #0]
24010b94:	6819      	ldr	r1, [r3, #0]
24010b96:	687b      	ldr	r3, [r7, #4]
24010b98:	681b      	ldr	r3, [r3, #0]
24010b9a:	68fa      	ldr	r2, [r7, #12]
24010b9c:	430a      	orrs	r2, r1
24010b9e:	601a      	str	r2, [r3, #0]
}
24010ba0:	bf00      	nop
24010ba2:	3714      	adds	r7, #20
24010ba4:	46bd      	mov	sp, r7
24010ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
24010baa:	4770      	bx	lr
24010bac:	2400eca1 	.word	0x2400eca1
24010bb0:	2400f0ad 	.word	0x2400f0ad

24010bb4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
24010bb4:	b480      	push	{r7}
24010bb6:	b085      	sub	sp, #20
24010bb8:	af00      	add	r7, sp, #0
24010bba:	6078      	str	r0, [r7, #4]
24010bbc:	460b      	mov	r3, r1
24010bbe:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
24010bc0:	2300      	movs	r3, #0
24010bc2:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
24010bc4:	887b      	ldrh	r3, [r7, #2]
24010bc6:	f003 0301 	and.w	r3, r3, #1
24010bca:	2b00      	cmp	r3, #0
24010bcc:	d00f      	beq.n	24010bee <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
24010bce:	68fb      	ldr	r3, [r7, #12]
24010bd0:	f043 0342 	orr.w	r3, r3, #66	; 0x42
24010bd4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24010bd6:	687b      	ldr	r3, [r7, #4]
24010bd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
24010bdc:	b2db      	uxtb	r3, r3
24010bde:	f003 0328 	and.w	r3, r3, #40	; 0x28
24010be2:	2b28      	cmp	r3, #40	; 0x28
24010be4:	d003      	beq.n	24010bee <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
24010be6:	68fb      	ldr	r3, [r7, #12]
24010be8:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
24010bec:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
24010bee:	887b      	ldrh	r3, [r7, #2]
24010bf0:	f003 0302 	and.w	r3, r3, #2
24010bf4:	2b00      	cmp	r3, #0
24010bf6:	d00f      	beq.n	24010c18 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
24010bf8:	68fb      	ldr	r3, [r7, #12]
24010bfa:	f043 0344 	orr.w	r3, r3, #68	; 0x44
24010bfe:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24010c00:	687b      	ldr	r3, [r7, #4]
24010c02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
24010c06:	b2db      	uxtb	r3, r3
24010c08:	f003 0328 	and.w	r3, r3, #40	; 0x28
24010c0c:	2b28      	cmp	r3, #40	; 0x28
24010c0e:	d003      	beq.n	24010c18 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
24010c10:	68fb      	ldr	r3, [r7, #12]
24010c12:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
24010c16:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
24010c18:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
24010c1c:	2b00      	cmp	r3, #0
24010c1e:	da03      	bge.n	24010c28 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
24010c20:	68fb      	ldr	r3, [r7, #12]
24010c22:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
24010c26:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
24010c28:	887b      	ldrh	r3, [r7, #2]
24010c2a:	2b10      	cmp	r3, #16
24010c2c:	d103      	bne.n	24010c36 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
24010c2e:	68fb      	ldr	r3, [r7, #12]
24010c30:	f043 0390 	orr.w	r3, r3, #144	; 0x90
24010c34:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
24010c36:	887b      	ldrh	r3, [r7, #2]
24010c38:	2b20      	cmp	r3, #32
24010c3a:	d103      	bne.n	24010c44 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
24010c3c:	68fb      	ldr	r3, [r7, #12]
24010c3e:	f043 0320 	orr.w	r3, r3, #32
24010c42:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
24010c44:	887b      	ldrh	r3, [r7, #2]
24010c46:	2b40      	cmp	r3, #64	; 0x40
24010c48:	d103      	bne.n	24010c52 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
24010c4a:	68fb      	ldr	r3, [r7, #12]
24010c4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
24010c50:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24010c52:	687b      	ldr	r3, [r7, #4]
24010c54:	681b      	ldr	r3, [r3, #0]
24010c56:	6819      	ldr	r1, [r3, #0]
24010c58:	68fb      	ldr	r3, [r7, #12]
24010c5a:	43da      	mvns	r2, r3
24010c5c:	687b      	ldr	r3, [r7, #4]
24010c5e:	681b      	ldr	r3, [r3, #0]
24010c60:	400a      	ands	r2, r1
24010c62:	601a      	str	r2, [r3, #0]
}
24010c64:	bf00      	nop
24010c66:	3714      	adds	r7, #20
24010c68:	46bd      	mov	sp, r7
24010c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
24010c6e:	4770      	bx	lr

24010c70 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
24010c70:	b480      	push	{r7}
24010c72:	b083      	sub	sp, #12
24010c74:	af00      	add	r7, sp, #0
24010c76:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
24010c78:	687b      	ldr	r3, [r7, #4]
24010c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24010c7c:	2baa      	cmp	r3, #170	; 0xaa
24010c7e:	d103      	bne.n	24010c88 <I2C_ConvertOtherXferOptions+0x18>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
24010c80:	687b      	ldr	r3, [r7, #4]
24010c82:	2200      	movs	r2, #0
24010c84:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
24010c86:	e008      	b.n	24010c9a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
24010c88:	687b      	ldr	r3, [r7, #4]
24010c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24010c8c:	f5b3 4f2a 	cmp.w	r3, #43520	; 0xaa00
24010c90:	d103      	bne.n	24010c9a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
24010c92:	687b      	ldr	r3, [r7, #4]
24010c94:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
24010c98:	62da      	str	r2, [r3, #44]	; 0x2c
}
24010c9a:	bf00      	nop
24010c9c:	370c      	adds	r7, #12
24010c9e:	46bd      	mov	sp, r7
24010ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
24010ca4:	4770      	bx	lr

24010ca6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
24010ca6:	b480      	push	{r7}
24010ca8:	b083      	sub	sp, #12
24010caa:	af00      	add	r7, sp, #0
24010cac:	6078      	str	r0, [r7, #4]
24010cae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
24010cb0:	687b      	ldr	r3, [r7, #4]
24010cb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
24010cb6:	b2db      	uxtb	r3, r3
24010cb8:	2b20      	cmp	r3, #32
24010cba:	d138      	bne.n	24010d2e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
24010cbc:	687b      	ldr	r3, [r7, #4]
24010cbe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
24010cc2:	2b01      	cmp	r3, #1
24010cc4:	d101      	bne.n	24010cca <HAL_I2CEx_ConfigAnalogFilter+0x24>
24010cc6:	2302      	movs	r3, #2
24010cc8:	e032      	b.n	24010d30 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
24010cca:	687b      	ldr	r3, [r7, #4]
24010ccc:	2201      	movs	r2, #1
24010cce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
24010cd2:	687b      	ldr	r3, [r7, #4]
24010cd4:	2224      	movs	r2, #36	; 0x24
24010cd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
24010cda:	687b      	ldr	r3, [r7, #4]
24010cdc:	681b      	ldr	r3, [r3, #0]
24010cde:	681a      	ldr	r2, [r3, #0]
24010ce0:	687b      	ldr	r3, [r7, #4]
24010ce2:	681b      	ldr	r3, [r3, #0]
24010ce4:	f022 0201 	bic.w	r2, r2, #1
24010ce8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
24010cea:	687b      	ldr	r3, [r7, #4]
24010cec:	681b      	ldr	r3, [r3, #0]
24010cee:	681a      	ldr	r2, [r3, #0]
24010cf0:	687b      	ldr	r3, [r7, #4]
24010cf2:	681b      	ldr	r3, [r3, #0]
24010cf4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
24010cf8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
24010cfa:	687b      	ldr	r3, [r7, #4]
24010cfc:	681b      	ldr	r3, [r3, #0]
24010cfe:	6819      	ldr	r1, [r3, #0]
24010d00:	687b      	ldr	r3, [r7, #4]
24010d02:	681b      	ldr	r3, [r3, #0]
24010d04:	683a      	ldr	r2, [r7, #0]
24010d06:	430a      	orrs	r2, r1
24010d08:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
24010d0a:	687b      	ldr	r3, [r7, #4]
24010d0c:	681b      	ldr	r3, [r3, #0]
24010d0e:	681a      	ldr	r2, [r3, #0]
24010d10:	687b      	ldr	r3, [r7, #4]
24010d12:	681b      	ldr	r3, [r3, #0]
24010d14:	f042 0201 	orr.w	r2, r2, #1
24010d18:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
24010d1a:	687b      	ldr	r3, [r7, #4]
24010d1c:	2220      	movs	r2, #32
24010d1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
24010d22:	687b      	ldr	r3, [r7, #4]
24010d24:	2200      	movs	r2, #0
24010d26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
24010d2a:	2300      	movs	r3, #0
24010d2c:	e000      	b.n	24010d30 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
24010d2e:	2302      	movs	r3, #2
  }
}
24010d30:	4618      	mov	r0, r3
24010d32:	370c      	adds	r7, #12
24010d34:	46bd      	mov	sp, r7
24010d36:	f85d 7b04 	ldr.w	r7, [sp], #4
24010d3a:	4770      	bx	lr

24010d3c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
24010d3c:	b480      	push	{r7}
24010d3e:	b085      	sub	sp, #20
24010d40:	af00      	add	r7, sp, #0
24010d42:	6078      	str	r0, [r7, #4]
24010d44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
24010d46:	687b      	ldr	r3, [r7, #4]
24010d48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
24010d4c:	b2db      	uxtb	r3, r3
24010d4e:	2b20      	cmp	r3, #32
24010d50:	d139      	bne.n	24010dc6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
24010d52:	687b      	ldr	r3, [r7, #4]
24010d54:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
24010d58:	2b01      	cmp	r3, #1
24010d5a:	d101      	bne.n	24010d60 <HAL_I2CEx_ConfigDigitalFilter+0x24>
24010d5c:	2302      	movs	r3, #2
24010d5e:	e033      	b.n	24010dc8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
24010d60:	687b      	ldr	r3, [r7, #4]
24010d62:	2201      	movs	r2, #1
24010d64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
24010d68:	687b      	ldr	r3, [r7, #4]
24010d6a:	2224      	movs	r2, #36	; 0x24
24010d6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
24010d70:	687b      	ldr	r3, [r7, #4]
24010d72:	681b      	ldr	r3, [r3, #0]
24010d74:	681a      	ldr	r2, [r3, #0]
24010d76:	687b      	ldr	r3, [r7, #4]
24010d78:	681b      	ldr	r3, [r3, #0]
24010d7a:	f022 0201 	bic.w	r2, r2, #1
24010d7e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
24010d80:	687b      	ldr	r3, [r7, #4]
24010d82:	681b      	ldr	r3, [r3, #0]
24010d84:	681b      	ldr	r3, [r3, #0]
24010d86:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
24010d88:	68fb      	ldr	r3, [r7, #12]
24010d8a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
24010d8e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
24010d90:	683b      	ldr	r3, [r7, #0]
24010d92:	021b      	lsls	r3, r3, #8
24010d94:	68fa      	ldr	r2, [r7, #12]
24010d96:	4313      	orrs	r3, r2
24010d98:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
24010d9a:	687b      	ldr	r3, [r7, #4]
24010d9c:	681b      	ldr	r3, [r3, #0]
24010d9e:	68fa      	ldr	r2, [r7, #12]
24010da0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
24010da2:	687b      	ldr	r3, [r7, #4]
24010da4:	681b      	ldr	r3, [r3, #0]
24010da6:	681a      	ldr	r2, [r3, #0]
24010da8:	687b      	ldr	r3, [r7, #4]
24010daa:	681b      	ldr	r3, [r3, #0]
24010dac:	f042 0201 	orr.w	r2, r2, #1
24010db0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
24010db2:	687b      	ldr	r3, [r7, #4]
24010db4:	2220      	movs	r2, #32
24010db6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
24010dba:	687b      	ldr	r3, [r7, #4]
24010dbc:	2200      	movs	r2, #0
24010dbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
24010dc2:	2300      	movs	r3, #0
24010dc4:	e000      	b.n	24010dc8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
24010dc6:	2302      	movs	r3, #2
  }
}
24010dc8:	4618      	mov	r0, r3
24010dca:	3714      	adds	r7, #20
24010dcc:	46bd      	mov	sp, r7
24010dce:	f85d 7b04 	ldr.w	r7, [sp], #4
24010dd2:	4770      	bx	lr

24010dd4 <HAL_I2CEx_EnableWakeUp>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2Cx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_EnableWakeUp(I2C_HandleTypeDef *hi2c)
{
24010dd4:	b480      	push	{r7}
24010dd6:	b083      	sub	sp, #12
24010dd8:	af00      	add	r7, sp, #0
24010dda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_WAKEUP_FROMSTOP_INSTANCE(hi2c->Instance));

  if (hi2c->State == HAL_I2C_STATE_READY)
24010ddc:	687b      	ldr	r3, [r7, #4]
24010dde:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
24010de2:	b2db      	uxtb	r3, r3
24010de4:	2b20      	cmp	r3, #32
24010de6:	d130      	bne.n	24010e4a <HAL_I2CEx_EnableWakeUp+0x76>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
24010de8:	687b      	ldr	r3, [r7, #4]
24010dea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
24010dee:	2b01      	cmp	r3, #1
24010df0:	d101      	bne.n	24010df6 <HAL_I2CEx_EnableWakeUp+0x22>
24010df2:	2302      	movs	r3, #2
24010df4:	e02a      	b.n	24010e4c <HAL_I2CEx_EnableWakeUp+0x78>
24010df6:	687b      	ldr	r3, [r7, #4]
24010df8:	2201      	movs	r2, #1
24010dfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
24010dfe:	687b      	ldr	r3, [r7, #4]
24010e00:	2224      	movs	r2, #36	; 0x24
24010e02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
24010e06:	687b      	ldr	r3, [r7, #4]
24010e08:	681b      	ldr	r3, [r3, #0]
24010e0a:	681a      	ldr	r2, [r3, #0]
24010e0c:	687b      	ldr	r3, [r7, #4]
24010e0e:	681b      	ldr	r3, [r3, #0]
24010e10:	f022 0201 	bic.w	r2, r2, #1
24010e14:	601a      	str	r2, [r3, #0]

    /* Enable wakeup from stop mode */
    hi2c->Instance->CR1 |= I2C_CR1_WUPEN;
24010e16:	687b      	ldr	r3, [r7, #4]
24010e18:	681b      	ldr	r3, [r3, #0]
24010e1a:	681a      	ldr	r2, [r3, #0]
24010e1c:	687b      	ldr	r3, [r7, #4]
24010e1e:	681b      	ldr	r3, [r3, #0]
24010e20:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
24010e24:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
24010e26:	687b      	ldr	r3, [r7, #4]
24010e28:	681b      	ldr	r3, [r3, #0]
24010e2a:	681a      	ldr	r2, [r3, #0]
24010e2c:	687b      	ldr	r3, [r7, #4]
24010e2e:	681b      	ldr	r3, [r3, #0]
24010e30:	f042 0201 	orr.w	r2, r2, #1
24010e34:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
24010e36:	687b      	ldr	r3, [r7, #4]
24010e38:	2220      	movs	r2, #32
24010e3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
24010e3e:	687b      	ldr	r3, [r7, #4]
24010e40:	2200      	movs	r2, #0
24010e42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
24010e46:	2300      	movs	r3, #0
24010e48:	e000      	b.n	24010e4c <HAL_I2CEx_EnableWakeUp+0x78>
  }
  else
  {
    return HAL_BUSY;
24010e4a:	2302      	movs	r3, #2
  }
}
24010e4c:	4618      	mov	r0, r3
24010e4e:	370c      	adds	r7, #12
24010e50:	46bd      	mov	sp, r7
24010e52:	f85d 7b04 	ldr.w	r7, [sp], #4
24010e56:	4770      	bx	lr

24010e58 <HAL_I2CEx_DisableWakeUp>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2Cx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_DisableWakeUp(I2C_HandleTypeDef *hi2c)
{
24010e58:	b480      	push	{r7}
24010e5a:	b083      	sub	sp, #12
24010e5c:	af00      	add	r7, sp, #0
24010e5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_WAKEUP_FROMSTOP_INSTANCE(hi2c->Instance));

  if (hi2c->State == HAL_I2C_STATE_READY)
24010e60:	687b      	ldr	r3, [r7, #4]
24010e62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
24010e66:	b2db      	uxtb	r3, r3
24010e68:	2b20      	cmp	r3, #32
24010e6a:	d130      	bne.n	24010ece <HAL_I2CEx_DisableWakeUp+0x76>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
24010e6c:	687b      	ldr	r3, [r7, #4]
24010e6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
24010e72:	2b01      	cmp	r3, #1
24010e74:	d101      	bne.n	24010e7a <HAL_I2CEx_DisableWakeUp+0x22>
24010e76:	2302      	movs	r3, #2
24010e78:	e02a      	b.n	24010ed0 <HAL_I2CEx_DisableWakeUp+0x78>
24010e7a:	687b      	ldr	r3, [r7, #4]
24010e7c:	2201      	movs	r2, #1
24010e7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
24010e82:	687b      	ldr	r3, [r7, #4]
24010e84:	2224      	movs	r2, #36	; 0x24
24010e86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
24010e8a:	687b      	ldr	r3, [r7, #4]
24010e8c:	681b      	ldr	r3, [r3, #0]
24010e8e:	681a      	ldr	r2, [r3, #0]
24010e90:	687b      	ldr	r3, [r7, #4]
24010e92:	681b      	ldr	r3, [r3, #0]
24010e94:	f022 0201 	bic.w	r2, r2, #1
24010e98:	601a      	str	r2, [r3, #0]

    /* Enable wakeup from stop mode */
    hi2c->Instance->CR1 &= ~(I2C_CR1_WUPEN);
24010e9a:	687b      	ldr	r3, [r7, #4]
24010e9c:	681b      	ldr	r3, [r3, #0]
24010e9e:	681a      	ldr	r2, [r3, #0]
24010ea0:	687b      	ldr	r3, [r7, #4]
24010ea2:	681b      	ldr	r3, [r3, #0]
24010ea4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
24010ea8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
24010eaa:	687b      	ldr	r3, [r7, #4]
24010eac:	681b      	ldr	r3, [r3, #0]
24010eae:	681a      	ldr	r2, [r3, #0]
24010eb0:	687b      	ldr	r3, [r7, #4]
24010eb2:	681b      	ldr	r3, [r3, #0]
24010eb4:	f042 0201 	orr.w	r2, r2, #1
24010eb8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
24010eba:	687b      	ldr	r3, [r7, #4]
24010ebc:	2220      	movs	r2, #32
24010ebe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
24010ec2:	687b      	ldr	r3, [r7, #4]
24010ec4:	2200      	movs	r2, #0
24010ec6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
24010eca:	2300      	movs	r3, #0
24010ecc:	e000      	b.n	24010ed0 <HAL_I2CEx_DisableWakeUp+0x78>
  }
  else
  {
    return HAL_BUSY;
24010ece:	2302      	movs	r3, #2
  }
}
24010ed0:	4618      	mov	r0, r3
24010ed2:	370c      	adds	r7, #12
24010ed4:	46bd      	mov	sp, r7
24010ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
24010eda:	4770      	bx	lr

24010edc <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
24010edc:	b480      	push	{r7}
24010ede:	b085      	sub	sp, #20
24010ee0:	af00      	add	r7, sp, #0
24010ee2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
24010ee4:	4b0d      	ldr	r3, [pc, #52]	; (24010f1c <HAL_I2CEx_EnableFastModePlus+0x40>)
24010ee6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
24010eea:	4a0c      	ldr	r2, [pc, #48]	; (24010f1c <HAL_I2CEx_EnableFastModePlus+0x40>)
24010eec:	f043 0302 	orr.w	r3, r3, #2
24010ef0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
24010ef4:	4b09      	ldr	r3, [pc, #36]	; (24010f1c <HAL_I2CEx_EnableFastModePlus+0x40>)
24010ef6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
24010efa:	f003 0302 	and.w	r3, r3, #2
24010efe:	60fb      	str	r3, [r7, #12]
24010f00:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
24010f02:	4b07      	ldr	r3, [pc, #28]	; (24010f20 <HAL_I2CEx_EnableFastModePlus+0x44>)
24010f04:	685a      	ldr	r2, [r3, #4]
24010f06:	4906      	ldr	r1, [pc, #24]	; (24010f20 <HAL_I2CEx_EnableFastModePlus+0x44>)
24010f08:	687b      	ldr	r3, [r7, #4]
24010f0a:	4313      	orrs	r3, r2
24010f0c:	604b      	str	r3, [r1, #4]
}
24010f0e:	bf00      	nop
24010f10:	3714      	adds	r7, #20
24010f12:	46bd      	mov	sp, r7
24010f14:	f85d 7b04 	ldr.w	r7, [sp], #4
24010f18:	4770      	bx	lr
24010f1a:	bf00      	nop
24010f1c:	58024400 	.word	0x58024400
24010f20:	58000400 	.word	0x58000400

24010f24 <HAL_I2CEx_DisableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be disabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_DisableFastModePlus(uint32_t ConfigFastModePlus)
{
24010f24:	b480      	push	{r7}
24010f26:	b085      	sub	sp, #20
24010f28:	af00      	add	r7, sp, #0
24010f2a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
24010f2c:	4b0d      	ldr	r3, [pc, #52]	; (24010f64 <HAL_I2CEx_DisableFastModePlus+0x40>)
24010f2e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
24010f32:	4a0c      	ldr	r2, [pc, #48]	; (24010f64 <HAL_I2CEx_DisableFastModePlus+0x40>)
24010f34:	f043 0302 	orr.w	r3, r3, #2
24010f38:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
24010f3c:	4b09      	ldr	r3, [pc, #36]	; (24010f64 <HAL_I2CEx_DisableFastModePlus+0x40>)
24010f3e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
24010f42:	f003 0302 	and.w	r3, r3, #2
24010f46:	60fb      	str	r3, [r7, #12]
24010f48:	68fb      	ldr	r3, [r7, #12]

  /* Disable fast mode plus driving capability for selected pin */
  CLEAR_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
24010f4a:	4b07      	ldr	r3, [pc, #28]	; (24010f68 <HAL_I2CEx_DisableFastModePlus+0x44>)
24010f4c:	685a      	ldr	r2, [r3, #4]
24010f4e:	687b      	ldr	r3, [r7, #4]
24010f50:	43db      	mvns	r3, r3
24010f52:	4905      	ldr	r1, [pc, #20]	; (24010f68 <HAL_I2CEx_DisableFastModePlus+0x44>)
24010f54:	4013      	ands	r3, r2
24010f56:	604b      	str	r3, [r1, #4]
}
24010f58:	bf00      	nop
24010f5a:	3714      	adds	r7, #20
24010f5c:	46bd      	mov	sp, r7
24010f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
24010f62:	4770      	bx	lr
24010f64:	58024400 	.word	0x58024400
24010f68:	58000400 	.word	0x58000400

24010f6c <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
24010f6c:	b580      	push	{r7, lr}
24010f6e:	b084      	sub	sp, #16
24010f70:	af00      	add	r7, sp, #0
24010f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
24010f74:	f7f2 f896 	bl	240030a4 <HAL_GetTick>
24010f78:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
24010f7a:	687b      	ldr	r3, [r7, #4]
24010f7c:	2b00      	cmp	r3, #0
24010f7e:	d101      	bne.n	24010f84 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
24010f80:	2301      	movs	r3, #1
24010f82:	e03b      	b.n	24010ffc <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
24010f84:	687b      	ldr	r3, [r7, #4]
24010f86:	2200      	movs	r2, #0
24010f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
24010f8c:	687b      	ldr	r3, [r7, #4]
24010f8e:	2202      	movs	r2, #2
24010f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
24010f94:	687b      	ldr	r3, [r7, #4]
24010f96:	681b      	ldr	r3, [r3, #0]
24010f98:	68da      	ldr	r2, [r3, #12]
24010f9a:	687b      	ldr	r3, [r7, #4]
24010f9c:	681b      	ldr	r3, [r3, #0]
24010f9e:	f022 0201 	bic.w	r2, r2, #1
24010fa2:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
24010fa4:	e00f      	b.n	24010fc6 <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
24010fa6:	f7f2 f87d 	bl	240030a4 <HAL_GetTick>
24010faa:	4602      	mov	r2, r0
24010fac:	68fb      	ldr	r3, [r7, #12]
24010fae:	1ad3      	subs	r3, r2, r3
24010fb0:	2b05      	cmp	r3, #5
24010fb2:	d908      	bls.n	24010fc6 <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
24010fb4:	687b      	ldr	r3, [r7, #4]
24010fb6:	2240      	movs	r2, #64	; 0x40
24010fb8:	669a      	str	r2, [r3, #104]	; 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
24010fba:	687b      	ldr	r3, [r7, #4]
24010fbc:	2203      	movs	r2, #3
24010fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      return HAL_ERROR;
24010fc2:	2301      	movs	r3, #1
24010fc4:	e01a      	b.n	24010ffc <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
24010fc6:	687b      	ldr	r3, [r7, #4]
24010fc8:	681b      	ldr	r3, [r3, #0]
24010fca:	68db      	ldr	r3, [r3, #12]
24010fcc:	f003 0301 	and.w	r3, r3, #1
24010fd0:	2b00      	cmp	r3, #0
24010fd2:	d1e8      	bne.n	24010fa6 <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
24010fd4:	6878      	ldr	r0, [r7, #4]
24010fd6:	f001 f899 	bl	2401210c <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
24010fda:	687b      	ldr	r3, [r7, #4]
24010fdc:	2200      	movs	r2, #0
24010fde:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
24010fe0:	687b      	ldr	r3, [r7, #4]
24010fe2:	2200      	movs	r2, #0
24010fe4:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
24010fe6:	687b      	ldr	r3, [r7, #4]
24010fe8:	2200      	movs	r2, #0
24010fea:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
24010fec:	687b      	ldr	r3, [r7, #4]
24010fee:	2200      	movs	r2, #0
24010ff0:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
24010ff2:	687b      	ldr	r3, [r7, #4]
24010ff4:	2201      	movs	r2, #1
24010ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
24010ffa:	2300      	movs	r3, #0
}
24010ffc:	4618      	mov	r0, r3
24010ffe:	3710      	adds	r7, #16
24011000:	46bd      	mov	sp, r7
24011002:	bd80      	pop	{r7, pc}

24011004 <HAL_MDMA_DeInit>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_DeInit(MDMA_HandleTypeDef *hmdma)
{
24011004:	b480      	push	{r7}
24011006:	b083      	sub	sp, #12
24011008:	af00      	add	r7, sp, #0
2401100a:	6078      	str	r0, [r7, #4]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
2401100c:	687b      	ldr	r3, [r7, #4]
2401100e:	2b00      	cmp	r3, #0
24011010:	d101      	bne.n	24011016 <HAL_MDMA_DeInit+0x12>
  {
    return HAL_ERROR;
24011012:	2301      	movs	r3, #1
24011014:	e048      	b.n	240110a8 <HAL_MDMA_DeInit+0xa4>
  }

  /* Disable the selected MDMA Channelx */
  __HAL_MDMA_DISABLE(hmdma);
24011016:	687b      	ldr	r3, [r7, #4]
24011018:	681b      	ldr	r3, [r3, #0]
2401101a:	68da      	ldr	r2, [r3, #12]
2401101c:	687b      	ldr	r3, [r7, #4]
2401101e:	681b      	ldr	r3, [r3, #0]
24011020:	f022 0201 	bic.w	r2, r2, #1
24011024:	60da      	str	r2, [r3, #12]

  /* Reset MDMA Channel control register */
  hmdma->Instance->CCR  = 0;
24011026:	687b      	ldr	r3, [r7, #4]
24011028:	681b      	ldr	r3, [r3, #0]
2401102a:	2200      	movs	r2, #0
2401102c:	60da      	str	r2, [r3, #12]
  hmdma->Instance->CTCR = 0;
2401102e:	687b      	ldr	r3, [r7, #4]
24011030:	681b      	ldr	r3, [r3, #0]
24011032:	2200      	movs	r2, #0
24011034:	611a      	str	r2, [r3, #16]
  hmdma->Instance->CBNDTR = 0;
24011036:	687b      	ldr	r3, [r7, #4]
24011038:	681b      	ldr	r3, [r3, #0]
2401103a:	2200      	movs	r2, #0
2401103c:	615a      	str	r2, [r3, #20]
  hmdma->Instance->CSAR = 0;
2401103e:	687b      	ldr	r3, [r7, #4]
24011040:	681b      	ldr	r3, [r3, #0]
24011042:	2200      	movs	r2, #0
24011044:	619a      	str	r2, [r3, #24]
  hmdma->Instance->CDAR = 0;
24011046:	687b      	ldr	r3, [r7, #4]
24011048:	681b      	ldr	r3, [r3, #0]
2401104a:	2200      	movs	r2, #0
2401104c:	61da      	str	r2, [r3, #28]
  hmdma->Instance->CBRUR = 0;
2401104e:	687b      	ldr	r3, [r7, #4]
24011050:	681b      	ldr	r3, [r3, #0]
24011052:	2200      	movs	r2, #0
24011054:	621a      	str	r2, [r3, #32]
  hmdma->Instance->CLAR = 0;
24011056:	687b      	ldr	r3, [r7, #4]
24011058:	681b      	ldr	r3, [r3, #0]
2401105a:	2200      	movs	r2, #0
2401105c:	625a      	str	r2, [r3, #36]	; 0x24
  hmdma->Instance->CTBR = 0;
2401105e:	687b      	ldr	r3, [r7, #4]
24011060:	681b      	ldr	r3, [r3, #0]
24011062:	2200      	movs	r2, #0
24011064:	629a      	str	r2, [r3, #40]	; 0x28
  hmdma->Instance->CMAR = 0;
24011066:	687b      	ldr	r3, [r7, #4]
24011068:	681b      	ldr	r3, [r3, #0]
2401106a:	2200      	movs	r2, #0
2401106c:	631a      	str	r2, [r3, #48]	; 0x30
  hmdma->Instance->CMDR = 0;
2401106e:	687b      	ldr	r3, [r7, #4]
24011070:	681b      	ldr	r3, [r3, #0]
24011072:	2200      	movs	r2, #0
24011074:	635a      	str	r2, [r3, #52]	; 0x34

  /* Clear all flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
24011076:	687b      	ldr	r3, [r7, #4]
24011078:	681b      	ldr	r3, [r3, #0]
2401107a:	221f      	movs	r2, #31
2401107c:	605a      	str	r2, [r3, #4]

  /* Reset the  MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
2401107e:	687b      	ldr	r3, [r7, #4]
24011080:	2200      	movs	r2, #0
24011082:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
24011084:	687b      	ldr	r3, [r7, #4]
24011086:	2200      	movs	r2, #0
24011088:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
2401108a:	687b      	ldr	r3, [r7, #4]
2401108c:	2200      	movs	r2, #0
2401108e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
24011090:	687b      	ldr	r3, [r7, #4]
24011092:	2200      	movs	r2, #0
24011094:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_RESET;
24011096:	687b      	ldr	r3, [r7, #4]
24011098:	2200      	movs	r2, #0
2401109a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
2401109e:	687b      	ldr	r3, [r7, #4]
240110a0:	2200      	movs	r2, #0
240110a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
240110a6:	2300      	movs	r3, #0
}
240110a8:	4618      	mov	r0, r3
240110aa:	370c      	adds	r7, #12
240110ac:	46bd      	mov	sp, r7
240110ae:	f85d 7b04 	ldr.w	r7, [sp], #4
240110b2:	4770      	bx	lr

240110b4 <HAL_MDMA_ConfigPostRequestMask>:
  * @param  MaskData:    specifies the value to be written to MaskAddress after a request is served.
  *                      MaskAddress and MaskData could be used to automatically clear a peripheral flag when the request is served.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_ConfigPostRequestMask(MDMA_HandleTypeDef *hmdma, uint32_t MaskAddress, uint32_t MaskData)
{
240110b4:	b480      	push	{r7}
240110b6:	b087      	sub	sp, #28
240110b8:	af00      	add	r7, sp, #0
240110ba:	60f8      	str	r0, [r7, #12]
240110bc:	60b9      	str	r1, [r7, #8]
240110be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
240110c0:	2300      	movs	r3, #0
240110c2:	75fb      	strb	r3, [r7, #23]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
240110c4:	68fb      	ldr	r3, [r7, #12]
240110c6:	2b00      	cmp	r3, #0
240110c8:	d101      	bne.n	240110ce <HAL_MDMA_ConfigPostRequestMask+0x1a>
  {
    return HAL_ERROR;
240110ca:	2301      	movs	r3, #1
240110cc:	e03e      	b.n	2401114c <HAL_MDMA_ConfigPostRequestMask+0x98>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
240110ce:	68fb      	ldr	r3, [r7, #12]
240110d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
240110d4:	2b01      	cmp	r3, #1
240110d6:	d101      	bne.n	240110dc <HAL_MDMA_ConfigPostRequestMask+0x28>
240110d8:	2302      	movs	r3, #2
240110da:	e037      	b.n	2401114c <HAL_MDMA_ConfigPostRequestMask+0x98>
240110dc:	68fb      	ldr	r3, [r7, #12]
240110de:	2201      	movs	r2, #1
240110e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
240110e4:	68fb      	ldr	r3, [r7, #12]
240110e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
240110ea:	b2db      	uxtb	r3, r3
240110ec:	2b01      	cmp	r3, #1
240110ee:	d126      	bne.n	2401113e <HAL_MDMA_ConfigPostRequestMask+0x8a>
  {
    /* if HW request set Post Request MaskAddress and MaskData,  */
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
240110f0:	68fb      	ldr	r3, [r7, #12]
240110f2:	681b      	ldr	r3, [r3, #0]
240110f4:	691b      	ldr	r3, [r3, #16]
240110f6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
240110fa:	2b00      	cmp	r3, #0
240110fc:	d11c      	bne.n	24011138 <HAL_MDMA_ConfigPostRequestMask+0x84>
    {
      /* Set the HW request clear Mask and Data */
      hmdma->Instance->CMAR = MaskAddress;
240110fe:	68fb      	ldr	r3, [r7, #12]
24011100:	681b      	ldr	r3, [r3, #0]
24011102:	68ba      	ldr	r2, [r7, #8]
24011104:	631a      	str	r2, [r3, #48]	; 0x30
      hmdma->Instance->CMDR = MaskData;
24011106:	68fb      	ldr	r3, [r7, #12]
24011108:	681b      	ldr	r3, [r3, #0]
2401110a:	687a      	ldr	r2, [r7, #4]
2401110c:	635a      	str	r2, [r3, #52]	; 0x34
      -If the request is done by SW : BWM could be set to 1 or 0.
      -If the request is done by a peripheral :
         If mask address not set (0) => BWM must be set to 0
         If mask address set (different than 0) => BWM could be set to 1 or 0
      */
      if(MaskAddress == 0U)
2401110e:	68bb      	ldr	r3, [r7, #8]
24011110:	2b00      	cmp	r3, #0
24011112:	d108      	bne.n	24011126 <HAL_MDMA_ConfigPostRequestMask+0x72>
      {
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
24011114:	68fb      	ldr	r3, [r7, #12]
24011116:	681b      	ldr	r3, [r3, #0]
24011118:	691a      	ldr	r2, [r3, #16]
2401111a:	68fb      	ldr	r3, [r7, #12]
2401111c:	681b      	ldr	r3, [r3, #0]
2401111e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
24011122:	611a      	str	r2, [r3, #16]
24011124:	e00d      	b.n	24011142 <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
      else
      {
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
24011126:	68fb      	ldr	r3, [r7, #12]
24011128:	681b      	ldr	r3, [r3, #0]
2401112a:	691a      	ldr	r2, [r3, #16]
2401112c:	68fb      	ldr	r3, [r7, #12]
2401112e:	681b      	ldr	r3, [r3, #0]
24011130:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
24011134:	611a      	str	r2, [r3, #16]
24011136:	e004      	b.n	24011142 <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
    }
    else
    {
      /* Return error status */
      status =  HAL_ERROR;
24011138:	2301      	movs	r3, #1
2401113a:	75fb      	strb	r3, [r7, #23]
2401113c:	e001      	b.n	24011142 <HAL_MDMA_ConfigPostRequestMask+0x8e>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
2401113e:	2301      	movs	r3, #1
24011140:	75fb      	strb	r3, [r7, #23]
  }
  /* Release Lock */
  __HAL_UNLOCK(hmdma);
24011142:	68fb      	ldr	r3, [r7, #12]
24011144:	2200      	movs	r2, #0
24011146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
2401114a:	7dfb      	ldrb	r3, [r7, #23]
}
2401114c:	4618      	mov	r0, r3
2401114e:	371c      	adds	r7, #28
24011150:	46bd      	mov	sp, r7
24011152:	f85d 7b04 	ldr.w	r7, [sp], #4
24011156:	4770      	bx	lr

24011158 <HAL_MDMA_RegisterCallback>:
  * @param  CallbackID:           User Callback identifier
  * @param  pCallback:            pointer to callbacsk function.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_RegisterCallback(MDMA_HandleTypeDef *hmdma, HAL_MDMA_CallbackIDTypeDef CallbackID, void (* pCallback)(MDMA_HandleTypeDef *_hmdma))
{
24011158:	b480      	push	{r7}
2401115a:	b087      	sub	sp, #28
2401115c:	af00      	add	r7, sp, #0
2401115e:	60f8      	str	r0, [r7, #12]
24011160:	460b      	mov	r3, r1
24011162:	607a      	str	r2, [r7, #4]
24011164:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
24011166:	2300      	movs	r3, #0
24011168:	75fb      	strb	r3, [r7, #23]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
2401116a:	68fb      	ldr	r3, [r7, #12]
2401116c:	2b00      	cmp	r3, #0
2401116e:	d101      	bne.n	24011174 <HAL_MDMA_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
24011170:	2301      	movs	r3, #1
24011172:	e044      	b.n	240111fe <HAL_MDMA_RegisterCallback+0xa6>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
24011174:	68fb      	ldr	r3, [r7, #12]
24011176:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
2401117a:	2b01      	cmp	r3, #1
2401117c:	d101      	bne.n	24011182 <HAL_MDMA_RegisterCallback+0x2a>
2401117e:	2302      	movs	r3, #2
24011180:	e03d      	b.n	240111fe <HAL_MDMA_RegisterCallback+0xa6>
24011182:	68fb      	ldr	r3, [r7, #12]
24011184:	2201      	movs	r2, #1
24011186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
2401118a:	68fb      	ldr	r3, [r7, #12]
2401118c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
24011190:	b2db      	uxtb	r3, r3
24011192:	2b01      	cmp	r3, #1
24011194:	d12a      	bne.n	240111ec <HAL_MDMA_RegisterCallback+0x94>
  {
    switch (CallbackID)
24011196:	7afb      	ldrb	r3, [r7, #11]
24011198:	2b05      	cmp	r3, #5
2401119a:	d82a      	bhi.n	240111f2 <HAL_MDMA_RegisterCallback+0x9a>
2401119c:	a201      	add	r2, pc, #4	; (adr r2, 240111a4 <HAL_MDMA_RegisterCallback+0x4c>)
2401119e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
240111a2:	bf00      	nop
240111a4:	240111bd 	.word	0x240111bd
240111a8:	240111c5 	.word	0x240111c5
240111ac:	240111cd 	.word	0x240111cd
240111b0:	240111d5 	.word	0x240111d5
240111b4:	240111dd 	.word	0x240111dd
240111b8:	240111e5 	.word	0x240111e5
    {
    case  HAL_MDMA_XFER_CPLT_CB_ID:
      hmdma->XferCpltCallback = pCallback;
240111bc:	68fb      	ldr	r3, [r7, #12]
240111be:	687a      	ldr	r2, [r7, #4]
240111c0:	645a      	str	r2, [r3, #68]	; 0x44
      break;
240111c2:	e017      	b.n	240111f4 <HAL_MDMA_RegisterCallback+0x9c>

    case  HAL_MDMA_XFER_BUFFERCPLT_CB_ID:
      hmdma->XferBufferCpltCallback = pCallback;
240111c4:	68fb      	ldr	r3, [r7, #12]
240111c6:	687a      	ldr	r2, [r7, #4]
240111c8:	649a      	str	r2, [r3, #72]	; 0x48
      break;
240111ca:	e013      	b.n	240111f4 <HAL_MDMA_RegisterCallback+0x9c>

    case  HAL_MDMA_XFER_BLOCKCPLT_CB_ID:
      hmdma->XferBlockCpltCallback = pCallback;
240111cc:	68fb      	ldr	r3, [r7, #12]
240111ce:	687a      	ldr	r2, [r7, #4]
240111d0:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
240111d2:	e00f      	b.n	240111f4 <HAL_MDMA_RegisterCallback+0x9c>

    case  HAL_MDMA_XFER_REPBLOCKCPLT_CB_ID:
      hmdma->XferRepeatBlockCpltCallback = pCallback;
240111d4:	68fb      	ldr	r3, [r7, #12]
240111d6:	687a      	ldr	r2, [r7, #4]
240111d8:	651a      	str	r2, [r3, #80]	; 0x50
      break;
240111da:	e00b      	b.n	240111f4 <HAL_MDMA_RegisterCallback+0x9c>

    case  HAL_MDMA_XFER_ERROR_CB_ID:
      hmdma->XferErrorCallback = pCallback;
240111dc:	68fb      	ldr	r3, [r7, #12]
240111de:	687a      	ldr	r2, [r7, #4]
240111e0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
240111e2:	e007      	b.n	240111f4 <HAL_MDMA_RegisterCallback+0x9c>

    case  HAL_MDMA_XFER_ABORT_CB_ID:
      hmdma->XferAbortCallback = pCallback;
240111e4:	68fb      	ldr	r3, [r7, #12]
240111e6:	687a      	ldr	r2, [r7, #4]
240111e8:	659a      	str	r2, [r3, #88]	; 0x58
      break;
240111ea:	e003      	b.n	240111f4 <HAL_MDMA_RegisterCallback+0x9c>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
240111ec:	2301      	movs	r3, #1
240111ee:	75fb      	strb	r3, [r7, #23]
240111f0:	e000      	b.n	240111f4 <HAL_MDMA_RegisterCallback+0x9c>
      break;
240111f2:	bf00      	nop
  }

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
240111f4:	68fb      	ldr	r3, [r7, #12]
240111f6:	2200      	movs	r2, #0
240111f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
240111fc:	7dfb      	ldrb	r3, [r7, #23]
}
240111fe:	4618      	mov	r0, r3
24011200:	371c      	adds	r7, #28
24011202:	46bd      	mov	sp, r7
24011204:	f85d 7b04 	ldr.w	r7, [sp], #4
24011208:	4770      	bx	lr
2401120a:	bf00      	nop

2401120c <HAL_MDMA_UnRegisterCallback>:
  * @param  CallbackID:           User Callback identifier
  *                               a HAL_MDMA_CallbackIDTypeDef ENUM as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_UnRegisterCallback(MDMA_HandleTypeDef *hmdma, HAL_MDMA_CallbackIDTypeDef CallbackID)
{
2401120c:	b480      	push	{r7}
2401120e:	b085      	sub	sp, #20
24011210:	af00      	add	r7, sp, #0
24011212:	6078      	str	r0, [r7, #4]
24011214:	460b      	mov	r3, r1
24011216:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
24011218:	2300      	movs	r3, #0
2401121a:	73fb      	strb	r3, [r7, #15]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
2401121c:	687b      	ldr	r3, [r7, #4]
2401121e:	2b00      	cmp	r3, #0
24011220:	d101      	bne.n	24011226 <HAL_MDMA_UnRegisterCallback+0x1a>
  {
    return HAL_ERROR;
24011222:	2301      	movs	r3, #1
24011224:	e059      	b.n	240112da <HAL_MDMA_UnRegisterCallback+0xce>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
24011226:	687b      	ldr	r3, [r7, #4]
24011228:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
2401122c:	2b01      	cmp	r3, #1
2401122e:	d101      	bne.n	24011234 <HAL_MDMA_UnRegisterCallback+0x28>
24011230:	2302      	movs	r3, #2
24011232:	e052      	b.n	240112da <HAL_MDMA_UnRegisterCallback+0xce>
24011234:	687b      	ldr	r3, [r7, #4]
24011236:	2201      	movs	r2, #1
24011238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
2401123c:	687b      	ldr	r3, [r7, #4]
2401123e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
24011242:	b2db      	uxtb	r3, r3
24011244:	2b01      	cmp	r3, #1
24011246:	d141      	bne.n	240112cc <HAL_MDMA_UnRegisterCallback+0xc0>
  {
    switch (CallbackID)
24011248:	78fb      	ldrb	r3, [r7, #3]
2401124a:	2b06      	cmp	r3, #6
2401124c:	d83b      	bhi.n	240112c6 <HAL_MDMA_UnRegisterCallback+0xba>
2401124e:	a201      	add	r2, pc, #4	; (adr r2, 24011254 <HAL_MDMA_UnRegisterCallback+0x48>)
24011250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
24011254:	24011271 	.word	0x24011271
24011258:	24011279 	.word	0x24011279
2401125c:	24011281 	.word	0x24011281
24011260:	24011289 	.word	0x24011289
24011264:	24011291 	.word	0x24011291
24011268:	24011299 	.word	0x24011299
2401126c:	240112a1 	.word	0x240112a1
    {
    case  HAL_MDMA_XFER_CPLT_CB_ID:
      hmdma->XferCpltCallback = NULL;
24011270:	687b      	ldr	r3, [r7, #4]
24011272:	2200      	movs	r2, #0
24011274:	645a      	str	r2, [r3, #68]	; 0x44
      break;
24011276:	e02b      	b.n	240112d0 <HAL_MDMA_UnRegisterCallback+0xc4>

    case  HAL_MDMA_XFER_BUFFERCPLT_CB_ID:
      hmdma->XferBufferCpltCallback = NULL;
24011278:	687b      	ldr	r3, [r7, #4]
2401127a:	2200      	movs	r2, #0
2401127c:	649a      	str	r2, [r3, #72]	; 0x48
      break;
2401127e:	e027      	b.n	240112d0 <HAL_MDMA_UnRegisterCallback+0xc4>

    case  HAL_MDMA_XFER_BLOCKCPLT_CB_ID:
      hmdma->XferBlockCpltCallback = NULL;
24011280:	687b      	ldr	r3, [r7, #4]
24011282:	2200      	movs	r2, #0
24011284:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
24011286:	e023      	b.n	240112d0 <HAL_MDMA_UnRegisterCallback+0xc4>

    case  HAL_MDMA_XFER_REPBLOCKCPLT_CB_ID:
      hmdma->XferRepeatBlockCpltCallback = NULL;
24011288:	687b      	ldr	r3, [r7, #4]
2401128a:	2200      	movs	r2, #0
2401128c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
2401128e:	e01f      	b.n	240112d0 <HAL_MDMA_UnRegisterCallback+0xc4>

    case  HAL_MDMA_XFER_ERROR_CB_ID:
      hmdma->XferErrorCallback = NULL;
24011290:	687b      	ldr	r3, [r7, #4]
24011292:	2200      	movs	r2, #0
24011294:	655a      	str	r2, [r3, #84]	; 0x54
      break;
24011296:	e01b      	b.n	240112d0 <HAL_MDMA_UnRegisterCallback+0xc4>

    case  HAL_MDMA_XFER_ABORT_CB_ID:
      hmdma->XferAbortCallback = NULL;
24011298:	687b      	ldr	r3, [r7, #4]
2401129a:	2200      	movs	r2, #0
2401129c:	659a      	str	r2, [r3, #88]	; 0x58
      break;
2401129e:	e017      	b.n	240112d0 <HAL_MDMA_UnRegisterCallback+0xc4>

    case   HAL_MDMA_XFER_ALL_CB_ID:
      hmdma->XferCpltCallback = NULL;
240112a0:	687b      	ldr	r3, [r7, #4]
240112a2:	2200      	movs	r2, #0
240112a4:	645a      	str	r2, [r3, #68]	; 0x44
      hmdma->XferBufferCpltCallback = NULL;
240112a6:	687b      	ldr	r3, [r7, #4]
240112a8:	2200      	movs	r2, #0
240112aa:	649a      	str	r2, [r3, #72]	; 0x48
      hmdma->XferBlockCpltCallback = NULL;
240112ac:	687b      	ldr	r3, [r7, #4]
240112ae:	2200      	movs	r2, #0
240112b0:	64da      	str	r2, [r3, #76]	; 0x4c
      hmdma->XferRepeatBlockCpltCallback = NULL;
240112b2:	687b      	ldr	r3, [r7, #4]
240112b4:	2200      	movs	r2, #0
240112b6:	651a      	str	r2, [r3, #80]	; 0x50
      hmdma->XferErrorCallback = NULL;
240112b8:	687b      	ldr	r3, [r7, #4]
240112ba:	2200      	movs	r2, #0
240112bc:	655a      	str	r2, [r3, #84]	; 0x54
      hmdma->XferAbortCallback = NULL;
240112be:	687b      	ldr	r3, [r7, #4]
240112c0:	2200      	movs	r2, #0
240112c2:	659a      	str	r2, [r3, #88]	; 0x58
      break;
240112c4:	e004      	b.n	240112d0 <HAL_MDMA_UnRegisterCallback+0xc4>

    default:
      status = HAL_ERROR;
240112c6:	2301      	movs	r3, #1
240112c8:	73fb      	strb	r3, [r7, #15]
      break;
240112ca:	e001      	b.n	240112d0 <HAL_MDMA_UnRegisterCallback+0xc4>
    }
  }
  else
  {
    status = HAL_ERROR;
240112cc:	2301      	movs	r3, #1
240112ce:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
240112d0:	687b      	ldr	r3, [r7, #4]
240112d2:	2200      	movs	r2, #0
240112d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
240112d8:	7bfb      	ldrb	r3, [r7, #15]
}
240112da:	4618      	mov	r0, r3
240112dc:	3714      	adds	r7, #20
240112de:	46bd      	mov	sp, r7
240112e0:	f85d 7b04 	ldr.w	r7, [sp], #4
240112e4:	4770      	bx	lr
240112e6:	bf00      	nop

240112e8 <HAL_MDMA_LinkedList_CreateNode>:
  * @param  pNodeConfig: Pointer to a MDMA_LinkNodeConfTypeDef structure that contains
  *               the configuration information for the specified MDMA Linked List Node.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_LinkedList_CreateNode(MDMA_LinkNodeTypeDef *pNode, MDMA_LinkNodeConfTypeDef *pNodeConfig)
{
240112e8:	b480      	push	{r7}
240112ea:	b085      	sub	sp, #20
240112ec:	af00      	add	r7, sp, #0
240112ee:	6078      	str	r0, [r7, #4]
240112f0:	6039      	str	r1, [r7, #0]
  uint32_t addressMask;
  uint32_t blockoffset;

  /* Check the MDMA peripheral state */
  if((pNode == NULL) || (pNodeConfig == NULL))
240112f2:	687b      	ldr	r3, [r7, #4]
240112f4:	2b00      	cmp	r3, #0
240112f6:	d002      	beq.n	240112fe <HAL_MDMA_LinkedList_CreateNode+0x16>
240112f8:	683b      	ldr	r3, [r7, #0]
240112fa:	2b00      	cmp	r3, #0
240112fc:	d101      	bne.n	24011302 <HAL_MDMA_LinkedList_CreateNode+0x1a>
  {
    return HAL_ERROR;
240112fe:	2301      	movs	r3, #1
24011300:	e0c8      	b.n	24011494 <HAL_MDMA_LinkedList_CreateNode+0x1ac>
  assert_param(IS_MDMA_TRANSFER_LENGTH(pNodeConfig->BlockDataLength));
  assert_param(IS_MDMA_BLOCK_COUNT(pNodeConfig->BlockCount));


  /* Configure next Link node Address Register to zero */
  pNode->CLAR =  0;
24011302:	687b      	ldr	r3, [r7, #4]
24011304:	2200      	movs	r2, #0
24011306:	615a      	str	r2, [r3, #20]

  /* Configure the Link Node registers*/
  pNode->CTBR   = 0;
24011308:	687b      	ldr	r3, [r7, #4]
2401130a:	2200      	movs	r2, #0
2401130c:	619a      	str	r2, [r3, #24]
  pNode->CMAR   = 0;
2401130e:	687b      	ldr	r3, [r7, #4]
24011310:	2200      	movs	r2, #0
24011312:	621a      	str	r2, [r3, #32]
  pNode->CMDR   = 0;
24011314:	687b      	ldr	r3, [r7, #4]
24011316:	2200      	movs	r2, #0
24011318:	625a      	str	r2, [r3, #36]	; 0x24
  pNode->Reserved = 0;
2401131a:	687b      	ldr	r3, [r7, #4]
2401131c:	2200      	movs	r2, #0
2401131e:	61da      	str	r2, [r3, #28]

  /* Write new CTCR Register value */
  pNode->CTCR =  pNodeConfig->Init.SourceInc | pNodeConfig->Init.DestinationInc | \
24011320:	683b      	ldr	r3, [r7, #0]
24011322:	691a      	ldr	r2, [r3, #16]
24011324:	683b      	ldr	r3, [r7, #0]
24011326:	695b      	ldr	r3, [r3, #20]
24011328:	431a      	orrs	r2, r3
    pNodeConfig->Init.SourceDataSize | pNodeConfig->Init.DestDataSize           | \
2401132a:	683b      	ldr	r3, [r7, #0]
2401132c:	699b      	ldr	r3, [r3, #24]
  pNode->CTCR =  pNodeConfig->Init.SourceInc | pNodeConfig->Init.DestinationInc | \
2401132e:	431a      	orrs	r2, r3
    pNodeConfig->Init.SourceDataSize | pNodeConfig->Init.DestDataSize           | \
24011330:	683b      	ldr	r3, [r7, #0]
24011332:	69db      	ldr	r3, [r3, #28]
24011334:	431a      	orrs	r2, r3
      pNodeConfig->Init.DataAlignment| pNodeConfig->Init.SourceBurst            | \
24011336:	683b      	ldr	r3, [r7, #0]
24011338:	6a1b      	ldr	r3, [r3, #32]
    pNodeConfig->Init.SourceDataSize | pNodeConfig->Init.DestDataSize           | \
2401133a:	431a      	orrs	r2, r3
      pNodeConfig->Init.DataAlignment| pNodeConfig->Init.SourceBurst            | \
2401133c:	683b      	ldr	r3, [r7, #0]
2401133e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24011340:	431a      	orrs	r2, r3
        pNodeConfig->Init.DestBurst                                             | \
24011342:	683b      	ldr	r3, [r7, #0]
24011344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      pNodeConfig->Init.DataAlignment| pNodeConfig->Init.SourceBurst            | \
24011346:	431a      	orrs	r2, r3
          ((pNodeConfig->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
24011348:	683b      	ldr	r3, [r7, #0]
2401134a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2401134c:	3b01      	subs	r3, #1
2401134e:	049b      	lsls	r3, r3, #18
        pNodeConfig->Init.DestBurst                                             | \
24011350:	431a      	orrs	r2, r3
            pNodeConfig->Init.TransferTriggerMode;
24011352:	683b      	ldr	r3, [r7, #0]
24011354:	685b      	ldr	r3, [r3, #4]
          ((pNodeConfig->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
24011356:	431a      	orrs	r2, r3
  pNode->CTCR =  pNodeConfig->Init.SourceInc | pNodeConfig->Init.DestinationInc | \
24011358:	687b      	ldr	r3, [r7, #4]
2401135a:	601a      	str	r2, [r3, #0]

  /* If SW request set the CTCR register to SW Request Mode*/
  if(pNodeConfig->Init.Request == MDMA_REQUEST_SW)
2401135c:	683b      	ldr	r3, [r7, #0]
2401135e:	681b      	ldr	r3, [r3, #0]
24011360:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
24011364:	d105      	bne.n	24011372 <HAL_MDMA_LinkedList_CreateNode+0x8a>
  {
    pNode->CTCR |= MDMA_CTCR_SWRM;
24011366:	687b      	ldr	r3, [r7, #4]
24011368:	681b      	ldr	r3, [r3, #0]
2401136a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
2401136e:	687b      	ldr	r3, [r7, #4]
24011370:	601a      	str	r2, [r3, #0]
  -If the request is done by SW : BWM could be set to 1 or 0.
  -If the request is done by a peripheral :
     If mask address not set (0) => BWM must be set to 0
     If mask address set (different than 0) => BWM could be set to 1 or 0
  */
  if((pNodeConfig->Init.Request == MDMA_REQUEST_SW) || (pNodeConfig->PostRequestMaskAddress != 0U))
24011372:	683b      	ldr	r3, [r7, #0]
24011374:	681b      	ldr	r3, [r3, #0]
24011376:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
2401137a:	d003      	beq.n	24011384 <HAL_MDMA_LinkedList_CreateNode+0x9c>
2401137c:	683b      	ldr	r3, [r7, #0]
2401137e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
24011380:	2b00      	cmp	r3, #0
24011382:	d005      	beq.n	24011390 <HAL_MDMA_LinkedList_CreateNode+0xa8>
  {
    pNode->CTCR |=  MDMA_CTCR_BWM;
24011384:	687b      	ldr	r3, [r7, #4]
24011386:	681b      	ldr	r3, [r3, #0]
24011388:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
2401138c:	687b      	ldr	r3, [r7, #4]
2401138e:	601a      	str	r2, [r3, #0]
  }

  /* Set the new CBNDTR Register value */
  pNode->CBNDTR = ((pNodeConfig->BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC;
24011390:	683b      	ldr	r3, [r7, #0]
24011392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24011394:	3b01      	subs	r3, #1
24011396:	051a      	lsls	r2, r3, #20
24011398:	687b      	ldr	r3, [r7, #4]
2401139a:	605a      	str	r2, [r3, #4]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(pNodeConfig->Init.SourceBlockAddressOffset < 0)
2401139c:	683b      	ldr	r3, [r7, #0]
2401139e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
240113a0:	2b00      	cmp	r3, #0
240113a2:	da0e      	bge.n	240113c2 <HAL_MDMA_LinkedList_CreateNode+0xda>
  {
    pNode->CBNDTR |= MDMA_CBNDTR_BRSUM;
240113a4:	687b      	ldr	r3, [r7, #4]
240113a6:	685b      	ldr	r3, [r3, #4]
240113a8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
240113ac:	687b      	ldr	r3, [r7, #4]
240113ae:	605a      	str	r2, [r3, #4]
    /*write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- pNodeConfig->Init.SourceBlockAddressOffset);
240113b0:	683b      	ldr	r3, [r7, #0]
240113b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
240113b4:	425b      	negs	r3, r3
240113b6:	60fb      	str	r3, [r7, #12]
    pNode->CBRUR = blockoffset & 0x0000FFFFU;
240113b8:	68fb      	ldr	r3, [r7, #12]
240113ba:	b29a      	uxth	r2, r3
240113bc:	687b      	ldr	r3, [r7, #4]
240113be:	611a      	str	r2, [r3, #16]
240113c0:	e004      	b.n	240113cc <HAL_MDMA_LinkedList_CreateNode+0xe4>
  }
  else
  {
    /*write new CBRUR Register value : source repeat block offset */
    pNode->CBRUR = (((uint32_t) pNodeConfig->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
240113c2:	683b      	ldr	r3, [r7, #0]
240113c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
240113c6:	b29a      	uxth	r2, r3
240113c8:	687b      	ldr	r3, [r7, #4]
240113ca:	611a      	str	r2, [r3, #16]
  }

  /* if block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(pNodeConfig->Init.DestBlockAddressOffset < 0)
240113cc:	683b      	ldr	r3, [r7, #0]
240113ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
240113d0:	2b00      	cmp	r3, #0
240113d2:	da11      	bge.n	240113f8 <HAL_MDMA_LinkedList_CreateNode+0x110>
  {
    pNode->CBNDTR |= MDMA_CBNDTR_BRDUM;
240113d4:	687b      	ldr	r3, [r7, #4]
240113d6:	685b      	ldr	r3, [r3, #4]
240113d8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
240113dc:	687b      	ldr	r3, [r7, #4]
240113de:	605a      	str	r2, [r3, #4]
    /*write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- pNodeConfig->Init.DestBlockAddressOffset);
240113e0:	683b      	ldr	r3, [r7, #0]
240113e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
240113e4:	425b      	negs	r3, r3
240113e6:	60fb      	str	r3, [r7, #12]
    pNode->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
240113e8:	687b      	ldr	r3, [r7, #4]
240113ea:	691a      	ldr	r2, [r3, #16]
240113ec:	68fb      	ldr	r3, [r7, #12]
240113ee:	041b      	lsls	r3, r3, #16
240113f0:	431a      	orrs	r2, r3
240113f2:	687b      	ldr	r3, [r7, #4]
240113f4:	611a      	str	r2, [r3, #16]
240113f6:	e007      	b.n	24011408 <HAL_MDMA_LinkedList_CreateNode+0x120>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    pNode->CBRUR |= ((((uint32_t)pNodeConfig->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
240113f8:	687b      	ldr	r3, [r7, #4]
240113fa:	691a      	ldr	r2, [r3, #16]
240113fc:	683b      	ldr	r3, [r7, #0]
240113fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24011400:	041b      	lsls	r3, r3, #16
24011402:	431a      	orrs	r2, r3
24011404:	687b      	ldr	r3, [r7, #4]
24011406:	611a      	str	r2, [r3, #16]
  }

  /* Configure MDMA Link Node data length */
  pNode->CBNDTR |=  pNodeConfig->BlockDataLength;
24011408:	687b      	ldr	r3, [r7, #4]
2401140a:	685a      	ldr	r2, [r3, #4]
2401140c:	683b      	ldr	r3, [r7, #0]
2401140e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24011410:	431a      	orrs	r2, r3
24011412:	687b      	ldr	r3, [r7, #4]
24011414:	605a      	str	r2, [r3, #4]

  /* Configure MDMA Link Node destination address */
  pNode->CDAR = pNodeConfig->DstAddress;
24011416:	683b      	ldr	r3, [r7, #0]
24011418:	6bda      	ldr	r2, [r3, #60]	; 0x3c
2401141a:	687b      	ldr	r3, [r7, #4]
2401141c:	60da      	str	r2, [r3, #12]

  /* Configure MDMA Link Node Source address */
  pNode->CSAR = pNodeConfig->SrcAddress;
2401141e:	683b      	ldr	r3, [r7, #0]
24011420:	6b9a      	ldr	r2, [r3, #56]	; 0x38
24011422:	687b      	ldr	r3, [r7, #4]
24011424:	609a      	str	r2, [r3, #8]

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData,  */
  if(pNodeConfig->Init.Request != MDMA_REQUEST_SW)
24011426:	683b      	ldr	r3, [r7, #0]
24011428:	681b      	ldr	r3, [r3, #0]
2401142a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
2401142e:	d00c      	beq.n	2401144a <HAL_MDMA_LinkedList_CreateNode+0x162>
  {
    /* Set the HW request in CTBR register  */
    pNode->CTBR = pNodeConfig->Init.Request & MDMA_CTBR_TSEL;
24011430:	683b      	ldr	r3, [r7, #0]
24011432:	681b      	ldr	r3, [r3, #0]
24011434:	b2da      	uxtb	r2, r3
24011436:	687b      	ldr	r3, [r7, #4]
24011438:	619a      	str	r2, [r3, #24]
    /* Set the HW request clear Mask and Data */
    pNode->CMAR = pNodeConfig->PostRequestMaskAddress;
2401143a:	683b      	ldr	r3, [r7, #0]
2401143c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
2401143e:	687b      	ldr	r3, [r7, #4]
24011440:	621a      	str	r2, [r3, #32]
    pNode->CMDR = pNodeConfig->PostRequestMaskData;
24011442:	683b      	ldr	r3, [r7, #0]
24011444:	6cda      	ldr	r2, [r3, #76]	; 0x4c
24011446:	687b      	ldr	r3, [r7, #4]
24011448:	625a      	str	r2, [r3, #36]	; 0x24
  }

  addressMask = pNodeConfig->SrcAddress & 0xFF000000U;
2401144a:	683b      	ldr	r3, [r7, #0]
2401144c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2401144e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
24011452:	60bb      	str	r3, [r7, #8]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
24011454:	68bb      	ldr	r3, [r7, #8]
24011456:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2401145a:	d002      	beq.n	24011462 <HAL_MDMA_LinkedList_CreateNode+0x17a>
2401145c:	68bb      	ldr	r3, [r7, #8]
2401145e:	2b00      	cmp	r3, #0
24011460:	d105      	bne.n	2401146e <HAL_MDMA_LinkedList_CreateNode+0x186>
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    pNode->CTBR |= MDMA_CTBR_SBUS;
24011462:	687b      	ldr	r3, [r7, #4]
24011464:	699b      	ldr	r3, [r3, #24]
24011466:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
2401146a:	687b      	ldr	r3, [r7, #4]
2401146c:	619a      	str	r2, [r3, #24]
  }

  addressMask = pNodeConfig->DstAddress & 0xFF000000U;
2401146e:	683b      	ldr	r3, [r7, #0]
24011470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24011472:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
24011476:	60bb      	str	r3, [r7, #8]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
24011478:	68bb      	ldr	r3, [r7, #8]
2401147a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2401147e:	d002      	beq.n	24011486 <HAL_MDMA_LinkedList_CreateNode+0x19e>
24011480:	68bb      	ldr	r3, [r7, #8]
24011482:	2b00      	cmp	r3, #0
24011484:	d105      	bne.n	24011492 <HAL_MDMA_LinkedList_CreateNode+0x1aa>
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    pNode->CTBR |= MDMA_CTBR_DBUS;
24011486:	687b      	ldr	r3, [r7, #4]
24011488:	699b      	ldr	r3, [r3, #24]
2401148a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
2401148e:	687b      	ldr	r3, [r7, #4]
24011490:	619a      	str	r2, [r3, #24]
  }

  return HAL_OK;
24011492:	2300      	movs	r3, #0
}
24011494:	4618      	mov	r0, r3
24011496:	3714      	adds	r7, #20
24011498:	46bd      	mov	sp, r7
2401149a:	f85d 7b04 	ldr.w	r7, [sp], #4
2401149e:	4770      	bx	lr

240114a0 <HAL_MDMA_LinkedList_AddNode>:
  *                    at the end of the list
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_LinkedList_AddNode(MDMA_HandleTypeDef *hmdma, MDMA_LinkNodeTypeDef *pNewNode, MDMA_LinkNodeTypeDef *pPrevNode)
{
240114a0:	b480      	push	{r7}
240114a2:	b089      	sub	sp, #36	; 0x24
240114a4:	af00      	add	r7, sp, #0
240114a6:	60f8      	str	r0, [r7, #12]
240114a8:	60b9      	str	r1, [r7, #8]
240114aa:	607a      	str	r2, [r7, #4]
  MDMA_LinkNodeTypeDef *pNode;
  uint32_t counter = 0, nodeInserted = 0;
240114ac:	2300      	movs	r3, #0
240114ae:	61bb      	str	r3, [r7, #24]
240114b0:	2300      	movs	r3, #0
240114b2:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef hal_status = HAL_OK;
240114b4:	2300      	movs	r3, #0
240114b6:	74fb      	strb	r3, [r7, #19]

  /* Check the MDMA peripheral handle */
  if((hmdma == NULL) || (pNewNode == NULL))
240114b8:	68fb      	ldr	r3, [r7, #12]
240114ba:	2b00      	cmp	r3, #0
240114bc:	d002      	beq.n	240114c4 <HAL_MDMA_LinkedList_AddNode+0x24>
240114be:	68bb      	ldr	r3, [r7, #8]
240114c0:	2b00      	cmp	r3, #0
240114c2:	d101      	bne.n	240114c8 <HAL_MDMA_LinkedList_AddNode+0x28>
  {
    return HAL_ERROR;
240114c4:	2301      	movs	r3, #1
240114c6:	e0a9      	b.n	2401161c <HAL_MDMA_LinkedList_AddNode+0x17c>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
240114c8:	68fb      	ldr	r3, [r7, #12]
240114ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
240114ce:	2b01      	cmp	r3, #1
240114d0:	d101      	bne.n	240114d6 <HAL_MDMA_LinkedList_AddNode+0x36>
240114d2:	2302      	movs	r3, #2
240114d4:	e0a2      	b.n	2401161c <HAL_MDMA_LinkedList_AddNode+0x17c>
240114d6:	68fb      	ldr	r3, [r7, #12]
240114d8:	2201      	movs	r2, #1
240114da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
240114de:	68fb      	ldr	r3, [r7, #12]
240114e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
240114e4:	b2db      	uxtb	r3, r3
240114e6:	2b01      	cmp	r3, #1
240114e8:	f040 8093 	bne.w	24011612 <HAL_MDMA_LinkedList_AddNode+0x172>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
240114ec:	68fb      	ldr	r3, [r7, #12]
240114ee:	2202      	movs	r2, #2
240114f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if this is the first node (after the Inititlization node) */
    if((uint32_t)hmdma->FirstLinkedListNodeAddress == 0U)
240114f4:	68fb      	ldr	r3, [r7, #12]
240114f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
240114f8:	2b00      	cmp	r3, #0
240114fa:	d116      	bne.n	2401152a <HAL_MDMA_LinkedList_AddNode+0x8a>
    {
      if(pPrevNode == NULL)
240114fc:	687b      	ldr	r3, [r7, #4]
240114fe:	2b00      	cmp	r3, #0
24011500:	d110      	bne.n	24011524 <HAL_MDMA_LinkedList_AddNode+0x84>
      {
        /* if this is the first node after the initialization
        connect this node to the node 0 by updating
        the MDMA channel CLAR register to this node address */
        hmdma->Instance->CLAR = (uint32_t)pNewNode;
24011502:	68fb      	ldr	r3, [r7, #12]
24011504:	681b      	ldr	r3, [r3, #0]
24011506:	68ba      	ldr	r2, [r7, #8]
24011508:	625a      	str	r2, [r3, #36]	; 0x24
        /* Set the MDMA handle First linked List node*/
        hmdma->FirstLinkedListNodeAddress = pNewNode;
2401150a:	68fb      	ldr	r3, [r7, #12]
2401150c:	68ba      	ldr	r2, [r7, #8]
2401150e:	65da      	str	r2, [r3, #92]	; 0x5c

        /*reset New node link */
        pNewNode->CLAR = 0;
24011510:	68bb      	ldr	r3, [r7, #8]
24011512:	2200      	movs	r2, #0
24011514:	615a      	str	r2, [r3, #20]

        /* Update the Handle last node address */
        hmdma->LastLinkedListNodeAddress = pNewNode;
24011516:	68fb      	ldr	r3, [r7, #12]
24011518:	68ba      	ldr	r2, [r7, #8]
2401151a:	661a      	str	r2, [r3, #96]	; 0x60

        hmdma->LinkedListNodeCounter = 1;
2401151c:	68fb      	ldr	r3, [r7, #12]
2401151e:	2201      	movs	r2, #1
24011520:	665a      	str	r2, [r3, #100]	; 0x64
24011522:	e06c      	b.n	240115fe <HAL_MDMA_LinkedList_AddNode+0x15e>
      }
      else
      {
        hal_status = HAL_ERROR;
24011524:	2301      	movs	r3, #1
24011526:	74fb      	strb	r3, [r7, #19]
24011528:	e069      	b.n	240115fe <HAL_MDMA_LinkedList_AddNode+0x15e>
      }
    }
    else if(hmdma->FirstLinkedListNodeAddress != pNewNode)
2401152a:	68fb      	ldr	r3, [r7, #12]
2401152c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2401152e:	68ba      	ldr	r2, [r7, #8]
24011530:	429a      	cmp	r2, r3
24011532:	d062      	beq.n	240115fa <HAL_MDMA_LinkedList_AddNode+0x15a>
    {
      /* Check if the node to insert already exists*/
      pNode = hmdma->FirstLinkedListNodeAddress;
24011534:	68fb      	ldr	r3, [r7, #12]
24011536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24011538:	61fb      	str	r3, [r7, #28]
      while((counter < hmdma->LinkedListNodeCounter) && (hal_status == HAL_OK))
2401153a:	e00c      	b.n	24011556 <HAL_MDMA_LinkedList_AddNode+0xb6>
      {
        if(pNode->CLAR == (uint32_t)pNewNode)
2401153c:	69fb      	ldr	r3, [r7, #28]
2401153e:	695a      	ldr	r2, [r3, #20]
24011540:	68bb      	ldr	r3, [r7, #8]
24011542:	429a      	cmp	r2, r3
24011544:	d101      	bne.n	2401154a <HAL_MDMA_LinkedList_AddNode+0xaa>
        {
          hal_status = HAL_ERROR; /* error this node already exist in the linked list and it is not first node */
24011546:	2301      	movs	r3, #1
24011548:	74fb      	strb	r3, [r7, #19]
        }
        pNode = (MDMA_LinkNodeTypeDef *)pNode->CLAR;
2401154a:	69fb      	ldr	r3, [r7, #28]
2401154c:	695b      	ldr	r3, [r3, #20]
2401154e:	61fb      	str	r3, [r7, #28]
        counter++;
24011550:	69bb      	ldr	r3, [r7, #24]
24011552:	3301      	adds	r3, #1
24011554:	61bb      	str	r3, [r7, #24]
      while((counter < hmdma->LinkedListNodeCounter) && (hal_status == HAL_OK))
24011556:	68fb      	ldr	r3, [r7, #12]
24011558:	6e5b      	ldr	r3, [r3, #100]	; 0x64
2401155a:	69ba      	ldr	r2, [r7, #24]
2401155c:	429a      	cmp	r2, r3
2401155e:	d202      	bcs.n	24011566 <HAL_MDMA_LinkedList_AddNode+0xc6>
24011560:	7cfb      	ldrb	r3, [r7, #19]
24011562:	2b00      	cmp	r3, #0
24011564:	d0ea      	beq.n	2401153c <HAL_MDMA_LinkedList_AddNode+0x9c>
      }

      if(hal_status == HAL_OK)
24011566:	7cfb      	ldrb	r3, [r7, #19]
24011568:	2b00      	cmp	r3, #0
2401156a:	d148      	bne.n	240115fe <HAL_MDMA_LinkedList_AddNode+0x15e>
      {
        /* Check if the previous node is the last one in the current list or zero */
        if((pPrevNode == hmdma->LastLinkedListNodeAddress) || (pPrevNode == NULL))
2401156c:	68fb      	ldr	r3, [r7, #12]
2401156e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24011570:	687a      	ldr	r2, [r7, #4]
24011572:	429a      	cmp	r2, r3
24011574:	d002      	beq.n	2401157c <HAL_MDMA_LinkedList_AddNode+0xdc>
24011576:	687b      	ldr	r3, [r7, #4]
24011578:	2b00      	cmp	r3, #0
2401157a:	d111      	bne.n	240115a0 <HAL_MDMA_LinkedList_AddNode+0x100>
        {
          /* insert the new node at the end of the list */
          pNewNode->CLAR = hmdma->LastLinkedListNodeAddress->CLAR;
2401157c:	68fb      	ldr	r3, [r7, #12]
2401157e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24011580:	695a      	ldr	r2, [r3, #20]
24011582:	68bb      	ldr	r3, [r7, #8]
24011584:	615a      	str	r2, [r3, #20]
          hmdma->LastLinkedListNodeAddress->CLAR = (uint32_t)pNewNode;
24011586:	68fb      	ldr	r3, [r7, #12]
24011588:	6e1b      	ldr	r3, [r3, #96]	; 0x60
2401158a:	68ba      	ldr	r2, [r7, #8]
2401158c:	615a      	str	r2, [r3, #20]
          /* Update the Handle last node address */
          hmdma->LastLinkedListNodeAddress = pNewNode;
2401158e:	68fb      	ldr	r3, [r7, #12]
24011590:	68ba      	ldr	r2, [r7, #8]
24011592:	661a      	str	r2, [r3, #96]	; 0x60
          /* Increment the linked list node counter */
          hmdma->LinkedListNodeCounter++;
24011594:	68fb      	ldr	r3, [r7, #12]
24011596:	6e5b      	ldr	r3, [r3, #100]	; 0x64
24011598:	1c5a      	adds	r2, r3, #1
2401159a:	68fb      	ldr	r3, [r7, #12]
2401159c:	665a      	str	r2, [r3, #100]	; 0x64
2401159e:	e02e      	b.n	240115fe <HAL_MDMA_LinkedList_AddNode+0x15e>
        }
        else
        {
          /*insert the new node after the pPreviousNode node */
          pNode = hmdma->FirstLinkedListNodeAddress;
240115a0:	68fb      	ldr	r3, [r7, #12]
240115a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
240115a4:	61fb      	str	r3, [r7, #28]
          counter = 0;
240115a6:	2300      	movs	r3, #0
240115a8:	61bb      	str	r3, [r7, #24]
          while((counter < hmdma->LinkedListNodeCounter) && (nodeInserted == 0U))
240115aa:	e018      	b.n	240115de <HAL_MDMA_LinkedList_AddNode+0x13e>
          {
            counter++;
240115ac:	69bb      	ldr	r3, [r7, #24]
240115ae:	3301      	adds	r3, #1
240115b0:	61bb      	str	r3, [r7, #24]
            if(pNode == pPrevNode)
240115b2:	69fa      	ldr	r2, [r7, #28]
240115b4:	687b      	ldr	r3, [r7, #4]
240115b6:	429a      	cmp	r2, r3
240115b8:	d10e      	bne.n	240115d8 <HAL_MDMA_LinkedList_AddNode+0x138>
            {
              /*Insert the new node after the previous one */
              pNewNode->CLAR = pNode->CLAR;
240115ba:	69fb      	ldr	r3, [r7, #28]
240115bc:	695a      	ldr	r2, [r3, #20]
240115be:	68bb      	ldr	r3, [r7, #8]
240115c0:	615a      	str	r2, [r3, #20]
              pNode->CLAR = (uint32_t)pNewNode;
240115c2:	68ba      	ldr	r2, [r7, #8]
240115c4:	69fb      	ldr	r3, [r7, #28]
240115c6:	615a      	str	r2, [r3, #20]
              /* Increment the linked list node counter */
              hmdma->LinkedListNodeCounter++;
240115c8:	68fb      	ldr	r3, [r7, #12]
240115ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
240115cc:	1c5a      	adds	r2, r3, #1
240115ce:	68fb      	ldr	r3, [r7, #12]
240115d0:	665a      	str	r2, [r3, #100]	; 0x64
              nodeInserted = 1;
240115d2:	2301      	movs	r3, #1
240115d4:	617b      	str	r3, [r7, #20]
240115d6:	e002      	b.n	240115de <HAL_MDMA_LinkedList_AddNode+0x13e>
            }
            else
            {
              pNode = (MDMA_LinkNodeTypeDef *)pNode->CLAR;
240115d8:	69fb      	ldr	r3, [r7, #28]
240115da:	695b      	ldr	r3, [r3, #20]
240115dc:	61fb      	str	r3, [r7, #28]
          while((counter < hmdma->LinkedListNodeCounter) && (nodeInserted == 0U))
240115de:	68fb      	ldr	r3, [r7, #12]
240115e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
240115e2:	69ba      	ldr	r2, [r7, #24]
240115e4:	429a      	cmp	r2, r3
240115e6:	d202      	bcs.n	240115ee <HAL_MDMA_LinkedList_AddNode+0x14e>
240115e8:	697b      	ldr	r3, [r7, #20]
240115ea:	2b00      	cmp	r3, #0
240115ec:	d0de      	beq.n	240115ac <HAL_MDMA_LinkedList_AddNode+0x10c>
            }
          }

          if(nodeInserted == 0U)
240115ee:	697b      	ldr	r3, [r7, #20]
240115f0:	2b00      	cmp	r3, #0
240115f2:	d104      	bne.n	240115fe <HAL_MDMA_LinkedList_AddNode+0x15e>
          {
            hal_status = HAL_ERROR;
240115f4:	2301      	movs	r3, #1
240115f6:	74fb      	strb	r3, [r7, #19]
240115f8:	e001      	b.n	240115fe <HAL_MDMA_LinkedList_AddNode+0x15e>
        }
      }
    }
    else
    {
      hal_status = HAL_ERROR;
240115fa:	2301      	movs	r3, #1
240115fc:	74fb      	strb	r3, [r7, #19]
    }

    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
240115fe:	68fb      	ldr	r3, [r7, #12]
24011600:	2200      	movs	r2, #0
24011602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    hmdma->State = HAL_MDMA_STATE_READY;
24011606:	68fb      	ldr	r3, [r7, #12]
24011608:	2201      	movs	r2, #1
2401160a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return hal_status;
2401160e:	7cfb      	ldrb	r3, [r7, #19]
24011610:	e004      	b.n	2401161c <HAL_MDMA_LinkedList_AddNode+0x17c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
24011612:	68fb      	ldr	r3, [r7, #12]
24011614:	2200      	movs	r2, #0
24011616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Return error status */
    return HAL_BUSY;
2401161a:	2302      	movs	r3, #2
  }
}
2401161c:	4618      	mov	r0, r3
2401161e:	3724      	adds	r7, #36	; 0x24
24011620:	46bd      	mov	sp, r7
24011622:	f85d 7b04 	ldr.w	r7, [sp], #4
24011626:	4770      	bx	lr

24011628 <HAL_MDMA_LinkedList_RemoveNode>:
  *                 to be removed from the list.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_LinkedList_RemoveNode(MDMA_HandleTypeDef *hmdma, MDMA_LinkNodeTypeDef *pNode)
{
24011628:	b480      	push	{r7}
2401162a:	b087      	sub	sp, #28
2401162c:	af00      	add	r7, sp, #0
2401162e:	6078      	str	r0, [r7, #4]
24011630:	6039      	str	r1, [r7, #0]
  MDMA_LinkNodeTypeDef *ptmpNode;
  uint32_t counter = 0, nodeDeleted = 0;
24011632:	2300      	movs	r3, #0
24011634:	613b      	str	r3, [r7, #16]
24011636:	2300      	movs	r3, #0
24011638:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef hal_status = HAL_OK;
2401163a:	2300      	movs	r3, #0
2401163c:	72fb      	strb	r3, [r7, #11]

  /* Check the MDMA peripheral handle */
  if((hmdma == NULL) || (pNode == NULL))
2401163e:	687b      	ldr	r3, [r7, #4]
24011640:	2b00      	cmp	r3, #0
24011642:	d002      	beq.n	2401164a <HAL_MDMA_LinkedList_RemoveNode+0x22>
24011644:	683b      	ldr	r3, [r7, #0]
24011646:	2b00      	cmp	r3, #0
24011648:	d101      	bne.n	2401164e <HAL_MDMA_LinkedList_RemoveNode+0x26>
  {
    return HAL_ERROR;
2401164a:	2301      	movs	r3, #1
2401164c:	e099      	b.n	24011782 <HAL_MDMA_LinkedList_RemoveNode+0x15a>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
2401164e:	687b      	ldr	r3, [r7, #4]
24011650:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
24011654:	2b01      	cmp	r3, #1
24011656:	d101      	bne.n	2401165c <HAL_MDMA_LinkedList_RemoveNode+0x34>
24011658:	2302      	movs	r3, #2
2401165a:	e092      	b.n	24011782 <HAL_MDMA_LinkedList_RemoveNode+0x15a>
2401165c:	687b      	ldr	r3, [r7, #4]
2401165e:	2201      	movs	r2, #1
24011660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
24011664:	687b      	ldr	r3, [r7, #4]
24011666:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
2401166a:	b2db      	uxtb	r3, r3
2401166c:	2b01      	cmp	r3, #1
2401166e:	f040 8083 	bne.w	24011778 <HAL_MDMA_LinkedList_RemoveNode+0x150>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
24011672:	687b      	ldr	r3, [r7, #4]
24011674:	2202      	movs	r2, #2
24011676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* If first and last node are null (no nodes in the list) : return error*/
    if(((uint32_t)hmdma->FirstLinkedListNodeAddress == 0U) || ((uint32_t)hmdma->LastLinkedListNodeAddress == 0U) || (hmdma->LinkedListNodeCounter == 0U))
2401167a:	687b      	ldr	r3, [r7, #4]
2401167c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2401167e:	2b00      	cmp	r3, #0
24011680:	d007      	beq.n	24011692 <HAL_MDMA_LinkedList_RemoveNode+0x6a>
24011682:	687b      	ldr	r3, [r7, #4]
24011684:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24011686:	2b00      	cmp	r3, #0
24011688:	d003      	beq.n	24011692 <HAL_MDMA_LinkedList_RemoveNode+0x6a>
2401168a:	687b      	ldr	r3, [r7, #4]
2401168c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
2401168e:	2b00      	cmp	r3, #0
24011690:	d102      	bne.n	24011698 <HAL_MDMA_LinkedList_RemoveNode+0x70>
    {
      hal_status = HAL_ERROR;
24011692:	2301      	movs	r3, #1
24011694:	72fb      	strb	r3, [r7, #11]
24011696:	e065      	b.n	24011764 <HAL_MDMA_LinkedList_RemoveNode+0x13c>
    }
    else if(hmdma->FirstLinkedListNodeAddress == pNode) /* Deleting first node */
24011698:	687b      	ldr	r3, [r7, #4]
2401169a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2401169c:	683a      	ldr	r2, [r7, #0]
2401169e:	429a      	cmp	r2, r3
240116a0:	d130      	bne.n	24011704 <HAL_MDMA_LinkedList_RemoveNode+0xdc>
    {
      /* Delete 1st node */
      if(hmdma->LastLinkedListNodeAddress == pNode)
240116a2:	687b      	ldr	r3, [r7, #4]
240116a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
240116a6:	683a      	ldr	r2, [r7, #0]
240116a8:	429a      	cmp	r2, r3
240116aa:	d10d      	bne.n	240116c8 <HAL_MDMA_LinkedList_RemoveNode+0xa0>
      {
        /*if the last node is at the same time the first one (1 single node after the init node 0)
        then update the last node too */

        hmdma->FirstLinkedListNodeAddress = 0;
240116ac:	687b      	ldr	r3, [r7, #4]
240116ae:	2200      	movs	r2, #0
240116b0:	65da      	str	r2, [r3, #92]	; 0x5c
        hmdma->LastLinkedListNodeAddress  = 0;
240116b2:	687b      	ldr	r3, [r7, #4]
240116b4:	2200      	movs	r2, #0
240116b6:	661a      	str	r2, [r3, #96]	; 0x60
        hmdma->LinkedListNodeCounter = 0;
240116b8:	687b      	ldr	r3, [r7, #4]
240116ba:	2200      	movs	r2, #0
240116bc:	665a      	str	r2, [r3, #100]	; 0x64

        hmdma->Instance->CLAR = 0;
240116be:	687b      	ldr	r3, [r7, #4]
240116c0:	681b      	ldr	r3, [r3, #0]
240116c2:	2200      	movs	r2, #0
240116c4:	625a      	str	r2, [r3, #36]	; 0x24
240116c6:	e04d      	b.n	24011764 <HAL_MDMA_LinkedList_RemoveNode+0x13c>
      }
      else
      {
        if((uint32_t)hmdma->FirstLinkedListNodeAddress == hmdma->LastLinkedListNodeAddress->CLAR)
240116c8:	687b      	ldr	r3, [r7, #4]
240116ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
240116cc:	461a      	mov	r2, r3
240116ce:	687b      	ldr	r3, [r7, #4]
240116d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
240116d2:	695b      	ldr	r3, [r3, #20]
240116d4:	429a      	cmp	r2, r3
240116d6:	d104      	bne.n	240116e2 <HAL_MDMA_LinkedList_RemoveNode+0xba>
        {
          /* if last node is looping to first (circular list) one update the last node connection */
          hmdma->LastLinkedListNodeAddress->CLAR = pNode->CLAR;
240116d8:	687b      	ldr	r3, [r7, #4]
240116da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
240116dc:	683a      	ldr	r2, [r7, #0]
240116de:	6952      	ldr	r2, [r2, #20]
240116e0:	615a      	str	r2, [r3, #20]
        }

        /* if deleting the first node after the initialization
        connect the next node to the node 0 by updating
        the MDMA channel CLAR register to this node address */
        hmdma->Instance->CLAR = pNode->CLAR;
240116e2:	687b      	ldr	r3, [r7, #4]
240116e4:	681b      	ldr	r3, [r3, #0]
240116e6:	683a      	ldr	r2, [r7, #0]
240116e8:	6952      	ldr	r2, [r2, #20]
240116ea:	625a      	str	r2, [r3, #36]	; 0x24
        hmdma->FirstLinkedListNodeAddress = (MDMA_LinkNodeTypeDef *)hmdma->Instance->CLAR;
240116ec:	687b      	ldr	r3, [r7, #4]
240116ee:	681b      	ldr	r3, [r3, #0]
240116f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
240116f2:	461a      	mov	r2, r3
240116f4:	687b      	ldr	r3, [r7, #4]
240116f6:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Update the Handle node counter */
        hmdma->LinkedListNodeCounter--;
240116f8:	687b      	ldr	r3, [r7, #4]
240116fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
240116fc:	1e5a      	subs	r2, r3, #1
240116fe:	687b      	ldr	r3, [r7, #4]
24011700:	665a      	str	r2, [r3, #100]	; 0x64
24011702:	e02f      	b.n	24011764 <HAL_MDMA_LinkedList_RemoveNode+0x13c>
      }
    }
    else /* Deleting any other node */
    {
      /*Deleted node is not the first one : find it  */
      ptmpNode = hmdma->FirstLinkedListNodeAddress;
24011704:	687b      	ldr	r3, [r7, #4]
24011706:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24011708:	617b      	str	r3, [r7, #20]
      while((counter < hmdma->LinkedListNodeCounter) && (nodeDeleted == 0U))
2401170a:	e01e      	b.n	2401174a <HAL_MDMA_LinkedList_RemoveNode+0x122>
      {
        counter++;
2401170c:	693b      	ldr	r3, [r7, #16]
2401170e:	3301      	adds	r3, #1
24011710:	613b      	str	r3, [r7, #16]
        if(ptmpNode->CLAR == ((uint32_t)pNode))
24011712:	697b      	ldr	r3, [r7, #20]
24011714:	695a      	ldr	r2, [r3, #20]
24011716:	683b      	ldr	r3, [r7, #0]
24011718:	429a      	cmp	r2, r3
2401171a:	d113      	bne.n	24011744 <HAL_MDMA_LinkedList_RemoveNode+0x11c>
        {
          /* if deleting the last node */
          if(pNode == hmdma->LastLinkedListNodeAddress)
2401171c:	687b      	ldr	r3, [r7, #4]
2401171e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24011720:	683a      	ldr	r2, [r7, #0]
24011722:	429a      	cmp	r2, r3
24011724:	d102      	bne.n	2401172c <HAL_MDMA_LinkedList_RemoveNode+0x104>
          {
            /*Update the linked list last node address in the handle*/
            hmdma->LastLinkedListNodeAddress = ptmpNode;
24011726:	687b      	ldr	r3, [r7, #4]
24011728:	697a      	ldr	r2, [r7, #20]
2401172a:	661a      	str	r2, [r3, #96]	; 0x60
          }
          /* update the next node link after deleting pMDMA_LinkedListNode */
          ptmpNode->CLAR = pNode->CLAR;
2401172c:	683b      	ldr	r3, [r7, #0]
2401172e:	695a      	ldr	r2, [r3, #20]
24011730:	697b      	ldr	r3, [r7, #20]
24011732:	615a      	str	r2, [r3, #20]
          nodeDeleted = 1;
24011734:	2301      	movs	r3, #1
24011736:	60fb      	str	r3, [r7, #12]
          /* Update the Handle node counter */
          hmdma->LinkedListNodeCounter--;
24011738:	687b      	ldr	r3, [r7, #4]
2401173a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
2401173c:	1e5a      	subs	r2, r3, #1
2401173e:	687b      	ldr	r3, [r7, #4]
24011740:	665a      	str	r2, [r3, #100]	; 0x64
24011742:	e002      	b.n	2401174a <HAL_MDMA_LinkedList_RemoveNode+0x122>
        }
        else
        {
          ptmpNode = (MDMA_LinkNodeTypeDef *)ptmpNode->CLAR;
24011744:	697b      	ldr	r3, [r7, #20]
24011746:	695b      	ldr	r3, [r3, #20]
24011748:	617b      	str	r3, [r7, #20]
      while((counter < hmdma->LinkedListNodeCounter) && (nodeDeleted == 0U))
2401174a:	687b      	ldr	r3, [r7, #4]
2401174c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
2401174e:	693a      	ldr	r2, [r7, #16]
24011750:	429a      	cmp	r2, r3
24011752:	d202      	bcs.n	2401175a <HAL_MDMA_LinkedList_RemoveNode+0x132>
24011754:	68fb      	ldr	r3, [r7, #12]
24011756:	2b00      	cmp	r3, #0
24011758:	d0d8      	beq.n	2401170c <HAL_MDMA_LinkedList_RemoveNode+0xe4>
        }
      }

      if(nodeDeleted == 0U)
2401175a:	68fb      	ldr	r3, [r7, #12]
2401175c:	2b00      	cmp	r3, #0
2401175e:	d101      	bne.n	24011764 <HAL_MDMA_LinkedList_RemoveNode+0x13c>
      {
        /* last node reashed without finding the node to delete : return error */
        hal_status = HAL_ERROR;
24011760:	2301      	movs	r3, #1
24011762:	72fb      	strb	r3, [r7, #11]
      }
    }

    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
24011764:	687b      	ldr	r3, [r7, #4]
24011766:	2200      	movs	r2, #0
24011768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    hmdma->State = HAL_MDMA_STATE_READY;
2401176c:	687b      	ldr	r3, [r7, #4]
2401176e:	2201      	movs	r2, #1
24011770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return hal_status;
24011774:	7afb      	ldrb	r3, [r7, #11]
24011776:	e004      	b.n	24011782 <HAL_MDMA_LinkedList_RemoveNode+0x15a>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
24011778:	687b      	ldr	r3, [r7, #4]
2401177a:	2200      	movs	r2, #0
2401177c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Return error status */
    return HAL_BUSY;
24011780:	2302      	movs	r3, #2
  }
}
24011782:	4618      	mov	r0, r3
24011784:	371c      	adds	r7, #28
24011786:	46bd      	mov	sp, r7
24011788:	f85d 7b04 	ldr.w	r7, [sp], #4
2401178c:	4770      	bx	lr

2401178e <HAL_MDMA_LinkedList_EnableCircularMode>:
  * @param  hmdma : Pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_LinkedList_EnableCircularMode(MDMA_HandleTypeDef *hmdma)
{
2401178e:	b480      	push	{r7}
24011790:	b085      	sub	sp, #20
24011792:	af00      	add	r7, sp, #0
24011794:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
24011796:	2300      	movs	r3, #0
24011798:	73fb      	strb	r3, [r7, #15]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
2401179a:	687b      	ldr	r3, [r7, #4]
2401179c:	2b00      	cmp	r3, #0
2401179e:	d101      	bne.n	240117a4 <HAL_MDMA_LinkedList_EnableCircularMode+0x16>
  {
    return HAL_ERROR;
240117a0:	2301      	movs	r3, #1
240117a2:	e031      	b.n	24011808 <HAL_MDMA_LinkedList_EnableCircularMode+0x7a>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
240117a4:	687b      	ldr	r3, [r7, #4]
240117a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
240117aa:	2b01      	cmp	r3, #1
240117ac:	d101      	bne.n	240117b2 <HAL_MDMA_LinkedList_EnableCircularMode+0x24>
240117ae:	2302      	movs	r3, #2
240117b0:	e02a      	b.n	24011808 <HAL_MDMA_LinkedList_EnableCircularMode+0x7a>
240117b2:	687b      	ldr	r3, [r7, #4]
240117b4:	2201      	movs	r2, #1
240117b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
240117ba:	687b      	ldr	r3, [r7, #4]
240117bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
240117c0:	b2db      	uxtb	r3, r3
240117c2:	2b01      	cmp	r3, #1
240117c4:	d117      	bne.n	240117f6 <HAL_MDMA_LinkedList_EnableCircularMode+0x68>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
240117c6:	687b      	ldr	r3, [r7, #4]
240117c8:	2202      	movs	r2, #2
240117ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* If first and last node are null (no nodes in the list) : return error*/
    if(((uint32_t)hmdma->FirstLinkedListNodeAddress == 0U) || ((uint32_t)hmdma->LastLinkedListNodeAddress == 0U) || (hmdma->LinkedListNodeCounter == 0U))
240117ce:	687b      	ldr	r3, [r7, #4]
240117d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
240117d2:	2b00      	cmp	r3, #0
240117d4:	d007      	beq.n	240117e6 <HAL_MDMA_LinkedList_EnableCircularMode+0x58>
240117d6:	687b      	ldr	r3, [r7, #4]
240117d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
240117da:	2b00      	cmp	r3, #0
240117dc:	d003      	beq.n	240117e6 <HAL_MDMA_LinkedList_EnableCircularMode+0x58>
240117de:	687b      	ldr	r3, [r7, #4]
240117e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
240117e2:	2b00      	cmp	r3, #0
240117e4:	d102      	bne.n	240117ec <HAL_MDMA_LinkedList_EnableCircularMode+0x5e>
    {
      hal_status = HAL_ERROR;
240117e6:	2301      	movs	r3, #1
240117e8:	73fb      	strb	r3, [r7, #15]
240117ea:	e004      	b.n	240117f6 <HAL_MDMA_LinkedList_EnableCircularMode+0x68>
    }
    else
    {
      /* to enable circular mode Last Node should be connected to first node */
      hmdma->LastLinkedListNodeAddress->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
240117ec:	687b      	ldr	r3, [r7, #4]
240117ee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
240117f0:	687b      	ldr	r3, [r7, #4]
240117f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
240117f4:	615a      	str	r2, [r3, #20]
    }

  }
  /* Process unlocked */
  __HAL_UNLOCK(hmdma);
240117f6:	687b      	ldr	r3, [r7, #4]
240117f8:	2200      	movs	r2, #0
240117fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  hmdma->State = HAL_MDMA_STATE_READY;
240117fe:	687b      	ldr	r3, [r7, #4]
24011800:	2201      	movs	r2, #1
24011802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return hal_status;
24011806:	7bfb      	ldrb	r3, [r7, #15]
}
24011808:	4618      	mov	r0, r3
2401180a:	3714      	adds	r7, #20
2401180c:	46bd      	mov	sp, r7
2401180e:	f85d 7b04 	ldr.w	r7, [sp], #4
24011812:	4770      	bx	lr

24011814 <HAL_MDMA_LinkedList_DisableCircularMode>:
  * @param  hmdma : Pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_LinkedList_DisableCircularMode(MDMA_HandleTypeDef *hmdma)
{
24011814:	b480      	push	{r7}
24011816:	b085      	sub	sp, #20
24011818:	af00      	add	r7, sp, #0
2401181a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
2401181c:	2300      	movs	r3, #0
2401181e:	73fb      	strb	r3, [r7, #15]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
24011820:	687b      	ldr	r3, [r7, #4]
24011822:	2b00      	cmp	r3, #0
24011824:	d101      	bne.n	2401182a <HAL_MDMA_LinkedList_DisableCircularMode+0x16>
  {
    return HAL_ERROR;
24011826:	2301      	movs	r3, #1
24011828:	e030      	b.n	2401188c <HAL_MDMA_LinkedList_DisableCircularMode+0x78>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
2401182a:	687b      	ldr	r3, [r7, #4]
2401182c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
24011830:	2b01      	cmp	r3, #1
24011832:	d101      	bne.n	24011838 <HAL_MDMA_LinkedList_DisableCircularMode+0x24>
24011834:	2302      	movs	r3, #2
24011836:	e029      	b.n	2401188c <HAL_MDMA_LinkedList_DisableCircularMode+0x78>
24011838:	687b      	ldr	r3, [r7, #4]
2401183a:	2201      	movs	r2, #1
2401183c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
24011840:	687b      	ldr	r3, [r7, #4]
24011842:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
24011846:	b2db      	uxtb	r3, r3
24011848:	2b01      	cmp	r3, #1
2401184a:	d116      	bne.n	2401187a <HAL_MDMA_LinkedList_DisableCircularMode+0x66>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
2401184c:	687b      	ldr	r3, [r7, #4]
2401184e:	2202      	movs	r2, #2
24011850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* If first and last node are null (no nodes in the list) : return error*/
    if(((uint32_t)hmdma->FirstLinkedListNodeAddress == 0U) || ((uint32_t)hmdma->LastLinkedListNodeAddress == 0U) || (hmdma->LinkedListNodeCounter == 0U))
24011854:	687b      	ldr	r3, [r7, #4]
24011856:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24011858:	2b00      	cmp	r3, #0
2401185a:	d007      	beq.n	2401186c <HAL_MDMA_LinkedList_DisableCircularMode+0x58>
2401185c:	687b      	ldr	r3, [r7, #4]
2401185e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24011860:	2b00      	cmp	r3, #0
24011862:	d003      	beq.n	2401186c <HAL_MDMA_LinkedList_DisableCircularMode+0x58>
24011864:	687b      	ldr	r3, [r7, #4]
24011866:	6e5b      	ldr	r3, [r3, #100]	; 0x64
24011868:	2b00      	cmp	r3, #0
2401186a:	d102      	bne.n	24011872 <HAL_MDMA_LinkedList_DisableCircularMode+0x5e>
    {
      hal_status = HAL_ERROR;
2401186c:	2301      	movs	r3, #1
2401186e:	73fb      	strb	r3, [r7, #15]
24011870:	e003      	b.n	2401187a <HAL_MDMA_LinkedList_DisableCircularMode+0x66>
    }
    else
    {
      /* to disable circular mode Last Node should be connected to NULL */
      hmdma->LastLinkedListNodeAddress->CLAR = 0;
24011872:	687b      	ldr	r3, [r7, #4]
24011874:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24011876:	2200      	movs	r2, #0
24011878:	615a      	str	r2, [r3, #20]
    }

  }
  /* Process unlocked */
  __HAL_UNLOCK(hmdma);
2401187a:	687b      	ldr	r3, [r7, #4]
2401187c:	2200      	movs	r2, #0
2401187e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  hmdma->State = HAL_MDMA_STATE_READY;
24011882:	687b      	ldr	r3, [r7, #4]
24011884:	2201      	movs	r2, #1
24011886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return hal_status;
2401188a:	7bfb      	ldrb	r3, [r7, #15]
}
2401188c:	4618      	mov	r0, r3
2401188e:	3714      	adds	r7, #20
24011890:	46bd      	mov	sp, r7
24011892:	f85d 7b04 	ldr.w	r7, [sp], #4
24011896:	4770      	bx	lr

24011898 <HAL_MDMA_Start>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount      : The number of a blocks to be transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Start(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
24011898:	b580      	push	{r7, lr}
2401189a:	b086      	sub	sp, #24
2401189c:	af02      	add	r7, sp, #8
2401189e:	60f8      	str	r0, [r7, #12]
240118a0:	60b9      	str	r1, [r7, #8]
240118a2:	607a      	str	r2, [r7, #4]
240118a4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_MDMA_TRANSFER_LENGTH(BlockDataLength));
  assert_param(IS_MDMA_BLOCK_COUNT(BlockCount));

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
240118a6:	68fb      	ldr	r3, [r7, #12]
240118a8:	2b00      	cmp	r3, #0
240118aa:	d101      	bne.n	240118b0 <HAL_MDMA_Start+0x18>
  {
    return HAL_ERROR;
240118ac:	2301      	movs	r3, #1
240118ae:	e044      	b.n	2401193a <HAL_MDMA_Start+0xa2>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
240118b0:	68fb      	ldr	r3, [r7, #12]
240118b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
240118b6:	2b01      	cmp	r3, #1
240118b8:	d101      	bne.n	240118be <HAL_MDMA_Start+0x26>
240118ba:	2302      	movs	r3, #2
240118bc:	e03d      	b.n	2401193a <HAL_MDMA_Start+0xa2>
240118be:	68fb      	ldr	r3, [r7, #12]
240118c0:	2201      	movs	r2, #1
240118c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
240118c6:	68fb      	ldr	r3, [r7, #12]
240118c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
240118cc:	b2db      	uxtb	r3, r3
240118ce:	2b01      	cmp	r3, #1
240118d0:	d12c      	bne.n	2401192c <HAL_MDMA_Start+0x94>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
240118d2:	68fb      	ldr	r3, [r7, #12]
240118d4:	2202      	movs	r2, #2
240118d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Initialize the error code */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
240118da:	68fb      	ldr	r3, [r7, #12]
240118dc:	2200      	movs	r2, #0
240118de:	669a      	str	r2, [r3, #104]	; 0x68

    /* Disable the peripheral */
    __HAL_MDMA_DISABLE(hmdma);
240118e0:	68fb      	ldr	r3, [r7, #12]
240118e2:	681b      	ldr	r3, [r3, #0]
240118e4:	68da      	ldr	r2, [r3, #12]
240118e6:	68fb      	ldr	r3, [r7, #12]
240118e8:	681b      	ldr	r3, [r3, #0]
240118ea:	f022 0201 	bic.w	r2, r2, #1
240118ee:	60da      	str	r2, [r3, #12]

    /* Configure the source, destination address and the data length */
    MDMA_SetConfig(hmdma, SrcAddress, DstAddress, BlockDataLength, BlockCount);
240118f0:	69bb      	ldr	r3, [r7, #24]
240118f2:	9300      	str	r3, [sp, #0]
240118f4:	683b      	ldr	r3, [r7, #0]
240118f6:	687a      	ldr	r2, [r7, #4]
240118f8:	68b9      	ldr	r1, [r7, #8]
240118fa:	68f8      	ldr	r0, [r7, #12]
240118fc:	f000 fb96 	bl	2401202c <MDMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_MDMA_ENABLE(hmdma);
24011900:	68fb      	ldr	r3, [r7, #12]
24011902:	681b      	ldr	r3, [r3, #0]
24011904:	68da      	ldr	r2, [r3, #12]
24011906:	68fb      	ldr	r3, [r7, #12]
24011908:	681b      	ldr	r3, [r3, #0]
2401190a:	f042 0201 	orr.w	r2, r2, #1
2401190e:	60da      	str	r2, [r3, #12]

    if(hmdma->Init.Request == MDMA_REQUEST_SW)
24011910:	68fb      	ldr	r3, [r7, #12]
24011912:	685b      	ldr	r3, [r3, #4]
24011914:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
24011918:	d10e      	bne.n	24011938 <HAL_MDMA_Start+0xa0>
    {
      /* activate If SW request mode*/
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
2401191a:	68fb      	ldr	r3, [r7, #12]
2401191c:	681b      	ldr	r3, [r3, #0]
2401191e:	68da      	ldr	r2, [r3, #12]
24011920:	68fb      	ldr	r3, [r7, #12]
24011922:	681b      	ldr	r3, [r3, #0]
24011924:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
24011928:	60da      	str	r2, [r3, #12]
2401192a:	e005      	b.n	24011938 <HAL_MDMA_Start+0xa0>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
2401192c:	68fb      	ldr	r3, [r7, #12]
2401192e:	2200      	movs	r2, #0
24011930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Return error status */
    return HAL_BUSY;
24011934:	2302      	movs	r3, #2
24011936:	e000      	b.n	2401193a <HAL_MDMA_Start+0xa2>
  }

  return HAL_OK;
24011938:	2300      	movs	r3, #0
}
2401193a:	4618      	mov	r0, r3
2401193c:	3710      	adds	r7, #16
2401193e:	46bd      	mov	sp, r7
24011940:	bd80      	pop	{r7, pc}

24011942 <HAL_MDMA_Start_IT>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount      : The number of a blocks to be transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Start_IT(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
24011942:	b580      	push	{r7, lr}
24011944:	b086      	sub	sp, #24
24011946:	af02      	add	r7, sp, #8
24011948:	60f8      	str	r0, [r7, #12]
2401194a:	60b9      	str	r1, [r7, #8]
2401194c:	607a      	str	r2, [r7, #4]
2401194e:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_MDMA_TRANSFER_LENGTH(BlockDataLength));
  assert_param(IS_MDMA_BLOCK_COUNT(BlockCount));

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
24011950:	68fb      	ldr	r3, [r7, #12]
24011952:	2b00      	cmp	r3, #0
24011954:	d101      	bne.n	2401195a <HAL_MDMA_Start_IT+0x18>
  {
    return HAL_ERROR;
24011956:	2301      	movs	r3, #1
24011958:	e070      	b.n	24011a3c <HAL_MDMA_Start_IT+0xfa>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
2401195a:	68fb      	ldr	r3, [r7, #12]
2401195c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
24011960:	2b01      	cmp	r3, #1
24011962:	d101      	bne.n	24011968 <HAL_MDMA_Start_IT+0x26>
24011964:	2302      	movs	r3, #2
24011966:	e069      	b.n	24011a3c <HAL_MDMA_Start_IT+0xfa>
24011968:	68fb      	ldr	r3, [r7, #12]
2401196a:	2201      	movs	r2, #1
2401196c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
24011970:	68fb      	ldr	r3, [r7, #12]
24011972:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
24011976:	b2db      	uxtb	r3, r3
24011978:	2b01      	cmp	r3, #1
2401197a:	d158      	bne.n	24011a2e <HAL_MDMA_Start_IT+0xec>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
2401197c:	68fb      	ldr	r3, [r7, #12]
2401197e:	2202      	movs	r2, #2
24011980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Initialize the error code */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
24011984:	68fb      	ldr	r3, [r7, #12]
24011986:	2200      	movs	r2, #0
24011988:	669a      	str	r2, [r3, #104]	; 0x68

    /* Disable the peripheral */
    __HAL_MDMA_DISABLE(hmdma);
2401198a:	68fb      	ldr	r3, [r7, #12]
2401198c:	681b      	ldr	r3, [r3, #0]
2401198e:	68da      	ldr	r2, [r3, #12]
24011990:	68fb      	ldr	r3, [r7, #12]
24011992:	681b      	ldr	r3, [r3, #0]
24011994:	f022 0201 	bic.w	r2, r2, #1
24011998:	60da      	str	r2, [r3, #12]

    /* Configure the source, destination address and the data length */
    MDMA_SetConfig(hmdma, SrcAddress, DstAddress, BlockDataLength, BlockCount);
2401199a:	69bb      	ldr	r3, [r7, #24]
2401199c:	9300      	str	r3, [sp, #0]
2401199e:	683b      	ldr	r3, [r7, #0]
240119a0:	687a      	ldr	r2, [r7, #4]
240119a2:	68b9      	ldr	r1, [r7, #8]
240119a4:	68f8      	ldr	r0, [r7, #12]
240119a6:	f000 fb41 	bl	2401202c <MDMA_SetConfig>

    /* Enable Common interrupts i.e Transfer Error IT and Channel Transfer Complete IT*/
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
240119aa:	68fb      	ldr	r3, [r7, #12]
240119ac:	681b      	ldr	r3, [r3, #0]
240119ae:	68da      	ldr	r2, [r3, #12]
240119b0:	68fb      	ldr	r3, [r7, #12]
240119b2:	681b      	ldr	r3, [r3, #0]
240119b4:	f042 0206 	orr.w	r2, r2, #6
240119b8:	60da      	str	r2, [r3, #12]

    if(hmdma->XferBlockCpltCallback != NULL)
240119ba:	68fb      	ldr	r3, [r7, #12]
240119bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
240119be:	2b00      	cmp	r3, #0
240119c0:	d007      	beq.n	240119d2 <HAL_MDMA_Start_IT+0x90>
    {
      /* if Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
240119c2:	68fb      	ldr	r3, [r7, #12]
240119c4:	681b      	ldr	r3, [r3, #0]
240119c6:	68da      	ldr	r2, [r3, #12]
240119c8:	68fb      	ldr	r3, [r7, #12]
240119ca:	681b      	ldr	r3, [r3, #0]
240119cc:	f042 0210 	orr.w	r2, r2, #16
240119d0:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferRepeatBlockCpltCallback != NULL)
240119d2:	68fb      	ldr	r3, [r7, #12]
240119d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
240119d6:	2b00      	cmp	r3, #0
240119d8:	d007      	beq.n	240119ea <HAL_MDMA_Start_IT+0xa8>
    {
      /* if Repeated Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
240119da:	68fb      	ldr	r3, [r7, #12]
240119dc:	681b      	ldr	r3, [r3, #0]
240119de:	68da      	ldr	r2, [r3, #12]
240119e0:	68fb      	ldr	r3, [r7, #12]
240119e2:	681b      	ldr	r3, [r3, #0]
240119e4:	f042 0208 	orr.w	r2, r2, #8
240119e8:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferBufferCpltCallback != NULL)
240119ea:	68fb      	ldr	r3, [r7, #12]
240119ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
240119ee:	2b00      	cmp	r3, #0
240119f0:	d007      	beq.n	24011a02 <HAL_MDMA_Start_IT+0xc0>
    {
      /* if buffer transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
240119f2:	68fb      	ldr	r3, [r7, #12]
240119f4:	681b      	ldr	r3, [r3, #0]
240119f6:	68da      	ldr	r2, [r3, #12]
240119f8:	68fb      	ldr	r3, [r7, #12]
240119fa:	681b      	ldr	r3, [r3, #0]
240119fc:	f042 0220 	orr.w	r2, r2, #32
24011a00:	60da      	str	r2, [r3, #12]
    }

    /* Enable the Peripheral */
    __HAL_MDMA_ENABLE(hmdma);
24011a02:	68fb      	ldr	r3, [r7, #12]
24011a04:	681b      	ldr	r3, [r3, #0]
24011a06:	68da      	ldr	r2, [r3, #12]
24011a08:	68fb      	ldr	r3, [r7, #12]
24011a0a:	681b      	ldr	r3, [r3, #0]
24011a0c:	f042 0201 	orr.w	r2, r2, #1
24011a10:	60da      	str	r2, [r3, #12]

    if(hmdma->Init.Request == MDMA_REQUEST_SW)
24011a12:	68fb      	ldr	r3, [r7, #12]
24011a14:	685b      	ldr	r3, [r3, #4]
24011a16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
24011a1a:	d10e      	bne.n	24011a3a <HAL_MDMA_Start_IT+0xf8>
    {
      /* activate If SW request mode*/
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
24011a1c:	68fb      	ldr	r3, [r7, #12]
24011a1e:	681b      	ldr	r3, [r3, #0]
24011a20:	68da      	ldr	r2, [r3, #12]
24011a22:	68fb      	ldr	r3, [r7, #12]
24011a24:	681b      	ldr	r3, [r3, #0]
24011a26:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
24011a2a:	60da      	str	r2, [r3, #12]
24011a2c:	e005      	b.n	24011a3a <HAL_MDMA_Start_IT+0xf8>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
24011a2e:	68fb      	ldr	r3, [r7, #12]
24011a30:	2200      	movs	r2, #0
24011a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Return error status */
    return HAL_BUSY;
24011a36:	2302      	movs	r3, #2
24011a38:	e000      	b.n	24011a3c <HAL_MDMA_Start_IT+0xfa>
  }

  return HAL_OK;
24011a3a:	2300      	movs	r3, #0
}
24011a3c:	4618      	mov	r0, r3
24011a3e:	3710      	adds	r7, #16
24011a40:	46bd      	mov	sp, r7
24011a42:	bd80      	pop	{r7, pc}

24011a44 <HAL_MDMA_Abort>:
  *        and the Channel will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort(MDMA_HandleTypeDef *hmdma)
{
24011a44:	b580      	push	{r7, lr}
24011a46:	b084      	sub	sp, #16
24011a48:	af00      	add	r7, sp, #0
24011a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart =  HAL_GetTick();
24011a4c:	f7f1 fb2a 	bl	240030a4 <HAL_GetTick>
24011a50:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
24011a52:	687b      	ldr	r3, [r7, #4]
24011a54:	2b00      	cmp	r3, #0
24011a56:	d101      	bne.n	24011a5c <HAL_MDMA_Abort+0x18>
  {
    return HAL_ERROR;
24011a58:	2301      	movs	r3, #1
24011a5a:	e04a      	b.n	24011af2 <HAL_MDMA_Abort+0xae>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
24011a5c:	687b      	ldr	r3, [r7, #4]
24011a5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
24011a62:	b2db      	uxtb	r3, r3
24011a64:	2b02      	cmp	r3, #2
24011a66:	d008      	beq.n	24011a7a <HAL_MDMA_Abort+0x36>
  {
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
24011a68:	687b      	ldr	r3, [r7, #4]
24011a6a:	2280      	movs	r2, #128	; 0x80
24011a6c:	669a      	str	r2, [r3, #104]	; 0x68

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
24011a6e:	687b      	ldr	r3, [r7, #4]
24011a70:	2200      	movs	r2, #0
24011a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
24011a76:	2301      	movs	r3, #1
24011a78:	e03b      	b.n	24011af2 <HAL_MDMA_Abort+0xae>
  }
  else
  {
    /* Disable all the transfer interrupts */
    __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
24011a7a:	687b      	ldr	r3, [r7, #4]
24011a7c:	681b      	ldr	r3, [r3, #0]
24011a7e:	68da      	ldr	r2, [r3, #12]
24011a80:	687b      	ldr	r3, [r7, #4]
24011a82:	681b      	ldr	r3, [r3, #0]
24011a84:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
24011a88:	60da      	str	r2, [r3, #12]

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
24011a8a:	687b      	ldr	r3, [r7, #4]
24011a8c:	681b      	ldr	r3, [r3, #0]
24011a8e:	68da      	ldr	r2, [r3, #12]
24011a90:	687b      	ldr	r3, [r7, #4]
24011a92:	681b      	ldr	r3, [r3, #0]
24011a94:	f022 0201 	bic.w	r2, r2, #1
24011a98:	60da      	str	r2, [r3, #12]

    /* Check if the MDMA Channel is effectively disabled */
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
24011a9a:	e016      	b.n	24011aca <HAL_MDMA_Abort+0x86>
    {
      /* Check for the Timeout */
      if( (HAL_GetTick()  - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
24011a9c:	f7f1 fb02 	bl	240030a4 <HAL_GetTick>
24011aa0:	4602      	mov	r2, r0
24011aa2:	68fb      	ldr	r3, [r7, #12]
24011aa4:	1ad3      	subs	r3, r2, r3
24011aa6:	2b05      	cmp	r3, #5
24011aa8:	d90f      	bls.n	24011aca <HAL_MDMA_Abort+0x86>
      {
        /* Update error code */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_TIMEOUT;
24011aaa:	687b      	ldr	r3, [r7, #4]
24011aac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
24011aae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
24011ab2:	687b      	ldr	r3, [r7, #4]
24011ab4:	669a      	str	r2, [r3, #104]	; 0x68

        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
24011ab6:	687b      	ldr	r3, [r7, #4]
24011ab8:	2200      	movs	r2, #0
24011aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Change the MDMA state */
        hmdma->State = HAL_MDMA_STATE_ERROR;
24011abe:	687b      	ldr	r3, [r7, #4]
24011ac0:	2203      	movs	r2, #3
24011ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        return HAL_ERROR;
24011ac6:	2301      	movs	r3, #1
24011ac8:	e013      	b.n	24011af2 <HAL_MDMA_Abort+0xae>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
24011aca:	687b      	ldr	r3, [r7, #4]
24011acc:	681b      	ldr	r3, [r3, #0]
24011ace:	68db      	ldr	r3, [r3, #12]
24011ad0:	f003 0301 	and.w	r3, r3, #1
24011ad4:	2b00      	cmp	r3, #0
24011ad6:	d1e1      	bne.n	24011a9c <HAL_MDMA_Abort+0x58>
      }
    }

    /* Clear all interrupt flags */
    __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BT | MDMA_FLAG_BRT | MDMA_FLAG_BFTC));
24011ad8:	687b      	ldr	r3, [r7, #4]
24011ada:	681b      	ldr	r3, [r3, #0]
24011adc:	221f      	movs	r2, #31
24011ade:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
24011ae0:	687b      	ldr	r3, [r7, #4]
24011ae2:	2200      	movs	r2, #0
24011ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Change the MDMA state*/
    hmdma->State = HAL_MDMA_STATE_READY;
24011ae8:	687b      	ldr	r3, [r7, #4]
24011aea:	2201      	movs	r2, #1
24011aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

  return HAL_OK;
24011af0:	2300      	movs	r3, #0
}
24011af2:	4618      	mov	r0, r3
24011af4:	3710      	adds	r7, #16
24011af6:	46bd      	mov	sp, r7
24011af8:	bd80      	pop	{r7, pc}

24011afa <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
24011afa:	b480      	push	{r7}
24011afc:	b083      	sub	sp, #12
24011afe:	af00      	add	r7, sp, #0
24011b00:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
24011b02:	687b      	ldr	r3, [r7, #4]
24011b04:	2b00      	cmp	r3, #0
24011b06:	d101      	bne.n	24011b0c <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
24011b08:	2301      	movs	r3, #1
24011b0a:	e017      	b.n	24011b3c <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
24011b0c:	687b      	ldr	r3, [r7, #4]
24011b0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
24011b12:	b2db      	uxtb	r3, r3
24011b14:	2b02      	cmp	r3, #2
24011b16:	d004      	beq.n	24011b22 <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
24011b18:	687b      	ldr	r3, [r7, #4]
24011b1a:	2280      	movs	r2, #128	; 0x80
24011b1c:	669a      	str	r2, [r3, #104]	; 0x68

    return HAL_ERROR;
24011b1e:	2301      	movs	r3, #1
24011b20:	e00c      	b.n	24011b3c <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
24011b22:	687b      	ldr	r3, [r7, #4]
24011b24:	2204      	movs	r2, #4
24011b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
24011b2a:	687b      	ldr	r3, [r7, #4]
24011b2c:	681b      	ldr	r3, [r3, #0]
24011b2e:	68da      	ldr	r2, [r3, #12]
24011b30:	687b      	ldr	r3, [r7, #4]
24011b32:	681b      	ldr	r3, [r3, #0]
24011b34:	f022 0201 	bic.w	r2, r2, #1
24011b38:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
24011b3a:	2300      	movs	r3, #0
}
24011b3c:	4618      	mov	r0, r3
24011b3e:	370c      	adds	r7, #12
24011b40:	46bd      	mov	sp, r7
24011b42:	f85d 7b04 	ldr.w	r7, [sp], #4
24011b46:	4770      	bx	lr

24011b48 <HAL_MDMA_PollForTransfer>:
  * @param  CompleteLevel: Specifies the MDMA level complete.
  * @param  Timeout:       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_PollForTransfer(MDMA_HandleTypeDef *hmdma, HAL_MDMA_LevelCompleteTypeDef CompleteLevel, uint32_t Timeout)
{
24011b48:	b580      	push	{r7, lr}
24011b4a:	b088      	sub	sp, #32
24011b4c:	af00      	add	r7, sp, #0
24011b4e:	60f8      	str	r0, [r7, #12]
24011b50:	460b      	mov	r3, r1
24011b52:	607a      	str	r2, [r7, #4]
24011b54:	72fb      	strb	r3, [r7, #11]

  /* Check the parameters */
  assert_param(IS_MDMA_LEVEL_COMPLETE(CompleteLevel));

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
24011b56:	68fb      	ldr	r3, [r7, #12]
24011b58:	2b00      	cmp	r3, #0
24011b5a:	d101      	bne.n	24011b60 <HAL_MDMA_PollForTransfer+0x18>
  {
    return HAL_ERROR;
24011b5c:	2301      	movs	r3, #1
24011b5e:	e0b9      	b.n	24011cd4 <HAL_MDMA_PollForTransfer+0x18c>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
24011b60:	68fb      	ldr	r3, [r7, #12]
24011b62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
24011b66:	b2db      	uxtb	r3, r3
24011b68:	2b02      	cmp	r3, #2
24011b6a:	d004      	beq.n	24011b76 <HAL_MDMA_PollForTransfer+0x2e>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
24011b6c:	68fb      	ldr	r3, [r7, #12]
24011b6e:	2280      	movs	r2, #128	; 0x80
24011b70:	669a      	str	r2, [r3, #104]	; 0x68

    return HAL_ERROR;
24011b72:	2301      	movs	r3, #1
24011b74:	e0ae      	b.n	24011cd4 <HAL_MDMA_PollForTransfer+0x18c>
  }

  /* Get the level transfer complete flag */
  levelFlag = ((CompleteLevel == HAL_MDMA_FULL_TRANSFER)  ? MDMA_FLAG_CTC  : \
24011b76:	7afb      	ldrb	r3, [r7, #11]
24011b78:	2b00      	cmp	r3, #0
24011b7a:	d00b      	beq.n	24011b94 <HAL_MDMA_PollForTransfer+0x4c>
               (CompleteLevel == HAL_MDMA_BUFFER_TRANSFER)? MDMA_FLAG_BFTC : \
24011b7c:	7afb      	ldrb	r3, [r7, #11]
24011b7e:	2b01      	cmp	r3, #1
24011b80:	d006      	beq.n	24011b90 <HAL_MDMA_PollForTransfer+0x48>
               (CompleteLevel == HAL_MDMA_BLOCK_TRANSFER) ? MDMA_FLAG_BT   : \
24011b82:	7afb      	ldrb	r3, [r7, #11]
24011b84:	2b02      	cmp	r3, #2
24011b86:	d101      	bne.n	24011b8c <HAL_MDMA_PollForTransfer+0x44>
24011b88:	2308      	movs	r3, #8
24011b8a:	e004      	b.n	24011b96 <HAL_MDMA_PollForTransfer+0x4e>
24011b8c:	2304      	movs	r3, #4
24011b8e:	e002      	b.n	24011b96 <HAL_MDMA_PollForTransfer+0x4e>
               (CompleteLevel == HAL_MDMA_BUFFER_TRANSFER)? MDMA_FLAG_BFTC : \
24011b90:	2310      	movs	r3, #16
24011b92:	e000      	b.n	24011b96 <HAL_MDMA_PollForTransfer+0x4e>
  levelFlag = ((CompleteLevel == HAL_MDMA_FULL_TRANSFER)  ? MDMA_FLAG_CTC  : \
24011b94:	2302      	movs	r3, #2
24011b96:	61fb      	str	r3, [r7, #28]
               MDMA_FLAG_BRT);


  /* Get timeout */
  tickstart = HAL_GetTick();
24011b98:	f7f1 fa84 	bl	240030a4 <HAL_GetTick>
24011b9c:	61b8      	str	r0, [r7, #24]

  while(__HAL_MDMA_GET_FLAG(hmdma, levelFlag) == 0U)
24011b9e:	e067      	b.n	24011c70 <HAL_MDMA_PollForTransfer+0x128>
  {
    if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
24011ba0:	68fb      	ldr	r3, [r7, #12]
24011ba2:	681b      	ldr	r3, [r3, #0]
24011ba4:	681b      	ldr	r3, [r3, #0]
24011ba6:	f003 0301 	and.w	r3, r3, #1
24011baa:	2b00      	cmp	r3, #0
24011bac:	d046      	beq.n	24011c3c <HAL_MDMA_PollForTransfer+0xf4>
    {
      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
24011bae:	68fb      	ldr	r3, [r7, #12]
24011bb0:	681b      	ldr	r3, [r3, #0]
24011bb2:	689b      	ldr	r3, [r3, #8]
24011bb4:	617b      	str	r3, [r7, #20]

      if((errorFlag & MDMA_CESR_TED) == 0U)
24011bb6:	697b      	ldr	r3, [r7, #20]
24011bb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
24011bbc:	2b00      	cmp	r3, #0
24011bbe:	d106      	bne.n	24011bce <HAL_MDMA_PollForTransfer+0x86>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
24011bc0:	68fb      	ldr	r3, [r7, #12]
24011bc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
24011bc4:	f043 0201 	orr.w	r2, r3, #1
24011bc8:	68fb      	ldr	r3, [r7, #12]
24011bca:	669a      	str	r2, [r3, #104]	; 0x68
24011bcc:	e005      	b.n	24011bda <HAL_MDMA_PollForTransfer+0x92>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
24011bce:	68fb      	ldr	r3, [r7, #12]
24011bd0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
24011bd2:	f043 0202 	orr.w	r2, r3, #2
24011bd6:	68fb      	ldr	r3, [r7, #12]
24011bd8:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
24011bda:	697b      	ldr	r3, [r7, #20]
24011bdc:	f403 7300 	and.w	r3, r3, #512	; 0x200
24011be0:	2b00      	cmp	r3, #0
24011be2:	d005      	beq.n	24011bf0 <HAL_MDMA_PollForTransfer+0xa8>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
24011be4:	68fb      	ldr	r3, [r7, #12]
24011be6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
24011be8:	f043 0204 	orr.w	r2, r3, #4
24011bec:	68fb      	ldr	r3, [r7, #12]
24011bee:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
24011bf0:	697b      	ldr	r3, [r7, #20]
24011bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
24011bf6:	2b00      	cmp	r3, #0
24011bf8:	d005      	beq.n	24011c06 <HAL_MDMA_PollForTransfer+0xbe>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
24011bfa:	68fb      	ldr	r3, [r7, #12]
24011bfc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
24011bfe:	f043 0208 	orr.w	r2, r3, #8
24011c02:	68fb      	ldr	r3, [r7, #12]
24011c04:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
24011c06:	697b      	ldr	r3, [r7, #20]
24011c08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
24011c0c:	2b00      	cmp	r3, #0
24011c0e:	d005      	beq.n	24011c1c <HAL_MDMA_PollForTransfer+0xd4>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
24011c10:	68fb      	ldr	r3, [r7, #12]
24011c12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
24011c14:	f043 0210 	orr.w	r2, r3, #16
24011c18:	68fb      	ldr	r3, [r7, #12]
24011c1a:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
24011c1c:	697b      	ldr	r3, [r7, #20]
24011c1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
24011c22:	2b00      	cmp	r3, #0
24011c24:	d005      	beq.n	24011c32 <HAL_MDMA_PollForTransfer+0xea>
      {
        /* Update error code : Block Size error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
24011c26:	68fb      	ldr	r3, [r7, #12]
24011c28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
24011c2a:	f043 0220 	orr.w	r2, r3, #32
24011c2e:	68fb      	ldr	r3, [r7, #12]
24011c30:	669a      	str	r2, [r3, #104]	; 0x68
      }

      (void) HAL_MDMA_Abort(hmdma); /* if error then abort the current transfer */
24011c32:	68f8      	ldr	r0, [r7, #12]
24011c34:	f7ff ff06 	bl	24011a44 <HAL_MDMA_Abort>
          - Clear all transfer flags
          - Unlock
          - Set the State
      */

      return HAL_ERROR;
24011c38:	2301      	movs	r3, #1
24011c3a:	e04b      	b.n	24011cd4 <HAL_MDMA_PollForTransfer+0x18c>

    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
24011c3c:	687b      	ldr	r3, [r7, #4]
24011c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
24011c42:	d015      	beq.n	24011c70 <HAL_MDMA_PollForTransfer+0x128>
    {
      if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
24011c44:	f7f1 fa2e 	bl	240030a4 <HAL_GetTick>
24011c48:	4602      	mov	r2, r0
24011c4a:	69bb      	ldr	r3, [r7, #24]
24011c4c:	1ad3      	subs	r3, r2, r3
24011c4e:	687a      	ldr	r2, [r7, #4]
24011c50:	429a      	cmp	r2, r3
24011c52:	d302      	bcc.n	24011c5a <HAL_MDMA_PollForTransfer+0x112>
24011c54:	687b      	ldr	r3, [r7, #4]
24011c56:	2b00      	cmp	r3, #0
24011c58:	d10a      	bne.n	24011c70 <HAL_MDMA_PollForTransfer+0x128>
      {
        /* Update error code */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_TIMEOUT;
24011c5a:	68fb      	ldr	r3, [r7, #12]
24011c5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
24011c5e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
24011c62:	68fb      	ldr	r3, [r7, #12]
24011c64:	669a      	str	r2, [r3, #104]	; 0x68

        (void) HAL_MDMA_Abort(hmdma); /* if timeout then abort the current transfer */
24011c66:	68f8      	ldr	r0, [r7, #12]
24011c68:	f7ff feec 	bl	24011a44 <HAL_MDMA_Abort>
            - Clear all transfer flags
            - Unlock
            - Set the State
        */

        return HAL_ERROR;
24011c6c:	2301      	movs	r3, #1
24011c6e:	e031      	b.n	24011cd4 <HAL_MDMA_PollForTransfer+0x18c>
  while(__HAL_MDMA_GET_FLAG(hmdma, levelFlag) == 0U)
24011c70:	68fb      	ldr	r3, [r7, #12]
24011c72:	681b      	ldr	r3, [r3, #0]
24011c74:	681a      	ldr	r2, [r3, #0]
24011c76:	69fb      	ldr	r3, [r7, #28]
24011c78:	4013      	ands	r3, r2
24011c7a:	2b00      	cmp	r3, #0
24011c7c:	d090      	beq.n	24011ba0 <HAL_MDMA_PollForTransfer+0x58>
      }
    }
  }

  /* Clear the transfer level flag */
  if(CompleteLevel == HAL_MDMA_BUFFER_TRANSFER)
24011c7e:	7afb      	ldrb	r3, [r7, #11]
24011c80:	2b01      	cmp	r3, #1
24011c82:	d104      	bne.n	24011c8e <HAL_MDMA_PollForTransfer+0x146>
  {
    __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
24011c84:	68fb      	ldr	r3, [r7, #12]
24011c86:	681b      	ldr	r3, [r3, #0]
24011c88:	2210      	movs	r2, #16
24011c8a:	605a      	str	r2, [r3, #4]
24011c8c:	e021      	b.n	24011cd2 <HAL_MDMA_PollForTransfer+0x18a>

  }
  else if(CompleteLevel == HAL_MDMA_BLOCK_TRANSFER)
24011c8e:	7afb      	ldrb	r3, [r7, #11]
24011c90:	2b02      	cmp	r3, #2
24011c92:	d104      	bne.n	24011c9e <HAL_MDMA_PollForTransfer+0x156>
  {
    __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_BFTC | MDMA_FLAG_BT));
24011c94:	68fb      	ldr	r3, [r7, #12]
24011c96:	681b      	ldr	r3, [r3, #0]
24011c98:	2218      	movs	r2, #24
24011c9a:	605a      	str	r2, [r3, #4]
24011c9c:	e019      	b.n	24011cd2 <HAL_MDMA_PollForTransfer+0x18a>

  }
  else if(CompleteLevel == HAL_MDMA_REPEAT_BLOCK_TRANSFER)
24011c9e:	7afb      	ldrb	r3, [r7, #11]
24011ca0:	2b03      	cmp	r3, #3
24011ca2:	d104      	bne.n	24011cae <HAL_MDMA_PollForTransfer+0x166>
  {
    __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_BFTC | MDMA_FLAG_BT | MDMA_FLAG_BRT));
24011ca4:	68fb      	ldr	r3, [r7, #12]
24011ca6:	681b      	ldr	r3, [r3, #0]
24011ca8:	221c      	movs	r2, #28
24011caa:	605a      	str	r2, [r3, #4]
24011cac:	e011      	b.n	24011cd2 <HAL_MDMA_PollForTransfer+0x18a>
  }
  else if(CompleteLevel == HAL_MDMA_FULL_TRANSFER)
24011cae:	7afb      	ldrb	r3, [r7, #11]
24011cb0:	2b00      	cmp	r3, #0
24011cb2:	d10c      	bne.n	24011cce <HAL_MDMA_PollForTransfer+0x186>
  {
    __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC | MDMA_FLAG_CTC));
24011cb4:	68fb      	ldr	r3, [r7, #12]
24011cb6:	681b      	ldr	r3, [r3, #0]
24011cb8:	221e      	movs	r2, #30
24011cba:	605a      	str	r2, [r3, #4]

    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
24011cbc:	68fb      	ldr	r3, [r7, #12]
24011cbe:	2200      	movs	r2, #0
24011cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    hmdma->State = HAL_MDMA_STATE_READY;
24011cc4:	68fb      	ldr	r3, [r7, #12]
24011cc6:	2201      	movs	r2, #1
24011cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
24011ccc:	e001      	b.n	24011cd2 <HAL_MDMA_PollForTransfer+0x18a>
  }
  else
  {
    return HAL_ERROR;
24011cce:	2301      	movs	r3, #1
24011cd0:	e000      	b.n	24011cd4 <HAL_MDMA_PollForTransfer+0x18c>
  }

  return HAL_OK;
24011cd2:	2300      	movs	r3, #0
}
24011cd4:	4618      	mov	r0, r3
24011cd6:	3720      	adds	r7, #32
24011cd8:	46bd      	mov	sp, r7
24011cda:	bd80      	pop	{r7, pc}

24011cdc <HAL_MDMA_GenerateSWRequest>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_GenerateSWRequest(MDMA_HandleTypeDef *hmdma)
{
24011cdc:	b480      	push	{r7}
24011cde:	b085      	sub	sp, #20
24011ce0:	af00      	add	r7, sp, #0
24011ce2:	6078      	str	r0, [r7, #4]
  uint32_t request_mode;

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
24011ce4:	687b      	ldr	r3, [r7, #4]
24011ce6:	2b00      	cmp	r3, #0
24011ce8:	d101      	bne.n	24011cee <HAL_MDMA_GenerateSWRequest+0x12>
  {
    return HAL_ERROR;
24011cea:	2301      	movs	r3, #1
24011cec:	e02a      	b.n	24011d44 <HAL_MDMA_GenerateSWRequest+0x68>
  }

  /* Get the softawre request mode */
  request_mode = hmdma->Instance->CTCR & MDMA_CTCR_SWRM;
24011cee:	687b      	ldr	r3, [r7, #4]
24011cf0:	681b      	ldr	r3, [r3, #0]
24011cf2:	691b      	ldr	r3, [r3, #16]
24011cf4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
24011cf8:	60fb      	str	r3, [r7, #12]

  if((hmdma->Instance->CCR &  MDMA_CCR_EN) == 0U)
24011cfa:	687b      	ldr	r3, [r7, #4]
24011cfc:	681b      	ldr	r3, [r3, #0]
24011cfe:	68db      	ldr	r3, [r3, #12]
24011d00:	f003 0301 	and.w	r3, r3, #1
24011d04:	2b00      	cmp	r3, #0
24011d06:	d104      	bne.n	24011d12 <HAL_MDMA_GenerateSWRequest+0x36>
  {
    /* if no Transfer on going (MDMA enable bit not set) return error */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
24011d08:	687b      	ldr	r3, [r7, #4]
24011d0a:	2280      	movs	r2, #128	; 0x80
24011d0c:	669a      	str	r2, [r3, #104]	; 0x68

    return HAL_ERROR;
24011d0e:	2301      	movs	r3, #1
24011d10:	e018      	b.n	24011d44 <HAL_MDMA_GenerateSWRequest+0x68>
  }
  else if(((hmdma->Instance->CISR &  MDMA_CISR_CRQA) != 0U) || (request_mode == 0U))
24011d12:	687b      	ldr	r3, [r7, #4]
24011d14:	681b      	ldr	r3, [r3, #0]
24011d16:	681b      	ldr	r3, [r3, #0]
24011d18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
24011d1c:	2b00      	cmp	r3, #0
24011d1e:	d102      	bne.n	24011d26 <HAL_MDMA_GenerateSWRequest+0x4a>
24011d20:	68fb      	ldr	r3, [r7, #12]
24011d22:	2b00      	cmp	r3, #0
24011d24:	d105      	bne.n	24011d32 <HAL_MDMA_GenerateSWRequest+0x56>
  {
    /* if an MDMA ongoing request has not yet end or if request mode is not SW request return error */
    hmdma->ErrorCode = HAL_MDMA_ERROR_BUSY;
24011d26:	687b      	ldr	r3, [r7, #4]
24011d28:	f44f 7280 	mov.w	r2, #256	; 0x100
24011d2c:	669a      	str	r2, [r3, #104]	; 0x68

    return HAL_ERROR;
24011d2e:	2301      	movs	r3, #1
24011d30:	e008      	b.n	24011d44 <HAL_MDMA_GenerateSWRequest+0x68>
  }
  else
  {
    /* Set the SW request bit to activate the request on the Channel */
    hmdma->Instance->CCR |= MDMA_CCR_SWRQ;
24011d32:	687b      	ldr	r3, [r7, #4]
24011d34:	681b      	ldr	r3, [r3, #0]
24011d36:	68da      	ldr	r2, [r3, #12]
24011d38:	687b      	ldr	r3, [r7, #4]
24011d3a:	681b      	ldr	r3, [r3, #0]
24011d3c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
24011d40:	60da      	str	r2, [r3, #12]

    return HAL_OK;
24011d42:	2300      	movs	r3, #0
  }
}
24011d44:	4618      	mov	r0, r3
24011d46:	3714      	adds	r7, #20
24011d48:	46bd      	mov	sp, r7
24011d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
24011d4e:	4770      	bx	lr

24011d50 <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
24011d50:	b580      	push	{r7, lr}
24011d52:	b086      	sub	sp, #24
24011d54:	af00      	add	r7, sp, #0
24011d56:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
24011d58:	2300      	movs	r3, #0
24011d5a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
24011d5c:	4b91      	ldr	r3, [pc, #580]	; (24011fa4 <HAL_MDMA_IRQHandler+0x254>)
24011d5e:	681b      	ldr	r3, [r3, #0]
24011d60:	4a91      	ldr	r2, [pc, #580]	; (24011fa8 <HAL_MDMA_IRQHandler+0x258>)
24011d62:	fba2 2303 	umull	r2, r3, r2, r3
24011d66:	0a9b      	lsrs	r3, r3, #10
24011d68:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
24011d6a:	687b      	ldr	r3, [r7, #4]
24011d6c:	681b      	ldr	r3, [r3, #0]
24011d6e:	461a      	mov	r2, r3
24011d70:	4b8e      	ldr	r3, [pc, #568]	; (24011fac <HAL_MDMA_IRQHandler+0x25c>)
24011d72:	4413      	add	r3, r2
24011d74:	099b      	lsrs	r3, r3, #6
24011d76:	f003 031f 	and.w	r3, r3, #31
24011d7a:	2201      	movs	r2, #1
24011d7c:	fa02 f303 	lsl.w	r3, r2, r3
24011d80:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
24011d82:	f04f 43a4 	mov.w	r3, #1375731712	; 0x52000000
24011d86:	681a      	ldr	r2, [r3, #0]
24011d88:	693b      	ldr	r3, [r7, #16]
24011d8a:	4013      	ands	r3, r2
24011d8c:	2b00      	cmp	r3, #0
24011d8e:	f000 812d 	beq.w	24011fec <HAL_MDMA_IRQHandler+0x29c>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
24011d92:	687b      	ldr	r3, [r7, #4]
24011d94:	681b      	ldr	r3, [r3, #0]
24011d96:	681b      	ldr	r3, [r3, #0]
24011d98:	f003 0301 	and.w	r3, r3, #1
24011d9c:	2b00      	cmp	r3, #0
24011d9e:	d054      	beq.n	24011e4a <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
24011da0:	687b      	ldr	r3, [r7, #4]
24011da2:	681b      	ldr	r3, [r3, #0]
24011da4:	68db      	ldr	r3, [r3, #12]
24011da6:	f003 0302 	and.w	r3, r3, #2
24011daa:	2b00      	cmp	r3, #0
24011dac:	d04d      	beq.n	24011e4a <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
24011dae:	687b      	ldr	r3, [r7, #4]
24011db0:	681b      	ldr	r3, [r3, #0]
24011db2:	68da      	ldr	r2, [r3, #12]
24011db4:	687b      	ldr	r3, [r7, #4]
24011db6:	681b      	ldr	r3, [r3, #0]
24011db8:	f022 0202 	bic.w	r2, r2, #2
24011dbc:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
24011dbe:	687b      	ldr	r3, [r7, #4]
24011dc0:	681b      	ldr	r3, [r3, #0]
24011dc2:	689b      	ldr	r3, [r3, #8]
24011dc4:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
24011dc6:	68fb      	ldr	r3, [r7, #12]
24011dc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
24011dcc:	2b00      	cmp	r3, #0
24011dce:	d106      	bne.n	24011dde <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
24011dd0:	687b      	ldr	r3, [r7, #4]
24011dd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
24011dd4:	f043 0201 	orr.w	r2, r3, #1
24011dd8:	687b      	ldr	r3, [r7, #4]
24011dda:	669a      	str	r2, [r3, #104]	; 0x68
24011ddc:	e005      	b.n	24011dea <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
24011dde:	687b      	ldr	r3, [r7, #4]
24011de0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
24011de2:	f043 0202 	orr.w	r2, r3, #2
24011de6:	687b      	ldr	r3, [r7, #4]
24011de8:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
24011dea:	68fb      	ldr	r3, [r7, #12]
24011dec:	f403 7300 	and.w	r3, r3, #512	; 0x200
24011df0:	2b00      	cmp	r3, #0
24011df2:	d005      	beq.n	24011e00 <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
24011df4:	687b      	ldr	r3, [r7, #4]
24011df6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
24011df8:	f043 0204 	orr.w	r2, r3, #4
24011dfc:	687b      	ldr	r3, [r7, #4]
24011dfe:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
24011e00:	68fb      	ldr	r3, [r7, #12]
24011e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
24011e06:	2b00      	cmp	r3, #0
24011e08:	d005      	beq.n	24011e16 <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
24011e0a:	687b      	ldr	r3, [r7, #4]
24011e0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
24011e0e:	f043 0208 	orr.w	r2, r3, #8
24011e12:	687b      	ldr	r3, [r7, #4]
24011e14:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
24011e16:	68fb      	ldr	r3, [r7, #12]
24011e18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
24011e1c:	2b00      	cmp	r3, #0
24011e1e:	d005      	beq.n	24011e2c <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
24011e20:	687b      	ldr	r3, [r7, #4]
24011e22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
24011e24:	f043 0210 	orr.w	r2, r3, #16
24011e28:	687b      	ldr	r3, [r7, #4]
24011e2a:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
24011e2c:	68fb      	ldr	r3, [r7, #12]
24011e2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
24011e32:	2b00      	cmp	r3, #0
24011e34:	d005      	beq.n	24011e42 <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
24011e36:	687b      	ldr	r3, [r7, #4]
24011e38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
24011e3a:	f043 0220 	orr.w	r2, r3, #32
24011e3e:	687b      	ldr	r3, [r7, #4]
24011e40:	669a      	str	r2, [r3, #104]	; 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
24011e42:	687b      	ldr	r3, [r7, #4]
24011e44:	681b      	ldr	r3, [r3, #0]
24011e46:	2201      	movs	r2, #1
24011e48:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
24011e4a:	687b      	ldr	r3, [r7, #4]
24011e4c:	681b      	ldr	r3, [r3, #0]
24011e4e:	681b      	ldr	r3, [r3, #0]
24011e50:	f003 0310 	and.w	r3, r3, #16
24011e54:	2b00      	cmp	r3, #0
24011e56:	d012      	beq.n	24011e7e <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
24011e58:	687b      	ldr	r3, [r7, #4]
24011e5a:	681b      	ldr	r3, [r3, #0]
24011e5c:	68db      	ldr	r3, [r3, #12]
24011e5e:	f003 0320 	and.w	r3, r3, #32
24011e62:	2b00      	cmp	r3, #0
24011e64:	d00b      	beq.n	24011e7e <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
24011e66:	687b      	ldr	r3, [r7, #4]
24011e68:	681b      	ldr	r3, [r3, #0]
24011e6a:	2210      	movs	r2, #16
24011e6c:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
24011e6e:	687b      	ldr	r3, [r7, #4]
24011e70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
24011e72:	2b00      	cmp	r3, #0
24011e74:	d003      	beq.n	24011e7e <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
24011e76:	687b      	ldr	r3, [r7, #4]
24011e78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
24011e7a:	6878      	ldr	r0, [r7, #4]
24011e7c:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
24011e7e:	687b      	ldr	r3, [r7, #4]
24011e80:	681b      	ldr	r3, [r3, #0]
24011e82:	681b      	ldr	r3, [r3, #0]
24011e84:	f003 0308 	and.w	r3, r3, #8
24011e88:	2b00      	cmp	r3, #0
24011e8a:	d012      	beq.n	24011eb2 <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
24011e8c:	687b      	ldr	r3, [r7, #4]
24011e8e:	681b      	ldr	r3, [r3, #0]
24011e90:	68db      	ldr	r3, [r3, #12]
24011e92:	f003 0310 	and.w	r3, r3, #16
24011e96:	2b00      	cmp	r3, #0
24011e98:	d00b      	beq.n	24011eb2 <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
24011e9a:	687b      	ldr	r3, [r7, #4]
24011e9c:	681b      	ldr	r3, [r3, #0]
24011e9e:	2208      	movs	r2, #8
24011ea0:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
24011ea2:	687b      	ldr	r3, [r7, #4]
24011ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24011ea6:	2b00      	cmp	r3, #0
24011ea8:	d003      	beq.n	24011eb2 <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
24011eaa:	687b      	ldr	r3, [r7, #4]
24011eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24011eae:	6878      	ldr	r0, [r7, #4]
24011eb0:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
24011eb2:	687b      	ldr	r3, [r7, #4]
24011eb4:	681b      	ldr	r3, [r3, #0]
24011eb6:	681b      	ldr	r3, [r3, #0]
24011eb8:	f003 0304 	and.w	r3, r3, #4
24011ebc:	2b00      	cmp	r3, #0
24011ebe:	d012      	beq.n	24011ee6 <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
24011ec0:	687b      	ldr	r3, [r7, #4]
24011ec2:	681b      	ldr	r3, [r3, #0]
24011ec4:	68db      	ldr	r3, [r3, #12]
24011ec6:	f003 0308 	and.w	r3, r3, #8
24011eca:	2b00      	cmp	r3, #0
24011ecc:	d00b      	beq.n	24011ee6 <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
24011ece:	687b      	ldr	r3, [r7, #4]
24011ed0:	681b      	ldr	r3, [r3, #0]
24011ed2:	2204      	movs	r2, #4
24011ed4:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
24011ed6:	687b      	ldr	r3, [r7, #4]
24011ed8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24011eda:	2b00      	cmp	r3, #0
24011edc:	d003      	beq.n	24011ee6 <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
24011ede:	687b      	ldr	r3, [r7, #4]
24011ee0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24011ee2:	6878      	ldr	r0, [r7, #4]
24011ee4:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
24011ee6:	687b      	ldr	r3, [r7, #4]
24011ee8:	681b      	ldr	r3, [r3, #0]
24011eea:	681b      	ldr	r3, [r3, #0]
24011eec:	f003 0302 	and.w	r3, r3, #2
24011ef0:	2b00      	cmp	r3, #0
24011ef2:	d039      	beq.n	24011f68 <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
24011ef4:	687b      	ldr	r3, [r7, #4]
24011ef6:	681b      	ldr	r3, [r3, #0]
24011ef8:	68db      	ldr	r3, [r3, #12]
24011efa:	f003 0304 	and.w	r3, r3, #4
24011efe:	2b00      	cmp	r3, #0
24011f00:	d032      	beq.n	24011f68 <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
24011f02:	687b      	ldr	r3, [r7, #4]
24011f04:	681b      	ldr	r3, [r3, #0]
24011f06:	68da      	ldr	r2, [r3, #12]
24011f08:	687b      	ldr	r3, [r7, #4]
24011f0a:	681b      	ldr	r3, [r3, #0]
24011f0c:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
24011f10:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
24011f12:	687b      	ldr	r3, [r7, #4]
24011f14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
24011f18:	b2db      	uxtb	r3, r3
24011f1a:	2b04      	cmp	r3, #4
24011f1c:	d110      	bne.n	24011f40 <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
24011f1e:	687b      	ldr	r3, [r7, #4]
24011f20:	2200      	movs	r2, #0
24011f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
24011f26:	687b      	ldr	r3, [r7, #4]
24011f28:	2201      	movs	r2, #1
24011f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        if(hmdma->XferAbortCallback != NULL)
24011f2e:	687b      	ldr	r3, [r7, #4]
24011f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24011f32:	2b00      	cmp	r3, #0
24011f34:	d05c      	beq.n	24011ff0 <HAL_MDMA_IRQHandler+0x2a0>
        {
          hmdma->XferAbortCallback(hmdma);
24011f36:	687b      	ldr	r3, [r7, #4]
24011f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24011f3a:	6878      	ldr	r0, [r7, #4]
24011f3c:	4798      	blx	r3
        }
        return;
24011f3e:	e057      	b.n	24011ff0 <HAL_MDMA_IRQHandler+0x2a0>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
24011f40:	687b      	ldr	r3, [r7, #4]
24011f42:	681b      	ldr	r3, [r3, #0]
24011f44:	2202      	movs	r2, #2
24011f46:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
24011f48:	687b      	ldr	r3, [r7, #4]
24011f4a:	2200      	movs	r2, #0
24011f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
24011f50:	687b      	ldr	r3, [r7, #4]
24011f52:	2201      	movs	r2, #1
24011f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if(hmdma->XferCpltCallback != NULL)
24011f58:	687b      	ldr	r3, [r7, #4]
24011f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24011f5c:	2b00      	cmp	r3, #0
24011f5e:	d003      	beq.n	24011f68 <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
24011f60:	687b      	ldr	r3, [r7, #4]
24011f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24011f64:	6878      	ldr	r0, [r7, #4]
24011f66:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
24011f68:	687b      	ldr	r3, [r7, #4]
24011f6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
24011f6c:	2b00      	cmp	r3, #0
24011f6e:	d040      	beq.n	24011ff2 <HAL_MDMA_IRQHandler+0x2a2>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
24011f70:	687b      	ldr	r3, [r7, #4]
24011f72:	2204      	movs	r2, #4
24011f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
24011f78:	687b      	ldr	r3, [r7, #4]
24011f7a:	681b      	ldr	r3, [r3, #0]
24011f7c:	68da      	ldr	r2, [r3, #12]
24011f7e:	687b      	ldr	r3, [r7, #4]
24011f80:	681b      	ldr	r3, [r3, #0]
24011f82:	f022 0201 	bic.w	r2, r2, #1
24011f86:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
24011f88:	68bb      	ldr	r3, [r7, #8]
24011f8a:	3301      	adds	r3, #1
24011f8c:	60bb      	str	r3, [r7, #8]
24011f8e:	697a      	ldr	r2, [r7, #20]
24011f90:	429a      	cmp	r2, r3
24011f92:	d30d      	bcc.n	24011fb0 <HAL_MDMA_IRQHandler+0x260>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
24011f94:	687b      	ldr	r3, [r7, #4]
24011f96:	681b      	ldr	r3, [r3, #0]
24011f98:	68db      	ldr	r3, [r3, #12]
24011f9a:	f003 0301 	and.w	r3, r3, #1
24011f9e:	2b00      	cmp	r3, #0
24011fa0:	d1f2      	bne.n	24011f88 <HAL_MDMA_IRQHandler+0x238>
24011fa2:	e006      	b.n	24011fb2 <HAL_MDMA_IRQHandler+0x262>
24011fa4:	240004b0 	.word	0x240004b0
24011fa8:	1b4e81b5 	.word	0x1b4e81b5
24011fac:	adffffc0 	.word	0xadffffc0
        break;
24011fb0:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
24011fb2:	687b      	ldr	r3, [r7, #4]
24011fb4:	2200      	movs	r2, #0
24011fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
24011fba:	687b      	ldr	r3, [r7, #4]
24011fbc:	681b      	ldr	r3, [r3, #0]
24011fbe:	68db      	ldr	r3, [r3, #12]
24011fc0:	f003 0301 	and.w	r3, r3, #1
24011fc4:	2b00      	cmp	r3, #0
24011fc6:	d004      	beq.n	24011fd2 <HAL_MDMA_IRQHandler+0x282>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
24011fc8:	687b      	ldr	r3, [r7, #4]
24011fca:	2203      	movs	r2, #3
24011fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
24011fd0:	e003      	b.n	24011fda <HAL_MDMA_IRQHandler+0x28a>
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
24011fd2:	687b      	ldr	r3, [r7, #4]
24011fd4:	2201      	movs	r2, #1
24011fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
24011fda:	687b      	ldr	r3, [r7, #4]
24011fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24011fde:	2b00      	cmp	r3, #0
24011fe0:	d007      	beq.n	24011ff2 <HAL_MDMA_IRQHandler+0x2a2>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
24011fe2:	687b      	ldr	r3, [r7, #4]
24011fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24011fe6:	6878      	ldr	r0, [r7, #4]
24011fe8:	4798      	blx	r3
24011fea:	e002      	b.n	24011ff2 <HAL_MDMA_IRQHandler+0x2a2>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
24011fec:	bf00      	nop
24011fee:	e000      	b.n	24011ff2 <HAL_MDMA_IRQHandler+0x2a2>
        return;
24011ff0:	bf00      	nop
    }
  }
}
24011ff2:	3718      	adds	r7, #24
24011ff4:	46bd      	mov	sp, r7
24011ff6:	bd80      	pop	{r7, pc}

24011ff8 <HAL_MDMA_GetState>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL state
  */
HAL_MDMA_StateTypeDef HAL_MDMA_GetState(MDMA_HandleTypeDef *hmdma)
{
24011ff8:	b480      	push	{r7}
24011ffa:	b083      	sub	sp, #12
24011ffc:	af00      	add	r7, sp, #0
24011ffe:	6078      	str	r0, [r7, #4]
  return hmdma->State;
24012000:	687b      	ldr	r3, [r7, #4]
24012002:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
24012006:	b2db      	uxtb	r3, r3
}
24012008:	4618      	mov	r0, r3
2401200a:	370c      	adds	r7, #12
2401200c:	46bd      	mov	sp, r7
2401200e:	f85d 7b04 	ldr.w	r7, [sp], #4
24012012:	4770      	bx	lr

24012014 <HAL_MDMA_GetError>:
  * @param  hmdma : pointer to a MDMA_HandleTypeDef structure that contains
  *              the configuration information for the specified MDMA Channel.
  * @retval MDMA Error Code
  */
uint32_t HAL_MDMA_GetError(MDMA_HandleTypeDef *hmdma)
{
24012014:	b480      	push	{r7}
24012016:	b083      	sub	sp, #12
24012018:	af00      	add	r7, sp, #0
2401201a:	6078      	str	r0, [r7, #4]
  return hmdma->ErrorCode;
2401201c:	687b      	ldr	r3, [r7, #4]
2401201e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
}
24012020:	4618      	mov	r0, r3
24012022:	370c      	adds	r7, #12
24012024:	46bd      	mov	sp, r7
24012026:	f85d 7b04 	ldr.w	r7, [sp], #4
2401202a:	4770      	bx	lr

2401202c <MDMA_SetConfig>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount: The number of blocks to be transferred
  * @retval HAL status
  */
static void MDMA_SetConfig(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
2401202c:	b480      	push	{r7}
2401202e:	b087      	sub	sp, #28
24012030:	af00      	add	r7, sp, #0
24012032:	60f8      	str	r0, [r7, #12]
24012034:	60b9      	str	r1, [r7, #8]
24012036:	607a      	str	r2, [r7, #4]
24012038:	603b      	str	r3, [r7, #0]
  uint32_t addressMask;

  /* Configure the MDMA Channel data length */
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
2401203a:	68fb      	ldr	r3, [r7, #12]
2401203c:	681b      	ldr	r3, [r3, #0]
2401203e:	695a      	ldr	r2, [r3, #20]
24012040:	4b31      	ldr	r3, [pc, #196]	; (24012108 <MDMA_SetConfig+0xdc>)
24012042:	4013      	ands	r3, r2
24012044:	683a      	ldr	r2, [r7, #0]
24012046:	f3c2 0110 	ubfx	r1, r2, #0, #17
2401204a:	68fa      	ldr	r2, [r7, #12]
2401204c:	6812      	ldr	r2, [r2, #0]
2401204e:	430b      	orrs	r3, r1
24012050:	6153      	str	r3, [r2, #20]

  /* Configure the MDMA block repeat count */
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
24012052:	68fb      	ldr	r3, [r7, #12]
24012054:	681b      	ldr	r3, [r3, #0]
24012056:	695b      	ldr	r3, [r3, #20]
24012058:	f3c3 0113 	ubfx	r1, r3, #0, #20
2401205c:	6a3b      	ldr	r3, [r7, #32]
2401205e:	3b01      	subs	r3, #1
24012060:	051a      	lsls	r2, r3, #20
24012062:	68fb      	ldr	r3, [r7, #12]
24012064:	681b      	ldr	r3, [r3, #0]
24012066:	430a      	orrs	r2, r1
24012068:	615a      	str	r2, [r3, #20]

  /* Clear all interrupt flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
2401206a:	68fb      	ldr	r3, [r7, #12]
2401206c:	681b      	ldr	r3, [r3, #0]
2401206e:	221f      	movs	r2, #31
24012070:	605a      	str	r2, [r3, #4]

  /* Configure MDMA Channel destination address */
  hmdma->Instance->CDAR = DstAddress;
24012072:	68fb      	ldr	r3, [r7, #12]
24012074:	681b      	ldr	r3, [r3, #0]
24012076:	687a      	ldr	r2, [r7, #4]
24012078:	61da      	str	r2, [r3, #28]

  /* Configure MDMA Channel Source address */
  hmdma->Instance->CSAR = SrcAddress;
2401207a:	68fb      	ldr	r3, [r7, #12]
2401207c:	681b      	ldr	r3, [r3, #0]
2401207e:	68ba      	ldr	r2, [r7, #8]
24012080:	619a      	str	r2, [r3, #24]

  addressMask = SrcAddress & 0xFF000000U;
24012082:	68bb      	ldr	r3, [r7, #8]
24012084:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
24012088:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
2401208a:	697b      	ldr	r3, [r7, #20]
2401208c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24012090:	d002      	beq.n	24012098 <MDMA_SetConfig+0x6c>
24012092:	697b      	ldr	r3, [r7, #20]
24012094:	2b00      	cmp	r3, #0
24012096:	d108      	bne.n	240120aa <MDMA_SetConfig+0x7e>
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
24012098:	68fb      	ldr	r3, [r7, #12]
2401209a:	681b      	ldr	r3, [r3, #0]
2401209c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
2401209e:	68fb      	ldr	r3, [r7, #12]
240120a0:	681b      	ldr	r3, [r3, #0]
240120a2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
240120a6:	629a      	str	r2, [r3, #40]	; 0x28
240120a8:	e007      	b.n	240120ba <MDMA_SetConfig+0x8e>
  }
  else
  {
    /*The AXI bus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
240120aa:	68fb      	ldr	r3, [r7, #12]
240120ac:	681b      	ldr	r3, [r3, #0]
240120ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
240120b0:	68fb      	ldr	r3, [r7, #12]
240120b2:	681b      	ldr	r3, [r3, #0]
240120b4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
240120b8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  addressMask = DstAddress & 0xFF000000U;
240120ba:	687b      	ldr	r3, [r7, #4]
240120bc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
240120c0:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
240120c2:	697b      	ldr	r3, [r7, #20]
240120c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
240120c8:	d002      	beq.n	240120d0 <MDMA_SetConfig+0xa4>
240120ca:	697b      	ldr	r3, [r7, #20]
240120cc:	2b00      	cmp	r3, #0
240120ce:	d108      	bne.n	240120e2 <MDMA_SetConfig+0xb6>
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
240120d0:	68fb      	ldr	r3, [r7, #12]
240120d2:	681b      	ldr	r3, [r3, #0]
240120d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
240120d6:	68fb      	ldr	r3, [r7, #12]
240120d8:	681b      	ldr	r3, [r3, #0]
240120da:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
240120de:	629a      	str	r2, [r3, #40]	; 0x28
240120e0:	e007      	b.n	240120f2 <MDMA_SetConfig+0xc6>
  }
  else
  {
    /*The AXI bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
240120e2:	68fb      	ldr	r3, [r7, #12]
240120e4:	681b      	ldr	r3, [r3, #0]
240120e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
240120e8:	68fb      	ldr	r3, [r7, #12]
240120ea:	681b      	ldr	r3, [r3, #0]
240120ec:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
240120f0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Set the linked list register to the first node of the list */
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
240120f2:	68fb      	ldr	r3, [r7, #12]
240120f4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
240120f6:	68fb      	ldr	r3, [r7, #12]
240120f8:	681b      	ldr	r3, [r3, #0]
240120fa:	625a      	str	r2, [r3, #36]	; 0x24
}
240120fc:	bf00      	nop
240120fe:	371c      	adds	r7, #28
24012100:	46bd      	mov	sp, r7
24012102:	f85d 7b04 	ldr.w	r7, [sp], #4
24012106:	4770      	bx	lr
24012108:	fffe0000 	.word	0xfffe0000

2401210c <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
2401210c:	b480      	push	{r7}
2401210e:	b085      	sub	sp, #20
24012110:	af00      	add	r7, sp, #0
24012112:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
24012114:	687b      	ldr	r3, [r7, #4]
24012116:	68d9      	ldr	r1, [r3, #12]
24012118:	687b      	ldr	r3, [r7, #4]
2401211a:	691a      	ldr	r2, [r3, #16]
2401211c:	687b      	ldr	r3, [r7, #4]
2401211e:	681b      	ldr	r3, [r3, #0]
24012120:	430a      	orrs	r2, r1
24012122:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
24012124:	687b      	ldr	r3, [r7, #4]
24012126:	695a      	ldr	r2, [r3, #20]
24012128:	687b      	ldr	r3, [r7, #4]
2401212a:	699b      	ldr	r3, [r3, #24]
2401212c:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
2401212e:	687b      	ldr	r3, [r7, #4]
24012130:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
24012132:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
24012134:	687b      	ldr	r3, [r7, #4]
24012136:	6a1b      	ldr	r3, [r3, #32]
24012138:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
2401213a:	687b      	ldr	r3, [r7, #4]
2401213c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
2401213e:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
24012140:	687b      	ldr	r3, [r7, #4]
24012142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24012144:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
24012146:	687b      	ldr	r3, [r7, #4]
24012148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
2401214a:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
2401214c:	687b      	ldr	r3, [r7, #4]
2401214e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24012150:	3b01      	subs	r3, #1
24012152:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
24012154:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
24012158:	687b      	ldr	r3, [r7, #4]
2401215a:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
2401215c:	687b      	ldr	r3, [r7, #4]
2401215e:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
24012160:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
24012162:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
24012164:	687b      	ldr	r3, [r7, #4]
24012166:	685b      	ldr	r3, [r3, #4]
24012168:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
2401216c:	d107      	bne.n	2401217e <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
2401216e:	687b      	ldr	r3, [r7, #4]
24012170:	681b      	ldr	r3, [r3, #0]
24012172:	691a      	ldr	r2, [r3, #16]
24012174:	687b      	ldr	r3, [r7, #4]
24012176:	681b      	ldr	r3, [r3, #0]
24012178:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
2401217c:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
2401217e:	687b      	ldr	r3, [r7, #4]
24012180:	681b      	ldr	r3, [r3, #0]
24012182:	2200      	movs	r2, #0
24012184:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
24012186:	687b      	ldr	r3, [r7, #4]
24012188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2401218a:	2b00      	cmp	r3, #0
2401218c:	da11      	bge.n	240121b2 <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
2401218e:	687b      	ldr	r3, [r7, #4]
24012190:	681b      	ldr	r3, [r3, #0]
24012192:	695a      	ldr	r2, [r3, #20]
24012194:	687b      	ldr	r3, [r7, #4]
24012196:	681b      	ldr	r3, [r3, #0]
24012198:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
2401219c:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
2401219e:	687b      	ldr	r3, [r7, #4]
240121a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
240121a2:	425b      	negs	r3, r3
240121a4:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
240121a6:	687b      	ldr	r3, [r7, #4]
240121a8:	681b      	ldr	r3, [r3, #0]
240121aa:	68fa      	ldr	r2, [r7, #12]
240121ac:	b292      	uxth	r2, r2
240121ae:	621a      	str	r2, [r3, #32]
240121b0:	e006      	b.n	240121c0 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
240121b2:	687b      	ldr	r3, [r7, #4]
240121b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
240121b6:	461a      	mov	r2, r3
240121b8:	687b      	ldr	r3, [r7, #4]
240121ba:	681b      	ldr	r3, [r3, #0]
240121bc:	b292      	uxth	r2, r2
240121be:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
240121c0:	687b      	ldr	r3, [r7, #4]
240121c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
240121c4:	2b00      	cmp	r3, #0
240121c6:	da15      	bge.n	240121f4 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
240121c8:	687b      	ldr	r3, [r7, #4]
240121ca:	681b      	ldr	r3, [r3, #0]
240121cc:	695a      	ldr	r2, [r3, #20]
240121ce:	687b      	ldr	r3, [r7, #4]
240121d0:	681b      	ldr	r3, [r3, #0]
240121d2:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
240121d6:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
240121d8:	687b      	ldr	r3, [r7, #4]
240121da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
240121dc:	425b      	negs	r3, r3
240121de:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
240121e0:	687b      	ldr	r3, [r7, #4]
240121e2:	681b      	ldr	r3, [r3, #0]
240121e4:	6a19      	ldr	r1, [r3, #32]
240121e6:	68fb      	ldr	r3, [r7, #12]
240121e8:	041a      	lsls	r2, r3, #16
240121ea:	687b      	ldr	r3, [r7, #4]
240121ec:	681b      	ldr	r3, [r3, #0]
240121ee:	430a      	orrs	r2, r1
240121f0:	621a      	str	r2, [r3, #32]
240121f2:	e009      	b.n	24012208 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
240121f4:	687b      	ldr	r3, [r7, #4]
240121f6:	681b      	ldr	r3, [r3, #0]
240121f8:	6a19      	ldr	r1, [r3, #32]
240121fa:	687b      	ldr	r3, [r7, #4]
240121fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
240121fe:	041a      	lsls	r2, r3, #16
24012200:	687b      	ldr	r3, [r7, #4]
24012202:	681b      	ldr	r3, [r3, #0]
24012204:	430a      	orrs	r2, r1
24012206:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
24012208:	687b      	ldr	r3, [r7, #4]
2401220a:	685b      	ldr	r3, [r3, #4]
2401220c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
24012210:	d006      	beq.n	24012220 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
24012212:	687b      	ldr	r3, [r7, #4]
24012214:	685a      	ldr	r2, [r3, #4]
24012216:	687b      	ldr	r3, [r7, #4]
24012218:	681b      	ldr	r3, [r3, #0]
2401221a:	b2d2      	uxtb	r2, r2
2401221c:	629a      	str	r2, [r3, #40]	; 0x28
2401221e:	e003      	b.n	24012228 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
24012220:	687b      	ldr	r3, [r7, #4]
24012222:	681b      	ldr	r3, [r3, #0]
24012224:	2200      	movs	r2, #0
24012226:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
24012228:	687b      	ldr	r3, [r7, #4]
2401222a:	681b      	ldr	r3, [r3, #0]
2401222c:	2200      	movs	r2, #0
2401222e:	625a      	str	r2, [r3, #36]	; 0x24
}
24012230:	bf00      	nop
24012232:	3714      	adds	r7, #20
24012234:	46bd      	mov	sp, r7
24012236:	f85d 7b04 	ldr.w	r7, [sp], #4
2401223a:	4770      	bx	lr

2401223c <HAL_PWR_DeInit>:
  *         The prototype is kept just to maintain compatibility with other
  *         products.
  * @retval None.
  */
void HAL_PWR_DeInit (void)
{
2401223c:	b480      	push	{r7}
2401223e:	af00      	add	r7, sp, #0
}
24012240:	bf00      	nop
24012242:	46bd      	mov	sp, r7
24012244:	f85d 7b04 	ldr.w	r7, [sp], #4
24012248:	4770      	bx	lr
	...

2401224c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
2401224c:	b480      	push	{r7}
2401224e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
24012250:	4b05      	ldr	r3, [pc, #20]	; (24012268 <HAL_PWR_EnableBkUpAccess+0x1c>)
24012252:	681b      	ldr	r3, [r3, #0]
24012254:	4a04      	ldr	r2, [pc, #16]	; (24012268 <HAL_PWR_EnableBkUpAccess+0x1c>)
24012256:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2401225a:	6013      	str	r3, [r2, #0]
}
2401225c:	bf00      	nop
2401225e:	46bd      	mov	sp, r7
24012260:	f85d 7b04 	ldr.w	r7, [sp], #4
24012264:	4770      	bx	lr
24012266:	bf00      	nop
24012268:	58024800 	.word	0x58024800

2401226c <HAL_PWR_DisableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_DisableBkUpAccess (void)
{
2401226c:	b480      	push	{r7}
2401226e:	af00      	add	r7, sp, #0
  /* Disable access to RTC and backup registers */
  CLEAR_BIT (PWR->CR1, PWR_CR1_DBP);
24012270:	4b05      	ldr	r3, [pc, #20]	; (24012288 <HAL_PWR_DisableBkUpAccess+0x1c>)
24012272:	681b      	ldr	r3, [r3, #0]
24012274:	4a04      	ldr	r2, [pc, #16]	; (24012288 <HAL_PWR_DisableBkUpAccess+0x1c>)
24012276:	f423 7380 	bic.w	r3, r3, #256	; 0x100
2401227a:	6013      	str	r3, [r2, #0]
}
2401227c:	bf00      	nop
2401227e:	46bd      	mov	sp, r7
24012280:	f85d 7b04 	ldr.w	r7, [sp], #4
24012284:	4770      	bx	lr
24012286:	bf00      	nop
24012288:	58024800 	.word	0x58024800

2401228c <HAL_PWR_ConfigPVD>:
  *         driver. All combination are allowed: wake up only Cortex-M7, wake up
  *         only Cortex-M4 or wake up Cortex-M7 and Cortex-M4.
  * @retval None.
  */
void HAL_PWR_ConfigPVD (PWR_PVDTypeDef *sConfigPVD)
{
2401228c:	b480      	push	{r7}
2401228e:	b083      	sub	sp, #12
24012290:	af00      	add	r7, sp, #0
24012292:	6078      	str	r0, [r7, #4]
  /* Check the PVD configuration parameter */
  if (sConfigPVD == NULL)
24012294:	687b      	ldr	r3, [r7, #4]
24012296:	2b00      	cmp	r3, #0
24012298:	d069      	beq.n	2401236e <HAL_PWR_ConfigPVD+0xe2>
  /* Check the parameters */
  assert_param (IS_PWR_PVD_LEVEL (sConfigPVD->PVDLevel));
  assert_param (IS_PWR_PVD_MODE (sConfigPVD->Mode));

  /* Set PLS[7:5] bits according to PVDLevel value */
  MODIFY_REG (PWR->CR1, PWR_CR1_PLS, sConfigPVD->PVDLevel);
2401229a:	4b38      	ldr	r3, [pc, #224]	; (2401237c <HAL_PWR_ConfigPVD+0xf0>)
2401229c:	681b      	ldr	r3, [r3, #0]
2401229e:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
240122a2:	687b      	ldr	r3, [r7, #4]
240122a4:	681b      	ldr	r3, [r3, #0]
240122a6:	4935      	ldr	r1, [pc, #212]	; (2401237c <HAL_PWR_ConfigPVD+0xf0>)
240122a8:	4313      	orrs	r3, r2
240122aa:	600b      	str	r3, [r1, #0]

  /* Clear previous config */
#if !defined (DUAL_CORE)
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT ();
240122ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
240122b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
240122b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
240122b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
240122bc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __HAL_PWR_PVD_EXTI_DISABLE_IT ();
240122c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
240122c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
240122c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
240122cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
240122d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* !defined (DUAL_CORE) */

  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE ();
240122d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
240122d8:	681b      	ldr	r3, [r3, #0]
240122da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
240122de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
240122e2:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE ();
240122e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
240122e8:	685b      	ldr	r3, [r3, #4]
240122ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
240122ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
240122f2:	6053      	str	r3, [r2, #4]

#if !defined (DUAL_CORE)
  /* Interrupt mode configuration */
  if ((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
240122f4:	687b      	ldr	r3, [r7, #4]
240122f6:	685b      	ldr	r3, [r3, #4]
240122f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
240122fc:	2b00      	cmp	r3, #0
240122fe:	d009      	beq.n	24012314 <HAL_PWR_ConfigPVD+0x88>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT ();
24012300:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24012304:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
24012308:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
2401230c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
24012310:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  }

  /* Event mode configuration */
  if ((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
24012314:	687b      	ldr	r3, [r7, #4]
24012316:	685b      	ldr	r3, [r3, #4]
24012318:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2401231c:	2b00      	cmp	r3, #0
2401231e:	d009      	beq.n	24012334 <HAL_PWR_ConfigPVD+0xa8>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT ();
24012320:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24012324:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
24012328:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
2401232c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
24012330:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  }
#endif /* !defined (DUAL_CORE) */

  /* Rising edge configuration */
  if ((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
24012334:	687b      	ldr	r3, [r7, #4]
24012336:	685b      	ldr	r3, [r3, #4]
24012338:	f003 0301 	and.w	r3, r3, #1
2401233c:	2b00      	cmp	r3, #0
2401233e:	d007      	beq.n	24012350 <HAL_PWR_ConfigPVD+0xc4>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE ();
24012340:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24012344:	681b      	ldr	r3, [r3, #0]
24012346:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
2401234a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2401234e:	6013      	str	r3, [r2, #0]
  }

  /* Falling edge configuration */
  if ((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
24012350:	687b      	ldr	r3, [r7, #4]
24012352:	685b      	ldr	r3, [r3, #4]
24012354:	f003 0302 	and.w	r3, r3, #2
24012358:	2b00      	cmp	r3, #0
2401235a:	d009      	beq.n	24012370 <HAL_PWR_ConfigPVD+0xe4>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE ();
2401235c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24012360:	685b      	ldr	r3, [r3, #4]
24012362:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
24012366:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2401236a:	6053      	str	r3, [r2, #4]
2401236c:	e000      	b.n	24012370 <HAL_PWR_ConfigPVD+0xe4>
    return;
2401236e:	bf00      	nop
  }
}
24012370:	370c      	adds	r7, #12
24012372:	46bd      	mov	sp, r7
24012374:	f85d 7b04 	ldr.w	r7, [sp], #4
24012378:	4770      	bx	lr
2401237a:	bf00      	nop
2401237c:	58024800 	.word	0x58024800

24012380 <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Programmable Voltage Detector (PVD).
  * @retval None.
  */
void HAL_PWR_EnablePVD (void)
{
24012380:	b480      	push	{r7}
24012382:	af00      	add	r7, sp, #0
  /* Enable the power voltage detector */
  SET_BIT (PWR->CR1, PWR_CR1_PVDEN);
24012384:	4b05      	ldr	r3, [pc, #20]	; (2401239c <HAL_PWR_EnablePVD+0x1c>)
24012386:	681b      	ldr	r3, [r3, #0]
24012388:	4a04      	ldr	r2, [pc, #16]	; (2401239c <HAL_PWR_EnablePVD+0x1c>)
2401238a:	f043 0310 	orr.w	r3, r3, #16
2401238e:	6013      	str	r3, [r2, #0]
}
24012390:	bf00      	nop
24012392:	46bd      	mov	sp, r7
24012394:	f85d 7b04 	ldr.w	r7, [sp], #4
24012398:	4770      	bx	lr
2401239a:	bf00      	nop
2401239c:	58024800 	.word	0x58024800

240123a0 <HAL_PWR_DisablePVD>:
/**
  * @brief Disable the Programmable Voltage Detector (PVD).
  * @retval None.
  */
void HAL_PWR_DisablePVD (void)
{
240123a0:	b480      	push	{r7}
240123a2:	af00      	add	r7, sp, #0
  /* Disable the power voltage detector */
  CLEAR_BIT (PWR->CR1, PWR_CR1_PVDEN);
240123a4:	4b05      	ldr	r3, [pc, #20]	; (240123bc <HAL_PWR_DisablePVD+0x1c>)
240123a6:	681b      	ldr	r3, [r3, #0]
240123a8:	4a04      	ldr	r2, [pc, #16]	; (240123bc <HAL_PWR_DisablePVD+0x1c>)
240123aa:	f023 0310 	bic.w	r3, r3, #16
240123ae:	6013      	str	r3, [r2, #0]
}
240123b0:	bf00      	nop
240123b2:	46bd      	mov	sp, r7
240123b4:	f85d 7b04 	ldr.w	r7, [sp], #4
240123b8:	4770      	bx	lr
240123ba:	bf00      	nop
240123bc:	58024800 	.word	0x58024800

240123c0 <HAL_PWR_EnableWakeUpPin>:
  *         and PWR_WAKEUP_PIN5_LOW are available only for devices that includes
  *         GPIOI port.
  * @retval None.
  */
void HAL_PWR_EnableWakeUpPin (uint32_t WakeUpPinPolarity)
{
240123c0:	b480      	push	{r7}
240123c2:	b083      	sub	sp, #12
240123c4:	af00      	add	r7, sp, #0
240123c6:	6078      	str	r0, [r7, #4]

  /*
     Enable and Specify the Wake-Up pin polarity and the pull configuration
     for the event detection (rising or falling edge).
  */
  MODIFY_REG (PWR->WKUPEPR, PWR_EWUP_MASK, WakeUpPinPolarity);
240123c8:	4b06      	ldr	r3, [pc, #24]	; (240123e4 <HAL_PWR_EnableWakeUpPin+0x24>)
240123ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
240123cc:	4b06      	ldr	r3, [pc, #24]	; (240123e8 <HAL_PWR_EnableWakeUpPin+0x28>)
240123ce:	4013      	ands	r3, r2
240123d0:	4904      	ldr	r1, [pc, #16]	; (240123e4 <HAL_PWR_EnableWakeUpPin+0x24>)
240123d2:	687a      	ldr	r2, [r7, #4]
240123d4:	4313      	orrs	r3, r2
240123d6:	628b      	str	r3, [r1, #40]	; 0x28
}
240123d8:	bf00      	nop
240123da:	370c      	adds	r7, #12
240123dc:	46bd      	mov	sp, r7
240123de:	f85d 7b04 	ldr.w	r7, [sp], #4
240123e2:	4770      	bx	lr
240123e4:	58024800 	.word	0x58024800
240123e8:	f000c0c0 	.word	0xf000c0c0

240123ec <HAL_PWR_DisableWakeUpPin>:
  *         and PWR_WAKEUP_PIN5_LOW are available only for devices that includes
  *         GPIOI port.
  * @retval None.
  */
void HAL_PWR_DisableWakeUpPin (uint32_t WakeUpPinx)
{
240123ec:	b480      	push	{r7}
240123ee:	b083      	sub	sp, #12
240123f0:	af00      	add	r7, sp, #0
240123f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_WAKEUP_PIN (WakeUpPinx));

  /* Disable the wake up pin selected */
  CLEAR_BIT (PWR->WKUPEPR, (PWR_WKUPEPR_WKUPEN & WakeUpPinx));
240123f4:	4b07      	ldr	r3, [pc, #28]	; (24012414 <HAL_PWR_DisableWakeUpPin+0x28>)
240123f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
240123f8:	687b      	ldr	r3, [r7, #4]
240123fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
240123fe:	43db      	mvns	r3, r3
24012400:	4904      	ldr	r1, [pc, #16]	; (24012414 <HAL_PWR_DisableWakeUpPin+0x28>)
24012402:	4013      	ands	r3, r2
24012404:	628b      	str	r3, [r1, #40]	; 0x28
}
24012406:	bf00      	nop
24012408:	370c      	adds	r7, #12
2401240a:	46bd      	mov	sp, r7
2401240c:	f85d 7b04 	ldr.w	r7, [sp], #4
24012410:	4770      	bx	lr
24012412:	bf00      	nop
24012414:	58024800 	.word	0x58024800

24012418 <HAL_PWR_EnterSLEEPMode>:
  * @note   Ensure to clear pending events before calling this API through
  *         HAL_PWREx_ClearPendingEvent() when the SLEEP entry is WFE.
  * @retval None.
  */
void HAL_PWR_EnterSLEEPMode (uint32_t Regulator, uint8_t SLEEPEntry)
{
24012418:	b480      	push	{r7}
2401241a:	b083      	sub	sp, #12
2401241c:	af00      	add	r7, sp, #0
2401241e:	6078      	str	r0, [r7, #4]
24012420:	460b      	mov	r3, r1
24012422:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_SLEEP_ENTRY (SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
24012424:	4b08      	ldr	r3, [pc, #32]	; (24012448 <HAL_PWR_EnterSLEEPMode+0x30>)
24012426:	691b      	ldr	r3, [r3, #16]
24012428:	4a07      	ldr	r2, [pc, #28]	; (24012448 <HAL_PWR_EnterSLEEPMode+0x30>)
2401242a:	f023 0304 	bic.w	r3, r3, #4
2401242e:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry */
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
24012430:	78fb      	ldrb	r3, [r7, #3]
24012432:	2b01      	cmp	r3, #1
24012434:	d101      	bne.n	2401243a <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI ();
24012436:	bf30      	wfi
  else
  {
    /* Request Wait For Event */
    __WFE ();
  }
}
24012438:	e000      	b.n	2401243c <HAL_PWR_EnterSLEEPMode+0x24>
    __WFE ();
2401243a:	bf20      	wfe
}
2401243c:	bf00      	nop
2401243e:	370c      	adds	r7, #12
24012440:	46bd      	mov	sp, r7
24012442:	f85d 7b04 	ldr.w	r7, [sp], #4
24012446:	4770      	bx	lr
24012448:	e000ed00 	.word	0xe000ed00

2401244c <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
2401244c:	b480      	push	{r7}
2401244e:	b083      	sub	sp, #12
24012450:	af00      	add	r7, sp, #0
24012452:	6078      	str	r0, [r7, #4]
24012454:	460b      	mov	r3, r1
24012456:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
24012458:	4b18      	ldr	r3, [pc, #96]	; (240124bc <HAL_PWR_EnterSTOPMode+0x70>)
2401245a:	681b      	ldr	r3, [r3, #0]
2401245c:	f023 0201 	bic.w	r2, r3, #1
24012460:	4916      	ldr	r1, [pc, #88]	; (240124bc <HAL_PWR_EnterSTOPMode+0x70>)
24012462:	687b      	ldr	r3, [r7, #4]
24012464:	4313      	orrs	r3, r2
24012466:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
24012468:	4b14      	ldr	r3, [pc, #80]	; (240124bc <HAL_PWR_EnterSTOPMode+0x70>)
2401246a:	691b      	ldr	r3, [r3, #16]
2401246c:	4a13      	ldr	r2, [pc, #76]	; (240124bc <HAL_PWR_EnterSTOPMode+0x70>)
2401246e:	f023 0305 	bic.w	r3, r3, #5
24012472:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
24012474:	4b11      	ldr	r3, [pc, #68]	; (240124bc <HAL_PWR_EnterSTOPMode+0x70>)
24012476:	691b      	ldr	r3, [r3, #16]
24012478:	4a10      	ldr	r2, [pc, #64]	; (240124bc <HAL_PWR_EnterSTOPMode+0x70>)
2401247a:	f023 0302 	bic.w	r3, r3, #2
2401247e:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
24012480:	4b0f      	ldr	r3, [pc, #60]	; (240124c0 <HAL_PWR_EnterSTOPMode+0x74>)
24012482:	691b      	ldr	r3, [r3, #16]
24012484:	4a0e      	ldr	r2, [pc, #56]	; (240124c0 <HAL_PWR_EnterSTOPMode+0x74>)
24012486:	f043 0304 	orr.w	r3, r3, #4
2401248a:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
2401248c:	f3bf 8f4f 	dsb	sy
}
24012490:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
24012492:	f3bf 8f6f 	isb	sy
}
24012496:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
24012498:	78fb      	ldrb	r3, [r7, #3]
2401249a:	2b01      	cmp	r3, #1
2401249c:	d101      	bne.n	240124a2 <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
2401249e:	bf30      	wfi
240124a0:	e000      	b.n	240124a4 <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
240124a2:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
240124a4:	4b06      	ldr	r3, [pc, #24]	; (240124c0 <HAL_PWR_EnterSTOPMode+0x74>)
240124a6:	691b      	ldr	r3, [r3, #16]
240124a8:	4a05      	ldr	r2, [pc, #20]	; (240124c0 <HAL_PWR_EnterSTOPMode+0x74>)
240124aa:	f023 0304 	bic.w	r3, r3, #4
240124ae:	6113      	str	r3, [r2, #16]
}
240124b0:	bf00      	nop
240124b2:	370c      	adds	r7, #12
240124b4:	46bd      	mov	sp, r7
240124b6:	f85d 7b04 	ldr.w	r7, [sp], #4
240124ba:	4770      	bx	lr
240124bc:	58024800 	.word	0x58024800
240124c0:	e000ed00 	.word	0xe000ed00

240124c4 <HAL_PWR_EnterSTANDBYMode>:
  * @note   It is recommended to disable all regulators before entring STANDBY
  *         mode for power consumption saving purpose.
  * @retval None.
  */
void HAL_PWR_EnterSTANDBYMode (void)
{
240124c4:	b480      	push	{r7}
240124c6:	af00      	add	r7, sp, #0
    SET_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
    SET_BIT (PWR->CPU2CR, (PWR_CPU2CR_PDDS_D2 | PWR_CPU2CR_PDDS_D3));
  }
#else /* Single core devices */
  /* Enter DSTANDBY mode when Cortex-M7 enters DEEP-SLEEP */
  SET_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
240124c8:	4b0e      	ldr	r3, [pc, #56]	; (24012504 <HAL_PWR_EnterSTANDBYMode+0x40>)
240124ca:	691b      	ldr	r3, [r3, #16]
240124cc:	4a0d      	ldr	r2, [pc, #52]	; (24012504 <HAL_PWR_EnterSTANDBYMode+0x40>)
240124ce:	f043 0305 	orr.w	r3, r3, #5
240124d2:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Enter DSTANDBY mode when Cortex-M7 enters DEEP-SLEEP */
  SET_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
240124d4:	4b0b      	ldr	r3, [pc, #44]	; (24012504 <HAL_PWR_EnterSTANDBYMode+0x40>)
240124d6:	691b      	ldr	r3, [r3, #16]
240124d8:	4a0a      	ldr	r2, [pc, #40]	; (24012504 <HAL_PWR_EnterSTANDBYMode+0x40>)
240124da:	f043 0302 	orr.w	r3, r3, #2
240124de:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
240124e0:	4b09      	ldr	r3, [pc, #36]	; (24012508 <HAL_PWR_EnterSTANDBYMode+0x44>)
240124e2:	691b      	ldr	r3, [r3, #16]
240124e4:	4a08      	ldr	r2, [pc, #32]	; (24012508 <HAL_PWR_EnterSTANDBYMode+0x44>)
240124e6:	f043 0304 	orr.w	r3, r3, #4
240124ea:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
240124ec:	f3bf 8f4f 	dsb	sy
}
240124f0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
240124f2:	f3bf 8f6f 	isb	sy
}
240124f6:	bf00      	nop
#if defined (__CC_ARM)
  __force_stores();
#endif /* defined (__CC_ARM) */

  /* Request Wait For Interrupt */
  __WFI ();
240124f8:	bf30      	wfi
}
240124fa:	bf00      	nop
240124fc:	46bd      	mov	sp, r7
240124fe:	f85d 7b04 	ldr.w	r7, [sp], #4
24012502:	4770      	bx	lr
24012504:	58024800 	.word	0x58024800
24012508:	e000ed00 	.word	0xe000ed00

2401250c <HAL_PWR_EnableSleepOnExit>:
  *         Setting this bit is useful when the processor is expected to run
  *         only on interruptions handling.
  * @retval None.
  */
void HAL_PWR_EnableSleepOnExit (void)
{
2401250c:	b480      	push	{r7}
2401250e:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex-Mx System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPONEXIT_Msk);
24012510:	4b05      	ldr	r3, [pc, #20]	; (24012528 <HAL_PWR_EnableSleepOnExit+0x1c>)
24012512:	691b      	ldr	r3, [r3, #16]
24012514:	4a04      	ldr	r2, [pc, #16]	; (24012528 <HAL_PWR_EnableSleepOnExit+0x1c>)
24012516:	f043 0302 	orr.w	r3, r3, #2
2401251a:	6113      	str	r3, [r2, #16]
}
2401251c:	bf00      	nop
2401251e:	46bd      	mov	sp, r7
24012520:	f85d 7b04 	ldr.w	r7, [sp], #4
24012524:	4770      	bx	lr
24012526:	bf00      	nop
24012528:	e000ed00 	.word	0xe000ed00

2401252c <HAL_PWR_DisableSleepOnExit>:
  * @note   Clears SLEEPONEXIT bit of SCR register. When this bit is set, the
  *         processor re-enters SLEEP mode when an interruption handling is over.
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit (void)
{
2401252c:	b480      	push	{r7}
2401252e:	af00      	add	r7, sp, #0
  /* Clear SLEEPONEXIT bit of Cortex-Mx System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPONEXIT_Msk);
24012530:	4b05      	ldr	r3, [pc, #20]	; (24012548 <HAL_PWR_DisableSleepOnExit+0x1c>)
24012532:	691b      	ldr	r3, [r3, #16]
24012534:	4a04      	ldr	r2, [pc, #16]	; (24012548 <HAL_PWR_DisableSleepOnExit+0x1c>)
24012536:	f023 0302 	bic.w	r3, r3, #2
2401253a:	6113      	str	r3, [r2, #16]
}
2401253c:	bf00      	nop
2401253e:	46bd      	mov	sp, r7
24012540:	f85d 7b04 	ldr.w	r7, [sp], #4
24012544:	4770      	bx	lr
24012546:	bf00      	nop
24012548:	e000ed00 	.word	0xe000ed00

2401254c <HAL_PWR_EnableSEVOnPend>:
  *         pending event / interrupt even if it's disabled or has insufficient
  *         priority to cause exception entry wakes up the Cortex-Mx.
  * @retval None.
  */
void HAL_PWR_EnableSEVOnPend (void)
{
2401254c:	b480      	push	{r7}
2401254e:	af00      	add	r7, sp, #0
  /* Set SEVONPEND bit of Cortex-Mx System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SEVONPEND_Msk);
24012550:	4b05      	ldr	r3, [pc, #20]	; (24012568 <HAL_PWR_EnableSEVOnPend+0x1c>)
24012552:	691b      	ldr	r3, [r3, #16]
24012554:	4a04      	ldr	r2, [pc, #16]	; (24012568 <HAL_PWR_EnableSEVOnPend+0x1c>)
24012556:	f043 0310 	orr.w	r3, r3, #16
2401255a:	6113      	str	r3, [r2, #16]
}
2401255c:	bf00      	nop
2401255e:	46bd      	mov	sp, r7
24012560:	f85d 7b04 	ldr.w	r7, [sp], #4
24012564:	4770      	bx	lr
24012566:	bf00      	nop
24012568:	e000ed00 	.word	0xe000ed00

2401256c <HAL_PWR_DisableSEVOnPend>:
  * @note   Resets SEVONPEND bit of SCR register. When this bit is reset, only
  *         enabled pending causes exception entry wakes up the Cortex-Mx.
  * @retval None.
  */
void HAL_PWR_DisableSEVOnPend (void)
{
2401256c:	b480      	push	{r7}
2401256e:	af00      	add	r7, sp, #0
  /* Clear SEVONPEND bit of Cortex System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SEVONPEND_Msk);
24012570:	4b05      	ldr	r3, [pc, #20]	; (24012588 <HAL_PWR_DisableSEVOnPend+0x1c>)
24012572:	691b      	ldr	r3, [r3, #16]
24012574:	4a04      	ldr	r2, [pc, #16]	; (24012588 <HAL_PWR_DisableSEVOnPend+0x1c>)
24012576:	f023 0310 	bic.w	r3, r3, #16
2401257a:	6113      	str	r3, [r2, #16]
}
2401257c:	bf00      	nop
2401257e:	46bd      	mov	sp, r7
24012580:	f85d 7b04 	ldr.w	r7, [sp], #4
24012584:	4770      	bx	lr
24012586:	bf00      	nop
24012588:	e000ed00 	.word	0xe000ed00

2401258c <HAL_PWR_PVD_IRQHandler>:
  * @brief  This function handles the PWR PVD interrupt request.
  * @note   This API should be called under the PVD_AVD_IRQHandler().
  * @retval None.
  */
void HAL_PWR_PVD_IRQHandler (void)
{
2401258c:	b580      	push	{r7, lr}
2401258e:	af00      	add	r7, sp, #0
      HAL_PWR_PVDCallback ();
    }
  }
#else /* Single core devices */
  /* PVD EXTI line interrupt detected */
  if (__HAL_PWR_PVD_EXTI_GET_FLAG () != 0U)
24012590:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24012594:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
24012598:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
2401259c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
240125a0:	d10b      	bne.n	240125ba <HAL_PWR_PVD_IRQHandler+0x2e>
  {
    /* Clear PWR EXTI pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG ();
240125a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
240125a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
240125aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
240125ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
240125b2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback ();
240125b6:	f000 f802 	bl	240125be <HAL_PWR_PVDCallback>
  }
#endif /* defined (DUAL_CORE) */
}
240125ba:	bf00      	nop
240125bc:	bd80      	pop	{r7, pc}

240125be <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback.
  * @retval None.
  */
__weak void HAL_PWR_PVDCallback (void)
{
240125be:	b480      	push	{r7}
240125c0:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback can be implemented in the user file
  */
}
240125c2:	bf00      	nop
240125c4:	46bd      	mov	sp, r7
240125c6:	f85d 7b04 	ldr.w	r7, [sp], #4
240125ca:	4770      	bx	lr

240125cc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
240125cc:	b580      	push	{r7, lr}
240125ce:	b084      	sub	sp, #16
240125d0:	af00      	add	r7, sp, #0
240125d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
240125d4:	4b19      	ldr	r3, [pc, #100]	; (2401263c <HAL_PWREx_ConfigSupply+0x70>)
240125d6:	68db      	ldr	r3, [r3, #12]
240125d8:	f003 0304 	and.w	r3, r3, #4
240125dc:	2b04      	cmp	r3, #4
240125de:	d00a      	beq.n	240125f6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
240125e0:	4b16      	ldr	r3, [pc, #88]	; (2401263c <HAL_PWREx_ConfigSupply+0x70>)
240125e2:	68db      	ldr	r3, [r3, #12]
240125e4:	f003 0307 	and.w	r3, r3, #7
240125e8:	687a      	ldr	r2, [r7, #4]
240125ea:	429a      	cmp	r2, r3
240125ec:	d001      	beq.n	240125f2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
240125ee:	2301      	movs	r3, #1
240125f0:	e01f      	b.n	24012632 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
240125f2:	2300      	movs	r3, #0
240125f4:	e01d      	b.n	24012632 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
240125f6:	4b11      	ldr	r3, [pc, #68]	; (2401263c <HAL_PWREx_ConfigSupply+0x70>)
240125f8:	68db      	ldr	r3, [r3, #12]
240125fa:	f023 0207 	bic.w	r2, r3, #7
240125fe:	490f      	ldr	r1, [pc, #60]	; (2401263c <HAL_PWREx_ConfigSupply+0x70>)
24012600:	687b      	ldr	r3, [r7, #4]
24012602:	4313      	orrs	r3, r2
24012604:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
24012606:	f7f0 fd4d 	bl	240030a4 <HAL_GetTick>
2401260a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
2401260c:	e009      	b.n	24012622 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
2401260e:	f7f0 fd49 	bl	240030a4 <HAL_GetTick>
24012612:	4602      	mov	r2, r0
24012614:	68fb      	ldr	r3, [r7, #12]
24012616:	1ad3      	subs	r3, r2, r3
24012618:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
2401261c:	d901      	bls.n	24012622 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
2401261e:	2301      	movs	r3, #1
24012620:	e007      	b.n	24012632 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
24012622:	4b06      	ldr	r3, [pc, #24]	; (2401263c <HAL_PWREx_ConfigSupply+0x70>)
24012624:	685b      	ldr	r3, [r3, #4]
24012626:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
2401262a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
2401262e:	d1ee      	bne.n	2401260e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
24012630:	2300      	movs	r3, #0
}
24012632:	4618      	mov	r0, r3
24012634:	3710      	adds	r7, #16
24012636:	46bd      	mov	sp, r7
24012638:	bd80      	pop	{r7, pc}
2401263a:	bf00      	nop
2401263c:	58024800 	.word	0x58024800

24012640 <HAL_PWREx_GetSupplyConfig>:
/**
  * @brief Get the power supply configuration.
  * @retval The supply configuration.
  */
uint32_t HAL_PWREx_GetSupplyConfig (void)
{
24012640:	b480      	push	{r7}
24012642:	af00      	add	r7, sp, #0
  return (PWR->CR3 & PWR_SUPPLY_CONFIG_MASK);
24012644:	4b04      	ldr	r3, [pc, #16]	; (24012658 <HAL_PWREx_GetSupplyConfig+0x18>)
24012646:	68db      	ldr	r3, [r3, #12]
24012648:	f003 0307 	and.w	r3, r3, #7
}
2401264c:	4618      	mov	r0, r3
2401264e:	46bd      	mov	sp, r7
24012650:	f85d 7b04 	ldr.w	r7, [sp], #4
24012654:	4770      	bx	lr
24012656:	bf00      	nop
24012658:	58024800 	.word	0x58024800

2401265c <HAL_PWREx_ControlVoltageScaling>:
  *         Voltage Scale 0 then first switch to Voltage Scale 1 before entering
  *         low power mode.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling (uint32_t VoltageScaling)
{
2401265c:	b580      	push	{r7, lr}
2401265e:	b084      	sub	sp, #16
24012660:	af00      	add	r7, sp, #0
24012662:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR_VOLTAGE (VoltageScaling));

  /* Get the voltage scaling  */
  if ((PWR->CSR1 & PWR_CSR1_ACTVOS) == VoltageScaling)
24012664:	4b3f      	ldr	r3, [pc, #252]	; (24012764 <HAL_PWREx_ControlVoltageScaling+0x108>)
24012666:	685b      	ldr	r3, [r3, #4]
24012668:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
2401266c:	687a      	ldr	r2, [r7, #4]
2401266e:	429a      	cmp	r2, r3
24012670:	d101      	bne.n	24012676 <HAL_PWREx_ControlVoltageScaling+0x1a>
  {
    /* Old and new voltage scaling configuration match : nothing to do */
    return HAL_OK;
24012672:	2300      	movs	r3, #0
24012674:	e072      	b.n	2401275c <HAL_PWREx_ControlVoltageScaling+0x100>
#if defined (PWR_SRDCR_VOS)
  /* Set the voltage range */
  MODIFY_REG (PWR->SRDCR, PWR_SRDCR_VOS, VoltageScaling);
#else
#if defined(SYSCFG_PWRCR_ODEN) /* STM32H74xxx and STM32H75xxx lines */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE0)
24012676:	687b      	ldr	r3, [r7, #4]
24012678:	2b00      	cmp	r3, #0
2401267a:	d129      	bne.n	240126d0 <HAL_PWREx_ControlVoltageScaling+0x74>
  {
    if ((PWR->CR3 & PWR_CR3_LDOEN) == PWR_CR3_LDOEN)
2401267c:	4b39      	ldr	r3, [pc, #228]	; (24012764 <HAL_PWREx_ControlVoltageScaling+0x108>)
2401267e:	68db      	ldr	r3, [r3, #12]
24012680:	f003 0302 	and.w	r3, r3, #2
24012684:	2b02      	cmp	r3, #2
24012686:	d121      	bne.n	240126cc <HAL_PWREx_ControlVoltageScaling+0x70>
    {
      /* Set the voltage range */
      MODIFY_REG (PWR->D3CR, PWR_D3CR_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
24012688:	4b36      	ldr	r3, [pc, #216]	; (24012764 <HAL_PWREx_ControlVoltageScaling+0x108>)
2401268a:	699b      	ldr	r3, [r3, #24]
2401268c:	4a35      	ldr	r2, [pc, #212]	; (24012764 <HAL_PWREx_ControlVoltageScaling+0x108>)
2401268e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
24012692:	6193      	str	r3, [r2, #24]

      /* Get tick */
      tickstart = HAL_GetTick ();
24012694:	f7f0 fd06 	bl	240030a4 <HAL_GetTick>
24012698:	60f8      	str	r0, [r7, #12]

      /* Wait till voltage level flag is set */
      while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
2401269a:	e009      	b.n	240126b0 <HAL_PWREx_ControlVoltageScaling+0x54>
      {
        if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
2401269c:	f7f0 fd02 	bl	240030a4 <HAL_GetTick>
240126a0:	4602      	mov	r2, r0
240126a2:	68fb      	ldr	r3, [r7, #12]
240126a4:	1ad3      	subs	r3, r2, r3
240126a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
240126aa:	d901      	bls.n	240126b0 <HAL_PWREx_ControlVoltageScaling+0x54>
        {
          return HAL_ERROR;
240126ac:	2301      	movs	r3, #1
240126ae:	e055      	b.n	2401275c <HAL_PWREx_ControlVoltageScaling+0x100>
      while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
240126b0:	4b2c      	ldr	r3, [pc, #176]	; (24012764 <HAL_PWREx_ControlVoltageScaling+0x108>)
240126b2:	685b      	ldr	r3, [r3, #4]
240126b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
240126b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
240126bc:	d1ee      	bne.n	2401269c <HAL_PWREx_ControlVoltageScaling+0x40>
        }
      }

      /* Enable the PWR overdrive */
      SET_BIT (SYSCFG->PWRCR, SYSCFG_PWRCR_ODEN);
240126be:	4b2a      	ldr	r3, [pc, #168]	; (24012768 <HAL_PWREx_ControlVoltageScaling+0x10c>)
240126c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
240126c2:	4a29      	ldr	r2, [pc, #164]	; (24012768 <HAL_PWREx_ControlVoltageScaling+0x10c>)
240126c4:	f043 0301 	orr.w	r3, r3, #1
240126c8:	62d3      	str	r3, [r2, #44]	; 0x2c
240126ca:	e031      	b.n	24012730 <HAL_PWREx_ControlVoltageScaling+0xd4>
    }
    else
    {
      /* The voltage scale 0 is only possible when LDO regulator is enabled */
      return HAL_ERROR;
240126cc:	2301      	movs	r3, #1
240126ce:	e045      	b.n	2401275c <HAL_PWREx_ControlVoltageScaling+0x100>
    }
  }
  else
  {
    if ((PWR->CSR1 & PWR_CSR1_ACTVOS) == PWR_REGULATOR_VOLTAGE_SCALE1)
240126d0:	4b24      	ldr	r3, [pc, #144]	; (24012764 <HAL_PWREx_ControlVoltageScaling+0x108>)
240126d2:	685b      	ldr	r3, [r3, #4]
240126d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
240126d8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
240126dc:	d120      	bne.n	24012720 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      if ((SYSCFG->PWRCR & SYSCFG_PWRCR_ODEN) != 0U)
240126de:	4b22      	ldr	r3, [pc, #136]	; (24012768 <HAL_PWREx_ControlVoltageScaling+0x10c>)
240126e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
240126e2:	f003 0301 	and.w	r3, r3, #1
240126e6:	2b00      	cmp	r3, #0
240126e8:	d01a      	beq.n	24012720 <HAL_PWREx_ControlVoltageScaling+0xc4>
      {
        /* Disable the PWR overdrive */
        CLEAR_BIT(SYSCFG->PWRCR, SYSCFG_PWRCR_ODEN);
240126ea:	4b1f      	ldr	r3, [pc, #124]	; (24012768 <HAL_PWREx_ControlVoltageScaling+0x10c>)
240126ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
240126ee:	4a1e      	ldr	r2, [pc, #120]	; (24012768 <HAL_PWREx_ControlVoltageScaling+0x10c>)
240126f0:	f023 0301 	bic.w	r3, r3, #1
240126f4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Get tick */
        tickstart = HAL_GetTick ();
240126f6:	f7f0 fcd5 	bl	240030a4 <HAL_GetTick>
240126fa:	60f8      	str	r0, [r7, #12]

        /* Wait till voltage level flag is set */
        while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
240126fc:	e009      	b.n	24012712 <HAL_PWREx_ControlVoltageScaling+0xb6>
        {
          if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
240126fe:	f7f0 fcd1 	bl	240030a4 <HAL_GetTick>
24012702:	4602      	mov	r2, r0
24012704:	68fb      	ldr	r3, [r7, #12]
24012706:	1ad3      	subs	r3, r2, r3
24012708:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
2401270c:	d901      	bls.n	24012712 <HAL_PWREx_ControlVoltageScaling+0xb6>
          {
            return HAL_ERROR;
2401270e:	2301      	movs	r3, #1
24012710:	e024      	b.n	2401275c <HAL_PWREx_ControlVoltageScaling+0x100>
        while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
24012712:	4b14      	ldr	r3, [pc, #80]	; (24012764 <HAL_PWREx_ControlVoltageScaling+0x108>)
24012714:	685b      	ldr	r3, [r3, #4]
24012716:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
2401271a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
2401271e:	d1ee      	bne.n	240126fe <HAL_PWREx_ControlVoltageScaling+0xa2>
        }
      }
    }

    /* Set the voltage range */
    MODIFY_REG (PWR->D3CR, PWR_D3CR_VOS, VoltageScaling);
24012720:	4b10      	ldr	r3, [pc, #64]	; (24012764 <HAL_PWREx_ControlVoltageScaling+0x108>)
24012722:	699b      	ldr	r3, [r3, #24]
24012724:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
24012728:	490e      	ldr	r1, [pc, #56]	; (24012764 <HAL_PWREx_ControlVoltageScaling+0x108>)
2401272a:	687b      	ldr	r3, [r7, #4]
2401272c:	4313      	orrs	r3, r2
2401272e:	618b      	str	r3, [r1, #24]
  MODIFY_REG(PWR->D3CR, PWR_D3CR_VOS, VoltageScaling);
#endif /* defined (SYSCFG_PWRCR_ODEN) */
#endif /* defined (PWR_SRDCR_VOS) */

  /* Get tick */
  tickstart = HAL_GetTick ();
24012730:	f7f0 fcb8 	bl	240030a4 <HAL_GetTick>
24012734:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
24012736:	e009      	b.n	2401274c <HAL_PWREx_ControlVoltageScaling+0xf0>
  {
    if ((HAL_GetTick() - tickstart) > PWR_FLAG_SETTING_DELAY)
24012738:	f7f0 fcb4 	bl	240030a4 <HAL_GetTick>
2401273c:	4602      	mov	r2, r0
2401273e:	68fb      	ldr	r3, [r7, #12]
24012740:	1ad3      	subs	r3, r2, r3
24012742:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
24012746:	d901      	bls.n	2401274c <HAL_PWREx_ControlVoltageScaling+0xf0>
    {
      return HAL_ERROR;
24012748:	2301      	movs	r3, #1
2401274a:	e007      	b.n	2401275c <HAL_PWREx_ControlVoltageScaling+0x100>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
2401274c:	4b05      	ldr	r3, [pc, #20]	; (24012764 <HAL_PWREx_ControlVoltageScaling+0x108>)
2401274e:	685b      	ldr	r3, [r3, #4]
24012750:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
24012754:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
24012758:	d1ee      	bne.n	24012738 <HAL_PWREx_ControlVoltageScaling+0xdc>
    }
  }

  return HAL_OK;
2401275a:	2300      	movs	r3, #0
}
2401275c:	4618      	mov	r0, r3
2401275e:	3710      	adds	r7, #16
24012760:	46bd      	mov	sp, r7
24012762:	bd80      	pop	{r7, pc}
24012764:	58024800 	.word	0x58024800
24012768:	58000400 	.word	0x58000400

2401276c <HAL_PWREx_GetVoltageRange>:
  * @brief Get the main internal regulator output voltage. Reflecting the last
  *        VOS value applied to the PMU.
  * @retval The current applied VOS selection.
  */
uint32_t HAL_PWREx_GetVoltageRange (void)
{
2401276c:	b480      	push	{r7}
2401276e:	af00      	add	r7, sp, #0
  /* Get the active voltage scaling */
  return (PWR->CSR1 & PWR_CSR1_ACTVOS);
24012770:	4b04      	ldr	r3, [pc, #16]	; (24012784 <HAL_PWREx_GetVoltageRange+0x18>)
24012772:	685b      	ldr	r3, [r3, #4]
24012774:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
24012778:	4618      	mov	r0, r3
2401277a:	46bd      	mov	sp, r7
2401277c:	f85d 7b04 	ldr.w	r7, [sp], #4
24012780:	4770      	bx	lr
24012782:	bf00      	nop
24012784:	58024800 	.word	0x58024800

24012788 <HAL_PWREx_ControlStopModeVoltageScaling>:
  * @note   The selected SVOS4 and SVOS5 levels add an additional startup delay
  *         when exiting from system Stop mode.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlStopModeVoltageScaling (uint32_t VoltageScaling)
{
24012788:	b480      	push	{r7}
2401278a:	b083      	sub	sp, #12
2401278c:	af00      	add	r7, sp, #0
2401278e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_STOP_MODE_REGULATOR_VOLTAGE (VoltageScaling));

  /* Return the stop mode voltage range */
  MODIFY_REG (PWR->CR1, PWR_CR1_SVOS, VoltageScaling);
24012790:	4b07      	ldr	r3, [pc, #28]	; (240127b0 <HAL_PWREx_ControlStopModeVoltageScaling+0x28>)
24012792:	681b      	ldr	r3, [r3, #0]
24012794:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
24012798:	4905      	ldr	r1, [pc, #20]	; (240127b0 <HAL_PWREx_ControlStopModeVoltageScaling+0x28>)
2401279a:	687b      	ldr	r3, [r7, #4]
2401279c:	4313      	orrs	r3, r2
2401279e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
240127a0:	2300      	movs	r3, #0
}
240127a2:	4618      	mov	r0, r3
240127a4:	370c      	adds	r7, #12
240127a6:	46bd      	mov	sp, r7
240127a8:	f85d 7b04 	ldr.w	r7, [sp], #4
240127ac:	4770      	bx	lr
240127ae:	bf00      	nop
240127b0:	58024800 	.word	0x58024800

240127b4 <HAL_PWREx_GetStopModeVoltageRange>:
/**
  * @brief Get the main internal regulator output voltage in STOP mode.
  * @retval The actual applied VOS selection.
  */
uint32_t HAL_PWREx_GetStopModeVoltageRange (void)
{
240127b4:	b480      	push	{r7}
240127b6:	af00      	add	r7, sp, #0
  /* Return the stop voltage scaling */
  return (PWR->CR1 & PWR_CR1_SVOS);
240127b8:	4b04      	ldr	r3, [pc, #16]	; (240127cc <HAL_PWREx_GetStopModeVoltageRange+0x18>)
240127ba:	681b      	ldr	r3, [r3, #0]
240127bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
240127c0:	4618      	mov	r0, r3
240127c2:	46bd      	mov	sp, r7
240127c4:	f85d 7b04 	ldr.w	r7, [sp], #4
240127c8:	4770      	bx	lr
240127ca:	bf00      	nop
240127cc:	58024800 	.word	0x58024800

240127d0 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
240127d0:	b480      	push	{r7}
240127d2:	b085      	sub	sp, #20
240127d4:	af00      	add	r7, sp, #0
240127d6:	60f8      	str	r0, [r7, #12]
240127d8:	460b      	mov	r3, r1
240127da:	607a      	str	r2, [r7, #4]
240127dc:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
240127de:	4b20      	ldr	r3, [pc, #128]	; (24012860 <HAL_PWREx_EnterSTOPMode+0x90>)
240127e0:	681b      	ldr	r3, [r3, #0]
240127e2:	f023 0201 	bic.w	r2, r3, #1
240127e6:	491e      	ldr	r1, [pc, #120]	; (24012860 <HAL_PWREx_EnterSTOPMode+0x90>)
240127e8:	68fb      	ldr	r3, [r7, #12]
240127ea:	4313      	orrs	r3, r2
240127ec:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
240127ee:	687b      	ldr	r3, [r7, #4]
240127f0:	2b00      	cmp	r3, #0
240127f2:	d11e      	bne.n	24012832 <HAL_PWREx_EnterSTOPMode+0x62>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
240127f4:	4b1a      	ldr	r3, [pc, #104]	; (24012860 <HAL_PWREx_EnterSTOPMode+0x90>)
240127f6:	691b      	ldr	r3, [r3, #16]
240127f8:	4a19      	ldr	r2, [pc, #100]	; (24012860 <HAL_PWREx_EnterSTOPMode+0x90>)
240127fa:	f023 0301 	bic.w	r3, r3, #1
240127fe:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
24012800:	4b18      	ldr	r3, [pc, #96]	; (24012864 <HAL_PWREx_EnterSTOPMode+0x94>)
24012802:	691b      	ldr	r3, [r3, #16]
24012804:	4a17      	ldr	r2, [pc, #92]	; (24012864 <HAL_PWREx_EnterSTOPMode+0x94>)
24012806:	f043 0304 	orr.w	r3, r3, #4
2401280a:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
2401280c:	f3bf 8f4f 	dsb	sy
}
24012810:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
24012812:	f3bf 8f6f 	isb	sy
}
24012816:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
24012818:	7afb      	ldrb	r3, [r7, #11]
2401281a:	2b01      	cmp	r3, #1
2401281c:	d101      	bne.n	24012822 <HAL_PWREx_EnterSTOPMode+0x52>
    {
      /* Request Wait For Interrupt */
      __WFI ();
2401281e:	bf30      	wfi
24012820:	e000      	b.n	24012824 <HAL_PWREx_EnterSTOPMode+0x54>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
24012822:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
24012824:	4b0f      	ldr	r3, [pc, #60]	; (24012864 <HAL_PWREx_EnterSTOPMode+0x94>)
24012826:	691b      	ldr	r3, [r3, #16]
24012828:	4a0e      	ldr	r2, [pc, #56]	; (24012864 <HAL_PWREx_EnterSTOPMode+0x94>)
2401282a:	f023 0304 	bic.w	r3, r3, #4
2401282e:	6113      	str	r3, [r2, #16]
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
24012830:	e00f      	b.n	24012852 <HAL_PWREx_EnterSTOPMode+0x82>
  else if (Domain == PWR_D2_DOMAIN)
24012832:	687b      	ldr	r3, [r7, #4]
24012834:	2b01      	cmp	r3, #1
24012836:	d106      	bne.n	24012846 <HAL_PWREx_EnterSTOPMode+0x76>
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
24012838:	4b09      	ldr	r3, [pc, #36]	; (24012860 <HAL_PWREx_EnterSTOPMode+0x90>)
2401283a:	691b      	ldr	r3, [r3, #16]
2401283c:	4a08      	ldr	r2, [pc, #32]	; (24012860 <HAL_PWREx_EnterSTOPMode+0x90>)
2401283e:	f023 0302 	bic.w	r3, r3, #2
24012842:	6113      	str	r3, [r2, #16]
}
24012844:	e005      	b.n	24012852 <HAL_PWREx_EnterSTOPMode+0x82>
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
24012846:	4b06      	ldr	r3, [pc, #24]	; (24012860 <HAL_PWREx_EnterSTOPMode+0x90>)
24012848:	691b      	ldr	r3, [r3, #16]
2401284a:	4a05      	ldr	r2, [pc, #20]	; (24012860 <HAL_PWREx_EnterSTOPMode+0x90>)
2401284c:	f023 0304 	bic.w	r3, r3, #4
24012850:	6113      	str	r3, [r2, #16]
}
24012852:	bf00      	nop
24012854:	3714      	adds	r7, #20
24012856:	46bd      	mov	sp, r7
24012858:	f85d 7b04 	ldr.w	r7, [sp], #4
2401285c:	4770      	bx	lr
2401285e:	bf00      	nop
24012860:	58024800 	.word	0x58024800
24012864:	e000ed00 	.word	0xe000ed00

24012868 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
24012868:	b480      	push	{r7}
2401286a:	af00      	add	r7, sp, #0
  {
    __SEV ();
    __WFE ();
  }
#else
  __WFE ();
2401286c:	bf20      	wfe
#endif /* defined (DUAL_CORE) */
}
2401286e:	bf00      	nop
24012870:	46bd      	mov	sp, r7
24012872:	f85d 7b04 	ldr.w	r7, [sp], #4
24012876:	4770      	bx	lr

24012878 <HAL_PWREx_EnterSTANDBYMode>:
  *            @arg PWR_D2_DOMAIN: Enter D2 Domain to DSTANDBY mode.
  *            @arg PWR_D3_DOMAIN: Enter D3/SRD Domain to DSTANDBY mode.
  * @retval None
  */
void HAL_PWREx_EnterSTANDBYMode (uint32_t Domain)
{
24012878:	b480      	push	{r7}
2401287a:	b083      	sub	sp, #12
2401287c:	af00      	add	r7, sp, #0
2401287e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
24012880:	687b      	ldr	r3, [r7, #4]
24012882:	2b00      	cmp	r3, #0
24012884:	d10d      	bne.n	240128a2 <HAL_PWREx_EnterSTANDBYMode+0x2a>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Allow DSTANDBY mode when D1/CD domain enters Deepsleep */
    SET_BIT (PWR-> CPUCR, PWR_CPUCR_PDDS_D1);
24012886:	4b12      	ldr	r3, [pc, #72]	; (240128d0 <HAL_PWREx_EnterSTANDBYMode+0x58>)
24012888:	691b      	ldr	r3, [r3, #16]
2401288a:	4a11      	ldr	r2, [pc, #68]	; (240128d0 <HAL_PWREx_EnterSTANDBYMode+0x58>)
2401288c:	f043 0301 	orr.w	r3, r3, #1
24012890:	6113      	str	r3, [r2, #16]
    /* Allow DSTANDBY mode when D1/CD domain enters Deepsleep */
    SET_BIT (PWR-> CPU2CR, PWR_CPU2CR_PDDS_D1);
#endif /*DUAL_CORE*/

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
24012892:	4b10      	ldr	r3, [pc, #64]	; (240128d4 <HAL_PWREx_EnterSTANDBYMode+0x5c>)
24012894:	691b      	ldr	r3, [r3, #16]
24012896:	4a0f      	ldr	r2, [pc, #60]	; (240128d4 <HAL_PWREx_EnterSTANDBYMode+0x5c>)
24012898:	f043 0304 	orr.w	r3, r3, #4
2401289c:	6113      	str	r3, [r2, #16]
#if defined (__CC_ARM)
    __force_stores ();
#endif /* defined (__CC_ARM) */

    /* Request Wait For Interrupt */
    __WFI ();
2401289e:	bf30      	wfi
#if defined (DUAL_CORE)
    /* Allow DSTANDBY mode when D3/SRD domain enters Deepsleep */
    SET_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
#endif /* defined (DUAL_CORE) */
  }
}
240128a0:	e00f      	b.n	240128c2 <HAL_PWREx_EnterSTANDBYMode+0x4a>
  else if (Domain == PWR_D2_DOMAIN)
240128a2:	687b      	ldr	r3, [r7, #4]
240128a4:	2b01      	cmp	r3, #1
240128a6:	d106      	bne.n	240128b6 <HAL_PWREx_EnterSTANDBYMode+0x3e>
    SET_BIT (PWR-> CPUCR, PWR_CPUCR_PDDS_D2);
240128a8:	4b09      	ldr	r3, [pc, #36]	; (240128d0 <HAL_PWREx_EnterSTANDBYMode+0x58>)
240128aa:	691b      	ldr	r3, [r3, #16]
240128ac:	4a08      	ldr	r2, [pc, #32]	; (240128d0 <HAL_PWREx_EnterSTANDBYMode+0x58>)
240128ae:	f043 0302 	orr.w	r3, r3, #2
240128b2:	6113      	str	r3, [r2, #16]
}
240128b4:	e005      	b.n	240128c2 <HAL_PWREx_EnterSTANDBYMode+0x4a>
    SET_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
240128b6:	4b06      	ldr	r3, [pc, #24]	; (240128d0 <HAL_PWREx_EnterSTANDBYMode+0x58>)
240128b8:	691b      	ldr	r3, [r3, #16]
240128ba:	4a05      	ldr	r2, [pc, #20]	; (240128d0 <HAL_PWREx_EnterSTANDBYMode+0x58>)
240128bc:	f043 0304 	orr.w	r3, r3, #4
240128c0:	6113      	str	r3, [r2, #16]
}
240128c2:	bf00      	nop
240128c4:	370c      	adds	r7, #12
240128c6:	46bd      	mov	sp, r7
240128c8:	f85d 7b04 	ldr.w	r7, [sp], #4
240128cc:	4770      	bx	lr
240128ce:	bf00      	nop
240128d0:	58024800 	.word	0x58024800
240128d4:	e000ed00 	.word	0xe000ed00

240128d8 <HAL_PWREx_ConfigD3Domain>:
  *                                     regardless of the CPU sub-system low
  *                                     power mode.
  * @retval None
  */
void HAL_PWREx_ConfigD3Domain (uint32_t D3State)
{
240128d8:	b480      	push	{r7}
240128da:	b083      	sub	sp, #12
240128dc:	af00      	add	r7, sp, #0
240128de:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param (IS_D3_STATE (D3State));

  /* Keep D3/SRD in run mode */
  MODIFY_REG (PWR->CPUCR, PWR_CPUCR_RUN_D3, D3State);
240128e0:	4b06      	ldr	r3, [pc, #24]	; (240128fc <HAL_PWREx_ConfigD3Domain+0x24>)
240128e2:	691b      	ldr	r3, [r3, #16]
240128e4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
240128e8:	4904      	ldr	r1, [pc, #16]	; (240128fc <HAL_PWREx_ConfigD3Domain+0x24>)
240128ea:	687b      	ldr	r3, [r7, #4]
240128ec:	4313      	orrs	r3, r2
240128ee:	610b      	str	r3, [r1, #16]
}
240128f0:	bf00      	nop
240128f2:	370c      	adds	r7, #12
240128f4:	46bd      	mov	sp, r7
240128f6:	f85d 7b04 	ldr.w	r7, [sp], #4
240128fa:	4770      	bx	lr
240128fc:	58024800 	.word	0x58024800

24012900 <HAL_PWREx_EnableFlashPowerDown>:
  *         obtain the best trade-off between low-power consumption and restart
  *         time when exiting from DStop mode.
  * @retval None.
  */
void HAL_PWREx_EnableFlashPowerDown (void)
{
24012900:	b480      	push	{r7}
24012902:	af00      	add	r7, sp, #0
  /* Enable the Flash Power Down */
  SET_BIT (PWR->CR1, PWR_CR1_FLPS);
24012904:	4b05      	ldr	r3, [pc, #20]	; (2401291c <HAL_PWREx_EnableFlashPowerDown+0x1c>)
24012906:	681b      	ldr	r3, [r3, #0]
24012908:	4a04      	ldr	r2, [pc, #16]	; (2401291c <HAL_PWREx_EnableFlashPowerDown+0x1c>)
2401290a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
2401290e:	6013      	str	r3, [r2, #0]
}
24012910:	bf00      	nop
24012912:	46bd      	mov	sp, r7
24012914:	f85d 7b04 	ldr.w	r7, [sp], #4
24012918:	4770      	bx	lr
2401291a:	bf00      	nop
2401291c:	58024800 	.word	0x58024800

24012920 <HAL_PWREx_DisableFlashPowerDown>:
  *         to obtain the best trade-off between low-power consumption and
  *         restart time when exiting from DStop mode.
  * @retval None.
  */
void HAL_PWREx_DisableFlashPowerDown (void)
{
24012920:	b480      	push	{r7}
24012922:	af00      	add	r7, sp, #0
  /* Disable the Flash Power Down */
  CLEAR_BIT (PWR->CR1, PWR_CR1_FLPS);
24012924:	4b05      	ldr	r3, [pc, #20]	; (2401293c <HAL_PWREx_DisableFlashPowerDown+0x1c>)
24012926:	681b      	ldr	r3, [r3, #0]
24012928:	4a04      	ldr	r2, [pc, #16]	; (2401293c <HAL_PWREx_DisableFlashPowerDown+0x1c>)
2401292a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
2401292e:	6013      	str	r3, [r2, #0]
}
24012930:	bf00      	nop
24012932:	46bd      	mov	sp, r7
24012934:	f85d 7b04 	ldr.w	r7, [sp], #4
24012938:	4770      	bx	lr
2401293a:	bf00      	nop
2401293c:	58024800 	.word	0x58024800

24012940 <HAL_PWREx_EnableWakeUpPin>:
  *         Cortex-M7, wake up only Cortex-M4 and wake up Cortex-M7 and
  *         Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_EnableWakeUpPin (PWREx_WakeupPinTypeDef *sPinParams)
{
24012940:	b480      	push	{r7}
24012942:	b093      	sub	sp, #76	; 0x4c
24012944:	af00      	add	r7, sp, #0
24012946:	6078      	str	r0, [r7, #4]
  uint32_t pinConfig;
  uint32_t regMask;
  const uint32_t pullMask = PWR_WKUPEPR_WKUPPUPD1;
24012948:	f44f 3340 	mov.w	r3, #196608	; 0x30000
2401294c:	647b      	str	r3, [r7, #68]	; 0x44
  /* Check the parameters */
  assert_param (IS_PWR_WAKEUP_PIN (sPinParams->WakeUpPin));
  assert_param (IS_PWR_WAKEUP_PIN_POLARITY (sPinParams->PinPolarity));
  assert_param (IS_PWR_WAKEUP_PIN_PULL (sPinParams->PinPull));

  pinConfig = sPinParams->WakeUpPin | \
2401294e:	687b      	ldr	r3, [r7, #4]
24012950:	681a      	ldr	r2, [r3, #0]
              (sPinParams->PinPolarity << ((POSITION_VAL(sPinParams->WakeUpPin) + PWR_WKUPEPR_WKUPP1_Pos) & 0x1FU)) | \
24012952:	687b      	ldr	r3, [r7, #4]
24012954:	6859      	ldr	r1, [r3, #4]
24012956:	687b      	ldr	r3, [r7, #4]
24012958:	681b      	ldr	r3, [r3, #0]
2401295a:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
2401295c:	693b      	ldr	r3, [r7, #16]
2401295e:	fa93 f3a3 	rbit	r3, r3
24012962:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
24012964:	68fb      	ldr	r3, [r7, #12]
24012966:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
24012968:	697b      	ldr	r3, [r7, #20]
2401296a:	2b00      	cmp	r3, #0
2401296c:	d101      	bne.n	24012972 <HAL_PWREx_EnableWakeUpPin+0x32>
  {
    return 32U;
2401296e:	2320      	movs	r3, #32
24012970:	e003      	b.n	2401297a <HAL_PWREx_EnableWakeUpPin+0x3a>
  }
  return __builtin_clz(value);
24012972:	697b      	ldr	r3, [r7, #20]
24012974:	fab3 f383 	clz	r3, r3
24012978:	b2db      	uxtb	r3, r3
2401297a:	3308      	adds	r3, #8
2401297c:	f003 031f 	and.w	r3, r3, #31
24012980:	fa01 f303 	lsl.w	r3, r1, r3
  pinConfig = sPinParams->WakeUpPin | \
24012984:	431a      	orrs	r2, r3
              (sPinParams->PinPull << (((POSITION_VAL(sPinParams->WakeUpPin) * PWR_WAKEUP_PINS_PULL_SHIFT_OFFSET) + PWR_WKUPEPR_WKUPPUPD1_Pos) & 0x1FU));
24012986:	687b      	ldr	r3, [r7, #4]
24012988:	6899      	ldr	r1, [r3, #8]
2401298a:	687b      	ldr	r3, [r7, #4]
2401298c:	681b      	ldr	r3, [r3, #0]
2401298e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
24012990:	69fb      	ldr	r3, [r7, #28]
24012992:	fa93 f3a3 	rbit	r3, r3
24012996:	61bb      	str	r3, [r7, #24]
  return result;
24012998:	69bb      	ldr	r3, [r7, #24]
2401299a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
2401299c:	6a3b      	ldr	r3, [r7, #32]
2401299e:	2b00      	cmp	r3, #0
240129a0:	d101      	bne.n	240129a6 <HAL_PWREx_EnableWakeUpPin+0x66>
    return 32U;
240129a2:	2320      	movs	r3, #32
240129a4:	e003      	b.n	240129ae <HAL_PWREx_EnableWakeUpPin+0x6e>
  return __builtin_clz(value);
240129a6:	6a3b      	ldr	r3, [r7, #32]
240129a8:	fab3 f383 	clz	r3, r3
240129ac:	b2db      	uxtb	r3, r3
240129ae:	3308      	adds	r3, #8
240129b0:	005b      	lsls	r3, r3, #1
240129b2:	f003 031e 	and.w	r3, r3, #30
240129b6:	fa01 f303 	lsl.w	r3, r1, r3
  pinConfig = sPinParams->WakeUpPin | \
240129ba:	4313      	orrs	r3, r2
240129bc:	643b      	str	r3, [r7, #64]	; 0x40

  regMask   = sPinParams->WakeUpPin | \
240129be:	687b      	ldr	r3, [r7, #4]
240129c0:	681a      	ldr	r2, [r3, #0]
              (PWR_WKUPEPR_WKUPP1 << (POSITION_VAL(sPinParams->WakeUpPin) & 0x1FU)) | \
240129c2:	687b      	ldr	r3, [r7, #4]
240129c4:	681b      	ldr	r3, [r3, #0]
240129c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
240129c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
240129ca:	fa93 f3a3 	rbit	r3, r3
240129ce:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
240129d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
240129d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
240129d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
240129d6:	2b00      	cmp	r3, #0
240129d8:	d101      	bne.n	240129de <HAL_PWREx_EnableWakeUpPin+0x9e>
    return 32U;
240129da:	2320      	movs	r3, #32
240129dc:	e003      	b.n	240129e6 <HAL_PWREx_EnableWakeUpPin+0xa6>
  return __builtin_clz(value);
240129de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
240129e0:	fab3 f383 	clz	r3, r3
240129e4:	b2db      	uxtb	r3, r3
240129e6:	f003 031f 	and.w	r3, r3, #31
240129ea:	f44f 7180 	mov.w	r1, #256	; 0x100
240129ee:	fa01 f303 	lsl.w	r3, r1, r3
  regMask   = sPinParams->WakeUpPin | \
240129f2:	431a      	orrs	r2, r3
              (pullMask << ((POSITION_VAL(sPinParams->WakeUpPin) * PWR_WAKEUP_PINS_PULL_SHIFT_OFFSET) & 0x1FU));
240129f4:	687b      	ldr	r3, [r7, #4]
240129f6:	681b      	ldr	r3, [r3, #0]
240129f8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
240129fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
240129fc:	fa93 f3a3 	rbit	r3, r3
24012a00:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
24012a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
24012a04:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
24012a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24012a08:	2b00      	cmp	r3, #0
24012a0a:	d101      	bne.n	24012a10 <HAL_PWREx_EnableWakeUpPin+0xd0>
    return 32U;
24012a0c:	2320      	movs	r3, #32
24012a0e:	e003      	b.n	24012a18 <HAL_PWREx_EnableWakeUpPin+0xd8>
  return __builtin_clz(value);
24012a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24012a12:	fab3 f383 	clz	r3, r3
24012a16:	b2db      	uxtb	r3, r3
24012a18:	005b      	lsls	r3, r3, #1
24012a1a:	f003 031e 	and.w	r3, r3, #30
24012a1e:	6c79      	ldr	r1, [r7, #68]	; 0x44
24012a20:	fa01 f303 	lsl.w	r3, r1, r3
  regMask   = sPinParams->WakeUpPin | \
24012a24:	4313      	orrs	r3, r2
24012a26:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Enable and Specify the Wake-Up pin polarity and the pull configuration
     for the event detection (rising or falling edge) */
  MODIFY_REG (PWR->WKUPEPR, regMask, pinConfig);
24012a28:	4b0e      	ldr	r3, [pc, #56]	; (24012a64 <HAL_PWREx_EnableWakeUpPin+0x124>)
24012a2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
24012a2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
24012a2e:	43db      	mvns	r3, r3
24012a30:	401a      	ands	r2, r3
24012a32:	490c      	ldr	r1, [pc, #48]	; (24012a64 <HAL_PWREx_EnableWakeUpPin+0x124>)
24012a34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
24012a36:	4313      	orrs	r3, r2
24012a38:	628b      	str	r3, [r1, #40]	; 0x28
#ifndef DUAL_CORE
  /* Configure the Wakeup Pin EXTI Line */
  MODIFY_REG (EXTI->IMR2, PWR_EXTI_WAKEUP_PINS_MASK, (sPinParams->WakeUpPin << EXTI_IMR2_IM55_Pos));
24012a3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24012a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
24012a42:	f023 52fc 	bic.w	r2, r3, #528482304	; 0x1f800000
24012a46:	687b      	ldr	r3, [r7, #4]
24012a48:	681b      	ldr	r3, [r3, #0]
24012a4a:	05db      	lsls	r3, r3, #23
24012a4c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
24012a50:	4313      	orrs	r3, r2
24012a52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
#endif /* !DUAL_CORE */
}
24012a56:	bf00      	nop
24012a58:	374c      	adds	r7, #76	; 0x4c
24012a5a:	46bd      	mov	sp, r7
24012a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
24012a60:	4770      	bx	lr
24012a62:	bf00      	nop
24012a64:	58024800 	.word	0x58024800

24012a68 <HAL_PWREx_DisableWakeUpPin>:
  * @note   The PWR_WAKEUP_PIN3 and PWR_WAKEUP_PIN5 are available only for
  *         devices that support GPIOI port.
  * @retval None
  */
void HAL_PWREx_DisableWakeUpPin (uint32_t WakeUpPin)
{
24012a68:	b480      	push	{r7}
24012a6a:	b083      	sub	sp, #12
24012a6c:	af00      	add	r7, sp, #0
24012a6e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param (IS_PWR_WAKEUP_PIN (WakeUpPin));

  /* Disable the WakeUpPin */
  CLEAR_BIT (PWR->WKUPEPR, WakeUpPin);
24012a70:	4b06      	ldr	r3, [pc, #24]	; (24012a8c <HAL_PWREx_DisableWakeUpPin+0x24>)
24012a72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
24012a74:	687b      	ldr	r3, [r7, #4]
24012a76:	43db      	mvns	r3, r3
24012a78:	4904      	ldr	r1, [pc, #16]	; (24012a8c <HAL_PWREx_DisableWakeUpPin+0x24>)
24012a7a:	4013      	ands	r3, r2
24012a7c:	628b      	str	r3, [r1, #40]	; 0x28
}
24012a7e:	bf00      	nop
24012a80:	370c      	adds	r7, #12
24012a82:	46bd      	mov	sp, r7
24012a84:	f85d 7b04 	ldr.w	r7, [sp], #4
24012a88:	4770      	bx	lr
24012a8a:	bf00      	nop
24012a8c:	58024800 	.word	0x58024800

24012a90 <HAL_PWREx_GetWakeupFlag>:
  * @note   The PWR_WAKEUP_FLAG3 and PWR_WAKEUP_FLAG5 are available only for
  *         devices that support GPIOI port.
  * @retval The Wake-Up pin flag.
  */
uint32_t HAL_PWREx_GetWakeupFlag (uint32_t WakeUpFlag)
{
24012a90:	b480      	push	{r7}
24012a92:	b083      	sub	sp, #12
24012a94:	af00      	add	r7, sp, #0
24012a96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_WAKEUP_FLAG (WakeUpFlag));

  /* Return the wake up pin flag */
  return (PWR->WKUPFR & WakeUpFlag);
24012a98:	4b04      	ldr	r3, [pc, #16]	; (24012aac <HAL_PWREx_GetWakeupFlag+0x1c>)
24012a9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
24012a9c:	687b      	ldr	r3, [r7, #4]
24012a9e:	4013      	ands	r3, r2
}
24012aa0:	4618      	mov	r0, r3
24012aa2:	370c      	adds	r7, #12
24012aa4:	46bd      	mov	sp, r7
24012aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
24012aaa:	4770      	bx	lr
24012aac:	58024800 	.word	0x58024800

24012ab0 <HAL_PWREx_ClearWakeupFlag>:
  * @note   The PWR_WAKEUP_FLAG3 and PWR_WAKEUP_FLAG5 are available only for
  *         devices that support GPIOI port.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ClearWakeupFlag (uint32_t WakeUpFlag)
{
24012ab0:	b480      	push	{r7}
24012ab2:	b083      	sub	sp, #12
24012ab4:	af00      	add	r7, sp, #0
24012ab6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param (IS_PWR_WAKEUP_FLAG (WakeUpFlag));

  /* Clear the wake up event received from wake up pin x */
  SET_BIT (PWR->WKUPCR, WakeUpFlag);
24012ab8:	4b0a      	ldr	r3, [pc, #40]	; (24012ae4 <HAL_PWREx_ClearWakeupFlag+0x34>)
24012aba:	6a1a      	ldr	r2, [r3, #32]
24012abc:	4909      	ldr	r1, [pc, #36]	; (24012ae4 <HAL_PWREx_ClearWakeupFlag+0x34>)
24012abe:	687b      	ldr	r3, [r7, #4]
24012ac0:	4313      	orrs	r3, r2
24012ac2:	620b      	str	r3, [r1, #32]

  /* Check if the wake up event is well cleared */
  if ((PWR->WKUPFR & WakeUpFlag) != 0U)
24012ac4:	4b07      	ldr	r3, [pc, #28]	; (24012ae4 <HAL_PWREx_ClearWakeupFlag+0x34>)
24012ac6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
24012ac8:	687b      	ldr	r3, [r7, #4]
24012aca:	4013      	ands	r3, r2
24012acc:	2b00      	cmp	r3, #0
24012ace:	d001      	beq.n	24012ad4 <HAL_PWREx_ClearWakeupFlag+0x24>
  {
    return HAL_ERROR;
24012ad0:	2301      	movs	r3, #1
24012ad2:	e000      	b.n	24012ad6 <HAL_PWREx_ClearWakeupFlag+0x26>
  }

  return HAL_OK;
24012ad4:	2300      	movs	r3, #0
}
24012ad6:	4618      	mov	r0, r3
24012ad8:	370c      	adds	r7, #12
24012ada:	46bd      	mov	sp, r7
24012adc:	f85d 7b04 	ldr.w	r7, [sp], #4
24012ae0:	4770      	bx	lr
24012ae2:	bf00      	nop
24012ae4:	58024800 	.word	0x58024800

24012ae8 <HAL_PWREx_WAKEUP_PIN_IRQHandler>:
  * @brief This function handles the PWR WAKEUP PIN interrupt request.
  * @note   This API should be called under the WAKEUP_PIN_IRQHandler().
  * @retval None.
  */
void HAL_PWREx_WAKEUP_PIN_IRQHandler (void)
{
24012ae8:	b580      	push	{r7, lr}
24012aea:	af00      	add	r7, sp, #0
  /* Wakeup pin EXTI line interrupt detected */
  if (READ_BIT(PWR->WKUPFR, PWR_WKUPFR_WKUPF1) != 0U)
24012aec:	4b2a      	ldr	r3, [pc, #168]	; (24012b98 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
24012aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24012af0:	f003 0301 	and.w	r3, r3, #1
24012af4:	2b00      	cmp	r3, #0
24012af6:	d008      	beq.n	24012b0a <HAL_PWREx_WAKEUP_PIN_IRQHandler+0x22>
  {
    /* Clear PWR WKUPF1 flag */
    __HAL_PWR_CLEAR_WAKEUPFLAG (PWR_FLAG_WKUP1);
24012af8:	4b27      	ldr	r3, [pc, #156]	; (24012b98 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
24012afa:	6a1b      	ldr	r3, [r3, #32]
24012afc:	4a26      	ldr	r2, [pc, #152]	; (24012b98 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
24012afe:	f043 0301 	orr.w	r3, r3, #1
24012b02:	6213      	str	r3, [r2, #32]

    /* PWR WKUP1 interrupt user callback */
    HAL_PWREx_WKUP1_Callback ();
24012b04:	f000 f84a 	bl	24012b9c <HAL_PWREx_WKUP1_Callback>
    __HAL_PWR_CLEAR_WAKEUPFLAG (PWR_FLAG_WKUP6);

    /* PWR WKUP6 interrupt user callback */
    HAL_PWREx_WKUP6_Callback ();
  }
}
24012b08:	e043      	b.n	24012b92 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xaa>
  else if (READ_BIT (PWR->WKUPFR, PWR_WKUPFR_WKUPF2) != 0U)
24012b0a:	4b23      	ldr	r3, [pc, #140]	; (24012b98 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
24012b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24012b0e:	f003 0302 	and.w	r3, r3, #2
24012b12:	2b00      	cmp	r3, #0
24012b14:	d008      	beq.n	24012b28 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0x40>
    __HAL_PWR_CLEAR_WAKEUPFLAG (PWR_FLAG_WKUP2);
24012b16:	4b20      	ldr	r3, [pc, #128]	; (24012b98 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
24012b18:	6a1b      	ldr	r3, [r3, #32]
24012b1a:	4a1f      	ldr	r2, [pc, #124]	; (24012b98 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
24012b1c:	f043 0302 	orr.w	r3, r3, #2
24012b20:	6213      	str	r3, [r2, #32]
    HAL_PWREx_WKUP2_Callback ();
24012b22:	f000 f842 	bl	24012baa <HAL_PWREx_WKUP2_Callback>
}
24012b26:	e034      	b.n	24012b92 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xaa>
  else if (READ_BIT (PWR->WKUPFR, PWR_WKUPFR_WKUPF3) != 0U)
24012b28:	4b1b      	ldr	r3, [pc, #108]	; (24012b98 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
24012b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24012b2c:	f003 0304 	and.w	r3, r3, #4
24012b30:	2b00      	cmp	r3, #0
24012b32:	d008      	beq.n	24012b46 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0x5e>
    __HAL_PWR_CLEAR_WAKEUPFLAG (PWR_FLAG_WKUP3);
24012b34:	4b18      	ldr	r3, [pc, #96]	; (24012b98 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
24012b36:	6a1b      	ldr	r3, [r3, #32]
24012b38:	4a17      	ldr	r2, [pc, #92]	; (24012b98 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
24012b3a:	f043 0304 	orr.w	r3, r3, #4
24012b3e:	6213      	str	r3, [r2, #32]
    HAL_PWREx_WKUP3_Callback ();
24012b40:	f000 f83a 	bl	24012bb8 <HAL_PWREx_WKUP3_Callback>
}
24012b44:	e025      	b.n	24012b92 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xaa>
  else if (READ_BIT (PWR->WKUPFR, PWR_WKUPFR_WKUPF4) != 0U)
24012b46:	4b14      	ldr	r3, [pc, #80]	; (24012b98 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
24012b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24012b4a:	f003 0308 	and.w	r3, r3, #8
24012b4e:	2b00      	cmp	r3, #0
24012b50:	d008      	beq.n	24012b64 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0x7c>
    __HAL_PWR_CLEAR_WAKEUPFLAG (PWR_FLAG_WKUP4);
24012b52:	4b11      	ldr	r3, [pc, #68]	; (24012b98 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
24012b54:	6a1b      	ldr	r3, [r3, #32]
24012b56:	4a10      	ldr	r2, [pc, #64]	; (24012b98 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
24012b58:	f043 0308 	orr.w	r3, r3, #8
24012b5c:	6213      	str	r3, [r2, #32]
    HAL_PWREx_WKUP4_Callback ();
24012b5e:	f000 f832 	bl	24012bc6 <HAL_PWREx_WKUP4_Callback>
}
24012b62:	e016      	b.n	24012b92 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xaa>
  else if (READ_BIT (PWR->WKUPFR, PWR_WKUPFR_WKUPF5) != 0U)
24012b64:	4b0c      	ldr	r3, [pc, #48]	; (24012b98 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
24012b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24012b68:	f003 0310 	and.w	r3, r3, #16
24012b6c:	2b00      	cmp	r3, #0
24012b6e:	d008      	beq.n	24012b82 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0x9a>
    __HAL_PWR_CLEAR_WAKEUPFLAG (PWR_FLAG_WKUP5);
24012b70:	4b09      	ldr	r3, [pc, #36]	; (24012b98 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
24012b72:	6a1b      	ldr	r3, [r3, #32]
24012b74:	4a08      	ldr	r2, [pc, #32]	; (24012b98 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
24012b76:	f043 0310 	orr.w	r3, r3, #16
24012b7a:	6213      	str	r3, [r2, #32]
    HAL_PWREx_WKUP5_Callback ();
24012b7c:	f000 f82a 	bl	24012bd4 <HAL_PWREx_WKUP5_Callback>
}
24012b80:	e007      	b.n	24012b92 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xaa>
    __HAL_PWR_CLEAR_WAKEUPFLAG (PWR_FLAG_WKUP6);
24012b82:	4b05      	ldr	r3, [pc, #20]	; (24012b98 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
24012b84:	6a1b      	ldr	r3, [r3, #32]
24012b86:	4a04      	ldr	r2, [pc, #16]	; (24012b98 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
24012b88:	f043 0320 	orr.w	r3, r3, #32
24012b8c:	6213      	str	r3, [r2, #32]
    HAL_PWREx_WKUP6_Callback ();
24012b8e:	f000 f828 	bl	24012be2 <HAL_PWREx_WKUP6_Callback>
}
24012b92:	bf00      	nop
24012b94:	bd80      	pop	{r7, pc}
24012b96:	bf00      	nop
24012b98:	58024800 	.word	0x58024800

24012b9c <HAL_PWREx_WKUP1_Callback>:
/**
  * @brief PWR WKUP1 interrupt callback.
  * @retval None.
  */
__weak void HAL_PWREx_WKUP1_Callback (void)
{
24012b9c:	b480      	push	{r7}
24012b9e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWREx_WKUP1Callback can be implemented in the user file
  */
}
24012ba0:	bf00      	nop
24012ba2:	46bd      	mov	sp, r7
24012ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
24012ba8:	4770      	bx	lr

24012baa <HAL_PWREx_WKUP2_Callback>:
/**
  * @brief PWR WKUP2 interrupt callback.
  * @retval None.
  */
__weak void HAL_PWREx_WKUP2_Callback (void)
{
24012baa:	b480      	push	{r7}
24012bac:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWREx_WKUP2Callback can be implemented in the user file
  */
}
24012bae:	bf00      	nop
24012bb0:	46bd      	mov	sp, r7
24012bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
24012bb6:	4770      	bx	lr

24012bb8 <HAL_PWREx_WKUP3_Callback>:
/**
  * @brief PWR WKUP3 interrupt callback.
  * @retval None.
  */
__weak void HAL_PWREx_WKUP3_Callback (void)
{
24012bb8:	b480      	push	{r7}
24012bba:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWREx_WKUP3Callback can be implemented in the user file
  */
}
24012bbc:	bf00      	nop
24012bbe:	46bd      	mov	sp, r7
24012bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
24012bc4:	4770      	bx	lr

24012bc6 <HAL_PWREx_WKUP4_Callback>:
/**
  * @brief PWR WKUP4 interrupt callback.
  * @retval None.
  */
__weak void HAL_PWREx_WKUP4_Callback (void)
{
24012bc6:	b480      	push	{r7}
24012bc8:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWREx_WKUP4Callback can be implemented in the user file
  */
}
24012bca:	bf00      	nop
24012bcc:	46bd      	mov	sp, r7
24012bce:	f85d 7b04 	ldr.w	r7, [sp], #4
24012bd2:	4770      	bx	lr

24012bd4 <HAL_PWREx_WKUP5_Callback>:
/**
  * @brief PWR WKUP5 interrupt callback.
  * @retval None.
  */
__weak void HAL_PWREx_WKUP5_Callback (void)
{
24012bd4:	b480      	push	{r7}
24012bd6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWREx_WKUP5Callback can be implemented in the user file
  */
}
24012bd8:	bf00      	nop
24012bda:	46bd      	mov	sp, r7
24012bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
24012be0:	4770      	bx	lr

24012be2 <HAL_PWREx_WKUP6_Callback>:
/**
  * @brief PWR WKUP6 interrupt callback.
  * @retval None.
  */
__weak void HAL_PWREx_WKUP6_Callback (void)
{
24012be2:	b480      	push	{r7}
24012be4:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWREx_WKUP6Callback can be implemented in the user file
  */
}
24012be6:	bf00      	nop
24012be8:	46bd      	mov	sp, r7
24012bea:	f85d 7b04 	ldr.w	r7, [sp], #4
24012bee:	4770      	bx	lr

24012bf0 <HAL_PWREx_EnableBkUpReg>:
/**
  * @brief Enable the Backup Regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_EnableBkUpReg (void)
{
24012bf0:	b580      	push	{r7, lr}
24012bf2:	b082      	sub	sp, #8
24012bf4:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Enable the Backup regulator */
  SET_BIT (PWR->CR2, PWR_CR2_BREN);
24012bf6:	4b10      	ldr	r3, [pc, #64]	; (24012c38 <HAL_PWREx_EnableBkUpReg+0x48>)
24012bf8:	689b      	ldr	r3, [r3, #8]
24012bfa:	4a0f      	ldr	r2, [pc, #60]	; (24012c38 <HAL_PWREx_EnableBkUpReg+0x48>)
24012bfc:	f043 0301 	orr.w	r3, r3, #1
24012c00:	6093      	str	r3, [r2, #8]

  /* Get tick */
  tickstart = HAL_GetTick ();
24012c02:	f7f0 fa4f 	bl	240030a4 <HAL_GetTick>
24012c06:	6078      	str	r0, [r7, #4]

  /* Wait till Backup regulator ready flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_BRR) == 0U)
24012c08:	e009      	b.n	24012c1e <HAL_PWREx_EnableBkUpReg+0x2e>
  {
    if ((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY)
24012c0a:	f7f0 fa4b 	bl	240030a4 <HAL_GetTick>
24012c0e:	4602      	mov	r2, r0
24012c10:	687b      	ldr	r3, [r7, #4]
24012c12:	1ad3      	subs	r3, r2, r3
24012c14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
24012c18:	d901      	bls.n	24012c1e <HAL_PWREx_EnableBkUpReg+0x2e>
    {
      return HAL_ERROR;
24012c1a:	2301      	movs	r3, #1
24012c1c:	e007      	b.n	24012c2e <HAL_PWREx_EnableBkUpReg+0x3e>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_BRR) == 0U)
24012c1e:	4b06      	ldr	r3, [pc, #24]	; (24012c38 <HAL_PWREx_EnableBkUpReg+0x48>)
24012c20:	689b      	ldr	r3, [r3, #8]
24012c22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
24012c26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
24012c2a:	d1ee      	bne.n	24012c0a <HAL_PWREx_EnableBkUpReg+0x1a>
    }
  }

  return HAL_OK;
24012c2c:	2300      	movs	r3, #0
}
24012c2e:	4618      	mov	r0, r3
24012c30:	3708      	adds	r7, #8
24012c32:	46bd      	mov	sp, r7
24012c34:	bd80      	pop	{r7, pc}
24012c36:	bf00      	nop
24012c38:	58024800 	.word	0x58024800

24012c3c <HAL_PWREx_DisableBkUpReg>:
/**
  * @brief Disable the Backup Regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_DisableBkUpReg (void)
{
24012c3c:	b580      	push	{r7, lr}
24012c3e:	b082      	sub	sp, #8
24012c40:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Disable the Backup regulator */
  CLEAR_BIT (PWR->CR2, PWR_CR2_BREN);
24012c42:	4b10      	ldr	r3, [pc, #64]	; (24012c84 <HAL_PWREx_DisableBkUpReg+0x48>)
24012c44:	689b      	ldr	r3, [r3, #8]
24012c46:	4a0f      	ldr	r2, [pc, #60]	; (24012c84 <HAL_PWREx_DisableBkUpReg+0x48>)
24012c48:	f023 0301 	bic.w	r3, r3, #1
24012c4c:	6093      	str	r3, [r2, #8]

  /* Get tick */
  tickstart = HAL_GetTick ();
24012c4e:	f7f0 fa29 	bl	240030a4 <HAL_GetTick>
24012c52:	6078      	str	r0, [r7, #4]

  /* Wait till Backup regulator ready flag is reset */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_BRR) != 0U)
24012c54:	e009      	b.n	24012c6a <HAL_PWREx_DisableBkUpReg+0x2e>
  {
    if ((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY)
24012c56:	f7f0 fa25 	bl	240030a4 <HAL_GetTick>
24012c5a:	4602      	mov	r2, r0
24012c5c:	687b      	ldr	r3, [r7, #4]
24012c5e:	1ad3      	subs	r3, r2, r3
24012c60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
24012c64:	d901      	bls.n	24012c6a <HAL_PWREx_DisableBkUpReg+0x2e>
    {
      return HAL_ERROR;
24012c66:	2301      	movs	r3, #1
24012c68:	e007      	b.n	24012c7a <HAL_PWREx_DisableBkUpReg+0x3e>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_BRR) != 0U)
24012c6a:	4b06      	ldr	r3, [pc, #24]	; (24012c84 <HAL_PWREx_DisableBkUpReg+0x48>)
24012c6c:	689b      	ldr	r3, [r3, #8]
24012c6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
24012c72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
24012c76:	d0ee      	beq.n	24012c56 <HAL_PWREx_DisableBkUpReg+0x1a>
    }
  }

  return HAL_OK;
24012c78:	2300      	movs	r3, #0
}
24012c7a:	4618      	mov	r0, r3
24012c7c:	3708      	adds	r7, #8
24012c7e:	46bd      	mov	sp, r7
24012c80:	bd80      	pop	{r7, pc}
24012c82:	bf00      	nop
24012c84:	58024800 	.word	0x58024800

24012c88 <HAL_PWREx_EnableUSBReg>:
/**
  * @brief Enable the USB Regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_EnableUSBReg (void)
{
24012c88:	b580      	push	{r7, lr}
24012c8a:	b082      	sub	sp, #8
24012c8c:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Enable the USB regulator */
  SET_BIT (PWR->CR3, PWR_CR3_USBREGEN);
24012c8e:	4b10      	ldr	r3, [pc, #64]	; (24012cd0 <HAL_PWREx_EnableUSBReg+0x48>)
24012c90:	68db      	ldr	r3, [r3, #12]
24012c92:	4a0f      	ldr	r2, [pc, #60]	; (24012cd0 <HAL_PWREx_EnableUSBReg+0x48>)
24012c94:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
24012c98:	60d3      	str	r3, [r2, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
24012c9a:	f7f0 fa03 	bl	240030a4 <HAL_GetTick>
24012c9e:	6078      	str	r0, [r7, #4]

  /* Wait till the USB regulator ready flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_USB33RDY) == 0U)
24012ca0:	e009      	b.n	24012cb6 <HAL_PWREx_EnableUSBReg+0x2e>
  {
    if ((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY)
24012ca2:	f7f0 f9ff 	bl	240030a4 <HAL_GetTick>
24012ca6:	4602      	mov	r2, r0
24012ca8:	687b      	ldr	r3, [r7, #4]
24012caa:	1ad3      	subs	r3, r2, r3
24012cac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
24012cb0:	d901      	bls.n	24012cb6 <HAL_PWREx_EnableUSBReg+0x2e>
    {
      return HAL_ERROR;
24012cb2:	2301      	movs	r3, #1
24012cb4:	e007      	b.n	24012cc6 <HAL_PWREx_EnableUSBReg+0x3e>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_USB33RDY) == 0U)
24012cb6:	4b06      	ldr	r3, [pc, #24]	; (24012cd0 <HAL_PWREx_EnableUSBReg+0x48>)
24012cb8:	68db      	ldr	r3, [r3, #12]
24012cba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
24012cbe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
24012cc2:	d1ee      	bne.n	24012ca2 <HAL_PWREx_EnableUSBReg+0x1a>
    }
  }

  return HAL_OK;
24012cc4:	2300      	movs	r3, #0
}
24012cc6:	4618      	mov	r0, r3
24012cc8:	3708      	adds	r7, #8
24012cca:	46bd      	mov	sp, r7
24012ccc:	bd80      	pop	{r7, pc}
24012cce:	bf00      	nop
24012cd0:	58024800 	.word	0x58024800

24012cd4 <HAL_PWREx_DisableUSBReg>:
/**
  * @brief Disable the USB Regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_DisableUSBReg (void)
{
24012cd4:	b580      	push	{r7, lr}
24012cd6:	b082      	sub	sp, #8
24012cd8:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Disable the USB regulator */
  CLEAR_BIT (PWR->CR3, PWR_CR3_USBREGEN);
24012cda:	4b10      	ldr	r3, [pc, #64]	; (24012d1c <HAL_PWREx_DisableUSBReg+0x48>)
24012cdc:	68db      	ldr	r3, [r3, #12]
24012cde:	4a0f      	ldr	r2, [pc, #60]	; (24012d1c <HAL_PWREx_DisableUSBReg+0x48>)
24012ce0:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
24012ce4:	60d3      	str	r3, [r2, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
24012ce6:	f7f0 f9dd 	bl	240030a4 <HAL_GetTick>
24012cea:	6078      	str	r0, [r7, #4]

  /* Wait till the USB regulator ready flag is reset */
  while(__HAL_PWR_GET_FLAG (PWR_FLAG_USB33RDY) != 0U)
24012cec:	e009      	b.n	24012d02 <HAL_PWREx_DisableUSBReg+0x2e>
  {
    if ((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY)
24012cee:	f7f0 f9d9 	bl	240030a4 <HAL_GetTick>
24012cf2:	4602      	mov	r2, r0
24012cf4:	687b      	ldr	r3, [r7, #4]
24012cf6:	1ad3      	subs	r3, r2, r3
24012cf8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
24012cfc:	d901      	bls.n	24012d02 <HAL_PWREx_DisableUSBReg+0x2e>
    {
      return HAL_ERROR;
24012cfe:	2301      	movs	r3, #1
24012d00:	e007      	b.n	24012d12 <HAL_PWREx_DisableUSBReg+0x3e>
  while(__HAL_PWR_GET_FLAG (PWR_FLAG_USB33RDY) != 0U)
24012d02:	4b06      	ldr	r3, [pc, #24]	; (24012d1c <HAL_PWREx_DisableUSBReg+0x48>)
24012d04:	68db      	ldr	r3, [r3, #12]
24012d06:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
24012d0a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
24012d0e:	d0ee      	beq.n	24012cee <HAL_PWREx_DisableUSBReg+0x1a>
    }
  }

  return HAL_OK;
24012d10:	2300      	movs	r3, #0
}
24012d12:	4618      	mov	r0, r3
24012d14:	3708      	adds	r7, #8
24012d16:	46bd      	mov	sp, r7
24012d18:	bd80      	pop	{r7, pc}
24012d1a:	bf00      	nop
24012d1c:	58024800 	.word	0x58024800

24012d20 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
24012d20:	b480      	push	{r7}
24012d22:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
24012d24:	4b05      	ldr	r3, [pc, #20]	; (24012d3c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
24012d26:	68db      	ldr	r3, [r3, #12]
24012d28:	4a04      	ldr	r2, [pc, #16]	; (24012d3c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
24012d2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
24012d2e:	60d3      	str	r3, [r2, #12]
}
24012d30:	bf00      	nop
24012d32:	46bd      	mov	sp, r7
24012d34:	f85d 7b04 	ldr.w	r7, [sp], #4
24012d38:	4770      	bx	lr
24012d3a:	bf00      	nop
24012d3c:	58024800 	.word	0x58024800

24012d40 <HAL_PWREx_DisableUSBVoltageDetector>:
/**
  * @brief Disable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_DisableUSBVoltageDetector (void)
{
24012d40:	b480      	push	{r7}
24012d42:	af00      	add	r7, sp, #0
  /* Disable the USB voltage detector */
  CLEAR_BIT (PWR->CR3, PWR_CR3_USB33DEN);
24012d44:	4b05      	ldr	r3, [pc, #20]	; (24012d5c <HAL_PWREx_DisableUSBVoltageDetector+0x1c>)
24012d46:	68db      	ldr	r3, [r3, #12]
24012d48:	4a04      	ldr	r2, [pc, #16]	; (24012d5c <HAL_PWREx_DisableUSBVoltageDetector+0x1c>)
24012d4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
24012d4e:	60d3      	str	r3, [r2, #12]
}
24012d50:	bf00      	nop
24012d52:	46bd      	mov	sp, r7
24012d54:	f85d 7b04 	ldr.w	r7, [sp], #4
24012d58:	4770      	bx	lr
24012d5a:	bf00      	nop
24012d5c:	58024800 	.word	0x58024800

24012d60 <HAL_PWREx_EnableBatteryCharging>:
  *            @arg PWR_BATTERY_CHARGING_RESISTOR_5 : 5 KOhm resistor.
  *            @arg PWR_BATTERY_CHARGING_RESISTOR_1_5 : 1.5 KOhm resistor.
  * @retval None.
  */
void HAL_PWREx_EnableBatteryCharging (uint32_t ResistorValue)
{
24012d60:	b480      	push	{r7}
24012d62:	b083      	sub	sp, #12
24012d64:	af00      	add	r7, sp, #0
24012d66:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param (IS_PWR_BATTERY_RESISTOR_SELECT (ResistorValue));

  /* Specify the charging resistor */
  MODIFY_REG (PWR->CR3, PWR_CR3_VBRS, ResistorValue);
24012d68:	4b09      	ldr	r3, [pc, #36]	; (24012d90 <HAL_PWREx_EnableBatteryCharging+0x30>)
24012d6a:	68db      	ldr	r3, [r3, #12]
24012d6c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
24012d70:	4907      	ldr	r1, [pc, #28]	; (24012d90 <HAL_PWREx_EnableBatteryCharging+0x30>)
24012d72:	687b      	ldr	r3, [r7, #4]
24012d74:	4313      	orrs	r3, r2
24012d76:	60cb      	str	r3, [r1, #12]

  /* Enable the Battery charging */
  SET_BIT (PWR->CR3, PWR_CR3_VBE);
24012d78:	4b05      	ldr	r3, [pc, #20]	; (24012d90 <HAL_PWREx_EnableBatteryCharging+0x30>)
24012d7a:	68db      	ldr	r3, [r3, #12]
24012d7c:	4a04      	ldr	r2, [pc, #16]	; (24012d90 <HAL_PWREx_EnableBatteryCharging+0x30>)
24012d7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
24012d82:	60d3      	str	r3, [r2, #12]
}
24012d84:	bf00      	nop
24012d86:	370c      	adds	r7, #12
24012d88:	46bd      	mov	sp, r7
24012d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
24012d8e:	4770      	bx	lr
24012d90:	58024800 	.word	0x58024800

24012d94 <HAL_PWREx_DisableBatteryCharging>:
/**
  * @brief Disable the Battery charging.
  * @retval None.
  */
void HAL_PWREx_DisableBatteryCharging (void)
{
24012d94:	b480      	push	{r7}
24012d96:	af00      	add	r7, sp, #0
  /* Disable the Battery charging */
  CLEAR_BIT (PWR->CR3, PWR_CR3_VBE);
24012d98:	4b05      	ldr	r3, [pc, #20]	; (24012db0 <HAL_PWREx_DisableBatteryCharging+0x1c>)
24012d9a:	68db      	ldr	r3, [r3, #12]
24012d9c:	4a04      	ldr	r2, [pc, #16]	; (24012db0 <HAL_PWREx_DisableBatteryCharging+0x1c>)
24012d9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
24012da2:	60d3      	str	r3, [r2, #12]
}
24012da4:	bf00      	nop
24012da6:	46bd      	mov	sp, r7
24012da8:	f85d 7b04 	ldr.w	r7, [sp], #4
24012dac:	4770      	bx	lr
24012dae:	bf00      	nop
24012db0:	58024800 	.word	0x58024800

24012db4 <HAL_PWREx_EnableMonitoring>:
/**
  * @brief Enable the VBAT and temperature monitoring.
  * @retval HAL status.
  */
void HAL_PWREx_EnableMonitoring (void)
{
24012db4:	b480      	push	{r7}
24012db6:	af00      	add	r7, sp, #0
  /* Enable the VBAT and Temperature monitoring */
  SET_BIT (PWR->CR2, PWR_CR2_MONEN);
24012db8:	4b05      	ldr	r3, [pc, #20]	; (24012dd0 <HAL_PWREx_EnableMonitoring+0x1c>)
24012dba:	689b      	ldr	r3, [r3, #8]
24012dbc:	4a04      	ldr	r2, [pc, #16]	; (24012dd0 <HAL_PWREx_EnableMonitoring+0x1c>)
24012dbe:	f043 0310 	orr.w	r3, r3, #16
24012dc2:	6093      	str	r3, [r2, #8]
}
24012dc4:	bf00      	nop
24012dc6:	46bd      	mov	sp, r7
24012dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
24012dcc:	4770      	bx	lr
24012dce:	bf00      	nop
24012dd0:	58024800 	.word	0x58024800

24012dd4 <HAL_PWREx_DisableMonitoring>:
/**
  * @brief Disable the VBAT and temperature monitoring.
  * @retval HAL status.
  */
void HAL_PWREx_DisableMonitoring (void)
{
24012dd4:	b480      	push	{r7}
24012dd6:	af00      	add	r7, sp, #0
  /* Disable the VBAT and Temperature monitoring */
  CLEAR_BIT (PWR->CR2, PWR_CR2_MONEN);
24012dd8:	4b05      	ldr	r3, [pc, #20]	; (24012df0 <HAL_PWREx_DisableMonitoring+0x1c>)
24012dda:	689b      	ldr	r3, [r3, #8]
24012ddc:	4a04      	ldr	r2, [pc, #16]	; (24012df0 <HAL_PWREx_DisableMonitoring+0x1c>)
24012dde:	f023 0310 	bic.w	r3, r3, #16
24012de2:	6093      	str	r3, [r2, #8]
}
24012de4:	bf00      	nop
24012de6:	46bd      	mov	sp, r7
24012de8:	f85d 7b04 	ldr.w	r7, [sp], #4
24012dec:	4770      	bx	lr
24012dee:	bf00      	nop
24012df0:	58024800 	.word	0x58024800

24012df4 <HAL_PWREx_GetTemperatureLevel>:
  * @brief Indicate whether the junction temperature is between, above or below
  *        the thresholds.
  * @retval Temperature level.
  */
uint32_t HAL_PWREx_GetTemperatureLevel (void)
{
24012df4:	b480      	push	{r7}
24012df6:	b083      	sub	sp, #12
24012df8:	af00      	add	r7, sp, #0
  uint32_t tempLevel, regValue;

  /* Read the temperature flags */
  regValue = READ_BIT (PWR->CR2, (PWR_CR2_TEMPH | PWR_CR2_TEMPL));
24012dfa:	4b0f      	ldr	r3, [pc, #60]	; (24012e38 <HAL_PWREx_GetTemperatureLevel+0x44>)
24012dfc:	689b      	ldr	r3, [r3, #8]
24012dfe:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
24012e02:	603b      	str	r3, [r7, #0]

  /* Check if the temperature is below the threshold */
  if (regValue == PWR_CR2_TEMPL)
24012e04:	683b      	ldr	r3, [r7, #0]
24012e06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
24012e0a:	d103      	bne.n	24012e14 <HAL_PWREx_GetTemperatureLevel+0x20>
  {
    tempLevel = PWR_TEMP_BELOW_LOW_THRESHOLD;
24012e0c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
24012e10:	607b      	str	r3, [r7, #4]
24012e12:	e009      	b.n	24012e28 <HAL_PWREx_GetTemperatureLevel+0x34>
  }
  /* Check if the temperature is above the threshold */
  else if (regValue == PWR_CR2_TEMPH)
24012e14:	683b      	ldr	r3, [r7, #0]
24012e16:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
24012e1a:	d103      	bne.n	24012e24 <HAL_PWREx_GetTemperatureLevel+0x30>
  {
    tempLevel = PWR_TEMP_ABOVE_HIGH_THRESHOLD;
24012e1c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
24012e20:	607b      	str	r3, [r7, #4]
24012e22:	e001      	b.n	24012e28 <HAL_PWREx_GetTemperatureLevel+0x34>
  }
  /* The temperature is between the thresholds */
  else
  {
    tempLevel = PWR_TEMP_BETWEEN_HIGH_LOW_THRESHOLD;
24012e24:	2300      	movs	r3, #0
24012e26:	607b      	str	r3, [r7, #4]
  }

  return tempLevel;
24012e28:	687b      	ldr	r3, [r7, #4]
}
24012e2a:	4618      	mov	r0, r3
24012e2c:	370c      	adds	r7, #12
24012e2e:	46bd      	mov	sp, r7
24012e30:	f85d 7b04 	ldr.w	r7, [sp], #4
24012e34:	4770      	bx	lr
24012e36:	bf00      	nop
24012e38:	58024800 	.word	0x58024800

24012e3c <HAL_PWREx_GetVBATLevel>:
  * @brief Indicate whether the Battery voltage level is between, above or below
  *        the thresholds.
  * @retval VBAT level.
  */
uint32_t HAL_PWREx_GetVBATLevel (void)
{
24012e3c:	b480      	push	{r7}
24012e3e:	b083      	sub	sp, #12
24012e40:	af00      	add	r7, sp, #0
  uint32_t VBATLevel, regValue;

  /* Read the VBAT flags */
  regValue = READ_BIT (PWR->CR2, (PWR_CR2_VBATH | PWR_CR2_VBATL));
24012e42:	4b0f      	ldr	r3, [pc, #60]	; (24012e80 <HAL_PWREx_GetVBATLevel+0x44>)
24012e44:	689b      	ldr	r3, [r3, #8]
24012e46:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
24012e4a:	603b      	str	r3, [r7, #0]

  /* Check if the VBAT is below the threshold */
  if (regValue == PWR_CR2_VBATL)
24012e4c:	683b      	ldr	r3, [r7, #0]
24012e4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
24012e52:	d103      	bne.n	24012e5c <HAL_PWREx_GetVBATLevel+0x20>
  {
    VBATLevel = PWR_VBAT_BELOW_LOW_THRESHOLD;
24012e54:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
24012e58:	607b      	str	r3, [r7, #4]
24012e5a:	e009      	b.n	24012e70 <HAL_PWREx_GetVBATLevel+0x34>
  }
  /* Check if the VBAT is above the threshold */
  else if (regValue == PWR_CR2_VBATH)
24012e5c:	683b      	ldr	r3, [r7, #0]
24012e5e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
24012e62:	d103      	bne.n	24012e6c <HAL_PWREx_GetVBATLevel+0x30>
  {
    VBATLevel = PWR_VBAT_ABOVE_HIGH_THRESHOLD;
24012e64:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
24012e68:	607b      	str	r3, [r7, #4]
24012e6a:	e001      	b.n	24012e70 <HAL_PWREx_GetVBATLevel+0x34>
  }
  /* The VBAT is between the thresholds */
  else
  {
    VBATLevel = PWR_VBAT_BETWEEN_HIGH_LOW_THRESHOLD;
24012e6c:	2300      	movs	r3, #0
24012e6e:	607b      	str	r3, [r7, #4]
  }

  return VBATLevel;
24012e70:	687b      	ldr	r3, [r7, #4]
}
24012e72:	4618      	mov	r0, r3
24012e74:	370c      	adds	r7, #12
24012e76:	46bd      	mov	sp, r7
24012e78:	f85d 7b04 	ldr.w	r7, [sp], #4
24012e7c:	4770      	bx	lr
24012e7e:	bf00      	nop
24012e80:	58024800 	.word	0x58024800

24012e84 <HAL_PWREx_ConfigAVD>:
  *         driver. All combination are allowed: wake up only Cortex-M7, wake up
  *         only Cortex-M4 and wake up Cortex-M7 and Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ConfigAVD (PWREx_AVDTypeDef *sConfigAVD)
{
24012e84:	b480      	push	{r7}
24012e86:	b083      	sub	sp, #12
24012e88:	af00      	add	r7, sp, #0
24012e8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_AVD_LEVEL (sConfigAVD->AVDLevel));
  assert_param (IS_PWR_AVD_MODE (sConfigAVD->Mode));

  /* Set the ALS[18:17] bits according to AVDLevel value */
  MODIFY_REG (PWR->CR1, PWR_CR1_ALS, sConfigAVD->AVDLevel);
24012e8c:	4b37      	ldr	r3, [pc, #220]	; (24012f6c <HAL_PWREx_ConfigAVD+0xe8>)
24012e8e:	681b      	ldr	r3, [r3, #0]
24012e90:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
24012e94:	687b      	ldr	r3, [r7, #4]
24012e96:	681b      	ldr	r3, [r3, #0]
24012e98:	4934      	ldr	r1, [pc, #208]	; (24012f6c <HAL_PWREx_ConfigAVD+0xe8>)
24012e9a:	4313      	orrs	r3, r2
24012e9c:	600b      	str	r3, [r1, #0]

  /* Clear any previous config */
#if !defined (DUAL_CORE)
  __HAL_PWR_AVD_EXTI_DISABLE_EVENT ();
24012e9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24012ea2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
24012ea6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
24012eaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
24012eae:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __HAL_PWR_AVD_EXTI_DISABLE_IT ();
24012eb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24012eb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
24012eba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
24012ebe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
24012ec2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* !defined (DUAL_CORE) */

  __HAL_PWR_AVD_EXTI_DISABLE_RISING_EDGE ();
24012ec6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24012eca:	681b      	ldr	r3, [r3, #0]
24012ecc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
24012ed0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
24012ed4:	6013      	str	r3, [r2, #0]
  __HAL_PWR_AVD_EXTI_DISABLE_FALLING_EDGE ();
24012ed6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24012eda:	685b      	ldr	r3, [r3, #4]
24012edc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
24012ee0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
24012ee4:	6053      	str	r3, [r2, #4]

#if !defined (DUAL_CORE)
  /* Configure the interrupt mode */
  if ((sConfigAVD->Mode & AVD_MODE_IT) == AVD_MODE_IT)
24012ee6:	687b      	ldr	r3, [r7, #4]
24012ee8:	685b      	ldr	r3, [r3, #4]
24012eea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
24012eee:	2b00      	cmp	r3, #0
24012ef0:	d009      	beq.n	24012f06 <HAL_PWREx_ConfigAVD+0x82>
  {
    __HAL_PWR_AVD_EXTI_ENABLE_IT ();
24012ef2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24012ef6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
24012efa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
24012efe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
24012f02:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  }

  /* Configure the event mode */
  if ((sConfigAVD->Mode & AVD_MODE_EVT) == AVD_MODE_EVT)
24012f06:	687b      	ldr	r3, [r7, #4]
24012f08:	685b      	ldr	r3, [r3, #4]
24012f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
24012f0e:	2b00      	cmp	r3, #0
24012f10:	d009      	beq.n	24012f26 <HAL_PWREx_ConfigAVD+0xa2>
  {
    __HAL_PWR_AVD_EXTI_ENABLE_EVENT ();
24012f12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24012f16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
24012f1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
24012f1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
24012f22:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  }
#endif /* !defined (DUAL_CORE) */

  /* Rising edge configuration */
  if ((sConfigAVD->Mode & AVD_RISING_EDGE) == AVD_RISING_EDGE)
24012f26:	687b      	ldr	r3, [r7, #4]
24012f28:	685b      	ldr	r3, [r3, #4]
24012f2a:	f003 0301 	and.w	r3, r3, #1
24012f2e:	2b00      	cmp	r3, #0
24012f30:	d007      	beq.n	24012f42 <HAL_PWREx_ConfigAVD+0xbe>
  {
    __HAL_PWR_AVD_EXTI_ENABLE_RISING_EDGE ();
24012f32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24012f36:	681b      	ldr	r3, [r3, #0]
24012f38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
24012f3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
24012f40:	6013      	str	r3, [r2, #0]
  }

  /* Falling edge configuration */
  if ((sConfigAVD->Mode & AVD_FALLING_EDGE) == AVD_FALLING_EDGE)
24012f42:	687b      	ldr	r3, [r7, #4]
24012f44:	685b      	ldr	r3, [r3, #4]
24012f46:	f003 0302 	and.w	r3, r3, #2
24012f4a:	2b00      	cmp	r3, #0
24012f4c:	d007      	beq.n	24012f5e <HAL_PWREx_ConfigAVD+0xda>
  {
    __HAL_PWR_AVD_EXTI_ENABLE_FALLING_EDGE ();
24012f4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24012f52:	685b      	ldr	r3, [r3, #4]
24012f54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
24012f58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
24012f5c:	6053      	str	r3, [r2, #4]
  }
}
24012f5e:	bf00      	nop
24012f60:	370c      	adds	r7, #12
24012f62:	46bd      	mov	sp, r7
24012f64:	f85d 7b04 	ldr.w	r7, [sp], #4
24012f68:	4770      	bx	lr
24012f6a:	bf00      	nop
24012f6c:	58024800 	.word	0x58024800

24012f70 <HAL_PWREx_EnableAVD>:
/**
  * @brief Enable the Analog Voltage Detector (AVD).
  * @retval None.
  */
void HAL_PWREx_EnableAVD (void)
{
24012f70:	b480      	push	{r7}
24012f72:	af00      	add	r7, sp, #0
  /* Enable the Analog Voltage Detector */
  SET_BIT (PWR->CR1, PWR_CR1_AVDEN);
24012f74:	4b05      	ldr	r3, [pc, #20]	; (24012f8c <HAL_PWREx_EnableAVD+0x1c>)
24012f76:	681b      	ldr	r3, [r3, #0]
24012f78:	4a04      	ldr	r2, [pc, #16]	; (24012f8c <HAL_PWREx_EnableAVD+0x1c>)
24012f7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
24012f7e:	6013      	str	r3, [r2, #0]
}
24012f80:	bf00      	nop
24012f82:	46bd      	mov	sp, r7
24012f84:	f85d 7b04 	ldr.w	r7, [sp], #4
24012f88:	4770      	bx	lr
24012f8a:	bf00      	nop
24012f8c:	58024800 	.word	0x58024800

24012f90 <HAL_PWREx_DisableAVD>:
/**
  * @brief Disable the Analog Voltage Detector(AVD).
  * @retval None.
  */
void HAL_PWREx_DisableAVD (void)
{
24012f90:	b480      	push	{r7}
24012f92:	af00      	add	r7, sp, #0
  /* Disable the Analog Voltage Detector */
  CLEAR_BIT (PWR->CR1, PWR_CR1_AVDEN);
24012f94:	4b05      	ldr	r3, [pc, #20]	; (24012fac <HAL_PWREx_DisableAVD+0x1c>)
24012f96:	681b      	ldr	r3, [r3, #0]
24012f98:	4a04      	ldr	r2, [pc, #16]	; (24012fac <HAL_PWREx_DisableAVD+0x1c>)
24012f9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
24012f9e:	6013      	str	r3, [r2, #0]
}
24012fa0:	bf00      	nop
24012fa2:	46bd      	mov	sp, r7
24012fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
24012fa8:	4770      	bx	lr
24012faa:	bf00      	nop
24012fac:	58024800 	.word	0x58024800

24012fb0 <HAL_PWREx_PVD_AVD_IRQHandler>:
  * @brief  This function handles the PWR PVD/AVD interrupt request.
  * @note   This API should be called under the PVD_AVD_IRQHandler().
  * @retval None
  */
void HAL_PWREx_PVD_AVD_IRQHandler (void)
{
24012fb0:	b580      	push	{r7, lr}
24012fb2:	af00      	add	r7, sp, #0
  /* Check if the Programmable Voltage Detector is enabled (PVD) */
  if (READ_BIT (PWR->CR1, PWR_CR1_PVDEN) != 0U)
24012fb4:	4b1b      	ldr	r3, [pc, #108]	; (24013024 <HAL_PWREx_PVD_AVD_IRQHandler+0x74>)
24012fb6:	681b      	ldr	r3, [r3, #0]
24012fb8:	f003 0310 	and.w	r3, r3, #16
24012fbc:	2b00      	cmp	r3, #0
24012fbe:	d014      	beq.n	24012fea <HAL_PWREx_PVD_AVD_IRQHandler+0x3a>
#if defined (DUAL_CORE)
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
#endif /* defined (DUAL_CORE) */
    {
      /* Check PWR D1/CD EXTI flag */
      if (__HAL_PWR_PVD_EXTI_GET_FLAG () != 0U)
24012fc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24012fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
24012fc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
24012fcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
24012fd0:	d10b      	bne.n	24012fea <HAL_PWREx_PVD_AVD_IRQHandler+0x3a>
      {
        /* PWR PVD interrupt user callback */
        HAL_PWR_PVDCallback ();
24012fd2:	f7ff faf4 	bl	240125be <HAL_PWR_PVDCallback>

        /* Clear PWR EXTI D1/CD pending bit */
        __HAL_PWR_PVD_EXTI_CLEAR_FLAG ();
24012fd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24012fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
24012fde:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
24012fe2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
24012fe6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }
#endif /* defined (DUAL_CORE) */
  }

  /* Check if the Analog Voltage Detector is enabled (AVD) */
  if (READ_BIT (PWR->CR1, PWR_CR1_AVDEN) != 0U)
24012fea:	4b0e      	ldr	r3, [pc, #56]	; (24013024 <HAL_PWREx_PVD_AVD_IRQHandler+0x74>)
24012fec:	681b      	ldr	r3, [r3, #0]
24012fee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
24012ff2:	2b00      	cmp	r3, #0
24012ff4:	d014      	beq.n	24013020 <HAL_PWREx_PVD_AVD_IRQHandler+0x70>
#if defined (DUAL_CORE)
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
#endif /* defined (DUAL_CORE) */
    {
      /* Check PWR EXTI D1/CD flag */
      if (__HAL_PWR_AVD_EXTI_GET_FLAG () != 0U)
24012ff6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24012ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
24012ffe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
24013002:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
24013006:	d10b      	bne.n	24013020 <HAL_PWREx_PVD_AVD_IRQHandler+0x70>
      {
        /* PWR AVD interrupt user callback */
        HAL_PWREx_AVDCallback ();
24013008:	f000 f80e 	bl	24013028 <HAL_PWREx_AVDCallback>

        /* Clear PWR EXTI D1/CD pending bit */
        __HAL_PWR_AVD_EXTI_CLEAR_FLAG ();
2401300c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24013010:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
24013014:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
24013018:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2401301c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
        __HAL_PWR_AVD_EXTID2_CLEAR_FLAG ();
      }
    }
#endif /* defined (DUAL_CORE) */
  }
}
24013020:	bf00      	nop
24013022:	bd80      	pop	{r7, pc}
24013024:	58024800 	.word	0x58024800

24013028 <HAL_PWREx_AVDCallback>:
/**
  * @brief PWR AVD interrupt callback.
  * @retval None.
  */
__weak void HAL_PWREx_AVDCallback (void)
{
24013028:	b480      	push	{r7}
2401302a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWR_AVDCallback can be implemented in the user file
  */
}
2401302c:	bf00      	nop
2401302e:	46bd      	mov	sp, r7
24013030:	f85d 7b04 	ldr.w	r7, [sp], #4
24013034:	4770      	bx	lr
	...

24013038 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
24013038:	b580      	push	{r7, lr}
2401303a:	b086      	sub	sp, #24
2401303c:	af02      	add	r7, sp, #8
2401303e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
24013040:	f7f0 f830 	bl	240030a4 <HAL_GetTick>
24013044:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
24013046:	687b      	ldr	r3, [r7, #4]
24013048:	2b00      	cmp	r3, #0
2401304a:	d101      	bne.n	24013050 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
2401304c:	2301      	movs	r3, #1
2401304e:	e05f      	b.n	24013110 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
24013050:	687b      	ldr	r3, [r7, #4]
24013052:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
24013056:	b2db      	uxtb	r3, r3
24013058:	2b00      	cmp	r3, #0
2401305a:	d107      	bne.n	2401306c <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
2401305c:	6878      	ldr	r0, [r7, #4]
2401305e:	f7ee ff8f 	bl	24001f80 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
24013062:	f241 3188 	movw	r1, #5000	; 0x1388
24013066:	6878      	ldr	r0, [r7, #4]
24013068:	f001 f98e 	bl	24014388 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
2401306c:	687b      	ldr	r3, [r7, #4]
2401306e:	681b      	ldr	r3, [r3, #0]
24013070:	681b      	ldr	r3, [r3, #0]
24013072:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
24013076:	687b      	ldr	r3, [r7, #4]
24013078:	689b      	ldr	r3, [r3, #8]
2401307a:	3b01      	subs	r3, #1
2401307c:	021a      	lsls	r2, r3, #8
2401307e:	687b      	ldr	r3, [r7, #4]
24013080:	681b      	ldr	r3, [r3, #0]
24013082:	430a      	orrs	r2, r1
24013084:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
24013086:	687b      	ldr	r3, [r7, #4]
24013088:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2401308a:	9300      	str	r3, [sp, #0]
2401308c:	68fb      	ldr	r3, [r7, #12]
2401308e:	2200      	movs	r2, #0
24013090:	2120      	movs	r1, #32
24013092:	6878      	ldr	r0, [r7, #4]
24013094:	f001 fa87 	bl	240145a6 <QSPI_WaitFlagStateUntilTimeout>
24013098:	4603      	mov	r3, r0
2401309a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
2401309c:	7afb      	ldrb	r3, [r7, #11]
2401309e:	2b00      	cmp	r3, #0
240130a0:	d135      	bne.n	2401310e <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
240130a2:	687b      	ldr	r3, [r7, #4]
240130a4:	681b      	ldr	r3, [r3, #0]
240130a6:	681a      	ldr	r2, [r3, #0]
240130a8:	4b1b      	ldr	r3, [pc, #108]	; (24013118 <HAL_QSPI_Init+0xe0>)
240130aa:	4013      	ands	r3, r2
240130ac:	687a      	ldr	r2, [r7, #4]
240130ae:	6852      	ldr	r2, [r2, #4]
240130b0:	0611      	lsls	r1, r2, #24
240130b2:	687a      	ldr	r2, [r7, #4]
240130b4:	68d2      	ldr	r2, [r2, #12]
240130b6:	4311      	orrs	r1, r2
240130b8:	687a      	ldr	r2, [r7, #4]
240130ba:	69d2      	ldr	r2, [r2, #28]
240130bc:	4311      	orrs	r1, r2
240130be:	687a      	ldr	r2, [r7, #4]
240130c0:	6a12      	ldr	r2, [r2, #32]
240130c2:	4311      	orrs	r1, r2
240130c4:	687a      	ldr	r2, [r7, #4]
240130c6:	6812      	ldr	r2, [r2, #0]
240130c8:	430b      	orrs	r3, r1
240130ca:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
240130cc:	687b      	ldr	r3, [r7, #4]
240130ce:	681b      	ldr	r3, [r3, #0]
240130d0:	685a      	ldr	r2, [r3, #4]
240130d2:	4b12      	ldr	r3, [pc, #72]	; (2401311c <HAL_QSPI_Init+0xe4>)
240130d4:	4013      	ands	r3, r2
240130d6:	687a      	ldr	r2, [r7, #4]
240130d8:	6912      	ldr	r2, [r2, #16]
240130da:	0411      	lsls	r1, r2, #16
240130dc:	687a      	ldr	r2, [r7, #4]
240130de:	6952      	ldr	r2, [r2, #20]
240130e0:	4311      	orrs	r1, r2
240130e2:	687a      	ldr	r2, [r7, #4]
240130e4:	6992      	ldr	r2, [r2, #24]
240130e6:	4311      	orrs	r1, r2
240130e8:	687a      	ldr	r2, [r7, #4]
240130ea:	6812      	ldr	r2, [r2, #0]
240130ec:	430b      	orrs	r3, r1
240130ee:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
240130f0:	687b      	ldr	r3, [r7, #4]
240130f2:	681b      	ldr	r3, [r3, #0]
240130f4:	681a      	ldr	r2, [r3, #0]
240130f6:	687b      	ldr	r3, [r7, #4]
240130f8:	681b      	ldr	r3, [r3, #0]
240130fa:	f042 0201 	orr.w	r2, r2, #1
240130fe:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
24013100:	687b      	ldr	r3, [r7, #4]
24013102:	2200      	movs	r2, #0
24013104:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
24013106:	687b      	ldr	r3, [r7, #4]
24013108:	2201      	movs	r2, #1
2401310a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
2401310e:	7afb      	ldrb	r3, [r7, #11]
}
24013110:	4618      	mov	r0, r3
24013112:	3710      	adds	r7, #16
24013114:	46bd      	mov	sp, r7
24013116:	bd80      	pop	{r7, pc}
24013118:	00ffff2f 	.word	0x00ffff2f
2401311c:	ffe0f8fe 	.word	0xffe0f8fe

24013120 <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
24013120:	b580      	push	{r7, lr}
24013122:	b082      	sub	sp, #8
24013124:	af00      	add	r7, sp, #0
24013126:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
24013128:	687b      	ldr	r3, [r7, #4]
2401312a:	2b00      	cmp	r3, #0
2401312c:	d101      	bne.n	24013132 <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
2401312e:	2301      	movs	r3, #1
24013130:	e012      	b.n	24013158 <HAL_QSPI_DeInit+0x38>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
24013132:	687b      	ldr	r3, [r7, #4]
24013134:	681b      	ldr	r3, [r3, #0]
24013136:	681a      	ldr	r2, [r3, #0]
24013138:	687b      	ldr	r3, [r7, #4]
2401313a:	681b      	ldr	r3, [r3, #0]
2401313c:	f022 0201 	bic.w	r2, r2, #1
24013140:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
24013142:	6878      	ldr	r0, [r7, #4]
24013144:	f7ee ffc0 	bl	240020c8 <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
24013148:	687b      	ldr	r3, [r7, #4]
2401314a:	2200      	movs	r2, #0
2401314c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
2401314e:	687b      	ldr	r3, [r7, #4]
24013150:	2200      	movs	r2, #0
24013152:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
24013156:	2300      	movs	r3, #0
}
24013158:	4618      	mov	r0, r3
2401315a:	3708      	adds	r7, #8
2401315c:	46bd      	mov	sp, r7
2401315e:	bd80      	pop	{r7, pc}
  * @brief Initialize the QSPI MSP.
  * @param hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_MspInit(QSPI_HandleTypeDef *hqspi)
{
24013160:	b480      	push	{r7}
24013162:	b083      	sub	sp, #12
24013164:	af00      	add	r7, sp, #0
24013166:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_MspInit can be implemented in the user file
   */
}
24013168:	bf00      	nop
2401316a:	370c      	adds	r7, #12
2401316c:	46bd      	mov	sp, r7
2401316e:	f85d 7b04 	ldr.w	r7, [sp], #4
24013172:	4770      	bx	lr
  * @brief DeInitialize the QSPI MSP.
  * @param hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef *hqspi)
{
24013174:	b480      	push	{r7}
24013176:	b083      	sub	sp, #12
24013178:	af00      	add	r7, sp, #0
2401317a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_MspDeInit can be implemented in the user file
   */
}
2401317c:	bf00      	nop
2401317e:	370c      	adds	r7, #12
24013180:	46bd      	mov	sp, r7
24013182:	f85d 7b04 	ldr.w	r7, [sp], #4
24013186:	4770      	bx	lr

24013188 <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
24013188:	b580      	push	{r7, lr}
2401318a:	b086      	sub	sp, #24
2401318c:	af00      	add	r7, sp, #0
2401318e:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
24013190:	687b      	ldr	r3, [r7, #4]
24013192:	681b      	ldr	r3, [r3, #0]
24013194:	689b      	ldr	r3, [r3, #8]
24013196:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
24013198:	687b      	ldr	r3, [r7, #4]
2401319a:	681b      	ldr	r3, [r3, #0]
2401319c:	681b      	ldr	r3, [r3, #0]
2401319e:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
240131a0:	697b      	ldr	r3, [r7, #20]
240131a2:	f003 0304 	and.w	r3, r3, #4
240131a6:	2b00      	cmp	r3, #0
240131a8:	d064      	beq.n	24013274 <HAL_QSPI_IRQHandler+0xec>
240131aa:	693b      	ldr	r3, [r7, #16]
240131ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
240131b0:	2b00      	cmp	r3, #0
240131b2:	d05f      	beq.n	24013274 <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
240131b4:	687b      	ldr	r3, [r7, #4]
240131b6:	681b      	ldr	r3, [r3, #0]
240131b8:	3320      	adds	r3, #32
240131ba:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
240131bc:	687b      	ldr	r3, [r7, #4]
240131be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
240131c2:	b2db      	uxtb	r3, r3
240131c4:	2b12      	cmp	r3, #18
240131c6:	d125      	bne.n	24013214 <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
240131c8:	e01c      	b.n	24013204 <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
240131ca:	687b      	ldr	r3, [r7, #4]
240131cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
240131ce:	2b00      	cmp	r3, #0
240131d0:	d00f      	beq.n	240131f2 <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
240131d2:	687b      	ldr	r3, [r7, #4]
240131d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
240131d6:	781a      	ldrb	r2, [r3, #0]
240131d8:	68fb      	ldr	r3, [r7, #12]
240131da:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
240131dc:	687b      	ldr	r3, [r7, #4]
240131de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
240131e0:	1c5a      	adds	r2, r3, #1
240131e2:	687b      	ldr	r3, [r7, #4]
240131e4:	625a      	str	r2, [r3, #36]	; 0x24
          hqspi->TxXferCount--;
240131e6:	687b      	ldr	r3, [r7, #4]
240131e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
240131ea:	1e5a      	subs	r2, r3, #1
240131ec:	687b      	ldr	r3, [r7, #4]
240131ee:	62da      	str	r2, [r3, #44]	; 0x2c
240131f0:	e008      	b.n	24013204 <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
240131f2:	687b      	ldr	r3, [r7, #4]
240131f4:	681b      	ldr	r3, [r3, #0]
240131f6:	681a      	ldr	r2, [r3, #0]
240131f8:	687b      	ldr	r3, [r7, #4]
240131fa:	681b      	ldr	r3, [r3, #0]
240131fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
24013200:	601a      	str	r2, [r3, #0]
          break;
24013202:	e033      	b.n	2401326c <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
24013204:	687b      	ldr	r3, [r7, #4]
24013206:	681b      	ldr	r3, [r3, #0]
24013208:	689b      	ldr	r3, [r3, #8]
2401320a:	f003 0304 	and.w	r3, r3, #4
2401320e:	2b00      	cmp	r3, #0
24013210:	d1db      	bne.n	240131ca <HAL_QSPI_IRQHandler+0x42>
24013212:	e02b      	b.n	2401326c <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
24013214:	687b      	ldr	r3, [r7, #4]
24013216:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2401321a:	b2db      	uxtb	r3, r3
2401321c:	2b22      	cmp	r3, #34	; 0x22
2401321e:	d125      	bne.n	2401326c <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
24013220:	e01d      	b.n	2401325e <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
24013222:	687b      	ldr	r3, [r7, #4]
24013224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24013226:	2b00      	cmp	r3, #0
24013228:	d010      	beq.n	2401324c <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
2401322a:	687b      	ldr	r3, [r7, #4]
2401322c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2401322e:	68fa      	ldr	r2, [r7, #12]
24013230:	7812      	ldrb	r2, [r2, #0]
24013232:	b2d2      	uxtb	r2, r2
24013234:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
24013236:	687b      	ldr	r3, [r7, #4]
24013238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2401323a:	1c5a      	adds	r2, r3, #1
2401323c:	687b      	ldr	r3, [r7, #4]
2401323e:	631a      	str	r2, [r3, #48]	; 0x30
          hqspi->RxXferCount--;
24013240:	687b      	ldr	r3, [r7, #4]
24013242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24013244:	1e5a      	subs	r2, r3, #1
24013246:	687b      	ldr	r3, [r7, #4]
24013248:	639a      	str	r2, [r3, #56]	; 0x38
2401324a:	e008      	b.n	2401325e <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
2401324c:	687b      	ldr	r3, [r7, #4]
2401324e:	681b      	ldr	r3, [r3, #0]
24013250:	681a      	ldr	r2, [r3, #0]
24013252:	687b      	ldr	r3, [r7, #4]
24013254:	681b      	ldr	r3, [r3, #0]
24013256:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
2401325a:	601a      	str	r2, [r3, #0]
          break;
2401325c:	e006      	b.n	2401326c <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
2401325e:	687b      	ldr	r3, [r7, #4]
24013260:	681b      	ldr	r3, [r3, #0]
24013262:	689b      	ldr	r3, [r3, #8]
24013264:	f003 0304 	and.w	r3, r3, #4
24013268:	2b00      	cmp	r3, #0
2401326a:	d1da      	bne.n	24013222 <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
2401326c:	6878      	ldr	r0, [r7, #4]
2401326e:	f000 ff72 	bl	24014156 <HAL_QSPI_FifoThresholdCallback>
24013272:	e13c      	b.n	240134ee <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
24013274:	697b      	ldr	r3, [r7, #20]
24013276:	f003 0302 	and.w	r3, r3, #2
2401327a:	2b00      	cmp	r3, #0
2401327c:	f000 80b0 	beq.w	240133e0 <HAL_QSPI_IRQHandler+0x258>
24013280:	693b      	ldr	r3, [r7, #16]
24013282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
24013286:	2b00      	cmp	r3, #0
24013288:	f000 80aa 	beq.w	240133e0 <HAL_QSPI_IRQHandler+0x258>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
2401328c:	687b      	ldr	r3, [r7, #4]
2401328e:	681b      	ldr	r3, [r3, #0]
24013290:	2202      	movs	r2, #2
24013292:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
24013294:	687b      	ldr	r3, [r7, #4]
24013296:	681b      	ldr	r3, [r3, #0]
24013298:	681a      	ldr	r2, [r3, #0]
2401329a:	687b      	ldr	r3, [r7, #4]
2401329c:	681b      	ldr	r3, [r3, #0]
2401329e:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
240132a2:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
240132a4:	687b      	ldr	r3, [r7, #4]
240132a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
240132aa:	b2db      	uxtb	r3, r3
240132ac:	2b12      	cmp	r3, #18
240132ae:	d120      	bne.n	240132f2 <HAL_QSPI_IRQHandler+0x16a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
240132b0:	687b      	ldr	r3, [r7, #4]
240132b2:	681b      	ldr	r3, [r3, #0]
240132b4:	681b      	ldr	r3, [r3, #0]
240132b6:	f003 0304 	and.w	r3, r3, #4
240132ba:	2b00      	cmp	r3, #0
240132bc:	d011      	beq.n	240132e2 <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
           but no impact on H7 HW and it minimize the cost in the footprint */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
240132be:	687b      	ldr	r3, [r7, #4]
240132c0:	681b      	ldr	r3, [r3, #0]
240132c2:	681a      	ldr	r2, [r3, #0]
240132c4:	687b      	ldr	r3, [r7, #4]
240132c6:	681b      	ldr	r3, [r3, #0]
240132c8:	f022 0204 	bic.w	r2, r2, #4
240132cc:	601a      	str	r2, [r3, #0]

        /* Disable the MDMA channel */
        __HAL_MDMA_DISABLE(hqspi->hmdma);
240132ce:	687b      	ldr	r3, [r7, #4]
240132d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
240132d2:	681b      	ldr	r3, [r3, #0]
240132d4:	68da      	ldr	r2, [r3, #12]
240132d6:	687b      	ldr	r3, [r7, #4]
240132d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
240132da:	681b      	ldr	r3, [r3, #0]
240132dc:	f022 0201 	bic.w	r2, r2, #1
240132e0:	60da      	str	r2, [r3, #12]
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
240132e2:	687b      	ldr	r3, [r7, #4]
240132e4:	2201      	movs	r2, #1
240132e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
240132ea:	6878      	ldr	r0, [r7, #4]
240132ec:	f000 ff29 	bl	24014142 <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
240132f0:	e0fa      	b.n	240134e8 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
240132f2:	687b      	ldr	r3, [r7, #4]
240132f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
240132f8:	b2db      	uxtb	r3, r3
240132fa:	2b22      	cmp	r3, #34	; 0x22
240132fc:	d143      	bne.n	24013386 <HAL_QSPI_IRQHandler+0x1fe>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
240132fe:	687b      	ldr	r3, [r7, #4]
24013300:	681b      	ldr	r3, [r3, #0]
24013302:	681b      	ldr	r3, [r3, #0]
24013304:	f003 0304 	and.w	r3, r3, #4
24013308:	2b00      	cmp	r3, #0
2401330a:	d012      	beq.n	24013332 <HAL_QSPI_IRQHandler+0x1aa>
      {
        /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
           but no impact on H7 HW and it minimize the cost in the footprint */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
2401330c:	687b      	ldr	r3, [r7, #4]
2401330e:	681b      	ldr	r3, [r3, #0]
24013310:	681a      	ldr	r2, [r3, #0]
24013312:	687b      	ldr	r3, [r7, #4]
24013314:	681b      	ldr	r3, [r3, #0]
24013316:	f022 0204 	bic.w	r2, r2, #4
2401331a:	601a      	str	r2, [r3, #0]

        /* Disable the MDMA channel */
        __HAL_MDMA_DISABLE(hqspi->hmdma);
2401331c:	687b      	ldr	r3, [r7, #4]
2401331e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24013320:	681b      	ldr	r3, [r3, #0]
24013322:	68da      	ldr	r2, [r3, #12]
24013324:	687b      	ldr	r3, [r7, #4]
24013326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24013328:	681b      	ldr	r3, [r3, #0]
2401332a:	f022 0201 	bic.w	r2, r2, #1
2401332e:	60da      	str	r2, [r3, #12]
24013330:	e021      	b.n	24013376 <HAL_QSPI_IRQHandler+0x1ee>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
24013332:	687b      	ldr	r3, [r7, #4]
24013334:	681b      	ldr	r3, [r3, #0]
24013336:	3320      	adds	r3, #32
24013338:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
2401333a:	e013      	b.n	24013364 <HAL_QSPI_IRQHandler+0x1dc>
        {
          if (hqspi->RxXferCount > 0U)
2401333c:	687b      	ldr	r3, [r7, #4]
2401333e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24013340:	2b00      	cmp	r3, #0
24013342:	d017      	beq.n	24013374 <HAL_QSPI_IRQHandler+0x1ec>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
24013344:	687b      	ldr	r3, [r7, #4]
24013346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24013348:	68fa      	ldr	r2, [r7, #12]
2401334a:	7812      	ldrb	r2, [r2, #0]
2401334c:	b2d2      	uxtb	r2, r2
2401334e:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
24013350:	687b      	ldr	r3, [r7, #4]
24013352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24013354:	1c5a      	adds	r2, r3, #1
24013356:	687b      	ldr	r3, [r7, #4]
24013358:	631a      	str	r2, [r3, #48]	; 0x30
            hqspi->RxXferCount--;
2401335a:	687b      	ldr	r3, [r7, #4]
2401335c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2401335e:	1e5a      	subs	r2, r3, #1
24013360:	687b      	ldr	r3, [r7, #4]
24013362:	639a      	str	r2, [r3, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
24013364:	687b      	ldr	r3, [r7, #4]
24013366:	681b      	ldr	r3, [r3, #0]
24013368:	689b      	ldr	r3, [r3, #8]
2401336a:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
2401336e:	2b00      	cmp	r3, #0
24013370:	d1e4      	bne.n	2401333c <HAL_QSPI_IRQHandler+0x1b4>
24013372:	e000      	b.n	24013376 <HAL_QSPI_IRQHandler+0x1ee>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
24013374:	bf00      	nop
        }
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
24013376:	687b      	ldr	r3, [r7, #4]
24013378:	2201      	movs	r2, #1
2401337a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
2401337e:	6878      	ldr	r0, [r7, #4]
24013380:	f000 fed5 	bl	2401412e <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
24013384:	e0b0      	b.n	240134e8 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
24013386:	687b      	ldr	r3, [r7, #4]
24013388:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2401338c:	b2db      	uxtb	r3, r3
2401338e:	2b02      	cmp	r3, #2
24013390:	d107      	bne.n	240133a2 <HAL_QSPI_IRQHandler+0x21a>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
24013392:	687b      	ldr	r3, [r7, #4]
24013394:	2201      	movs	r2, #1
24013396:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
2401339a:	6878      	ldr	r0, [r7, #4]
2401339c:	f000 febd 	bl	2401411a <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
240133a0:	e0a2      	b.n	240134e8 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
240133a2:	687b      	ldr	r3, [r7, #4]
240133a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
240133a8:	b2db      	uxtb	r3, r3
240133aa:	2b08      	cmp	r3, #8
240133ac:	f040 809c 	bne.w	240134e8 <HAL_QSPI_IRQHandler+0x360>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
240133b0:	687b      	ldr	r3, [r7, #4]
240133b2:	681b      	ldr	r3, [r3, #0]
240133b4:	695a      	ldr	r2, [r3, #20]
240133b6:	687b      	ldr	r3, [r7, #4]
240133b8:	681b      	ldr	r3, [r3, #0]
240133ba:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
240133be:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
240133c0:	687b      	ldr	r3, [r7, #4]
240133c2:	2201      	movs	r2, #1
240133c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
240133c8:	687b      	ldr	r3, [r7, #4]
240133ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
240133cc:	2b00      	cmp	r3, #0
240133ce:	d103      	bne.n	240133d8 <HAL_QSPI_IRQHandler+0x250>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
240133d0:	6878      	ldr	r0, [r7, #4]
240133d2:	f000 fe98 	bl	24014106 <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
240133d6:	e087      	b.n	240134e8 <HAL_QSPI_IRQHandler+0x360>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
240133d8:	6878      	ldr	r0, [r7, #4]
240133da:	f000 fe8a 	bl	240140f2 <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
240133de:	e083      	b.n	240134e8 <HAL_QSPI_IRQHandler+0x360>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
240133e0:	697b      	ldr	r3, [r7, #20]
240133e2:	f003 0308 	and.w	r3, r3, #8
240133e6:	2b00      	cmp	r3, #0
240133e8:	d01f      	beq.n	2401342a <HAL_QSPI_IRQHandler+0x2a2>
240133ea:	693b      	ldr	r3, [r7, #16]
240133ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
240133f0:	2b00      	cmp	r3, #0
240133f2:	d01a      	beq.n	2401342a <HAL_QSPI_IRQHandler+0x2a2>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
240133f4:	687b      	ldr	r3, [r7, #4]
240133f6:	681b      	ldr	r3, [r3, #0]
240133f8:	2208      	movs	r2, #8
240133fa:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
240133fc:	687b      	ldr	r3, [r7, #4]
240133fe:	681b      	ldr	r3, [r3, #0]
24013400:	681b      	ldr	r3, [r3, #0]
24013402:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
24013406:	2b00      	cmp	r3, #0
24013408:	d00b      	beq.n	24013422 <HAL_QSPI_IRQHandler+0x29a>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
2401340a:	687b      	ldr	r3, [r7, #4]
2401340c:	681b      	ldr	r3, [r3, #0]
2401340e:	681a      	ldr	r2, [r3, #0]
24013410:	687b      	ldr	r3, [r7, #4]
24013412:	681b      	ldr	r3, [r3, #0]
24013414:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
24013418:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
2401341a:	687b      	ldr	r3, [r7, #4]
2401341c:	2201      	movs	r2, #1
2401341e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
24013422:	6878      	ldr	r0, [r7, #4]
24013424:	f000 fea1 	bl	2401416a <HAL_QSPI_StatusMatchCallback>
24013428:	e061      	b.n	240134ee <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
2401342a:	697b      	ldr	r3, [r7, #20]
2401342c:	f003 0301 	and.w	r3, r3, #1
24013430:	2b00      	cmp	r3, #0
24013432:	d047      	beq.n	240134c4 <HAL_QSPI_IRQHandler+0x33c>
24013434:	693b      	ldr	r3, [r7, #16]
24013436:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
2401343a:	2b00      	cmp	r3, #0
2401343c:	d042      	beq.n	240134c4 <HAL_QSPI_IRQHandler+0x33c>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
2401343e:	687b      	ldr	r3, [r7, #4]
24013440:	681b      	ldr	r3, [r3, #0]
24013442:	2201      	movs	r2, #1
24013444:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
24013446:	687b      	ldr	r3, [r7, #4]
24013448:	681b      	ldr	r3, [r3, #0]
2401344a:	681a      	ldr	r2, [r3, #0]
2401344c:	687b      	ldr	r3, [r7, #4]
2401344e:	681b      	ldr	r3, [r3, #0]
24013450:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
24013454:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
24013456:	687b      	ldr	r3, [r7, #4]
24013458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2401345a:	f043 0202 	orr.w	r2, r3, #2
2401345e:	687b      	ldr	r3, [r7, #4]
24013460:	645a      	str	r2, [r3, #68]	; 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
24013462:	687b      	ldr	r3, [r7, #4]
24013464:	681b      	ldr	r3, [r3, #0]
24013466:	681b      	ldr	r3, [r3, #0]
24013468:	f003 0304 	and.w	r3, r3, #4
2401346c:	2b00      	cmp	r3, #0
2401346e:	d021      	beq.n	240134b4 <HAL_QSPI_IRQHandler+0x32c>
    {
      /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
         but no impact on H7 HW and it minimize the cost in the footprint */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
24013470:	687b      	ldr	r3, [r7, #4]
24013472:	681b      	ldr	r3, [r3, #0]
24013474:	681a      	ldr	r2, [r3, #0]
24013476:	687b      	ldr	r3, [r7, #4]
24013478:	681b      	ldr	r3, [r3, #0]
2401347a:	f022 0204 	bic.w	r2, r2, #4
2401347e:	601a      	str	r2, [r3, #0]

      /* Disable the MDMA channel */
      hqspi->hmdma->XferAbortCallback = QSPI_DMAAbortCplt;
24013480:	687b      	ldr	r3, [r7, #4]
24013482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24013484:	4a1c      	ldr	r2, [pc, #112]	; (240134f8 <HAL_QSPI_IRQHandler+0x370>)
24013486:	659a      	str	r2, [r3, #88]	; 0x58
      if (HAL_MDMA_Abort_IT(hqspi->hmdma) != HAL_OK)
24013488:	687b      	ldr	r3, [r7, #4]
2401348a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2401348c:	4618      	mov	r0, r3
2401348e:	f7fe fb34 	bl	24011afa <HAL_MDMA_Abort_IT>
24013492:	4603      	mov	r3, r0
24013494:	2b00      	cmp	r3, #0
24013496:	d029      	beq.n	240134ec <HAL_QSPI_IRQHandler+0x364>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
24013498:	687b      	ldr	r3, [r7, #4]
2401349a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2401349c:	f043 0204 	orr.w	r2, r3, #4
240134a0:	687b      	ldr	r3, [r7, #4]
240134a2:	645a      	str	r2, [r3, #68]	; 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
240134a4:	687b      	ldr	r3, [r7, #4]
240134a6:	2201      	movs	r2, #1
240134a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
240134ac:	6878      	ldr	r0, [r7, #4]
240134ae:	f000 fe20 	bl	240140f2 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
240134b2:	e01b      	b.n	240134ec <HAL_QSPI_IRQHandler+0x364>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
240134b4:	687b      	ldr	r3, [r7, #4]
240134b6:	2201      	movs	r2, #1
240134b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
240134bc:	6878      	ldr	r0, [r7, #4]
240134be:	f000 fe18 	bl	240140f2 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
240134c2:	e013      	b.n	240134ec <HAL_QSPI_IRQHandler+0x364>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
240134c4:	697b      	ldr	r3, [r7, #20]
240134c6:	f003 0310 	and.w	r3, r3, #16
240134ca:	2b00      	cmp	r3, #0
240134cc:	d00f      	beq.n	240134ee <HAL_QSPI_IRQHandler+0x366>
240134ce:	693b      	ldr	r3, [r7, #16]
240134d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
240134d4:	2b00      	cmp	r3, #0
240134d6:	d00a      	beq.n	240134ee <HAL_QSPI_IRQHandler+0x366>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
240134d8:	687b      	ldr	r3, [r7, #4]
240134da:	681b      	ldr	r3, [r3, #0]
240134dc:	2210      	movs	r2, #16
240134de:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
240134e0:	6878      	ldr	r0, [r7, #4]
240134e2:	f000 fe4c 	bl	2401417e <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
240134e6:	e002      	b.n	240134ee <HAL_QSPI_IRQHandler+0x366>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
240134e8:	bf00      	nop
240134ea:	e000      	b.n	240134ee <HAL_QSPI_IRQHandler+0x366>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
240134ec:	bf00      	nop
}
240134ee:	bf00      	nop
240134f0:	3718      	adds	r7, #24
240134f2:	46bd      	mov	sp, r7
240134f4:	bd80      	pop	{r7, pc}
240134f6:	bf00      	nop
240134f8:	24014541 	.word	0x24014541

240134fc <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
240134fc:	b580      	push	{r7, lr}
240134fe:	b088      	sub	sp, #32
24013500:	af02      	add	r7, sp, #8
24013502:	60f8      	str	r0, [r7, #12]
24013504:	60b9      	str	r1, [r7, #8]
24013506:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
24013508:	f7ef fdcc 	bl	240030a4 <HAL_GetTick>
2401350c:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
2401350e:	68fb      	ldr	r3, [r7, #12]
24013510:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
24013514:	b2db      	uxtb	r3, r3
24013516:	2b01      	cmp	r3, #1
24013518:	d101      	bne.n	2401351e <HAL_QSPI_Command+0x22>
2401351a:	2302      	movs	r3, #2
2401351c:	e048      	b.n	240135b0 <HAL_QSPI_Command+0xb4>
2401351e:	68fb      	ldr	r3, [r7, #12]
24013520:	2201      	movs	r2, #1
24013522:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
24013526:	68fb      	ldr	r3, [r7, #12]
24013528:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2401352c:	b2db      	uxtb	r3, r3
2401352e:	2b01      	cmp	r3, #1
24013530:	d137      	bne.n	240135a2 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
24013532:	68fb      	ldr	r3, [r7, #12]
24013534:	2200      	movs	r2, #0
24013536:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
24013538:	68fb      	ldr	r3, [r7, #12]
2401353a:	2202      	movs	r2, #2
2401353c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
24013540:	687b      	ldr	r3, [r7, #4]
24013542:	9300      	str	r3, [sp, #0]
24013544:	693b      	ldr	r3, [r7, #16]
24013546:	2200      	movs	r2, #0
24013548:	2120      	movs	r1, #32
2401354a:	68f8      	ldr	r0, [r7, #12]
2401354c:	f001 f82b 	bl	240145a6 <QSPI_WaitFlagStateUntilTimeout>
24013550:	4603      	mov	r3, r0
24013552:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
24013554:	7dfb      	ldrb	r3, [r7, #23]
24013556:	2b00      	cmp	r3, #0
24013558:	d125      	bne.n	240135a6 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
2401355a:	2200      	movs	r2, #0
2401355c:	68b9      	ldr	r1, [r7, #8]
2401355e:	68f8      	ldr	r0, [r7, #12]
24013560:	f001 f858 	bl	24014614 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
24013564:	68bb      	ldr	r3, [r7, #8]
24013566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24013568:	2b00      	cmp	r3, #0
2401356a:	d115      	bne.n	24013598 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
2401356c:	687b      	ldr	r3, [r7, #4]
2401356e:	9300      	str	r3, [sp, #0]
24013570:	693b      	ldr	r3, [r7, #16]
24013572:	2201      	movs	r2, #1
24013574:	2102      	movs	r1, #2
24013576:	68f8      	ldr	r0, [r7, #12]
24013578:	f001 f815 	bl	240145a6 <QSPI_WaitFlagStateUntilTimeout>
2401357c:	4603      	mov	r3, r0
2401357e:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
24013580:	7dfb      	ldrb	r3, [r7, #23]
24013582:	2b00      	cmp	r3, #0
24013584:	d10f      	bne.n	240135a6 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
24013586:	68fb      	ldr	r3, [r7, #12]
24013588:	681b      	ldr	r3, [r3, #0]
2401358a:	2202      	movs	r2, #2
2401358c:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
2401358e:	68fb      	ldr	r3, [r7, #12]
24013590:	2201      	movs	r2, #1
24013592:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
24013596:	e006      	b.n	240135a6 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
24013598:	68fb      	ldr	r3, [r7, #12]
2401359a:	2201      	movs	r2, #1
2401359c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
240135a0:	e001      	b.n	240135a6 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
240135a2:	2302      	movs	r3, #2
240135a4:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
240135a6:	68fb      	ldr	r3, [r7, #12]
240135a8:	2200      	movs	r2, #0
240135aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
240135ae:	7dfb      	ldrb	r3, [r7, #23]
}
240135b0:	4618      	mov	r0, r3
240135b2:	3718      	adds	r7, #24
240135b4:	46bd      	mov	sp, r7
240135b6:	bd80      	pop	{r7, pc}

240135b8 <HAL_QSPI_Command_IT>:
  * @param cmd structure that contains the command configuration information
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command_IT(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd)
{
240135b8:	b580      	push	{r7, lr}
240135ba:	b086      	sub	sp, #24
240135bc:	af02      	add	r7, sp, #8
240135be:	6078      	str	r0, [r7, #4]
240135c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
240135c2:	f7ef fd6f 	bl	240030a4 <HAL_GetTick>
240135c6:	60b8      	str	r0, [r7, #8]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
240135c8:	687b      	ldr	r3, [r7, #4]
240135ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
240135ce:	b2db      	uxtb	r3, r3
240135d0:	2b01      	cmp	r3, #1
240135d2:	d101      	bne.n	240135d8 <HAL_QSPI_Command_IT+0x20>
240135d4:	2302      	movs	r3, #2
240135d6:	e051      	b.n	2401367c <HAL_QSPI_Command_IT+0xc4>
240135d8:	687b      	ldr	r3, [r7, #4]
240135da:	2201      	movs	r2, #1
240135dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
240135e0:	687b      	ldr	r3, [r7, #4]
240135e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
240135e6:	b2db      	uxtb	r3, r3
240135e8:	2b01      	cmp	r3, #1
240135ea:	d140      	bne.n	2401366e <HAL_QSPI_Command_IT+0xb6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
240135ec:	687b      	ldr	r3, [r7, #4]
240135ee:	2200      	movs	r2, #0
240135f0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
240135f2:	687b      	ldr	r3, [r7, #4]
240135f4:	2202      	movs	r2, #2
240135f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
240135fa:	687b      	ldr	r3, [r7, #4]
240135fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
240135fe:	9300      	str	r3, [sp, #0]
24013600:	68bb      	ldr	r3, [r7, #8]
24013602:	2200      	movs	r2, #0
24013604:	2120      	movs	r1, #32
24013606:	6878      	ldr	r0, [r7, #4]
24013608:	f000 ffcd 	bl	240145a6 <QSPI_WaitFlagStateUntilTimeout>
2401360c:	4603      	mov	r3, r0
2401360e:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
24013610:	7bfb      	ldrb	r3, [r7, #15]
24013612:	2b00      	cmp	r3, #0
24013614:	d126      	bne.n	24013664 <HAL_QSPI_Command_IT+0xac>
    {
      if (cmd->DataMode == QSPI_DATA_NONE)
24013616:	683b      	ldr	r3, [r7, #0]
24013618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2401361a:	2b00      	cmp	r3, #0
2401361c:	d103      	bne.n	24013626 <HAL_QSPI_Command_IT+0x6e>
      {
        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TE | QSPI_FLAG_TC);
2401361e:	687b      	ldr	r3, [r7, #4]
24013620:	681b      	ldr	r3, [r3, #0]
24013622:	2203      	movs	r2, #3
24013624:	60da      	str	r2, [r3, #12]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
24013626:	2200      	movs	r2, #0
24013628:	6839      	ldr	r1, [r7, #0]
2401362a:	6878      	ldr	r0, [r7, #4]
2401362c:	f000 fff2 	bl	24014614 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
24013630:	683b      	ldr	r3, [r7, #0]
24013632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24013634:	2b00      	cmp	r3, #0
24013636:	d10c      	bne.n	24013652 <HAL_QSPI_Command_IT+0x9a>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so activate TC and TE interrupts */
        /* Process unlocked */
        __HAL_UNLOCK(hqspi);
24013638:	687b      	ldr	r3, [r7, #4]
2401363a:	2200      	movs	r2, #0
2401363c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Enable the QSPI Transfer Error Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TE | QSPI_IT_TC);
24013640:	687b      	ldr	r3, [r7, #4]
24013642:	681b      	ldr	r3, [r3, #0]
24013644:	681a      	ldr	r2, [r3, #0]
24013646:	687b      	ldr	r3, [r7, #4]
24013648:	681b      	ldr	r3, [r3, #0]
2401364a:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
2401364e:	601a      	str	r2, [r3, #0]
24013650:	e013      	b.n	2401367a <HAL_QSPI_Command_IT+0xc2>
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
24013652:	687b      	ldr	r3, [r7, #4]
24013654:	2201      	movs	r2, #1
24013656:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process unlocked */
        __HAL_UNLOCK(hqspi);
2401365a:	687b      	ldr	r3, [r7, #4]
2401365c:	2200      	movs	r2, #0
2401365e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
24013662:	e00a      	b.n	2401367a <HAL_QSPI_Command_IT+0xc2>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
24013664:	687b      	ldr	r3, [r7, #4]
24013666:	2200      	movs	r2, #0
24013668:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
2401366c:	e005      	b.n	2401367a <HAL_QSPI_Command_IT+0xc2>
    }
  }
  else
  {
    status = HAL_BUSY;
2401366e:	2302      	movs	r3, #2
24013670:	73fb      	strb	r3, [r7, #15]

    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
24013672:	687b      	ldr	r3, [r7, #4]
24013674:	2200      	movs	r2, #0
24013676:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  /* Return function status */
  return status;
2401367a:	7bfb      	ldrb	r3, [r7, #15]
}
2401367c:	4618      	mov	r0, r3
2401367e:	3710      	adds	r7, #16
24013680:	46bd      	mov	sp, r7
24013682:	bd80      	pop	{r7, pc}

24013684 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
24013684:	b580      	push	{r7, lr}
24013686:	b08a      	sub	sp, #40	; 0x28
24013688:	af02      	add	r7, sp, #8
2401368a:	60f8      	str	r0, [r7, #12]
2401368c:	60b9      	str	r1, [r7, #8]
2401368e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
24013690:	2300      	movs	r3, #0
24013692:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
24013694:	f7ef fd06 	bl	240030a4 <HAL_GetTick>
24013698:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
2401369a:	68fb      	ldr	r3, [r7, #12]
2401369c:	681b      	ldr	r3, [r3, #0]
2401369e:	3320      	adds	r3, #32
240136a0:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
240136a2:	68fb      	ldr	r3, [r7, #12]
240136a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
240136a8:	b2db      	uxtb	r3, r3
240136aa:	2b01      	cmp	r3, #1
240136ac:	d101      	bne.n	240136b2 <HAL_QSPI_Transmit+0x2e>
240136ae:	2302      	movs	r3, #2
240136b0:	e076      	b.n	240137a0 <HAL_QSPI_Transmit+0x11c>
240136b2:	68fb      	ldr	r3, [r7, #12]
240136b4:	2201      	movs	r2, #1
240136b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
240136ba:	68fb      	ldr	r3, [r7, #12]
240136bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
240136c0:	b2db      	uxtb	r3, r3
240136c2:	2b01      	cmp	r3, #1
240136c4:	d165      	bne.n	24013792 <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
240136c6:	68fb      	ldr	r3, [r7, #12]
240136c8:	2200      	movs	r2, #0
240136ca:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
240136cc:	68bb      	ldr	r3, [r7, #8]
240136ce:	2b00      	cmp	r3, #0
240136d0:	d056      	beq.n	24013780 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
240136d2:	68fb      	ldr	r3, [r7, #12]
240136d4:	2212      	movs	r2, #18
240136d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
240136da:	68fb      	ldr	r3, [r7, #12]
240136dc:	681b      	ldr	r3, [r3, #0]
240136de:	691b      	ldr	r3, [r3, #16]
240136e0:	1c5a      	adds	r2, r3, #1
240136e2:	68fb      	ldr	r3, [r7, #12]
240136e4:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
240136e6:	68fb      	ldr	r3, [r7, #12]
240136e8:	681b      	ldr	r3, [r3, #0]
240136ea:	691b      	ldr	r3, [r3, #16]
240136ec:	1c5a      	adds	r2, r3, #1
240136ee:	68fb      	ldr	r3, [r7, #12]
240136f0:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
240136f2:	68fb      	ldr	r3, [r7, #12]
240136f4:	68ba      	ldr	r2, [r7, #8]
240136f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
240136f8:	68fb      	ldr	r3, [r7, #12]
240136fa:	681b      	ldr	r3, [r3, #0]
240136fc:	695a      	ldr	r2, [r3, #20]
240136fe:	68fb      	ldr	r3, [r7, #12]
24013700:	681b      	ldr	r3, [r3, #0]
24013702:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
24013706:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
24013708:	e01b      	b.n	24013742 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
2401370a:	687b      	ldr	r3, [r7, #4]
2401370c:	9300      	str	r3, [sp, #0]
2401370e:	69bb      	ldr	r3, [r7, #24]
24013710:	2201      	movs	r2, #1
24013712:	2104      	movs	r1, #4
24013714:	68f8      	ldr	r0, [r7, #12]
24013716:	f000 ff46 	bl	240145a6 <QSPI_WaitFlagStateUntilTimeout>
2401371a:	4603      	mov	r3, r0
2401371c:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
2401371e:	7ffb      	ldrb	r3, [r7, #31]
24013720:	2b00      	cmp	r3, #0
24013722:	d113      	bne.n	2401374c <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
24013724:	68fb      	ldr	r3, [r7, #12]
24013726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24013728:	781a      	ldrb	r2, [r3, #0]
2401372a:	697b      	ldr	r3, [r7, #20]
2401372c:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
2401372e:	68fb      	ldr	r3, [r7, #12]
24013730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24013732:	1c5a      	adds	r2, r3, #1
24013734:	68fb      	ldr	r3, [r7, #12]
24013736:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
24013738:	68fb      	ldr	r3, [r7, #12]
2401373a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2401373c:	1e5a      	subs	r2, r3, #1
2401373e:	68fb      	ldr	r3, [r7, #12]
24013740:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
24013742:	68fb      	ldr	r3, [r7, #12]
24013744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24013746:	2b00      	cmp	r3, #0
24013748:	d1df      	bne.n	2401370a <HAL_QSPI_Transmit+0x86>
2401374a:	e000      	b.n	2401374e <HAL_QSPI_Transmit+0xca>
          break;
2401374c:	bf00      	nop
      }

      if (status == HAL_OK)
2401374e:	7ffb      	ldrb	r3, [r7, #31]
24013750:	2b00      	cmp	r3, #0
24013752:	d110      	bne.n	24013776 <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
24013754:	687b      	ldr	r3, [r7, #4]
24013756:	9300      	str	r3, [sp, #0]
24013758:	69bb      	ldr	r3, [r7, #24]
2401375a:	2201      	movs	r2, #1
2401375c:	2102      	movs	r1, #2
2401375e:	68f8      	ldr	r0, [r7, #12]
24013760:	f000 ff21 	bl	240145a6 <QSPI_WaitFlagStateUntilTimeout>
24013764:	4603      	mov	r3, r0
24013766:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
24013768:	7ffb      	ldrb	r3, [r7, #31]
2401376a:	2b00      	cmp	r3, #0
2401376c:	d103      	bne.n	24013776 <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
2401376e:	68fb      	ldr	r3, [r7, #12]
24013770:	681b      	ldr	r3, [r3, #0]
24013772:	2202      	movs	r2, #2
24013774:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
24013776:	68fb      	ldr	r3, [r7, #12]
24013778:	2201      	movs	r2, #1
2401377a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
2401377e:	e00a      	b.n	24013796 <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
24013780:	68fb      	ldr	r3, [r7, #12]
24013782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24013784:	f043 0208 	orr.w	r2, r3, #8
24013788:	68fb      	ldr	r3, [r7, #12]
2401378a:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
2401378c:	2301      	movs	r3, #1
2401378e:	77fb      	strb	r3, [r7, #31]
24013790:	e001      	b.n	24013796 <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
24013792:	2302      	movs	r3, #2
24013794:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
24013796:	68fb      	ldr	r3, [r7, #12]
24013798:	2200      	movs	r2, #0
2401379a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
2401379e:	7ffb      	ldrb	r3, [r7, #31]
}
240137a0:	4618      	mov	r0, r3
240137a2:	3720      	adds	r7, #32
240137a4:	46bd      	mov	sp, r7
240137a6:	bd80      	pop	{r7, pc}

240137a8 <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
240137a8:	b580      	push	{r7, lr}
240137aa:	b08a      	sub	sp, #40	; 0x28
240137ac:	af02      	add	r7, sp, #8
240137ae:	60f8      	str	r0, [r7, #12]
240137b0:	60b9      	str	r1, [r7, #8]
240137b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
240137b4:	2300      	movs	r3, #0
240137b6:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
240137b8:	f7ef fc74 	bl	240030a4 <HAL_GetTick>
240137bc:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
240137be:	68fb      	ldr	r3, [r7, #12]
240137c0:	681b      	ldr	r3, [r3, #0]
240137c2:	699b      	ldr	r3, [r3, #24]
240137c4:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
240137c6:	68fb      	ldr	r3, [r7, #12]
240137c8:	681b      	ldr	r3, [r3, #0]
240137ca:	3320      	adds	r3, #32
240137cc:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
240137ce:	68fb      	ldr	r3, [r7, #12]
240137d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
240137d4:	b2db      	uxtb	r3, r3
240137d6:	2b01      	cmp	r3, #1
240137d8:	d101      	bne.n	240137de <HAL_QSPI_Receive+0x36>
240137da:	2302      	movs	r3, #2
240137dc:	e07d      	b.n	240138da <HAL_QSPI_Receive+0x132>
240137de:	68fb      	ldr	r3, [r7, #12]
240137e0:	2201      	movs	r2, #1
240137e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
240137e6:	68fb      	ldr	r3, [r7, #12]
240137e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
240137ec:	b2db      	uxtb	r3, r3
240137ee:	2b01      	cmp	r3, #1
240137f0:	d16c      	bne.n	240138cc <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
240137f2:	68fb      	ldr	r3, [r7, #12]
240137f4:	2200      	movs	r2, #0
240137f6:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
240137f8:	68bb      	ldr	r3, [r7, #8]
240137fa:	2b00      	cmp	r3, #0
240137fc:	d05d      	beq.n	240138ba <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
240137fe:	68fb      	ldr	r3, [r7, #12]
24013800:	2222      	movs	r2, #34	; 0x22
24013802:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
24013806:	68fb      	ldr	r3, [r7, #12]
24013808:	681b      	ldr	r3, [r3, #0]
2401380a:	691b      	ldr	r3, [r3, #16]
2401380c:	1c5a      	adds	r2, r3, #1
2401380e:	68fb      	ldr	r3, [r7, #12]
24013810:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
24013812:	68fb      	ldr	r3, [r7, #12]
24013814:	681b      	ldr	r3, [r3, #0]
24013816:	691b      	ldr	r3, [r3, #16]
24013818:	1c5a      	adds	r2, r3, #1
2401381a:	68fb      	ldr	r3, [r7, #12]
2401381c:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
2401381e:	68fb      	ldr	r3, [r7, #12]
24013820:	68ba      	ldr	r2, [r7, #8]
24013822:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
24013824:	68fb      	ldr	r3, [r7, #12]
24013826:	681b      	ldr	r3, [r3, #0]
24013828:	695b      	ldr	r3, [r3, #20]
2401382a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
2401382e:	68fb      	ldr	r3, [r7, #12]
24013830:	681b      	ldr	r3, [r3, #0]
24013832:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
24013836:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
24013838:	68fb      	ldr	r3, [r7, #12]
2401383a:	681b      	ldr	r3, [r3, #0]
2401383c:	697a      	ldr	r2, [r7, #20]
2401383e:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
24013840:	e01c      	b.n	2401387c <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
24013842:	687b      	ldr	r3, [r7, #4]
24013844:	9300      	str	r3, [sp, #0]
24013846:	69bb      	ldr	r3, [r7, #24]
24013848:	2201      	movs	r2, #1
2401384a:	2106      	movs	r1, #6
2401384c:	68f8      	ldr	r0, [r7, #12]
2401384e:	f000 feaa 	bl	240145a6 <QSPI_WaitFlagStateUntilTimeout>
24013852:	4603      	mov	r3, r0
24013854:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
24013856:	7ffb      	ldrb	r3, [r7, #31]
24013858:	2b00      	cmp	r3, #0
2401385a:	d114      	bne.n	24013886 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
2401385c:	68fb      	ldr	r3, [r7, #12]
2401385e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24013860:	693a      	ldr	r2, [r7, #16]
24013862:	7812      	ldrb	r2, [r2, #0]
24013864:	b2d2      	uxtb	r2, r2
24013866:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
24013868:	68fb      	ldr	r3, [r7, #12]
2401386a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2401386c:	1c5a      	adds	r2, r3, #1
2401386e:	68fb      	ldr	r3, [r7, #12]
24013870:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
24013872:	68fb      	ldr	r3, [r7, #12]
24013874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24013876:	1e5a      	subs	r2, r3, #1
24013878:	68fb      	ldr	r3, [r7, #12]
2401387a:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
2401387c:	68fb      	ldr	r3, [r7, #12]
2401387e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24013880:	2b00      	cmp	r3, #0
24013882:	d1de      	bne.n	24013842 <HAL_QSPI_Receive+0x9a>
24013884:	e000      	b.n	24013888 <HAL_QSPI_Receive+0xe0>
          break;
24013886:	bf00      	nop
      }

      if (status == HAL_OK)
24013888:	7ffb      	ldrb	r3, [r7, #31]
2401388a:	2b00      	cmp	r3, #0
2401388c:	d110      	bne.n	240138b0 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
2401388e:	687b      	ldr	r3, [r7, #4]
24013890:	9300      	str	r3, [sp, #0]
24013892:	69bb      	ldr	r3, [r7, #24]
24013894:	2201      	movs	r2, #1
24013896:	2102      	movs	r1, #2
24013898:	68f8      	ldr	r0, [r7, #12]
2401389a:	f000 fe84 	bl	240145a6 <QSPI_WaitFlagStateUntilTimeout>
2401389e:	4603      	mov	r3, r0
240138a0:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
240138a2:	7ffb      	ldrb	r3, [r7, #31]
240138a4:	2b00      	cmp	r3, #0
240138a6:	d103      	bne.n	240138b0 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
240138a8:	68fb      	ldr	r3, [r7, #12]
240138aa:	681b      	ldr	r3, [r3, #0]
240138ac:	2202      	movs	r2, #2
240138ae:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
240138b0:	68fb      	ldr	r3, [r7, #12]
240138b2:	2201      	movs	r2, #1
240138b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
240138b8:	e00a      	b.n	240138d0 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
240138ba:	68fb      	ldr	r3, [r7, #12]
240138bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
240138be:	f043 0208 	orr.w	r2, r3, #8
240138c2:	68fb      	ldr	r3, [r7, #12]
240138c4:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
240138c6:	2301      	movs	r3, #1
240138c8:	77fb      	strb	r3, [r7, #31]
240138ca:	e001      	b.n	240138d0 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
240138cc:	2302      	movs	r3, #2
240138ce:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
240138d0:	68fb      	ldr	r3, [r7, #12]
240138d2:	2200      	movs	r2, #0
240138d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
240138d8:	7ffb      	ldrb	r3, [r7, #31]
}
240138da:	4618      	mov	r0, r3
240138dc:	3720      	adds	r7, #32
240138de:	46bd      	mov	sp, r7
240138e0:	bd80      	pop	{r7, pc}

240138e2 <HAL_QSPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit_IT(QSPI_HandleTypeDef *hqspi, uint8_t *pData)
{
240138e2:	b480      	push	{r7}
240138e4:	b085      	sub	sp, #20
240138e6:	af00      	add	r7, sp, #0
240138e8:	6078      	str	r0, [r7, #4]
240138ea:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
240138ec:	2300      	movs	r3, #0
240138ee:	73fb      	strb	r3, [r7, #15]

  /* Process locked */
  __HAL_LOCK(hqspi);
240138f0:	687b      	ldr	r3, [r7, #4]
240138f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
240138f6:	b2db      	uxtb	r3, r3
240138f8:	2b01      	cmp	r3, #1
240138fa:	d101      	bne.n	24013900 <HAL_QSPI_Transmit_IT+0x1e>
240138fc:	2302      	movs	r3, #2
240138fe:	e04f      	b.n	240139a0 <HAL_QSPI_Transmit_IT+0xbe>
24013900:	687b      	ldr	r3, [r7, #4]
24013902:	2201      	movs	r2, #1
24013904:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
24013908:	687b      	ldr	r3, [r7, #4]
2401390a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2401390e:	b2db      	uxtb	r3, r3
24013910:	2b01      	cmp	r3, #1
24013912:	d13e      	bne.n	24013992 <HAL_QSPI_Transmit_IT+0xb0>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
24013914:	687b      	ldr	r3, [r7, #4]
24013916:	2200      	movs	r2, #0
24013918:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
2401391a:	683b      	ldr	r3, [r7, #0]
2401391c:	2b00      	cmp	r3, #0
2401391e:	d02b      	beq.n	24013978 <HAL_QSPI_Transmit_IT+0x96>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
24013920:	687b      	ldr	r3, [r7, #4]
24013922:	2212      	movs	r2, #18
24013924:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
24013928:	687b      	ldr	r3, [r7, #4]
2401392a:	681b      	ldr	r3, [r3, #0]
2401392c:	691b      	ldr	r3, [r3, #16]
2401392e:	1c5a      	adds	r2, r3, #1
24013930:	687b      	ldr	r3, [r7, #4]
24013932:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
24013934:	687b      	ldr	r3, [r7, #4]
24013936:	681b      	ldr	r3, [r3, #0]
24013938:	691b      	ldr	r3, [r3, #16]
2401393a:	1c5a      	adds	r2, r3, #1
2401393c:	687b      	ldr	r3, [r7, #4]
2401393e:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
24013940:	687b      	ldr	r3, [r7, #4]
24013942:	683a      	ldr	r2, [r7, #0]
24013944:	625a      	str	r2, [r3, #36]	; 0x24

      /* Clear interrupt */
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TE | QSPI_FLAG_TC);
24013946:	687b      	ldr	r3, [r7, #4]
24013948:	681b      	ldr	r3, [r3, #0]
2401394a:	2203      	movs	r2, #3
2401394c:	60da      	str	r2, [r3, #12]

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
2401394e:	687b      	ldr	r3, [r7, #4]
24013950:	681b      	ldr	r3, [r3, #0]
24013952:	695a      	ldr	r2, [r3, #20]
24013954:	687b      	ldr	r3, [r7, #4]
24013956:	681b      	ldr	r3, [r3, #0]
24013958:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
2401395c:	615a      	str	r2, [r3, #20]

      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
2401395e:	687b      	ldr	r3, [r7, #4]
24013960:	2200      	movs	r2, #0
24013962:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Enable the QSPI transfer error, FIFO threshold and transfer complete Interrupts */
      __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TE | QSPI_IT_FT | QSPI_IT_TC);
24013966:	687b      	ldr	r3, [r7, #4]
24013968:	681b      	ldr	r3, [r3, #0]
2401396a:	681a      	ldr	r2, [r3, #0]
2401396c:	687b      	ldr	r3, [r7, #4]
2401396e:	681b      	ldr	r3, [r3, #0]
24013970:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
24013974:	601a      	str	r2, [r3, #0]
24013976:	e012      	b.n	2401399e <HAL_QSPI_Transmit_IT+0xbc>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
24013978:	687b      	ldr	r3, [r7, #4]
2401397a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2401397c:	f043 0208 	orr.w	r2, r3, #8
24013980:	687b      	ldr	r3, [r7, #4]
24013982:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
24013984:	2301      	movs	r3, #1
24013986:	73fb      	strb	r3, [r7, #15]

      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
24013988:	687b      	ldr	r3, [r7, #4]
2401398a:	2200      	movs	r2, #0
2401398c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
24013990:	e005      	b.n	2401399e <HAL_QSPI_Transmit_IT+0xbc>
    }
  }
  else
  {
    status = HAL_BUSY;
24013992:	2302      	movs	r3, #2
24013994:	73fb      	strb	r3, [r7, #15]

    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
24013996:	687b      	ldr	r3, [r7, #4]
24013998:	2200      	movs	r2, #0
2401399a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
2401399e:	7bfb      	ldrb	r3, [r7, #15]
}
240139a0:	4618      	mov	r0, r3
240139a2:	3714      	adds	r7, #20
240139a4:	46bd      	mov	sp, r7
240139a6:	f85d 7b04 	ldr.w	r7, [sp], #4
240139aa:	4770      	bx	lr

240139ac <HAL_QSPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive_IT(QSPI_HandleTypeDef *hqspi, uint8_t *pData)
{
240139ac:	b480      	push	{r7}
240139ae:	b085      	sub	sp, #20
240139b0:	af00      	add	r7, sp, #0
240139b2:	6078      	str	r0, [r7, #4]
240139b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
240139b6:	2300      	movs	r3, #0
240139b8:	73fb      	strb	r3, [r7, #15]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
240139ba:	687b      	ldr	r3, [r7, #4]
240139bc:	681b      	ldr	r3, [r3, #0]
240139be:	699b      	ldr	r3, [r3, #24]
240139c0:	60bb      	str	r3, [r7, #8]

  /* Process locked */
  __HAL_LOCK(hqspi);
240139c2:	687b      	ldr	r3, [r7, #4]
240139c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
240139c8:	b2db      	uxtb	r3, r3
240139ca:	2b01      	cmp	r3, #1
240139cc:	d101      	bne.n	240139d2 <HAL_QSPI_Receive_IT+0x26>
240139ce:	2302      	movs	r3, #2
240139d0:	e055      	b.n	24013a7e <HAL_QSPI_Receive_IT+0xd2>
240139d2:	687b      	ldr	r3, [r7, #4]
240139d4:	2201      	movs	r2, #1
240139d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
240139da:	687b      	ldr	r3, [r7, #4]
240139dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
240139e0:	b2db      	uxtb	r3, r3
240139e2:	2b01      	cmp	r3, #1
240139e4:	d144      	bne.n	24013a70 <HAL_QSPI_Receive_IT+0xc4>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
240139e6:	687b      	ldr	r3, [r7, #4]
240139e8:	2200      	movs	r2, #0
240139ea:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
240139ec:	683b      	ldr	r3, [r7, #0]
240139ee:	2b00      	cmp	r3, #0
240139f0:	d031      	beq.n	24013a56 <HAL_QSPI_Receive_IT+0xaa>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
240139f2:	687b      	ldr	r3, [r7, #4]
240139f4:	2222      	movs	r2, #34	; 0x22
240139f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
240139fa:	687b      	ldr	r3, [r7, #4]
240139fc:	681b      	ldr	r3, [r3, #0]
240139fe:	691b      	ldr	r3, [r3, #16]
24013a00:	1c5a      	adds	r2, r3, #1
24013a02:	687b      	ldr	r3, [r7, #4]
24013a04:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
24013a06:	687b      	ldr	r3, [r7, #4]
24013a08:	681b      	ldr	r3, [r3, #0]
24013a0a:	691b      	ldr	r3, [r3, #16]
24013a0c:	1c5a      	adds	r2, r3, #1
24013a0e:	687b      	ldr	r3, [r7, #4]
24013a10:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
24013a12:	687b      	ldr	r3, [r7, #4]
24013a14:	683a      	ldr	r2, [r7, #0]
24013a16:	631a      	str	r2, [r3, #48]	; 0x30

      /* Clear interrupt */
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TE | QSPI_FLAG_TC);
24013a18:	687b      	ldr	r3, [r7, #4]
24013a1a:	681b      	ldr	r3, [r3, #0]
24013a1c:	2203      	movs	r2, #3
24013a1e:	60da      	str	r2, [r3, #12]

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
24013a20:	687b      	ldr	r3, [r7, #4]
24013a22:	681b      	ldr	r3, [r3, #0]
24013a24:	695b      	ldr	r3, [r3, #20]
24013a26:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
24013a2a:	687b      	ldr	r3, [r7, #4]
24013a2c:	681b      	ldr	r3, [r3, #0]
24013a2e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
24013a32:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
24013a34:	687b      	ldr	r3, [r7, #4]
24013a36:	681b      	ldr	r3, [r3, #0]
24013a38:	68ba      	ldr	r2, [r7, #8]
24013a3a:	619a      	str	r2, [r3, #24]

      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
24013a3c:	687b      	ldr	r3, [r7, #4]
24013a3e:	2200      	movs	r2, #0
24013a40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Enable the QSPI transfer error, FIFO threshold and transfer complete Interrupts */
      __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TE | QSPI_IT_FT | QSPI_IT_TC);
24013a44:	687b      	ldr	r3, [r7, #4]
24013a46:	681b      	ldr	r3, [r3, #0]
24013a48:	681a      	ldr	r2, [r3, #0]
24013a4a:	687b      	ldr	r3, [r7, #4]
24013a4c:	681b      	ldr	r3, [r3, #0]
24013a4e:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
24013a52:	601a      	str	r2, [r3, #0]
24013a54:	e012      	b.n	24013a7c <HAL_QSPI_Receive_IT+0xd0>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
24013a56:	687b      	ldr	r3, [r7, #4]
24013a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24013a5a:	f043 0208 	orr.w	r2, r3, #8
24013a5e:	687b      	ldr	r3, [r7, #4]
24013a60:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
24013a62:	2301      	movs	r3, #1
24013a64:	73fb      	strb	r3, [r7, #15]

      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
24013a66:	687b      	ldr	r3, [r7, #4]
24013a68:	2200      	movs	r2, #0
24013a6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
24013a6e:	e005      	b.n	24013a7c <HAL_QSPI_Receive_IT+0xd0>
    }
  }
  else
  {
    status = HAL_BUSY;
24013a70:	2302      	movs	r3, #2
24013a72:	73fb      	strb	r3, [r7, #15]

    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
24013a74:	687b      	ldr	r3, [r7, #4]
24013a76:	2200      	movs	r2, #0
24013a78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
24013a7c:	7bfb      	ldrb	r3, [r7, #15]
}
24013a7e:	4618      	mov	r0, r3
24013a80:	3714      	adds	r7, #20
24013a82:	46bd      	mov	sp, r7
24013a84:	f85d 7b04 	ldr.w	r7, [sp], #4
24013a88:	4770      	bx	lr
	...

24013a8c <HAL_QSPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit_DMA(QSPI_HandleTypeDef *hqspi, uint8_t *pData)
{
24013a8c:	b590      	push	{r4, r7, lr}
24013a8e:	b087      	sub	sp, #28
24013a90:	af02      	add	r7, sp, #8
24013a92:	6078      	str	r0, [r7, #4]
24013a94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
24013a96:	2300      	movs	r3, #0
24013a98:	73fb      	strb	r3, [r7, #15]
  uint32_t data_size = (READ_REG(hqspi->Instance->DLR) + 1U);
24013a9a:	687b      	ldr	r3, [r7, #4]
24013a9c:	681b      	ldr	r3, [r3, #0]
24013a9e:	691b      	ldr	r3, [r3, #16]
24013aa0:	3301      	adds	r3, #1
24013aa2:	60bb      	str	r3, [r7, #8]

  /* Process locked */
  __HAL_LOCK(hqspi);
24013aa4:	687b      	ldr	r3, [r7, #4]
24013aa6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
24013aaa:	b2db      	uxtb	r3, r3
24013aac:	2b01      	cmp	r3, #1
24013aae:	d101      	bne.n	24013ab4 <HAL_QSPI_Transmit_DMA+0x28>
24013ab0:	2302      	movs	r3, #2
24013ab2:	e0cb      	b.n	24013c4c <HAL_QSPI_Transmit_DMA+0x1c0>
24013ab4:	687b      	ldr	r3, [r7, #4]
24013ab6:	2201      	movs	r2, #1
24013ab8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
24013abc:	687b      	ldr	r3, [r7, #4]
24013abe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
24013ac2:	b2db      	uxtb	r3, r3
24013ac4:	2b01      	cmp	r3, #1
24013ac6:	f040 80ba 	bne.w	24013c3e <HAL_QSPI_Transmit_DMA+0x1b2>
  {
    /* Clear the error code */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
24013aca:	687b      	ldr	r3, [r7, #4]
24013acc:	2200      	movs	r2, #0
24013ace:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
24013ad0:	683b      	ldr	r3, [r7, #0]
24013ad2:	2b00      	cmp	r3, #0
24013ad4:	f000 80a6 	beq.w	24013c24 <HAL_QSPI_Transmit_DMA+0x198>
    {
      /* Configure counters of the handle */
      hqspi->TxXferCount = data_size;
24013ad8:	687b      	ldr	r3, [r7, #4]
24013ada:	68ba      	ldr	r2, [r7, #8]
24013adc:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
24013ade:	687b      	ldr	r3, [r7, #4]
24013ae0:	2212      	movs	r2, #18
24013ae2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, (QSPI_FLAG_TE | QSPI_FLAG_TC));
24013ae6:	687b      	ldr	r3, [r7, #4]
24013ae8:	681b      	ldr	r3, [r3, #0]
24013aea:	2203      	movs	r2, #3
24013aec:	60da      	str	r2, [r3, #12]

        /* Configure size and pointer of the handle */
        hqspi->TxXferSize = hqspi->TxXferCount;
24013aee:	687b      	ldr	r3, [r7, #4]
24013af0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
24013af2:	687b      	ldr	r3, [r7, #4]
24013af4:	629a      	str	r2, [r3, #40]	; 0x28
        hqspi->pTxBuffPtr = pData;
24013af6:	687b      	ldr	r3, [r7, #4]
24013af8:	683a      	ldr	r2, [r7, #0]
24013afa:	625a      	str	r2, [r3, #36]	; 0x24

        /* Configure QSPI: CCR register with functional mode as indirect write */
        MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
24013afc:	687b      	ldr	r3, [r7, #4]
24013afe:	681b      	ldr	r3, [r3, #0]
24013b00:	695a      	ldr	r2, [r3, #20]
24013b02:	687b      	ldr	r3, [r7, #4]
24013b04:	681b      	ldr	r3, [r3, #0]
24013b06:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
24013b0a:	615a      	str	r2, [r3, #20]

        /* Set the QSPI MDMA transfer complete callback */
        hqspi->hmdma->XferCpltCallback = QSPI_DMATxCplt;
24013b0c:	687b      	ldr	r3, [r7, #4]
24013b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24013b10:	4a50      	ldr	r2, [pc, #320]	; (24013c54 <HAL_QSPI_Transmit_DMA+0x1c8>)
24013b12:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the MDMA error callback */
        hqspi->hmdma->XferErrorCallback = QSPI_DMAError;
24013b14:	687b      	ldr	r3, [r7, #4]
24013b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24013b18:	4a4f      	ldr	r2, [pc, #316]	; (24013c58 <HAL_QSPI_Transmit_DMA+0x1cc>)
24013b1a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Clear the MDMA abort callback */
        hqspi->hmdma->XferAbortCallback = NULL;
24013b1c:	687b      	ldr	r3, [r7, #4]
24013b1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24013b20:	2200      	movs	r2, #0
24013b22:	659a      	str	r2, [r3, #88]	; 0x58

        /* In Transmit mode , the MDMA destination is the QSPI DR register : Force the MDMA Destination Increment to disable */
        MODIFY_REG(hqspi->hmdma->Instance->CTCR, (MDMA_CTCR_DINC | MDMA_CTCR_DINCOS) ,MDMA_DEST_INC_DISABLE);
24013b24:	687b      	ldr	r3, [r7, #4]
24013b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24013b28:	681b      	ldr	r3, [r3, #0]
24013b2a:	6919      	ldr	r1, [r3, #16]
24013b2c:	687b      	ldr	r3, [r7, #4]
24013b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24013b30:	681a      	ldr	r2, [r3, #0]
24013b32:	4b4a      	ldr	r3, [pc, #296]	; (24013c5c <HAL_QSPI_Transmit_DMA+0x1d0>)
24013b34:	400b      	ands	r3, r1
24013b36:	6113      	str	r3, [r2, #16]

        /* Update MDMA configuration with the correct SourceInc field for Write operation */
        if (hqspi->hmdma->Init.SourceDataSize == MDMA_SRC_DATASIZE_BYTE)
24013b38:	687b      	ldr	r3, [r7, #4]
24013b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24013b3c:	69db      	ldr	r3, [r3, #28]
24013b3e:	2b00      	cmp	r3, #0
24013b40:	d10c      	bne.n	24013b5c <HAL_QSPI_Transmit_DMA+0xd0>
        {
          MODIFY_REG(hqspi->hmdma->Instance->CTCR, (MDMA_CTCR_SINC | MDMA_CTCR_SINCOS) , MDMA_SRC_INC_BYTE);
24013b42:	687b      	ldr	r3, [r7, #4]
24013b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24013b46:	681b      	ldr	r3, [r3, #0]
24013b48:	691a      	ldr	r2, [r3, #16]
24013b4a:	4b45      	ldr	r3, [pc, #276]	; (24013c60 <HAL_QSPI_Transmit_DMA+0x1d4>)
24013b4c:	4013      	ands	r3, r2
24013b4e:	687a      	ldr	r2, [r7, #4]
24013b50:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
24013b52:	6812      	ldr	r2, [r2, #0]
24013b54:	f043 0302 	orr.w	r3, r3, #2
24013b58:	6113      	str	r3, [r2, #16]
24013b5a:	e02c      	b.n	24013bb6 <HAL_QSPI_Transmit_DMA+0x12a>
        }
        else if (hqspi->hmdma->Init.SourceDataSize == MDMA_SRC_DATASIZE_HALFWORD)
24013b5c:	687b      	ldr	r3, [r7, #4]
24013b5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24013b60:	69db      	ldr	r3, [r3, #28]
24013b62:	2b10      	cmp	r3, #16
24013b64:	d10c      	bne.n	24013b80 <HAL_QSPI_Transmit_DMA+0xf4>
        {
          MODIFY_REG(hqspi->hmdma->Instance->CTCR, (MDMA_CTCR_SINC | MDMA_CTCR_SINCOS) , MDMA_SRC_INC_HALFWORD);
24013b66:	687b      	ldr	r3, [r7, #4]
24013b68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24013b6a:	681b      	ldr	r3, [r3, #0]
24013b6c:	691a      	ldr	r2, [r3, #16]
24013b6e:	4b3c      	ldr	r3, [pc, #240]	; (24013c60 <HAL_QSPI_Transmit_DMA+0x1d4>)
24013b70:	4013      	ands	r3, r2
24013b72:	687a      	ldr	r2, [r7, #4]
24013b74:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
24013b76:	6812      	ldr	r2, [r2, #0]
24013b78:	f443 7381 	orr.w	r3, r3, #258	; 0x102
24013b7c:	6113      	str	r3, [r2, #16]
24013b7e:	e01a      	b.n	24013bb6 <HAL_QSPI_Transmit_DMA+0x12a>
        }
        else if (hqspi->hmdma->Init.SourceDataSize == MDMA_SRC_DATASIZE_WORD)
24013b80:	687b      	ldr	r3, [r7, #4]
24013b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24013b84:	69db      	ldr	r3, [r3, #28]
24013b86:	2b20      	cmp	r3, #32
24013b88:	d10d      	bne.n	24013ba6 <HAL_QSPI_Transmit_DMA+0x11a>
        {
          MODIFY_REG(hqspi->hmdma->Instance->CTCR, (MDMA_CTCR_SINC | MDMA_CTCR_SINCOS) , MDMA_SRC_INC_WORD);
24013b8a:	687b      	ldr	r3, [r7, #4]
24013b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24013b8e:	681b      	ldr	r3, [r3, #0]
24013b90:	691b      	ldr	r3, [r3, #16]
24013b92:	4a33      	ldr	r2, [pc, #204]	; (24013c60 <HAL_QSPI_Transmit_DMA+0x1d4>)
24013b94:	401a      	ands	r2, r3
24013b96:	687b      	ldr	r3, [r7, #4]
24013b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24013b9a:	6819      	ldr	r1, [r3, #0]
24013b9c:	f240 2302 	movw	r3, #514	; 0x202
24013ba0:	4313      	orrs	r3, r2
24013ba2:	610b      	str	r3, [r1, #16]
24013ba4:	e007      	b.n	24013bb6 <HAL_QSPI_Transmit_DMA+0x12a>
        }
        else
        {
          /* in case of incorrect source data size */
          hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
24013ba6:	687b      	ldr	r3, [r7, #4]
24013ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24013baa:	f043 0204 	orr.w	r2, r3, #4
24013bae:	687b      	ldr	r3, [r7, #4]
24013bb0:	645a      	str	r2, [r3, #68]	; 0x44
          status = HAL_ERROR;
24013bb2:	2301      	movs	r3, #1
24013bb4:	73fb      	strb	r3, [r7, #15]
        }

        /* Enable the QSPI transmit MDMA */
        if (HAL_MDMA_Start_IT(hqspi->hmdma, (uint32_t)pData, (uint32_t)&hqspi->Instance->DR, hqspi->TxXferSize, 1) == HAL_OK)
24013bb6:	687b      	ldr	r3, [r7, #4]
24013bb8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
24013bba:	6839      	ldr	r1, [r7, #0]
24013bbc:	687b      	ldr	r3, [r7, #4]
24013bbe:	681b      	ldr	r3, [r3, #0]
24013bc0:	3320      	adds	r3, #32
24013bc2:	461c      	mov	r4, r3
24013bc4:	687b      	ldr	r3, [r7, #4]
24013bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24013bc8:	2201      	movs	r2, #1
24013bca:	9200      	str	r2, [sp, #0]
24013bcc:	4622      	mov	r2, r4
24013bce:	f7fd feb8 	bl	24011942 <HAL_MDMA_Start_IT>
24013bd2:	4603      	mov	r3, r0
24013bd4:	2b00      	cmp	r3, #0
24013bd6:	d114      	bne.n	24013c02 <HAL_QSPI_Transmit_DMA+0x176>
        {
          /* Process unlocked */
          __HAL_UNLOCK(hqspi);
24013bd8:	687b      	ldr	r3, [r7, #4]
24013bda:	2200      	movs	r2, #0
24013bdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Enable the QSPI transfer error Interrupt */
          __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TE);
24013be0:	687b      	ldr	r3, [r7, #4]
24013be2:	681b      	ldr	r3, [r3, #0]
24013be4:	681a      	ldr	r2, [r3, #0]
24013be6:	687b      	ldr	r3, [r7, #4]
24013be8:	681b      	ldr	r3, [r3, #0]
24013bea:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
24013bee:	601a      	str	r2, [r3, #0]

          /* Enable using MDMA by setting DMAEN, note that DMAEN bit is "reserved"
             but no impact on H7 HW and it minimize the cost in the footprint */
          SET_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
24013bf0:	687b      	ldr	r3, [r7, #4]
24013bf2:	681b      	ldr	r3, [r3, #0]
24013bf4:	681a      	ldr	r2, [r3, #0]
24013bf6:	687b      	ldr	r3, [r7, #4]
24013bf8:	681b      	ldr	r3, [r3, #0]
24013bfa:	f042 0204 	orr.w	r2, r2, #4
24013bfe:	601a      	str	r2, [r3, #0]
24013c00:	e023      	b.n	24013c4a <HAL_QSPI_Transmit_DMA+0x1be>
        }
        else
        {
          status = HAL_ERROR;
24013c02:	2301      	movs	r3, #1
24013c04:	73fb      	strb	r3, [r7, #15]
          hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
24013c06:	687b      	ldr	r3, [r7, #4]
24013c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24013c0a:	f043 0204 	orr.w	r2, r3, #4
24013c0e:	687b      	ldr	r3, [r7, #4]
24013c10:	645a      	str	r2, [r3, #68]	; 0x44
          hqspi->State = HAL_QSPI_STATE_READY;
24013c12:	687b      	ldr	r3, [r7, #4]
24013c14:	2201      	movs	r2, #1
24013c16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

          /* Process unlocked */
          __HAL_UNLOCK(hqspi);
24013c1a:	687b      	ldr	r3, [r7, #4]
24013c1c:	2200      	movs	r2, #0
24013c1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
24013c22:	e012      	b.n	24013c4a <HAL_QSPI_Transmit_DMA+0x1be>
        }
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
24013c24:	687b      	ldr	r3, [r7, #4]
24013c26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24013c28:	f043 0208 	orr.w	r2, r3, #8
24013c2c:	687b      	ldr	r3, [r7, #4]
24013c2e:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
24013c30:	2301      	movs	r3, #1
24013c32:	73fb      	strb	r3, [r7, #15]

      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
24013c34:	687b      	ldr	r3, [r7, #4]
24013c36:	2200      	movs	r2, #0
24013c38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
24013c3c:	e005      	b.n	24013c4a <HAL_QSPI_Transmit_DMA+0x1be>
    }
  }
  else
  {
    status = HAL_BUSY;
24013c3e:	2302      	movs	r3, #2
24013c40:	73fb      	strb	r3, [r7, #15]

    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
24013c42:	687b      	ldr	r3, [r7, #4]
24013c44:	2200      	movs	r2, #0
24013c46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
24013c4a:	7bfb      	ldrb	r3, [r7, #15]
}
24013c4c:	4618      	mov	r0, r3
24013c4e:	3714      	adds	r7, #20
24013c50:	46bd      	mov	sp, r7
24013c52:	bd90      	pop	{r4, r7, pc}
24013c54:	240144cd 	.word	0x240144cd
24013c58:	240144fd 	.word	0x240144fd
24013c5c:	fffff3f3 	.word	0xfffff3f3
24013c60:	fffffcfc 	.word	0xfffffcfc

24013c64 <HAL_QSPI_Receive_DMA>:
  * @param  pData pointer to data buffer.
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive_DMA(QSPI_HandleTypeDef *hqspi, uint8_t *pData)
{
24013c64:	b590      	push	{r4, r7, lr}
24013c66:	b089      	sub	sp, #36	; 0x24
24013c68:	af02      	add	r7, sp, #8
24013c6a:	6078      	str	r0, [r7, #4]
24013c6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
24013c6e:	2300      	movs	r3, #0
24013c70:	75fb      	strb	r3, [r7, #23]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
24013c72:	687b      	ldr	r3, [r7, #4]
24013c74:	681b      	ldr	r3, [r3, #0]
24013c76:	699b      	ldr	r3, [r3, #24]
24013c78:	613b      	str	r3, [r7, #16]
  uint32_t data_size = (READ_REG(hqspi->Instance->DLR) + 1U);
24013c7a:	687b      	ldr	r3, [r7, #4]
24013c7c:	681b      	ldr	r3, [r3, #0]
24013c7e:	691b      	ldr	r3, [r3, #16]
24013c80:	3301      	adds	r3, #1
24013c82:	60fb      	str	r3, [r7, #12]

  /* Process locked */
  __HAL_LOCK(hqspi);
24013c84:	687b      	ldr	r3, [r7, #4]
24013c86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
24013c8a:	b2db      	uxtb	r3, r3
24013c8c:	2b01      	cmp	r3, #1
24013c8e:	d101      	bne.n	24013c94 <HAL_QSPI_Receive_DMA+0x30>
24013c90:	2302      	movs	r3, #2
24013c92:	e0d1      	b.n	24013e38 <HAL_QSPI_Receive_DMA+0x1d4>
24013c94:	687b      	ldr	r3, [r7, #4]
24013c96:	2201      	movs	r2, #1
24013c98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
24013c9c:	687b      	ldr	r3, [r7, #4]
24013c9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
24013ca2:	b2db      	uxtb	r3, r3
24013ca4:	2b01      	cmp	r3, #1
24013ca6:	f040 80c0 	bne.w	24013e2a <HAL_QSPI_Receive_DMA+0x1c6>
  {
    /* Clear the error code */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
24013caa:	687b      	ldr	r3, [r7, #4]
24013cac:	2200      	movs	r2, #0
24013cae:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
24013cb0:	683b      	ldr	r3, [r7, #0]
24013cb2:	2b00      	cmp	r3, #0
24013cb4:	f000 80ac 	beq.w	24013e10 <HAL_QSPI_Receive_DMA+0x1ac>
    {
      /* Configure counters of the handle */
      hqspi->RxXferCount = data_size;
24013cb8:	687b      	ldr	r3, [r7, #4]
24013cba:	68fa      	ldr	r2, [r7, #12]
24013cbc:	639a      	str	r2, [r3, #56]	; 0x38
        /* Update state */
        hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
24013cbe:	687b      	ldr	r3, [r7, #4]
24013cc0:	2222      	movs	r2, #34	; 0x22
24013cc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, (QSPI_FLAG_TE | QSPI_FLAG_TC));
24013cc6:	687b      	ldr	r3, [r7, #4]
24013cc8:	681b      	ldr	r3, [r3, #0]
24013cca:	2203      	movs	r2, #3
24013ccc:	60da      	str	r2, [r3, #12]

        /* Configure size and pointer of the handle */
        hqspi->RxXferSize = hqspi->RxXferCount;
24013cce:	687b      	ldr	r3, [r7, #4]
24013cd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
24013cd2:	687b      	ldr	r3, [r7, #4]
24013cd4:	635a      	str	r2, [r3, #52]	; 0x34
        hqspi->pRxBuffPtr = pData;
24013cd6:	687b      	ldr	r3, [r7, #4]
24013cd8:	683a      	ldr	r2, [r7, #0]
24013cda:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the QSPI MDMA transfer complete callback */
        hqspi->hmdma->XferCpltCallback = QSPI_DMARxCplt;
24013cdc:	687b      	ldr	r3, [r7, #4]
24013cde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24013ce0:	4a57      	ldr	r2, [pc, #348]	; (24013e40 <HAL_QSPI_Receive_DMA+0x1dc>)
24013ce2:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the MDMA error callback */
        hqspi->hmdma->XferErrorCallback = QSPI_DMAError;
24013ce4:	687b      	ldr	r3, [r7, #4]
24013ce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24013ce8:	4a56      	ldr	r2, [pc, #344]	; (24013e44 <HAL_QSPI_Receive_DMA+0x1e0>)
24013cea:	655a      	str	r2, [r3, #84]	; 0x54

        /* Clear the MDMA abort callback */
        hqspi->hmdma->XferAbortCallback = NULL;
24013cec:	687b      	ldr	r3, [r7, #4]
24013cee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24013cf0:	2200      	movs	r2, #0
24013cf2:	659a      	str	r2, [r3, #88]	; 0x58

      /* In Receive mode , the MDMA source is the QSPI DR register : Force the MDMA Source Increment to disable */
      MODIFY_REG(hqspi->hmdma->Instance->CTCR, (MDMA_CTCR_SINC | MDMA_CTCR_SINCOS) , MDMA_SRC_INC_DISABLE);
24013cf4:	687b      	ldr	r3, [r7, #4]
24013cf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24013cf8:	681b      	ldr	r3, [r3, #0]
24013cfa:	6919      	ldr	r1, [r3, #16]
24013cfc:	687b      	ldr	r3, [r7, #4]
24013cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24013d00:	681a      	ldr	r2, [r3, #0]
24013d02:	4b51      	ldr	r3, [pc, #324]	; (24013e48 <HAL_QSPI_Receive_DMA+0x1e4>)
24013d04:	400b      	ands	r3, r1
24013d06:	6113      	str	r3, [r2, #16]

      /* Update MDMA configuration with the correct DestinationInc field for read operation */
      if (hqspi->hmdma->Init.DestDataSize == MDMA_DEST_DATASIZE_BYTE)
24013d08:	687b      	ldr	r3, [r7, #4]
24013d0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24013d0c:	6a1b      	ldr	r3, [r3, #32]
24013d0e:	2b00      	cmp	r3, #0
24013d10:	d10c      	bne.n	24013d2c <HAL_QSPI_Receive_DMA+0xc8>
      {
        MODIFY_REG(hqspi->hmdma->Instance->CTCR, (MDMA_CTCR_DINC | MDMA_CTCR_DINCOS) , MDMA_DEST_INC_BYTE);
24013d12:	687b      	ldr	r3, [r7, #4]
24013d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24013d16:	681b      	ldr	r3, [r3, #0]
24013d18:	691a      	ldr	r2, [r3, #16]
24013d1a:	4b4c      	ldr	r3, [pc, #304]	; (24013e4c <HAL_QSPI_Receive_DMA+0x1e8>)
24013d1c:	4013      	ands	r3, r2
24013d1e:	687a      	ldr	r2, [r7, #4]
24013d20:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
24013d22:	6812      	ldr	r2, [r2, #0]
24013d24:	f043 0308 	orr.w	r3, r3, #8
24013d28:	6113      	str	r3, [r2, #16]
24013d2a:	e02c      	b.n	24013d86 <HAL_QSPI_Receive_DMA+0x122>
      }
      else if (hqspi->hmdma->Init.DestDataSize == MDMA_DEST_DATASIZE_HALFWORD)
24013d2c:	687b      	ldr	r3, [r7, #4]
24013d2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24013d30:	6a1b      	ldr	r3, [r3, #32]
24013d32:	2b40      	cmp	r3, #64	; 0x40
24013d34:	d10c      	bne.n	24013d50 <HAL_QSPI_Receive_DMA+0xec>
      {
        MODIFY_REG(hqspi->hmdma->Instance->CTCR, (MDMA_CTCR_DINC | MDMA_CTCR_DINCOS) , MDMA_DEST_INC_HALFWORD);
24013d36:	687b      	ldr	r3, [r7, #4]
24013d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24013d3a:	681b      	ldr	r3, [r3, #0]
24013d3c:	691a      	ldr	r2, [r3, #16]
24013d3e:	4b43      	ldr	r3, [pc, #268]	; (24013e4c <HAL_QSPI_Receive_DMA+0x1e8>)
24013d40:	4013      	ands	r3, r2
24013d42:	687a      	ldr	r2, [r7, #4]
24013d44:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
24013d46:	6812      	ldr	r2, [r2, #0]
24013d48:	f443 6381 	orr.w	r3, r3, #1032	; 0x408
24013d4c:	6113      	str	r3, [r2, #16]
24013d4e:	e01a      	b.n	24013d86 <HAL_QSPI_Receive_DMA+0x122>
      }
      else if (hqspi->hmdma->Init.DestDataSize == MDMA_DEST_DATASIZE_WORD)
24013d50:	687b      	ldr	r3, [r7, #4]
24013d52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24013d54:	6a1b      	ldr	r3, [r3, #32]
24013d56:	2b80      	cmp	r3, #128	; 0x80
24013d58:	d10d      	bne.n	24013d76 <HAL_QSPI_Receive_DMA+0x112>
      {
        MODIFY_REG(hqspi->hmdma->Instance->CTCR, (MDMA_CTCR_DINC | MDMA_CTCR_DINCOS) , MDMA_DEST_INC_WORD);
24013d5a:	687b      	ldr	r3, [r7, #4]
24013d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24013d5e:	681b      	ldr	r3, [r3, #0]
24013d60:	691b      	ldr	r3, [r3, #16]
24013d62:	4a3a      	ldr	r2, [pc, #232]	; (24013e4c <HAL_QSPI_Receive_DMA+0x1e8>)
24013d64:	401a      	ands	r2, r3
24013d66:	687b      	ldr	r3, [r7, #4]
24013d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24013d6a:	6819      	ldr	r1, [r3, #0]
24013d6c:	f640 0308 	movw	r3, #2056	; 0x808
24013d70:	4313      	orrs	r3, r2
24013d72:	610b      	str	r3, [r1, #16]
24013d74:	e007      	b.n	24013d86 <HAL_QSPI_Receive_DMA+0x122>
      }
      else
      {
       /* in case of incorrect destination data size */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
24013d76:	687b      	ldr	r3, [r7, #4]
24013d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24013d7a:	f043 0204 	orr.w	r2, r3, #4
24013d7e:	687b      	ldr	r3, [r7, #4]
24013d80:	645a      	str	r2, [r3, #68]	; 0x44
        status = HAL_ERROR;
24013d82:	2301      	movs	r3, #1
24013d84:	75fb      	strb	r3, [r7, #23]
      }
          /* Configure QSPI: CCR register with functional as indirect read */
          MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
24013d86:	687b      	ldr	r3, [r7, #4]
24013d88:	681b      	ldr	r3, [r3, #0]
24013d8a:	695b      	ldr	r3, [r3, #20]
24013d8c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
24013d90:	687b      	ldr	r3, [r7, #4]
24013d92:	681b      	ldr	r3, [r3, #0]
24013d94:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
24013d98:	615a      	str	r2, [r3, #20]

          /* Start the transfer by re-writing the address in AR register */
          WRITE_REG(hqspi->Instance->AR, addr_reg);
24013d9a:	687b      	ldr	r3, [r7, #4]
24013d9c:	681b      	ldr	r3, [r3, #0]
24013d9e:	693a      	ldr	r2, [r7, #16]
24013da0:	619a      	str	r2, [r3, #24]

        /* Enable the MDMA */
        if (HAL_MDMA_Start_IT(hqspi->hmdma, (uint32_t)&hqspi->Instance->DR, (uint32_t)pData, hqspi->RxXferSize, 1) == HAL_OK)
24013da2:	687b      	ldr	r3, [r7, #4]
24013da4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
24013da6:	687b      	ldr	r3, [r7, #4]
24013da8:	681b      	ldr	r3, [r3, #0]
24013daa:	3320      	adds	r3, #32
24013dac:	461c      	mov	r4, r3
24013dae:	683a      	ldr	r2, [r7, #0]
24013db0:	687b      	ldr	r3, [r7, #4]
24013db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24013db4:	2101      	movs	r1, #1
24013db6:	9100      	str	r1, [sp, #0]
24013db8:	4621      	mov	r1, r4
24013dba:	f7fd fdc2 	bl	24011942 <HAL_MDMA_Start_IT>
24013dbe:	4603      	mov	r3, r0
24013dc0:	2b00      	cmp	r3, #0
24013dc2:	d114      	bne.n	24013dee <HAL_QSPI_Receive_DMA+0x18a>
        {
          /* Process unlocked */
          __HAL_UNLOCK(hqspi);
24013dc4:	687b      	ldr	r3, [r7, #4]
24013dc6:	2200      	movs	r2, #0
24013dc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Enable the QSPI transfer error Interrupt */
          __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TE);
24013dcc:	687b      	ldr	r3, [r7, #4]
24013dce:	681b      	ldr	r3, [r3, #0]
24013dd0:	681a      	ldr	r2, [r3, #0]
24013dd2:	687b      	ldr	r3, [r7, #4]
24013dd4:	681b      	ldr	r3, [r3, #0]
24013dd6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
24013dda:	601a      	str	r2, [r3, #0]

          /* Enable using MDMA by setting DMAEN, note that DMAEN bit is "reserved"
             but no impact on H7 HW and it minimize the cost in the footprint */
          SET_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
24013ddc:	687b      	ldr	r3, [r7, #4]
24013dde:	681b      	ldr	r3, [r3, #0]
24013de0:	681a      	ldr	r2, [r3, #0]
24013de2:	687b      	ldr	r3, [r7, #4]
24013de4:	681b      	ldr	r3, [r3, #0]
24013de6:	f042 0204 	orr.w	r2, r2, #4
24013dea:	601a      	str	r2, [r3, #0]
24013dec:	e023      	b.n	24013e36 <HAL_QSPI_Receive_DMA+0x1d2>
        }
        else
        {
          status = HAL_ERROR;
24013dee:	2301      	movs	r3, #1
24013df0:	75fb      	strb	r3, [r7, #23]
          hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
24013df2:	687b      	ldr	r3, [r7, #4]
24013df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24013df6:	f043 0204 	orr.w	r2, r3, #4
24013dfa:	687b      	ldr	r3, [r7, #4]
24013dfc:	645a      	str	r2, [r3, #68]	; 0x44
          hqspi->State = HAL_QSPI_STATE_READY;
24013dfe:	687b      	ldr	r3, [r7, #4]
24013e00:	2201      	movs	r2, #1
24013e02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

          /* Process unlocked */
          __HAL_UNLOCK(hqspi);
24013e06:	687b      	ldr	r3, [r7, #4]
24013e08:	2200      	movs	r2, #0
24013e0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
24013e0e:	e012      	b.n	24013e36 <HAL_QSPI_Receive_DMA+0x1d2>
        }
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
24013e10:	687b      	ldr	r3, [r7, #4]
24013e12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24013e14:	f043 0208 	orr.w	r2, r3, #8
24013e18:	687b      	ldr	r3, [r7, #4]
24013e1a:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
24013e1c:	2301      	movs	r3, #1
24013e1e:	75fb      	strb	r3, [r7, #23]

      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
24013e20:	687b      	ldr	r3, [r7, #4]
24013e22:	2200      	movs	r2, #0
24013e24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
24013e28:	e005      	b.n	24013e36 <HAL_QSPI_Receive_DMA+0x1d2>
    }
  }
  else
  {
    status = HAL_BUSY;
24013e2a:	2302      	movs	r3, #2
24013e2c:	75fb      	strb	r3, [r7, #23]

    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
24013e2e:	687b      	ldr	r3, [r7, #4]
24013e30:	2200      	movs	r2, #0
24013e32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
24013e36:	7dfb      	ldrb	r3, [r7, #23]
}
24013e38:	4618      	mov	r0, r3
24013e3a:	371c      	adds	r7, #28
24013e3c:	46bd      	mov	sp, r7
24013e3e:	bd90      	pop	{r4, r7, pc}
24013e40:	2401449d 	.word	0x2401449d
24013e44:	240144fd 	.word	0x240144fd
24013e48:	fffffcfc 	.word	0xfffffcfc
24013e4c:	fffff3f3 	.word	0xfffff3f3

24013e50 <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
24013e50:	b580      	push	{r7, lr}
24013e52:	b088      	sub	sp, #32
24013e54:	af02      	add	r7, sp, #8
24013e56:	60f8      	str	r0, [r7, #12]
24013e58:	60b9      	str	r1, [r7, #8]
24013e5a:	607a      	str	r2, [r7, #4]
24013e5c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
24013e5e:	f7ef f921 	bl	240030a4 <HAL_GetTick>
24013e62:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
24013e64:	68fb      	ldr	r3, [r7, #12]
24013e66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
24013e6a:	b2db      	uxtb	r3, r3
24013e6c:	2b01      	cmp	r3, #1
24013e6e:	d101      	bne.n	24013e74 <HAL_QSPI_AutoPolling+0x24>
24013e70:	2302      	movs	r3, #2
24013e72:	e060      	b.n	24013f36 <HAL_QSPI_AutoPolling+0xe6>
24013e74:	68fb      	ldr	r3, [r7, #12]
24013e76:	2201      	movs	r2, #1
24013e78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
24013e7c:	68fb      	ldr	r3, [r7, #12]
24013e7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
24013e82:	b2db      	uxtb	r3, r3
24013e84:	2b01      	cmp	r3, #1
24013e86:	d14f      	bne.n	24013f28 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
24013e88:	68fb      	ldr	r3, [r7, #12]
24013e8a:	2200      	movs	r2, #0
24013e8c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
24013e8e:	68fb      	ldr	r3, [r7, #12]
24013e90:	2242      	movs	r2, #66	; 0x42
24013e92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
24013e96:	683b      	ldr	r3, [r7, #0]
24013e98:	9300      	str	r3, [sp, #0]
24013e9a:	693b      	ldr	r3, [r7, #16]
24013e9c:	2200      	movs	r2, #0
24013e9e:	2120      	movs	r1, #32
24013ea0:	68f8      	ldr	r0, [r7, #12]
24013ea2:	f000 fb80 	bl	240145a6 <QSPI_WaitFlagStateUntilTimeout>
24013ea6:	4603      	mov	r3, r0
24013ea8:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
24013eaa:	7dfb      	ldrb	r3, [r7, #23]
24013eac:	2b00      	cmp	r3, #0
24013eae:	d13d      	bne.n	24013f2c <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
24013eb0:	68fb      	ldr	r3, [r7, #12]
24013eb2:	681b      	ldr	r3, [r3, #0]
24013eb4:	687a      	ldr	r2, [r7, #4]
24013eb6:	6812      	ldr	r2, [r2, #0]
24013eb8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
24013eba:	68fb      	ldr	r3, [r7, #12]
24013ebc:	681b      	ldr	r3, [r3, #0]
24013ebe:	687a      	ldr	r2, [r7, #4]
24013ec0:	6852      	ldr	r2, [r2, #4]
24013ec2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
24013ec4:	68fb      	ldr	r3, [r7, #12]
24013ec6:	681b      	ldr	r3, [r3, #0]
24013ec8:	687a      	ldr	r2, [r7, #4]
24013eca:	6892      	ldr	r2, [r2, #8]
24013ecc:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
24013ece:	68fb      	ldr	r3, [r7, #12]
24013ed0:	681b      	ldr	r3, [r3, #0]
24013ed2:	681b      	ldr	r3, [r3, #0]
24013ed4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
24013ed8:	687b      	ldr	r3, [r7, #4]
24013eda:	691b      	ldr	r3, [r3, #16]
24013edc:	431a      	orrs	r2, r3
24013ede:	68fb      	ldr	r3, [r7, #12]
24013ee0:	681b      	ldr	r3, [r3, #0]
24013ee2:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
24013ee6:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
24013ee8:	687b      	ldr	r3, [r7, #4]
24013eea:	68da      	ldr	r2, [r3, #12]
24013eec:	68bb      	ldr	r3, [r7, #8]
24013eee:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
24013ef0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
24013ef4:	68b9      	ldr	r1, [r7, #8]
24013ef6:	68f8      	ldr	r0, [r7, #12]
24013ef8:	f000 fb8c 	bl	24014614 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
24013efc:	683b      	ldr	r3, [r7, #0]
24013efe:	9300      	str	r3, [sp, #0]
24013f00:	693b      	ldr	r3, [r7, #16]
24013f02:	2201      	movs	r2, #1
24013f04:	2108      	movs	r1, #8
24013f06:	68f8      	ldr	r0, [r7, #12]
24013f08:	f000 fb4d 	bl	240145a6 <QSPI_WaitFlagStateUntilTimeout>
24013f0c:	4603      	mov	r3, r0
24013f0e:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
24013f10:	7dfb      	ldrb	r3, [r7, #23]
24013f12:	2b00      	cmp	r3, #0
24013f14:	d10a      	bne.n	24013f2c <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
24013f16:	68fb      	ldr	r3, [r7, #12]
24013f18:	681b      	ldr	r3, [r3, #0]
24013f1a:	2208      	movs	r2, #8
24013f1c:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
24013f1e:	68fb      	ldr	r3, [r7, #12]
24013f20:	2201      	movs	r2, #1
24013f22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
24013f26:	e001      	b.n	24013f2c <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
24013f28:	2302      	movs	r3, #2
24013f2a:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
24013f2c:	68fb      	ldr	r3, [r7, #12]
24013f2e:	2200      	movs	r2, #0
24013f30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
24013f34:	7dfb      	ldrb	r3, [r7, #23]
}
24013f36:	4618      	mov	r0, r3
24013f38:	3718      	adds	r7, #24
24013f3a:	46bd      	mov	sp, r7
24013f3c:	bd80      	pop	{r7, pc}

24013f3e <HAL_QSPI_AutoPolling_IT>:
  * @param  cfg structure that contains the polling configuration information.
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling_IT(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg)
{
24013f3e:	b580      	push	{r7, lr}
24013f40:	b088      	sub	sp, #32
24013f42:	af02      	add	r7, sp, #8
24013f44:	60f8      	str	r0, [r7, #12]
24013f46:	60b9      	str	r1, [r7, #8]
24013f48:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
24013f4a:	f7ef f8ab 	bl	240030a4 <HAL_GetTick>
24013f4e:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));
  assert_param(IS_QSPI_AUTOMATIC_STOP(cfg->AutomaticStop));

  /* Process locked */
  __HAL_LOCK(hqspi);
24013f50:	68fb      	ldr	r3, [r7, #12]
24013f52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
24013f56:	b2db      	uxtb	r3, r3
24013f58:	2b01      	cmp	r3, #1
24013f5a:	d101      	bne.n	24013f60 <HAL_QSPI_AutoPolling_IT+0x22>
24013f5c:	2302      	movs	r3, #2
24013f5e:	e062      	b.n	24014026 <HAL_QSPI_AutoPolling_IT+0xe8>
24013f60:	68fb      	ldr	r3, [r7, #12]
24013f62:	2201      	movs	r2, #1
24013f64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
24013f68:	68fb      	ldr	r3, [r7, #12]
24013f6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
24013f6e:	b2db      	uxtb	r3, r3
24013f70:	2b01      	cmp	r3, #1
24013f72:	d151      	bne.n	24014018 <HAL_QSPI_AutoPolling_IT+0xda>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
24013f74:	68fb      	ldr	r3, [r7, #12]
24013f76:	2200      	movs	r2, #0
24013f78:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
24013f7a:	68fb      	ldr	r3, [r7, #12]
24013f7c:	2242      	movs	r2, #66	; 0x42
24013f7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
24013f82:	68fb      	ldr	r3, [r7, #12]
24013f84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
24013f86:	9300      	str	r3, [sp, #0]
24013f88:	693b      	ldr	r3, [r7, #16]
24013f8a:	2200      	movs	r2, #0
24013f8c:	2120      	movs	r1, #32
24013f8e:	68f8      	ldr	r0, [r7, #12]
24013f90:	f000 fb09 	bl	240145a6 <QSPI_WaitFlagStateUntilTimeout>
24013f94:	4603      	mov	r3, r0
24013f96:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
24013f98:	7dfb      	ldrb	r3, [r7, #23]
24013f9a:	2b00      	cmp	r3, #0
24013f9c:	d137      	bne.n	2401400e <HAL_QSPI_AutoPolling_IT+0xd0>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
24013f9e:	68fb      	ldr	r3, [r7, #12]
24013fa0:	681b      	ldr	r3, [r3, #0]
24013fa2:	687a      	ldr	r2, [r7, #4]
24013fa4:	6812      	ldr	r2, [r2, #0]
24013fa6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
24013fa8:	68fb      	ldr	r3, [r7, #12]
24013faa:	681b      	ldr	r3, [r3, #0]
24013fac:	687a      	ldr	r2, [r7, #4]
24013fae:	6852      	ldr	r2, [r2, #4]
24013fb0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
24013fb2:	68fb      	ldr	r3, [r7, #12]
24013fb4:	681b      	ldr	r3, [r3, #0]
24013fb6:	687a      	ldr	r2, [r7, #4]
24013fb8:	6892      	ldr	r2, [r2, #8]
24013fba:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop mode */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
24013fbc:	68fb      	ldr	r3, [r7, #12]
24013fbe:	681b      	ldr	r3, [r3, #0]
24013fc0:	681b      	ldr	r3, [r3, #0]
24013fc2:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
24013fc6:	687b      	ldr	r3, [r7, #4]
24013fc8:	691a      	ldr	r2, [r3, #16]
24013fca:	687b      	ldr	r3, [r7, #4]
24013fcc:	695b      	ldr	r3, [r3, #20]
24013fce:	431a      	orrs	r2, r3
24013fd0:	68fb      	ldr	r3, [r7, #12]
24013fd2:	681b      	ldr	r3, [r3, #0]
24013fd4:	430a      	orrs	r2, r1
24013fd6:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | cfg->AutomaticStop));

      /* Clear interrupt */
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TE | QSPI_FLAG_SM);
24013fd8:	68fb      	ldr	r3, [r7, #12]
24013fda:	681b      	ldr	r3, [r3, #0]
24013fdc:	2209      	movs	r2, #9
24013fde:	60da      	str	r2, [r3, #12]

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
24013fe0:	687b      	ldr	r3, [r7, #4]
24013fe2:	68da      	ldr	r2, [r3, #12]
24013fe4:	68bb      	ldr	r3, [r7, #8]
24013fe6:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
24013fe8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
24013fec:	68b9      	ldr	r1, [r7, #8]
24013fee:	68f8      	ldr	r0, [r7, #12]
24013ff0:	f000 fb10 	bl	24014614 <QSPI_Config>

      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
24013ff4:	68fb      	ldr	r3, [r7, #12]
24013ff6:	2200      	movs	r2, #0
24013ff8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Enable the QSPI Transfer Error and status match Interrupt */
      __HAL_QSPI_ENABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
24013ffc:	68fb      	ldr	r3, [r7, #12]
24013ffe:	681b      	ldr	r3, [r3, #0]
24014000:	681a      	ldr	r2, [r3, #0]
24014002:	68fb      	ldr	r3, [r7, #12]
24014004:	681b      	ldr	r3, [r3, #0]
24014006:	f442 2210 	orr.w	r2, r2, #589824	; 0x90000
2401400a:	601a      	str	r2, [r3, #0]
2401400c:	e00a      	b.n	24014024 <HAL_QSPI_AutoPolling_IT+0xe6>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
2401400e:	68fb      	ldr	r3, [r7, #12]
24014010:	2200      	movs	r2, #0
24014012:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
24014016:	e005      	b.n	24014024 <HAL_QSPI_AutoPolling_IT+0xe6>
    }
  }
  else
  {
    status = HAL_BUSY;
24014018:	2302      	movs	r3, #2
2401401a:	75fb      	strb	r3, [r7, #23]

    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
2401401c:	68fb      	ldr	r3, [r7, #12]
2401401e:	2200      	movs	r2, #0
24014020:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  /* Return function status */
  return status;
24014024:	7dfb      	ldrb	r3, [r7, #23]
}
24014026:	4618      	mov	r0, r3
24014028:	3718      	adds	r7, #24
2401402a:	46bd      	mov	sp, r7
2401402c:	bd80      	pop	{r7, pc}

2401402e <HAL_QSPI_MemoryMapped>:
  * @param  cfg structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
2401402e:	b580      	push	{r7, lr}
24014030:	b088      	sub	sp, #32
24014032:	af02      	add	r7, sp, #8
24014034:	60f8      	str	r0, [r7, #12]
24014036:	60b9      	str	r1, [r7, #8]
24014038:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
2401403a:	f7ef f833 	bl	240030a4 <HAL_GetTick>
2401403e:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
24014040:	68fb      	ldr	r3, [r7, #12]
24014042:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
24014046:	b2db      	uxtb	r3, r3
24014048:	2b01      	cmp	r3, #1
2401404a:	d101      	bne.n	24014050 <HAL_QSPI_MemoryMapped+0x22>
2401404c:	2302      	movs	r3, #2
2401404e:	e04c      	b.n	240140ea <HAL_QSPI_MemoryMapped+0xbc>
24014050:	68fb      	ldr	r3, [r7, #12]
24014052:	2201      	movs	r2, #1
24014054:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
24014058:	68fb      	ldr	r3, [r7, #12]
2401405a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2401405e:	b2db      	uxtb	r3, r3
24014060:	2b01      	cmp	r3, #1
24014062:	d13b      	bne.n	240140dc <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
24014064:	68fb      	ldr	r3, [r7, #12]
24014066:	2200      	movs	r2, #0
24014068:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
2401406a:	68fb      	ldr	r3, [r7, #12]
2401406c:	2282      	movs	r2, #130	; 0x82
2401406e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
24014072:	68fb      	ldr	r3, [r7, #12]
24014074:	6c9b      	ldr	r3, [r3, #72]	; 0x48
24014076:	9300      	str	r3, [sp, #0]
24014078:	693b      	ldr	r3, [r7, #16]
2401407a:	2200      	movs	r2, #0
2401407c:	2120      	movs	r1, #32
2401407e:	68f8      	ldr	r0, [r7, #12]
24014080:	f000 fa91 	bl	240145a6 <QSPI_WaitFlagStateUntilTimeout>
24014084:	4603      	mov	r3, r0
24014086:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
24014088:	7dfb      	ldrb	r3, [r7, #23]
2401408a:	2b00      	cmp	r3, #0
2401408c:	d128      	bne.n	240140e0 <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
2401408e:	68fb      	ldr	r3, [r7, #12]
24014090:	681b      	ldr	r3, [r3, #0]
24014092:	681b      	ldr	r3, [r3, #0]
24014094:	f023 0108 	bic.w	r1, r3, #8
24014098:	687b      	ldr	r3, [r7, #4]
2401409a:	685a      	ldr	r2, [r3, #4]
2401409c:	68fb      	ldr	r3, [r7, #12]
2401409e:	681b      	ldr	r3, [r3, #0]
240140a0:	430a      	orrs	r2, r1
240140a2:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
240140a4:	687b      	ldr	r3, [r7, #4]
240140a6:	685b      	ldr	r3, [r3, #4]
240140a8:	2b08      	cmp	r3, #8
240140aa:	d110      	bne.n	240140ce <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
240140ac:	68fb      	ldr	r3, [r7, #12]
240140ae:	681b      	ldr	r3, [r3, #0]
240140b0:	687a      	ldr	r2, [r7, #4]
240140b2:	6812      	ldr	r2, [r2, #0]
240140b4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
240140b6:	68fb      	ldr	r3, [r7, #12]
240140b8:	681b      	ldr	r3, [r3, #0]
240140ba:	2210      	movs	r2, #16
240140bc:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
240140be:	68fb      	ldr	r3, [r7, #12]
240140c0:	681b      	ldr	r3, [r3, #0]
240140c2:	681a      	ldr	r2, [r3, #0]
240140c4:	68fb      	ldr	r3, [r7, #12]
240140c6:	681b      	ldr	r3, [r3, #0]
240140c8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
240140cc:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
240140ce:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
240140d2:	68b9      	ldr	r1, [r7, #8]
240140d4:	68f8      	ldr	r0, [r7, #12]
240140d6:	f000 fa9d 	bl	24014614 <QSPI_Config>
240140da:	e001      	b.n	240140e0 <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
240140dc:	2302      	movs	r3, #2
240140de:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
240140e0:	68fb      	ldr	r3, [r7, #12]
240140e2:	2200      	movs	r2, #0
240140e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
240140e8:	7dfb      	ldrb	r3, [r7, #23]
}
240140ea:	4618      	mov	r0, r3
240140ec:	3718      	adds	r7, #24
240140ee:	46bd      	mov	sp, r7
240140f0:	bd80      	pop	{r7, pc}

240140f2 <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
240140f2:	b480      	push	{r7}
240140f4:	b083      	sub	sp, #12
240140f6:	af00      	add	r7, sp, #0
240140f8:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
240140fa:	bf00      	nop
240140fc:	370c      	adds	r7, #12
240140fe:	46bd      	mov	sp, r7
24014100:	f85d 7b04 	ldr.w	r7, [sp], #4
24014104:	4770      	bx	lr

24014106 <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
24014106:	b480      	push	{r7}
24014108:	b083      	sub	sp, #12
2401410a:	af00      	add	r7, sp, #0
2401410c:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
2401410e:	bf00      	nop
24014110:	370c      	adds	r7, #12
24014112:	46bd      	mov	sp, r7
24014114:	f85d 7b04 	ldr.w	r7, [sp], #4
24014118:	4770      	bx	lr

2401411a <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
2401411a:	b480      	push	{r7}
2401411c:	b083      	sub	sp, #12
2401411e:	af00      	add	r7, sp, #0
24014120:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
24014122:	bf00      	nop
24014124:	370c      	adds	r7, #12
24014126:	46bd      	mov	sp, r7
24014128:	f85d 7b04 	ldr.w	r7, [sp], #4
2401412c:	4770      	bx	lr

2401412e <HAL_QSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
2401412e:	b480      	push	{r7}
24014130:	b083      	sub	sp, #12
24014132:	af00      	add	r7, sp, #0
24014134:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxCpltCallback could be implemented in the user file
   */
}
24014136:	bf00      	nop
24014138:	370c      	adds	r7, #12
2401413a:	46bd      	mov	sp, r7
2401413c:	f85d 7b04 	ldr.w	r7, [sp], #4
24014140:	4770      	bx	lr

24014142 <HAL_QSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
24014142:	b480      	push	{r7}
24014144:	b083      	sub	sp, #12
24014146:	af00      	add	r7, sp, #0
24014148:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_TxCpltCallback could be implemented in the user file
   */
}
2401414a:	bf00      	nop
2401414c:	370c      	adds	r7, #12
2401414e:	46bd      	mov	sp, r7
24014150:	f85d 7b04 	ldr.w	r7, [sp], #4
24014154:	4770      	bx	lr

24014156 <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
24014156:	b480      	push	{r7}
24014158:	b083      	sub	sp, #12
2401415a:	af00      	add	r7, sp, #0
2401415c:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
2401415e:	bf00      	nop
24014160:	370c      	adds	r7, #12
24014162:	46bd      	mov	sp, r7
24014164:	f85d 7b04 	ldr.w	r7, [sp], #4
24014168:	4770      	bx	lr

2401416a <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
2401416a:	b480      	push	{r7}
2401416c:	b083      	sub	sp, #12
2401416e:	af00      	add	r7, sp, #0
24014170:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
24014172:	bf00      	nop
24014174:	370c      	adds	r7, #12
24014176:	46bd      	mov	sp, r7
24014178:	f85d 7b04 	ldr.w	r7, [sp], #4
2401417c:	4770      	bx	lr

2401417e <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
2401417e:	b480      	push	{r7}
24014180:	b083      	sub	sp, #12
24014182:	af00      	add	r7, sp, #0
24014184:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
24014186:	bf00      	nop
24014188:	370c      	adds	r7, #12
2401418a:	46bd      	mov	sp, r7
2401418c:	f85d 7b04 	ldr.w	r7, [sp], #4
24014190:	4770      	bx	lr

24014192 <HAL_QSPI_GetState>:
  * @brief  Return the QSPI handle state.
  * @param  hqspi QSPI handle
  * @retval HAL state
  */
HAL_QSPI_StateTypeDef HAL_QSPI_GetState(QSPI_HandleTypeDef *hqspi)
{
24014192:	b480      	push	{r7}
24014194:	b083      	sub	sp, #12
24014196:	af00      	add	r7, sp, #0
24014198:	6078      	str	r0, [r7, #4]
  /* Return QSPI handle state */
  return hqspi->State;
2401419a:	687b      	ldr	r3, [r7, #4]
2401419c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
240141a0:	b2db      	uxtb	r3, r3
}
240141a2:	4618      	mov	r0, r3
240141a4:	370c      	adds	r7, #12
240141a6:	46bd      	mov	sp, r7
240141a8:	f85d 7b04 	ldr.w	r7, [sp], #4
240141ac:	4770      	bx	lr

240141ae <HAL_QSPI_GetError>:
* @brief  Return the QSPI error code.
* @param  hqspi QSPI handle
* @retval QSPI Error Code
*/
uint32_t HAL_QSPI_GetError(QSPI_HandleTypeDef *hqspi)
{
240141ae:	b480      	push	{r7}
240141b0:	b083      	sub	sp, #12
240141b2:	af00      	add	r7, sp, #0
240141b4:	6078      	str	r0, [r7, #4]
  return hqspi->ErrorCode;
240141b6:	687b      	ldr	r3, [r7, #4]
240141b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
240141ba:	4618      	mov	r0, r3
240141bc:	370c      	adds	r7, #12
240141be:	46bd      	mov	sp, r7
240141c0:	f85d 7b04 	ldr.w	r7, [sp], #4
240141c4:	4770      	bx	lr

240141c6 <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
240141c6:	b580      	push	{r7, lr}
240141c8:	b086      	sub	sp, #24
240141ca:	af02      	add	r7, sp, #8
240141cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
240141ce:	2300      	movs	r3, #0
240141d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
240141d2:	f7ee ff67 	bl	240030a4 <HAL_GetTick>
240141d6:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
240141d8:	687b      	ldr	r3, [r7, #4]
240141da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
240141de:	b2db      	uxtb	r3, r3
240141e0:	f003 0302 	and.w	r3, r3, #2
240141e4:	2b00      	cmp	r3, #0
240141e6:	d062      	beq.n	240142ae <HAL_QSPI_Abort+0xe8>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
240141e8:	687b      	ldr	r3, [r7, #4]
240141ea:	2200      	movs	r2, #0
240141ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
240141f0:	687b      	ldr	r3, [r7, #4]
240141f2:	681b      	ldr	r3, [r3, #0]
240141f4:	681b      	ldr	r3, [r3, #0]
240141f6:	f003 0304 	and.w	r3, r3, #4
240141fa:	2b00      	cmp	r3, #0
240141fc:	d017      	beq.n	2401422e <HAL_QSPI_Abort+0x68>
    {
      /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
         but no impact on H7 HW and it minimize the cost in the footprint */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
240141fe:	687b      	ldr	r3, [r7, #4]
24014200:	681b      	ldr	r3, [r3, #0]
24014202:	681a      	ldr	r2, [r3, #0]
24014204:	687b      	ldr	r3, [r7, #4]
24014206:	681b      	ldr	r3, [r3, #0]
24014208:	f022 0204 	bic.w	r2, r2, #4
2401420c:	601a      	str	r2, [r3, #0]

      /* Abort MDMA */
      status = HAL_MDMA_Abort(hqspi->hmdma);
2401420e:	687b      	ldr	r3, [r7, #4]
24014210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24014212:	4618      	mov	r0, r3
24014214:	f7fd fc16 	bl	24011a44 <HAL_MDMA_Abort>
24014218:	4603      	mov	r3, r0
2401421a:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
2401421c:	7bfb      	ldrb	r3, [r7, #15]
2401421e:	2b00      	cmp	r3, #0
24014220:	d005      	beq.n	2401422e <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
24014222:	687b      	ldr	r3, [r7, #4]
24014224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24014226:	f043 0204 	orr.w	r2, r3, #4
2401422a:	687b      	ldr	r3, [r7, #4]
2401422c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    if (__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_BUSY) != RESET)
2401422e:	687b      	ldr	r3, [r7, #4]
24014230:	681b      	ldr	r3, [r3, #0]
24014232:	689b      	ldr	r3, [r3, #8]
24014234:	f003 0320 	and.w	r3, r3, #32
24014238:	2b00      	cmp	r3, #0
2401423a:	d034      	beq.n	240142a6 <HAL_QSPI_Abort+0xe0>
    {
      /* Configure QSPI: CR register with Abort request */
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
2401423c:	687b      	ldr	r3, [r7, #4]
2401423e:	681b      	ldr	r3, [r3, #0]
24014240:	681a      	ldr	r2, [r3, #0]
24014242:	687b      	ldr	r3, [r7, #4]
24014244:	681b      	ldr	r3, [r3, #0]
24014246:	f042 0202 	orr.w	r2, r2, #2
2401424a:	601a      	str	r2, [r3, #0]
      
      /* Wait until TC flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
2401424c:	687b      	ldr	r3, [r7, #4]
2401424e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
24014250:	9300      	str	r3, [sp, #0]
24014252:	68bb      	ldr	r3, [r7, #8]
24014254:	2201      	movs	r2, #1
24014256:	2102      	movs	r1, #2
24014258:	6878      	ldr	r0, [r7, #4]
2401425a:	f000 f9a4 	bl	240145a6 <QSPI_WaitFlagStateUntilTimeout>
2401425e:	4603      	mov	r3, r0
24014260:	73fb      	strb	r3, [r7, #15]
      
      if (status == HAL_OK)
24014262:	7bfb      	ldrb	r3, [r7, #15]
24014264:	2b00      	cmp	r3, #0
24014266:	d10e      	bne.n	24014286 <HAL_QSPI_Abort+0xc0>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
24014268:	687b      	ldr	r3, [r7, #4]
2401426a:	681b      	ldr	r3, [r3, #0]
2401426c:	2202      	movs	r2, #2
2401426e:	60da      	str	r2, [r3, #12]
        
        /* Wait until BUSY flag is reset */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
24014270:	687b      	ldr	r3, [r7, #4]
24014272:	6c9b      	ldr	r3, [r3, #72]	; 0x48
24014274:	9300      	str	r3, [sp, #0]
24014276:	68bb      	ldr	r3, [r7, #8]
24014278:	2200      	movs	r2, #0
2401427a:	2120      	movs	r1, #32
2401427c:	6878      	ldr	r0, [r7, #4]
2401427e:	f000 f992 	bl	240145a6 <QSPI_WaitFlagStateUntilTimeout>
24014282:	4603      	mov	r3, r0
24014284:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
24014286:	7bfb      	ldrb	r3, [r7, #15]
24014288:	2b00      	cmp	r3, #0
2401428a:	d110      	bne.n	240142ae <HAL_QSPI_Abort+0xe8>
      {
        /* Reset functional mode configuration to indirect write mode by default */
        CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
2401428c:	687b      	ldr	r3, [r7, #4]
2401428e:	681b      	ldr	r3, [r3, #0]
24014290:	695a      	ldr	r2, [r3, #20]
24014292:	687b      	ldr	r3, [r7, #4]
24014294:	681b      	ldr	r3, [r3, #0]
24014296:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
2401429a:	615a      	str	r2, [r3, #20]
        
        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
2401429c:	687b      	ldr	r3, [r7, #4]
2401429e:	2201      	movs	r2, #1
240142a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
240142a4:	e003      	b.n	240142ae <HAL_QSPI_Abort+0xe8>
      }
    }
    else
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
240142a6:	687b      	ldr	r3, [r7, #4]
240142a8:	2201      	movs	r2, #1
240142aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
  }

  return status;
240142ae:	7bfb      	ldrb	r3, [r7, #15]
}
240142b0:	4618      	mov	r0, r3
240142b2:	3710      	adds	r7, #16
240142b4:	46bd      	mov	sp, r7
240142b6:	bd80      	pop	{r7, pc}

240142b8 <HAL_QSPI_Abort_IT>:
* @brief  Abort the current transmission (non-blocking function)
* @param  hqspi QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort_IT(QSPI_HandleTypeDef *hqspi)
{
240142b8:	b580      	push	{r7, lr}
240142ba:	b084      	sub	sp, #16
240142bc:	af00      	add	r7, sp, #0
240142be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
240142c0:	2300      	movs	r3, #0
240142c2:	73fb      	strb	r3, [r7, #15]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
240142c4:	687b      	ldr	r3, [r7, #4]
240142c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
240142ca:	b2db      	uxtb	r3, r3
240142cc:	f003 0302 	and.w	r3, r3, #2
240142d0:	2b00      	cmp	r3, #0
240142d2:	d052      	beq.n	2401437a <HAL_QSPI_Abort_IT+0xc2>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
240142d4:	687b      	ldr	r3, [r7, #4]
240142d6:	2200      	movs	r2, #0
240142d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_ABORT;
240142dc:	687b      	ldr	r3, [r7, #4]
240142de:	2208      	movs	r2, #8
240142e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable all interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_TO | QSPI_IT_SM | QSPI_IT_FT | QSPI_IT_TC | QSPI_IT_TE));
240142e4:	687b      	ldr	r3, [r7, #4]
240142e6:	681b      	ldr	r3, [r3, #0]
240142e8:	681a      	ldr	r2, [r3, #0]
240142ea:	687b      	ldr	r3, [r7, #4]
240142ec:	681b      	ldr	r3, [r3, #0]
240142ee:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
240142f2:	601a      	str	r2, [r3, #0]

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
240142f4:	687b      	ldr	r3, [r7, #4]
240142f6:	681b      	ldr	r3, [r3, #0]
240142f8:	681b      	ldr	r3, [r3, #0]
240142fa:	f003 0304 	and.w	r3, r3, #4
240142fe:	2b00      	cmp	r3, #0
24014300:	d01b      	beq.n	2401433a <HAL_QSPI_Abort_IT+0x82>
    {
      /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
         but no impact on H7 HW and it minimize the cost in the footprint */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
24014302:	687b      	ldr	r3, [r7, #4]
24014304:	681b      	ldr	r3, [r3, #0]
24014306:	681a      	ldr	r2, [r3, #0]
24014308:	687b      	ldr	r3, [r7, #4]
2401430a:	681b      	ldr	r3, [r3, #0]
2401430c:	f022 0204 	bic.w	r2, r2, #4
24014310:	601a      	str	r2, [r3, #0]

      /* Abort MDMA channel */
      hqspi->hmdma->XferAbortCallback = QSPI_DMAAbortCplt;
24014312:	687b      	ldr	r3, [r7, #4]
24014314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24014316:	4a1b      	ldr	r2, [pc, #108]	; (24014384 <HAL_QSPI_Abort_IT+0xcc>)
24014318:	659a      	str	r2, [r3, #88]	; 0x58
      if (HAL_MDMA_Abort_IT(hqspi->hmdma) != HAL_OK)
2401431a:	687b      	ldr	r3, [r7, #4]
2401431c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2401431e:	4618      	mov	r0, r3
24014320:	f7fd fbeb 	bl	24011afa <HAL_MDMA_Abort_IT>
24014324:	4603      	mov	r3, r0
24014326:	2b00      	cmp	r3, #0
24014328:	d027      	beq.n	2401437a <HAL_QSPI_Abort_IT+0xc2>
      {
        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
2401432a:	687b      	ldr	r3, [r7, #4]
2401432c:	2201      	movs	r2, #1
2401432e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
24014332:	6878      	ldr	r0, [r7, #4]
24014334:	f7ff fee7 	bl	24014106 <HAL_QSPI_AbortCpltCallback>
24014338:	e01f      	b.n	2401437a <HAL_QSPI_Abort_IT+0xc2>
#endif
      }
    }
    else
    {
      if (__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_BUSY) != RESET)
2401433a:	687b      	ldr	r3, [r7, #4]
2401433c:	681b      	ldr	r3, [r3, #0]
2401433e:	689b      	ldr	r3, [r3, #8]
24014340:	f003 0320 	and.w	r3, r3, #32
24014344:	2b00      	cmp	r3, #0
24014346:	d014      	beq.n	24014372 <HAL_QSPI_Abort_IT+0xba>
      {
        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
24014348:	687b      	ldr	r3, [r7, #4]
2401434a:	681b      	ldr	r3, [r3, #0]
2401434c:	2202      	movs	r2, #2
2401434e:	60da      	str	r2, [r3, #12]
        
        /* Enable the QSPI Transfer Complete Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
24014350:	687b      	ldr	r3, [r7, #4]
24014352:	681b      	ldr	r3, [r3, #0]
24014354:	681a      	ldr	r2, [r3, #0]
24014356:	687b      	ldr	r3, [r7, #4]
24014358:	681b      	ldr	r3, [r3, #0]
2401435a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
2401435e:	601a      	str	r2, [r3, #0]
        
        /* Configure QSPI: CR register with Abort request */
        SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
24014360:	687b      	ldr	r3, [r7, #4]
24014362:	681b      	ldr	r3, [r3, #0]
24014364:	681a      	ldr	r2, [r3, #0]
24014366:	687b      	ldr	r3, [r7, #4]
24014368:	681b      	ldr	r3, [r3, #0]
2401436a:	f042 0202 	orr.w	r2, r2, #2
2401436e:	601a      	str	r2, [r3, #0]
24014370:	e003      	b.n	2401437a <HAL_QSPI_Abort_IT+0xc2>
      }    
      else
      {
        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
24014372:	687b      	ldr	r3, [r7, #4]
24014374:	2201      	movs	r2, #1
24014376:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      }
    }
  }
  return status;
2401437a:	7bfb      	ldrb	r3, [r7, #15]
}
2401437c:	4618      	mov	r0, r3
2401437e:	3710      	adds	r7, #16
24014380:	46bd      	mov	sp, r7
24014382:	bd80      	pop	{r7, pc}
24014384:	24014541 	.word	0x24014541

24014388 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
24014388:	b480      	push	{r7}
2401438a:	b083      	sub	sp, #12
2401438c:	af00      	add	r7, sp, #0
2401438e:	6078      	str	r0, [r7, #4]
24014390:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
24014392:	687b      	ldr	r3, [r7, #4]
24014394:	683a      	ldr	r2, [r7, #0]
24014396:	649a      	str	r2, [r3, #72]	; 0x48
}
24014398:	bf00      	nop
2401439a:	370c      	adds	r7, #12
2401439c:	46bd      	mov	sp, r7
2401439e:	f85d 7b04 	ldr.w	r7, [sp], #4
240143a2:	4770      	bx	lr

240143a4 <HAL_QSPI_SetFifoThreshold>:
  * @param  hqspi QSPI handle.
  * @param  Threshold Threshold of the Fifo (value between 1 and 16).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_SetFifoThreshold(QSPI_HandleTypeDef *hqspi, uint32_t Threshold)
{
240143a4:	b480      	push	{r7}
240143a6:	b085      	sub	sp, #20
240143a8:	af00      	add	r7, sp, #0
240143aa:	6078      	str	r0, [r7, #4]
240143ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
240143ae:	2300      	movs	r3, #0
240143b0:	73fb      	strb	r3, [r7, #15]

  /* Process locked */
  __HAL_LOCK(hqspi);
240143b2:	687b      	ldr	r3, [r7, #4]
240143b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
240143b8:	b2db      	uxtb	r3, r3
240143ba:	2b01      	cmp	r3, #1
240143bc:	d101      	bne.n	240143c2 <HAL_QSPI_SetFifoThreshold+0x1e>
240143be:	2302      	movs	r3, #2
240143c0:	e021      	b.n	24014406 <HAL_QSPI_SetFifoThreshold+0x62>
240143c2:	687b      	ldr	r3, [r7, #4]
240143c4:	2201      	movs	r2, #1
240143c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
240143ca:	687b      	ldr	r3, [r7, #4]
240143cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
240143d0:	b2db      	uxtb	r3, r3
240143d2:	2b01      	cmp	r3, #1
240143d4:	d110      	bne.n	240143f8 <HAL_QSPI_SetFifoThreshold+0x54>
  {
    /* Synchronize init structure with new FIFO threshold value */
    hqspi->Init.FifoThreshold = Threshold;
240143d6:	687b      	ldr	r3, [r7, #4]
240143d8:	683a      	ldr	r2, [r7, #0]
240143da:	609a      	str	r2, [r3, #8]

    /* Configure QSPI FIFO Threshold */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
240143dc:	687b      	ldr	r3, [r7, #4]
240143de:	681b      	ldr	r3, [r3, #0]
240143e0:	681b      	ldr	r3, [r3, #0]
240143e2:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
240143e6:	687b      	ldr	r3, [r7, #4]
240143e8:	689b      	ldr	r3, [r3, #8]
240143ea:	3b01      	subs	r3, #1
240143ec:	021a      	lsls	r2, r3, #8
240143ee:	687b      	ldr	r3, [r7, #4]
240143f0:	681b      	ldr	r3, [r3, #0]
240143f2:	430a      	orrs	r2, r1
240143f4:	601a      	str	r2, [r3, #0]
240143f6:	e001      	b.n	240143fc <HAL_QSPI_SetFifoThreshold+0x58>
               ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));
  }
  else
  {
    status = HAL_BUSY;
240143f8:	2302      	movs	r3, #2
240143fa:	73fb      	strb	r3, [r7, #15]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
240143fc:	687b      	ldr	r3, [r7, #4]
240143fe:	2200      	movs	r2, #0
24014400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
24014404:	7bfb      	ldrb	r3, [r7, #15]
}
24014406:	4618      	mov	r0, r3
24014408:	3714      	adds	r7, #20
2401440a:	46bd      	mov	sp, r7
2401440c:	f85d 7b04 	ldr.w	r7, [sp], #4
24014410:	4770      	bx	lr

24014412 <HAL_QSPI_GetFifoThreshold>:
/** @brief Get QSPI Fifo threshold.
  * @param  hqspi QSPI handle.
  * @retval Fifo threshold (value between 1 and 16)
  */
uint32_t HAL_QSPI_GetFifoThreshold(QSPI_HandleTypeDef *hqspi)
{
24014412:	b480      	push	{r7}
24014414:	b083      	sub	sp, #12
24014416:	af00      	add	r7, sp, #0
24014418:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(hqspi->Instance->CR, QUADSPI_CR_FTHRES) >> QUADSPI_CR_FTHRES_Pos) + 1U);
2401441a:	687b      	ldr	r3, [r7, #4]
2401441c:	681b      	ldr	r3, [r3, #0]
2401441e:	681b      	ldr	r3, [r3, #0]
24014420:	0a1b      	lsrs	r3, r3, #8
24014422:	f003 031f 	and.w	r3, r3, #31
24014426:	3301      	adds	r3, #1
}
24014428:	4618      	mov	r0, r3
2401442a:	370c      	adds	r7, #12
2401442c:	46bd      	mov	sp, r7
2401442e:	f85d 7b04 	ldr.w	r7, [sp], #4
24014432:	4770      	bx	lr

24014434 <HAL_QSPI_SetFlashID>:
  *                   This parameter can be a value of @ref QSPI_Flash_Select.
  * @note   The FlashID is ignored when dual flash mode is enabled.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_SetFlashID(QSPI_HandleTypeDef *hqspi, uint32_t FlashID)
{
24014434:	b480      	push	{r7}
24014436:	b085      	sub	sp, #20
24014438:	af00      	add	r7, sp, #0
2401443a:	6078      	str	r0, [r7, #4]
2401443c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
2401443e:	2300      	movs	r3, #0
24014440:	73fb      	strb	r3, [r7, #15]

  /* Check the parameter */
  assert_param(IS_QSPI_FLASH_ID(FlashID));

  /* Process locked */
  __HAL_LOCK(hqspi);
24014442:	687b      	ldr	r3, [r7, #4]
24014444:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
24014448:	b2db      	uxtb	r3, r3
2401444a:	2b01      	cmp	r3, #1
2401444c:	d101      	bne.n	24014452 <HAL_QSPI_SetFlashID+0x1e>
2401444e:	2302      	movs	r3, #2
24014450:	e01e      	b.n	24014490 <HAL_QSPI_SetFlashID+0x5c>
24014452:	687b      	ldr	r3, [r7, #4]
24014454:	2201      	movs	r2, #1
24014456:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
2401445a:	687b      	ldr	r3, [r7, #4]
2401445c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
24014460:	b2db      	uxtb	r3, r3
24014462:	2b01      	cmp	r3, #1
24014464:	d10d      	bne.n	24014482 <HAL_QSPI_SetFlashID+0x4e>
  {
    /* Synchronize init structure with new FlashID value */
    hqspi->Init.FlashID = FlashID;
24014466:	687b      	ldr	r3, [r7, #4]
24014468:	683a      	ldr	r2, [r7, #0]
2401446a:	61da      	str	r2, [r3, #28]

    /* Configure QSPI FlashID */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FSEL, FlashID);
2401446c:	687b      	ldr	r3, [r7, #4]
2401446e:	681b      	ldr	r3, [r3, #0]
24014470:	681b      	ldr	r3, [r3, #0]
24014472:	f023 0180 	bic.w	r1, r3, #128	; 0x80
24014476:	687b      	ldr	r3, [r7, #4]
24014478:	681b      	ldr	r3, [r3, #0]
2401447a:	683a      	ldr	r2, [r7, #0]
2401447c:	430a      	orrs	r2, r1
2401447e:	601a      	str	r2, [r3, #0]
24014480:	e001      	b.n	24014486 <HAL_QSPI_SetFlashID+0x52>
  }
  else
  {
    status = HAL_BUSY;
24014482:	2302      	movs	r3, #2
24014484:	73fb      	strb	r3, [r7, #15]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
24014486:	687b      	ldr	r3, [r7, #4]
24014488:	2200      	movs	r2, #0
2401448a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
2401448e:	7bfb      	ldrb	r3, [r7, #15]
}
24014490:	4618      	mov	r0, r3
24014492:	3714      	adds	r7, #20
24014494:	46bd      	mov	sp, r7
24014496:	f85d 7b04 	ldr.w	r7, [sp], #4
2401449a:	4770      	bx	lr

2401449c <QSPI_DMARxCplt>:
  * @brief  DMA QSPI receive process complete callback.
  * @param  hmdma MDMA handle
  * @retval None
  */
static void QSPI_DMARxCplt(MDMA_HandleTypeDef *hmdma)
{
2401449c:	b480      	push	{r7}
2401449e:	b085      	sub	sp, #20
240144a0:	af00      	add	r7, sp, #0
240144a2:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = (QSPI_HandleTypeDef*)(hmdma->Parent);
240144a4:	687b      	ldr	r3, [r7, #4]
240144a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
240144a8:	60fb      	str	r3, [r7, #12]
  hqspi->RxXferCount = 0U;
240144aa:	68fb      	ldr	r3, [r7, #12]
240144ac:	2200      	movs	r2, #0
240144ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the QSPI transfer complete Interrupt */
  __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
240144b0:	68fb      	ldr	r3, [r7, #12]
240144b2:	681b      	ldr	r3, [r3, #0]
240144b4:	681a      	ldr	r2, [r3, #0]
240144b6:	68fb      	ldr	r3, [r7, #12]
240144b8:	681b      	ldr	r3, [r3, #0]
240144ba:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
240144be:	601a      	str	r2, [r3, #0]
}
240144c0:	bf00      	nop
240144c2:	3714      	adds	r7, #20
240144c4:	46bd      	mov	sp, r7
240144c6:	f85d 7b04 	ldr.w	r7, [sp], #4
240144ca:	4770      	bx	lr

240144cc <QSPI_DMATxCplt>:
  * @brief  DMA QSPI transmit process complete callback.
  * @param  hmdma MDMA handle
  * @retval None
  */
static void QSPI_DMATxCplt(MDMA_HandleTypeDef *hmdma)
{
240144cc:	b480      	push	{r7}
240144ce:	b085      	sub	sp, #20
240144d0:	af00      	add	r7, sp, #0
240144d2:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = (QSPI_HandleTypeDef*)(hmdma->Parent);
240144d4:	687b      	ldr	r3, [r7, #4]
240144d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
240144d8:	60fb      	str	r3, [r7, #12]
  hqspi->TxXferCount = 0U;
240144da:	68fb      	ldr	r3, [r7, #12]
240144dc:	2200      	movs	r2, #0
240144de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the QSPI transfer complete Interrupt */
  __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
240144e0:	68fb      	ldr	r3, [r7, #12]
240144e2:	681b      	ldr	r3, [r3, #0]
240144e4:	681a      	ldr	r2, [r3, #0]
240144e6:	68fb      	ldr	r3, [r7, #12]
240144e8:	681b      	ldr	r3, [r3, #0]
240144ea:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
240144ee:	601a      	str	r2, [r3, #0]
}
240144f0:	bf00      	nop
240144f2:	3714      	adds	r7, #20
240144f4:	46bd      	mov	sp, r7
240144f6:	f85d 7b04 	ldr.w	r7, [sp], #4
240144fa:	4770      	bx	lr

240144fc <QSPI_DMAError>:
  * @brief  DMA QSPI communication error callback.
  * @param  hmdma MDMA handle
  * @retval None
  */
static void QSPI_DMAError(MDMA_HandleTypeDef *hmdma)
{
240144fc:	b580      	push	{r7, lr}
240144fe:	b084      	sub	sp, #16
24014500:	af00      	add	r7, sp, #0
24014502:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hmdma->Parent);
24014504:	687b      	ldr	r3, [r7, #4]
24014506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24014508:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
2401450a:	68fb      	ldr	r3, [r7, #12]
2401450c:	2200      	movs	r2, #0
2401450e:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
24014510:	68fb      	ldr	r3, [r7, #12]
24014512:	2200      	movs	r2, #0
24014514:	62da      	str	r2, [r3, #44]	; 0x2c
  hqspi->ErrorCode   |= HAL_QSPI_ERROR_DMA;
24014516:	68fb      	ldr	r3, [r7, #12]
24014518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2401451a:	f043 0204 	orr.w	r2, r3, #4
2401451e:	68fb      	ldr	r3, [r7, #12]
24014520:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
     but no impact on H7 HW and it minimize the cost in the footprint */
  CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
24014522:	68fb      	ldr	r3, [r7, #12]
24014524:	681b      	ldr	r3, [r3, #0]
24014526:	681a      	ldr	r2, [r3, #0]
24014528:	68fb      	ldr	r3, [r7, #12]
2401452a:	681b      	ldr	r3, [r3, #0]
2401452c:	f022 0204 	bic.w	r2, r2, #4
24014530:	601a      	str	r2, [r3, #0]

  /* Abort the QSPI */
  (void)HAL_QSPI_Abort_IT(hqspi);
24014532:	68f8      	ldr	r0, [r7, #12]
24014534:	f7ff fec0 	bl	240142b8 <HAL_QSPI_Abort_IT>

}
24014538:	bf00      	nop
2401453a:	3710      	adds	r7, #16
2401453c:	46bd      	mov	sp, r7
2401453e:	bd80      	pop	{r7, pc}

24014540 <QSPI_DMAAbortCplt>:
  * @brief  MDMA QSPI abort complete callback.
  * @param  hmdma MDMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(MDMA_HandleTypeDef *hmdma)
{
24014540:	b580      	push	{r7, lr}
24014542:	b084      	sub	sp, #16
24014544:	af00      	add	r7, sp, #0
24014546:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hmdma->Parent);
24014548:	687b      	ldr	r3, [r7, #4]
2401454a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2401454c:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
2401454e:	68fb      	ldr	r3, [r7, #12]
24014550:	2200      	movs	r2, #0
24014552:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
24014554:	68fb      	ldr	r3, [r7, #12]
24014556:	2200      	movs	r2, #0
24014558:	62da      	str	r2, [r3, #44]	; 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
2401455a:	68fb      	ldr	r3, [r7, #12]
2401455c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
24014560:	b2db      	uxtb	r3, r3
24014562:	2b08      	cmp	r3, #8
24014564:	d114      	bne.n	24014590 <QSPI_DMAAbortCplt+0x50>
  {
    /* MDMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
24014566:	68fb      	ldr	r3, [r7, #12]
24014568:	681b      	ldr	r3, [r3, #0]
2401456a:	2202      	movs	r2, #2
2401456c:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
2401456e:	68fb      	ldr	r3, [r7, #12]
24014570:	681b      	ldr	r3, [r3, #0]
24014572:	681a      	ldr	r2, [r3, #0]
24014574:	68fb      	ldr	r3, [r7, #12]
24014576:	681b      	ldr	r3, [r3, #0]
24014578:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
2401457c:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
2401457e:	68fb      	ldr	r3, [r7, #12]
24014580:	681b      	ldr	r3, [r3, #0]
24014582:	681a      	ldr	r2, [r3, #0]
24014584:	68fb      	ldr	r3, [r7, #12]
24014586:	681b      	ldr	r3, [r3, #0]
24014588:	f042 0202 	orr.w	r2, r2, #2
2401458c:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
2401458e:	e006      	b.n	2401459e <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
24014590:	68fb      	ldr	r3, [r7, #12]
24014592:	2201      	movs	r2, #1
24014594:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
24014598:	68f8      	ldr	r0, [r7, #12]
2401459a:	f7ff fdaa 	bl	240140f2 <HAL_QSPI_ErrorCallback>
}
2401459e:	bf00      	nop
240145a0:	3710      	adds	r7, #16
240145a2:	46bd      	mov	sp, r7
240145a4:	bd80      	pop	{r7, pc}

240145a6 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
240145a6:	b580      	push	{r7, lr}
240145a8:	b084      	sub	sp, #16
240145aa:	af00      	add	r7, sp, #0
240145ac:	60f8      	str	r0, [r7, #12]
240145ae:	60b9      	str	r1, [r7, #8]
240145b0:	603b      	str	r3, [r7, #0]
240145b2:	4613      	mov	r3, r2
240145b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
240145b6:	e01a      	b.n	240145ee <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
240145b8:	69bb      	ldr	r3, [r7, #24]
240145ba:	f1b3 3fff 	cmp.w	r3, #4294967295
240145be:	d016      	beq.n	240145ee <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
240145c0:	f7ee fd70 	bl	240030a4 <HAL_GetTick>
240145c4:	4602      	mov	r2, r0
240145c6:	683b      	ldr	r3, [r7, #0]
240145c8:	1ad3      	subs	r3, r2, r3
240145ca:	69ba      	ldr	r2, [r7, #24]
240145cc:	429a      	cmp	r2, r3
240145ce:	d302      	bcc.n	240145d6 <QSPI_WaitFlagStateUntilTimeout+0x30>
240145d0:	69bb      	ldr	r3, [r7, #24]
240145d2:	2b00      	cmp	r3, #0
240145d4:	d10b      	bne.n	240145ee <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
240145d6:	68fb      	ldr	r3, [r7, #12]
240145d8:	2204      	movs	r2, #4
240145da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
240145de:	68fb      	ldr	r3, [r7, #12]
240145e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
240145e2:	f043 0201 	orr.w	r2, r3, #1
240145e6:	68fb      	ldr	r3, [r7, #12]
240145e8:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
240145ea:	2301      	movs	r3, #1
240145ec:	e00e      	b.n	2401460c <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
240145ee:	68fb      	ldr	r3, [r7, #12]
240145f0:	681b      	ldr	r3, [r3, #0]
240145f2:	689a      	ldr	r2, [r3, #8]
240145f4:	68bb      	ldr	r3, [r7, #8]
240145f6:	4013      	ands	r3, r2
240145f8:	2b00      	cmp	r3, #0
240145fa:	bf14      	ite	ne
240145fc:	2301      	movne	r3, #1
240145fe:	2300      	moveq	r3, #0
24014600:	b2db      	uxtb	r3, r3
24014602:	461a      	mov	r2, r3
24014604:	79fb      	ldrb	r3, [r7, #7]
24014606:	429a      	cmp	r2, r3
24014608:	d1d6      	bne.n	240145b8 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
2401460a:	2300      	movs	r3, #0
}
2401460c:	4618      	mov	r0, r3
2401460e:	3710      	adds	r7, #16
24014610:	46bd      	mov	sp, r7
24014612:	bd80      	pop	{r7, pc}

24014614 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
24014614:	b480      	push	{r7}
24014616:	b085      	sub	sp, #20
24014618:	af00      	add	r7, sp, #0
2401461a:	60f8      	str	r0, [r7, #12]
2401461c:	60b9      	str	r1, [r7, #8]
2401461e:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
24014620:	68bb      	ldr	r3, [r7, #8]
24014622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24014624:	2b00      	cmp	r3, #0
24014626:	d009      	beq.n	2401463c <QSPI_Config+0x28>
24014628:	687b      	ldr	r3, [r7, #4]
2401462a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
2401462e:	d005      	beq.n	2401463c <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
24014630:	68bb      	ldr	r3, [r7, #8]
24014632:	6a9a      	ldr	r2, [r3, #40]	; 0x28
24014634:	68fb      	ldr	r3, [r7, #12]
24014636:	681b      	ldr	r3, [r3, #0]
24014638:	3a01      	subs	r2, #1
2401463a:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
2401463c:	68bb      	ldr	r3, [r7, #8]
2401463e:	699b      	ldr	r3, [r3, #24]
24014640:	2b00      	cmp	r3, #0
24014642:	f000 80b9 	beq.w	240147b8 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
24014646:	68bb      	ldr	r3, [r7, #8]
24014648:	6a1b      	ldr	r3, [r3, #32]
2401464a:	2b00      	cmp	r3, #0
2401464c:	d05f      	beq.n	2401470e <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
2401464e:	68fb      	ldr	r3, [r7, #12]
24014650:	681b      	ldr	r3, [r3, #0]
24014652:	68ba      	ldr	r2, [r7, #8]
24014654:	6892      	ldr	r2, [r2, #8]
24014656:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
24014658:	68bb      	ldr	r3, [r7, #8]
2401465a:	69db      	ldr	r3, [r3, #28]
2401465c:	2b00      	cmp	r3, #0
2401465e:	d031      	beq.n	240146c4 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
24014660:	68bb      	ldr	r3, [r7, #8]
24014662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
24014664:	68bb      	ldr	r3, [r7, #8]
24014666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24014668:	431a      	orrs	r2, r3
2401466a:	68bb      	ldr	r3, [r7, #8]
2401466c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2401466e:	431a      	orrs	r2, r3
24014670:	68bb      	ldr	r3, [r7, #8]
24014672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24014674:	431a      	orrs	r2, r3
24014676:	68bb      	ldr	r3, [r7, #8]
24014678:	695b      	ldr	r3, [r3, #20]
2401467a:	049b      	lsls	r3, r3, #18
2401467c:	431a      	orrs	r2, r3
2401467e:	68bb      	ldr	r3, [r7, #8]
24014680:	691b      	ldr	r3, [r3, #16]
24014682:	431a      	orrs	r2, r3
24014684:	68bb      	ldr	r3, [r7, #8]
24014686:	6a1b      	ldr	r3, [r3, #32]
24014688:	431a      	orrs	r2, r3
2401468a:	68bb      	ldr	r3, [r7, #8]
2401468c:	68db      	ldr	r3, [r3, #12]
2401468e:	431a      	orrs	r2, r3
24014690:	68bb      	ldr	r3, [r7, #8]
24014692:	69db      	ldr	r3, [r3, #28]
24014694:	431a      	orrs	r2, r3
24014696:	68bb      	ldr	r3, [r7, #8]
24014698:	699b      	ldr	r3, [r3, #24]
2401469a:	431a      	orrs	r2, r3
2401469c:	68bb      	ldr	r3, [r7, #8]
2401469e:	681b      	ldr	r3, [r3, #0]
240146a0:	ea42 0103 	orr.w	r1, r2, r3
240146a4:	68fb      	ldr	r3, [r7, #12]
240146a6:	681b      	ldr	r3, [r3, #0]
240146a8:	687a      	ldr	r2, [r7, #4]
240146aa:	430a      	orrs	r2, r1
240146ac:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
240146ae:	687b      	ldr	r3, [r7, #4]
240146b0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
240146b4:	f000 812e 	beq.w	24014914 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
240146b8:	68fb      	ldr	r3, [r7, #12]
240146ba:	681b      	ldr	r3, [r3, #0]
240146bc:	68ba      	ldr	r2, [r7, #8]
240146be:	6852      	ldr	r2, [r2, #4]
240146c0:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
240146c2:	e127      	b.n	24014914 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
240146c4:	68bb      	ldr	r3, [r7, #8]
240146c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
240146c8:	68bb      	ldr	r3, [r7, #8]
240146ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
240146cc:	431a      	orrs	r2, r3
240146ce:	68bb      	ldr	r3, [r7, #8]
240146d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
240146d2:	431a      	orrs	r2, r3
240146d4:	68bb      	ldr	r3, [r7, #8]
240146d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
240146d8:	431a      	orrs	r2, r3
240146da:	68bb      	ldr	r3, [r7, #8]
240146dc:	695b      	ldr	r3, [r3, #20]
240146de:	049b      	lsls	r3, r3, #18
240146e0:	431a      	orrs	r2, r3
240146e2:	68bb      	ldr	r3, [r7, #8]
240146e4:	691b      	ldr	r3, [r3, #16]
240146e6:	431a      	orrs	r2, r3
240146e8:	68bb      	ldr	r3, [r7, #8]
240146ea:	6a1b      	ldr	r3, [r3, #32]
240146ec:	431a      	orrs	r2, r3
240146ee:	68bb      	ldr	r3, [r7, #8]
240146f0:	69db      	ldr	r3, [r3, #28]
240146f2:	431a      	orrs	r2, r3
240146f4:	68bb      	ldr	r3, [r7, #8]
240146f6:	699b      	ldr	r3, [r3, #24]
240146f8:	431a      	orrs	r2, r3
240146fa:	68bb      	ldr	r3, [r7, #8]
240146fc:	681b      	ldr	r3, [r3, #0]
240146fe:	ea42 0103 	orr.w	r1, r2, r3
24014702:	68fb      	ldr	r3, [r7, #12]
24014704:	681b      	ldr	r3, [r3, #0]
24014706:	687a      	ldr	r2, [r7, #4]
24014708:	430a      	orrs	r2, r1
2401470a:	615a      	str	r2, [r3, #20]
}
2401470c:	e102      	b.n	24014914 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
2401470e:	68bb      	ldr	r3, [r7, #8]
24014710:	69db      	ldr	r3, [r3, #28]
24014712:	2b00      	cmp	r3, #0
24014714:	d02e      	beq.n	24014774 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
24014716:	68bb      	ldr	r3, [r7, #8]
24014718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
2401471a:	68bb      	ldr	r3, [r7, #8]
2401471c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2401471e:	431a      	orrs	r2, r3
24014720:	68bb      	ldr	r3, [r7, #8]
24014722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24014724:	431a      	orrs	r2, r3
24014726:	68bb      	ldr	r3, [r7, #8]
24014728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2401472a:	431a      	orrs	r2, r3
2401472c:	68bb      	ldr	r3, [r7, #8]
2401472e:	695b      	ldr	r3, [r3, #20]
24014730:	049b      	lsls	r3, r3, #18
24014732:	431a      	orrs	r2, r3
24014734:	68bb      	ldr	r3, [r7, #8]
24014736:	6a1b      	ldr	r3, [r3, #32]
24014738:	431a      	orrs	r2, r3
2401473a:	68bb      	ldr	r3, [r7, #8]
2401473c:	68db      	ldr	r3, [r3, #12]
2401473e:	431a      	orrs	r2, r3
24014740:	68bb      	ldr	r3, [r7, #8]
24014742:	69db      	ldr	r3, [r3, #28]
24014744:	431a      	orrs	r2, r3
24014746:	68bb      	ldr	r3, [r7, #8]
24014748:	699b      	ldr	r3, [r3, #24]
2401474a:	431a      	orrs	r2, r3
2401474c:	68bb      	ldr	r3, [r7, #8]
2401474e:	681b      	ldr	r3, [r3, #0]
24014750:	ea42 0103 	orr.w	r1, r2, r3
24014754:	68fb      	ldr	r3, [r7, #12]
24014756:	681b      	ldr	r3, [r3, #0]
24014758:	687a      	ldr	r2, [r7, #4]
2401475a:	430a      	orrs	r2, r1
2401475c:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
2401475e:	687b      	ldr	r3, [r7, #4]
24014760:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
24014764:	f000 80d6 	beq.w	24014914 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
24014768:	68fb      	ldr	r3, [r7, #12]
2401476a:	681b      	ldr	r3, [r3, #0]
2401476c:	68ba      	ldr	r2, [r7, #8]
2401476e:	6852      	ldr	r2, [r2, #4]
24014770:	619a      	str	r2, [r3, #24]
}
24014772:	e0cf      	b.n	24014914 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
24014774:	68bb      	ldr	r3, [r7, #8]
24014776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
24014778:	68bb      	ldr	r3, [r7, #8]
2401477a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2401477c:	431a      	orrs	r2, r3
2401477e:	68bb      	ldr	r3, [r7, #8]
24014780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24014782:	431a      	orrs	r2, r3
24014784:	68bb      	ldr	r3, [r7, #8]
24014786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24014788:	431a      	orrs	r2, r3
2401478a:	68bb      	ldr	r3, [r7, #8]
2401478c:	695b      	ldr	r3, [r3, #20]
2401478e:	049b      	lsls	r3, r3, #18
24014790:	431a      	orrs	r2, r3
24014792:	68bb      	ldr	r3, [r7, #8]
24014794:	6a1b      	ldr	r3, [r3, #32]
24014796:	431a      	orrs	r2, r3
24014798:	68bb      	ldr	r3, [r7, #8]
2401479a:	69db      	ldr	r3, [r3, #28]
2401479c:	431a      	orrs	r2, r3
2401479e:	68bb      	ldr	r3, [r7, #8]
240147a0:	699b      	ldr	r3, [r3, #24]
240147a2:	431a      	orrs	r2, r3
240147a4:	68bb      	ldr	r3, [r7, #8]
240147a6:	681b      	ldr	r3, [r3, #0]
240147a8:	ea42 0103 	orr.w	r1, r2, r3
240147ac:	68fb      	ldr	r3, [r7, #12]
240147ae:	681b      	ldr	r3, [r3, #0]
240147b0:	687a      	ldr	r2, [r7, #4]
240147b2:	430a      	orrs	r2, r1
240147b4:	615a      	str	r2, [r3, #20]
}
240147b6:	e0ad      	b.n	24014914 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
240147b8:	68bb      	ldr	r3, [r7, #8]
240147ba:	6a1b      	ldr	r3, [r3, #32]
240147bc:	2b00      	cmp	r3, #0
240147be:	d058      	beq.n	24014872 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
240147c0:	68fb      	ldr	r3, [r7, #12]
240147c2:	681b      	ldr	r3, [r3, #0]
240147c4:	68ba      	ldr	r2, [r7, #8]
240147c6:	6892      	ldr	r2, [r2, #8]
240147c8:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
240147ca:	68bb      	ldr	r3, [r7, #8]
240147cc:	69db      	ldr	r3, [r3, #28]
240147ce:	2b00      	cmp	r3, #0
240147d0:	d02d      	beq.n	2401482e <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
240147d2:	68bb      	ldr	r3, [r7, #8]
240147d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
240147d6:	68bb      	ldr	r3, [r7, #8]
240147d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
240147da:	431a      	orrs	r2, r3
240147dc:	68bb      	ldr	r3, [r7, #8]
240147de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
240147e0:	431a      	orrs	r2, r3
240147e2:	68bb      	ldr	r3, [r7, #8]
240147e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
240147e6:	431a      	orrs	r2, r3
240147e8:	68bb      	ldr	r3, [r7, #8]
240147ea:	695b      	ldr	r3, [r3, #20]
240147ec:	049b      	lsls	r3, r3, #18
240147ee:	431a      	orrs	r2, r3
240147f0:	68bb      	ldr	r3, [r7, #8]
240147f2:	691b      	ldr	r3, [r3, #16]
240147f4:	431a      	orrs	r2, r3
240147f6:	68bb      	ldr	r3, [r7, #8]
240147f8:	6a1b      	ldr	r3, [r3, #32]
240147fa:	431a      	orrs	r2, r3
240147fc:	68bb      	ldr	r3, [r7, #8]
240147fe:	68db      	ldr	r3, [r3, #12]
24014800:	431a      	orrs	r2, r3
24014802:	68bb      	ldr	r3, [r7, #8]
24014804:	69db      	ldr	r3, [r3, #28]
24014806:	431a      	orrs	r2, r3
24014808:	68bb      	ldr	r3, [r7, #8]
2401480a:	699b      	ldr	r3, [r3, #24]
2401480c:	ea42 0103 	orr.w	r1, r2, r3
24014810:	68fb      	ldr	r3, [r7, #12]
24014812:	681b      	ldr	r3, [r3, #0]
24014814:	687a      	ldr	r2, [r7, #4]
24014816:	430a      	orrs	r2, r1
24014818:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
2401481a:	687b      	ldr	r3, [r7, #4]
2401481c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
24014820:	d078      	beq.n	24014914 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
24014822:	68fb      	ldr	r3, [r7, #12]
24014824:	681b      	ldr	r3, [r3, #0]
24014826:	68ba      	ldr	r2, [r7, #8]
24014828:	6852      	ldr	r2, [r2, #4]
2401482a:	619a      	str	r2, [r3, #24]
}
2401482c:	e072      	b.n	24014914 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
2401482e:	68bb      	ldr	r3, [r7, #8]
24014830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
24014832:	68bb      	ldr	r3, [r7, #8]
24014834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24014836:	431a      	orrs	r2, r3
24014838:	68bb      	ldr	r3, [r7, #8]
2401483a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2401483c:	431a      	orrs	r2, r3
2401483e:	68bb      	ldr	r3, [r7, #8]
24014840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24014842:	431a      	orrs	r2, r3
24014844:	68bb      	ldr	r3, [r7, #8]
24014846:	695b      	ldr	r3, [r3, #20]
24014848:	049b      	lsls	r3, r3, #18
2401484a:	431a      	orrs	r2, r3
2401484c:	68bb      	ldr	r3, [r7, #8]
2401484e:	691b      	ldr	r3, [r3, #16]
24014850:	431a      	orrs	r2, r3
24014852:	68bb      	ldr	r3, [r7, #8]
24014854:	6a1b      	ldr	r3, [r3, #32]
24014856:	431a      	orrs	r2, r3
24014858:	68bb      	ldr	r3, [r7, #8]
2401485a:	69db      	ldr	r3, [r3, #28]
2401485c:	431a      	orrs	r2, r3
2401485e:	68bb      	ldr	r3, [r7, #8]
24014860:	699b      	ldr	r3, [r3, #24]
24014862:	ea42 0103 	orr.w	r1, r2, r3
24014866:	68fb      	ldr	r3, [r7, #12]
24014868:	681b      	ldr	r3, [r3, #0]
2401486a:	687a      	ldr	r2, [r7, #4]
2401486c:	430a      	orrs	r2, r1
2401486e:	615a      	str	r2, [r3, #20]
}
24014870:	e050      	b.n	24014914 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
24014872:	68bb      	ldr	r3, [r7, #8]
24014874:	69db      	ldr	r3, [r3, #28]
24014876:	2b00      	cmp	r3, #0
24014878:	d02a      	beq.n	240148d0 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
2401487a:	68bb      	ldr	r3, [r7, #8]
2401487c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
2401487e:	68bb      	ldr	r3, [r7, #8]
24014880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24014882:	431a      	orrs	r2, r3
24014884:	68bb      	ldr	r3, [r7, #8]
24014886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24014888:	431a      	orrs	r2, r3
2401488a:	68bb      	ldr	r3, [r7, #8]
2401488c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2401488e:	431a      	orrs	r2, r3
24014890:	68bb      	ldr	r3, [r7, #8]
24014892:	695b      	ldr	r3, [r3, #20]
24014894:	049b      	lsls	r3, r3, #18
24014896:	431a      	orrs	r2, r3
24014898:	68bb      	ldr	r3, [r7, #8]
2401489a:	6a1b      	ldr	r3, [r3, #32]
2401489c:	431a      	orrs	r2, r3
2401489e:	68bb      	ldr	r3, [r7, #8]
240148a0:	68db      	ldr	r3, [r3, #12]
240148a2:	431a      	orrs	r2, r3
240148a4:	68bb      	ldr	r3, [r7, #8]
240148a6:	69db      	ldr	r3, [r3, #28]
240148a8:	431a      	orrs	r2, r3
240148aa:	68bb      	ldr	r3, [r7, #8]
240148ac:	699b      	ldr	r3, [r3, #24]
240148ae:	ea42 0103 	orr.w	r1, r2, r3
240148b2:	68fb      	ldr	r3, [r7, #12]
240148b4:	681b      	ldr	r3, [r3, #0]
240148b6:	687a      	ldr	r2, [r7, #4]
240148b8:	430a      	orrs	r2, r1
240148ba:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
240148bc:	687b      	ldr	r3, [r7, #4]
240148be:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
240148c2:	d027      	beq.n	24014914 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
240148c4:	68fb      	ldr	r3, [r7, #12]
240148c6:	681b      	ldr	r3, [r3, #0]
240148c8:	68ba      	ldr	r2, [r7, #8]
240148ca:	6852      	ldr	r2, [r2, #4]
240148cc:	619a      	str	r2, [r3, #24]
}
240148ce:	e021      	b.n	24014914 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
240148d0:	68bb      	ldr	r3, [r7, #8]
240148d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
240148d4:	2b00      	cmp	r3, #0
240148d6:	d01d      	beq.n	24014914 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
240148d8:	68bb      	ldr	r3, [r7, #8]
240148da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
240148dc:	68bb      	ldr	r3, [r7, #8]
240148de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
240148e0:	431a      	orrs	r2, r3
240148e2:	68bb      	ldr	r3, [r7, #8]
240148e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
240148e6:	431a      	orrs	r2, r3
240148e8:	68bb      	ldr	r3, [r7, #8]
240148ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
240148ec:	431a      	orrs	r2, r3
240148ee:	68bb      	ldr	r3, [r7, #8]
240148f0:	695b      	ldr	r3, [r3, #20]
240148f2:	049b      	lsls	r3, r3, #18
240148f4:	431a      	orrs	r2, r3
240148f6:	68bb      	ldr	r3, [r7, #8]
240148f8:	6a1b      	ldr	r3, [r3, #32]
240148fa:	431a      	orrs	r2, r3
240148fc:	68bb      	ldr	r3, [r7, #8]
240148fe:	69db      	ldr	r3, [r3, #28]
24014900:	431a      	orrs	r2, r3
24014902:	68bb      	ldr	r3, [r7, #8]
24014904:	699b      	ldr	r3, [r3, #24]
24014906:	ea42 0103 	orr.w	r1, r2, r3
2401490a:	68fb      	ldr	r3, [r7, #12]
2401490c:	681b      	ldr	r3, [r3, #0]
2401490e:	687a      	ldr	r2, [r7, #4]
24014910:	430a      	orrs	r2, r1
24014912:	615a      	str	r2, [r3, #20]
}
24014914:	bf00      	nop
24014916:	3714      	adds	r7, #20
24014918:	46bd      	mov	sp, r7
2401491a:	f85d 7b04 	ldr.w	r7, [sp], #4
2401491e:	4770      	bx	lr

24014920 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
24014920:	b580      	push	{r7, lr}
24014922:	b082      	sub	sp, #8
24014924:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Increasing the CPU frequency */
  if (FLASH_LATENCY_DEFAULT  > __HAL_FLASH_GET_LATENCY())
24014926:	4b89      	ldr	r3, [pc, #548]	; (24014b4c <HAL_RCC_DeInit+0x22c>)
24014928:	681b      	ldr	r3, [r3, #0]
2401492a:	f003 030f 	and.w	r3, r3, #15
2401492e:	2b06      	cmp	r3, #6
24014930:	d80f      	bhi.n	24014952 <HAL_RCC_DeInit+0x32>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_DEFAULT);
24014932:	4b86      	ldr	r3, [pc, #536]	; (24014b4c <HAL_RCC_DeInit+0x22c>)
24014934:	681b      	ldr	r3, [r3, #0]
24014936:	f023 030f 	bic.w	r3, r3, #15
2401493a:	4a84      	ldr	r2, [pc, #528]	; (24014b4c <HAL_RCC_DeInit+0x22c>)
2401493c:	f043 0307 	orr.w	r3, r3, #7
24014940:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLASH_LATENCY_DEFAULT)
24014942:	4b82      	ldr	r3, [pc, #520]	; (24014b4c <HAL_RCC_DeInit+0x22c>)
24014944:	681b      	ldr	r3, [r3, #0]
24014946:	f003 030f 	and.w	r3, r3, #15
2401494a:	2b07      	cmp	r3, #7
2401494c:	d001      	beq.n	24014952 <HAL_RCC_DeInit+0x32>
    {
      return HAL_ERROR;
2401494e:	2301      	movs	r3, #1
24014950:	e0f7      	b.n	24014b42 <HAL_RCC_DeInit+0x222>

  }


  /* Get Start Tick */
  tickstart = HAL_GetTick();
24014952:	f7ee fba7 	bl	240030a4 <HAL_GetTick>
24014956:	6078      	str	r0, [r7, #4]

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
24014958:	4b7d      	ldr	r3, [pc, #500]	; (24014b50 <HAL_RCC_DeInit+0x230>)
2401495a:	681b      	ldr	r3, [r3, #0]
2401495c:	4a7c      	ldr	r2, [pc, #496]	; (24014b50 <HAL_RCC_DeInit+0x230>)
2401495e:	f043 0301 	orr.w	r3, r3, #1
24014962:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
24014964:	e008      	b.n	24014978 <HAL_RCC_DeInit+0x58>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
24014966:	f7ee fb9d 	bl	240030a4 <HAL_GetTick>
2401496a:	4602      	mov	r2, r0
2401496c:	687b      	ldr	r3, [r7, #4]
2401496e:	1ad3      	subs	r3, r2, r3
24014970:	2b02      	cmp	r3, #2
24014972:	d901      	bls.n	24014978 <HAL_RCC_DeInit+0x58>
    {
      return HAL_TIMEOUT;
24014974:	2303      	movs	r3, #3
24014976:	e0e4      	b.n	24014b42 <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
24014978:	4b75      	ldr	r3, [pc, #468]	; (24014b50 <HAL_RCC_DeInit+0x230>)
2401497a:	681b      	ldr	r3, [r3, #0]
2401497c:	f003 0304 	and.w	r3, r3, #4
24014980:	2b00      	cmp	r3, #0
24014982:	d0f0      	beq.n	24014966 <HAL_RCC_DeInit+0x46>
    }
  }

  /* Set HSITRIM[6:0] bits to the reset value */
  SET_BIT(RCC->HSICFGR, RCC_HSICFGR_HSITRIM_6);
24014984:	4b72      	ldr	r3, [pc, #456]	; (24014b50 <HAL_RCC_DeInit+0x230>)
24014986:	685b      	ldr	r3, [r3, #4]
24014988:	4a71      	ldr	r2, [pc, #452]	; (24014b50 <HAL_RCC_DeInit+0x230>)
2401498a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
2401498e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
24014990:	4b6f      	ldr	r3, [pc, #444]	; (24014b50 <HAL_RCC_DeInit+0x230>)
24014992:	2200      	movs	r2, #0
24014994:	611a      	str	r2, [r3, #16]

  /* Update the SystemCoreClock and SystemD2Clock global variables */
  SystemCoreClock = HSI_VALUE;
24014996:	4b6f      	ldr	r3, [pc, #444]	; (24014b54 <HAL_RCC_DeInit+0x234>)
24014998:	4a6f      	ldr	r2, [pc, #444]	; (24014b58 <HAL_RCC_DeInit+0x238>)
2401499a:	601a      	str	r2, [r3, #0]
  SystemD2Clock = HSI_VALUE;
2401499c:	4b6f      	ldr	r3, [pc, #444]	; (24014b5c <HAL_RCC_DeInit+0x23c>)
2401499e:	4a6e      	ldr	r2, [pc, #440]	; (24014b58 <HAL_RCC_DeInit+0x238>)
240149a0:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
240149a2:	4b6f      	ldr	r3, [pc, #444]	; (24014b60 <HAL_RCC_DeInit+0x240>)
240149a4:	681b      	ldr	r3, [r3, #0]
240149a6:	4618      	mov	r0, r3
240149a8:	f7ee fb32 	bl	24003010 <HAL_InitTick>
240149ac:	4603      	mov	r3, r0
240149ae:	2b00      	cmp	r3, #0
240149b0:	d001      	beq.n	240149b6 <HAL_RCC_DeInit+0x96>
  {
    return HAL_ERROR;
240149b2:	2301      	movs	r3, #1
240149b4:	e0c5      	b.n	24014b42 <HAL_RCC_DeInit+0x222>
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
240149b6:	f7ee fb75 	bl	240030a4 <HAL_GetTick>
240149ba:	6078      	str	r0, [r7, #4]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
240149bc:	e00a      	b.n	240149d4 <HAL_RCC_DeInit+0xb4>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
240149be:	f7ee fb71 	bl	240030a4 <HAL_GetTick>
240149c2:	4602      	mov	r2, r0
240149c4:	687b      	ldr	r3, [r7, #4]
240149c6:	1ad3      	subs	r3, r2, r3
240149c8:	f241 3288 	movw	r2, #5000	; 0x1388
240149cc:	4293      	cmp	r3, r2
240149ce:	d901      	bls.n	240149d4 <HAL_RCC_DeInit+0xb4>
    {
      return HAL_TIMEOUT;
240149d0:	2303      	movs	r3, #3
240149d2:	e0b6      	b.n	24014b42 <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
240149d4:	4b5e      	ldr	r3, [pc, #376]	; (24014b50 <HAL_RCC_DeInit+0x230>)
240149d6:	691b      	ldr	r3, [r3, #16]
240149d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
240149dc:	2b00      	cmp	r3, #0
240149de:	d1ee      	bne.n	240149be <HAL_RCC_DeInit+0x9e>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
240149e0:	f7ee fb60 	bl	240030a4 <HAL_GetTick>
240149e4:	6078      	str	r0, [r7, #4]

  /* Reset CSION, CSIKERON, HSEON, HSI48ON, HSECSSON, HSIDIV bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSIKERON | RCC_CR_HSIDIV | RCC_CR_HSIDIVF | RCC_CR_CSION | RCC_CR_CSIKERON  \
240149e6:	4b5a      	ldr	r3, [pc, #360]	; (24014b50 <HAL_RCC_DeInit+0x230>)
240149e8:	681a      	ldr	r2, [r3, #0]
240149ea:	4959      	ldr	r1, [pc, #356]	; (24014b50 <HAL_RCC_DeInit+0x230>)
240149ec:	4b5d      	ldr	r3, [pc, #372]	; (24014b64 <HAL_RCC_DeInit+0x244>)
240149ee:	4013      	ands	r3, r2
240149f0:	600b      	str	r3, [r1, #0]
            | RCC_CR_HSI48ON | RCC_CR_CSSHSEON);

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
240149f2:	e008      	b.n	24014a06 <HAL_RCC_DeInit+0xe6>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
240149f4:	f7ee fb56 	bl	240030a4 <HAL_GetTick>
240149f8:	4602      	mov	r2, r0
240149fa:	687b      	ldr	r3, [r7, #4]
240149fc:	1ad3      	subs	r3, r2, r3
240149fe:	2b64      	cmp	r3, #100	; 0x64
24014a00:	d901      	bls.n	24014a06 <HAL_RCC_DeInit+0xe6>
    {
      return HAL_TIMEOUT;
24014a02:	2303      	movs	r3, #3
24014a04:	e09d      	b.n	24014b42 <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
24014a06:	4b52      	ldr	r3, [pc, #328]	; (24014b50 <HAL_RCC_DeInit+0x230>)
24014a08:	681b      	ldr	r3, [r3, #0]
24014a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
24014a0e:	2b00      	cmp	r3, #0
24014a10:	d1f0      	bne.n	240149f4 <HAL_RCC_DeInit+0xd4>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
24014a12:	f7ee fb47 	bl	240030a4 <HAL_GetTick>
24014a16:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL1ON);
24014a18:	4b4d      	ldr	r3, [pc, #308]	; (24014b50 <HAL_RCC_DeInit+0x230>)
24014a1a:	681b      	ldr	r3, [r3, #0]
24014a1c:	4a4c      	ldr	r2, [pc, #304]	; (24014b50 <HAL_RCC_DeInit+0x230>)
24014a1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
24014a22:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
24014a24:	e008      	b.n	24014a38 <HAL_RCC_DeInit+0x118>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
24014a26:	f7ee fb3d 	bl	240030a4 <HAL_GetTick>
24014a2a:	4602      	mov	r2, r0
24014a2c:	687b      	ldr	r3, [r7, #4]
24014a2e:	1ad3      	subs	r3, r2, r3
24014a30:	2b02      	cmp	r3, #2
24014a32:	d901      	bls.n	24014a38 <HAL_RCC_DeInit+0x118>
    {
      return HAL_TIMEOUT;
24014a34:	2303      	movs	r3, #3
24014a36:	e084      	b.n	24014b42 <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
24014a38:	4b45      	ldr	r3, [pc, #276]	; (24014b50 <HAL_RCC_DeInit+0x230>)
24014a3a:	681b      	ldr	r3, [r3, #0]
24014a3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
24014a40:	2b00      	cmp	r3, #0
24014a42:	d1f0      	bne.n	24014a26 <HAL_RCC_DeInit+0x106>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
24014a44:	f7ee fb2e 	bl	240030a4 <HAL_GetTick>
24014a48:	6078      	str	r0, [r7, #4]

  /* Reset PLL2ON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL2ON);
24014a4a:	4b41      	ldr	r3, [pc, #260]	; (24014b50 <HAL_RCC_DeInit+0x230>)
24014a4c:	681b      	ldr	r3, [r3, #0]
24014a4e:	4a40      	ldr	r2, [pc, #256]	; (24014b50 <HAL_RCC_DeInit+0x230>)
24014a50:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
24014a54:	6013      	str	r3, [r2, #0]

  /* Wait till PLL2 is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL2RDY) != 0U)
24014a56:	e008      	b.n	24014a6a <HAL_RCC_DeInit+0x14a>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
24014a58:	f7ee fb24 	bl	240030a4 <HAL_GetTick>
24014a5c:	4602      	mov	r2, r0
24014a5e:	687b      	ldr	r3, [r7, #4]
24014a60:	1ad3      	subs	r3, r2, r3
24014a62:	2b02      	cmp	r3, #2
24014a64:	d901      	bls.n	24014a6a <HAL_RCC_DeInit+0x14a>
    {
      return HAL_TIMEOUT;
24014a66:	2303      	movs	r3, #3
24014a68:	e06b      	b.n	24014b42 <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_PLL2RDY) != 0U)
24014a6a:	4b39      	ldr	r3, [pc, #228]	; (24014b50 <HAL_RCC_DeInit+0x230>)
24014a6c:	681b      	ldr	r3, [r3, #0]
24014a6e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
24014a72:	2b00      	cmp	r3, #0
24014a74:	d1f0      	bne.n	24014a58 <HAL_RCC_DeInit+0x138>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
24014a76:	f7ee fb15 	bl	240030a4 <HAL_GetTick>
24014a7a:	6078      	str	r0, [r7, #4]

  /* Reset PLL3 bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL3ON);
24014a7c:	4b34      	ldr	r3, [pc, #208]	; (24014b50 <HAL_RCC_DeInit+0x230>)
24014a7e:	681b      	ldr	r3, [r3, #0]
24014a80:	4a33      	ldr	r2, [pc, #204]	; (24014b50 <HAL_RCC_DeInit+0x230>)
24014a82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
24014a86:	6013      	str	r3, [r2, #0]

  /* Wait till PLL3 is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL3RDY) != 0U)
24014a88:	e008      	b.n	24014a9c <HAL_RCC_DeInit+0x17c>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
24014a8a:	f7ee fb0b 	bl	240030a4 <HAL_GetTick>
24014a8e:	4602      	mov	r2, r0
24014a90:	687b      	ldr	r3, [r7, #4]
24014a92:	1ad3      	subs	r3, r2, r3
24014a94:	2b02      	cmp	r3, #2
24014a96:	d901      	bls.n	24014a9c <HAL_RCC_DeInit+0x17c>
    {
      return HAL_TIMEOUT;
24014a98:	2303      	movs	r3, #3
24014a9a:	e052      	b.n	24014b42 <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_PLL3RDY) != 0U)
24014a9c:	4b2c      	ldr	r3, [pc, #176]	; (24014b50 <HAL_RCC_DeInit+0x230>)
24014a9e:	681b      	ldr	r3, [r3, #0]
24014aa0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
24014aa4:	2b00      	cmp	r3, #0
24014aa6:	d1f0      	bne.n	24014a8a <HAL_RCC_DeInit+0x16a>
    }
  }

#if defined(RCC_D1CFGR_HPRE)
  /* Reset D1CFGR register */
  CLEAR_REG(RCC->D1CFGR);
24014aa8:	4b29      	ldr	r3, [pc, #164]	; (24014b50 <HAL_RCC_DeInit+0x230>)
24014aaa:	2200      	movs	r2, #0
24014aac:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  CLEAR_REG(RCC->D2CFGR);
24014aae:	4b28      	ldr	r3, [pc, #160]	; (24014b50 <HAL_RCC_DeInit+0x230>)
24014ab0:	2200      	movs	r2, #0
24014ab2:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  CLEAR_REG(RCC->D3CFGR);
24014ab4:	4b26      	ldr	r3, [pc, #152]	; (24014b50 <HAL_RCC_DeInit+0x230>)
24014ab6:	2200      	movs	r2, #0
24014ab8:	621a      	str	r2, [r3, #32]
  /* Reset SRDCFGR register */
  CLEAR_REG(RCC->SRDCFGR);
#endif

  /* Reset PLLCKSELR register to default value */
  RCC->PLLCKSELR = RCC_PLLCKSELR_DIVM1_5 | RCC_PLLCKSELR_DIVM2_5 | RCC_PLLCKSELR_DIVM3_5;
24014aba:	4b25      	ldr	r3, [pc, #148]	; (24014b50 <HAL_RCC_DeInit+0x230>)
24014abc:	4a2a      	ldr	r2, [pc, #168]	; (24014b68 <HAL_RCC_DeInit+0x248>)
24014abe:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register to default value */
  WRITE_REG(RCC->PLLCFGR, 0x01FF0000U);
24014ac0:	4b23      	ldr	r3, [pc, #140]	; (24014b50 <HAL_RCC_DeInit+0x230>)
24014ac2:	4a2a      	ldr	r2, [pc, #168]	; (24014b6c <HAL_RCC_DeInit+0x24c>)
24014ac4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset PLL1DIVR register to default value */
  WRITE_REG(RCC->PLL1DIVR, 0x01010280U);
24014ac6:	4b22      	ldr	r3, [pc, #136]	; (24014b50 <HAL_RCC_DeInit+0x230>)
24014ac8:	4a29      	ldr	r2, [pc, #164]	; (24014b70 <HAL_RCC_DeInit+0x250>)
24014aca:	631a      	str	r2, [r3, #48]	; 0x30

  /* Reset PLL1FRACR register */
  CLEAR_REG(RCC->PLL1FRACR);
24014acc:	4b20      	ldr	r3, [pc, #128]	; (24014b50 <HAL_RCC_DeInit+0x230>)
24014ace:	2200      	movs	r2, #0
24014ad0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register to default value */
  WRITE_REG(RCC->PLL2DIVR, 0x01010280U);
24014ad2:	4b1f      	ldr	r3, [pc, #124]	; (24014b50 <HAL_RCC_DeInit+0x230>)
24014ad4:	4a26      	ldr	r2, [pc, #152]	; (24014b70 <HAL_RCC_DeInit+0x250>)
24014ad6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */
  CLEAR_REG(RCC->PLL2FRACR);
24014ad8:	4b1d      	ldr	r3, [pc, #116]	; (24014b50 <HAL_RCC_DeInit+0x230>)
24014ada:	2200      	movs	r2, #0
24014adc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Reset PLL3DIVR register to default value */
  WRITE_REG(RCC->PLL3DIVR, 0x01010280U);
24014ade:	4b1c      	ldr	r3, [pc, #112]	; (24014b50 <HAL_RCC_DeInit+0x230>)
24014ae0:	4a23      	ldr	r2, [pc, #140]	; (24014b70 <HAL_RCC_DeInit+0x250>)
24014ae2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  CLEAR_REG(RCC->PLL3FRACR);
24014ae4:	4b1a      	ldr	r3, [pc, #104]	; (24014b50 <HAL_RCC_DeInit+0x230>)
24014ae6:	2200      	movs	r2, #0
24014ae8:	645a      	str	r2, [r3, #68]	; 0x44
  /* Reset HSEEXT  */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEEXT);
#endif /* RCC_CR_HSEEXT */

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
24014aea:	4b19      	ldr	r3, [pc, #100]	; (24014b50 <HAL_RCC_DeInit+0x230>)
24014aec:	681b      	ldr	r3, [r3, #0]
24014aee:	4a18      	ldr	r2, [pc, #96]	; (24014b50 <HAL_RCC_DeInit+0x230>)
24014af0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
24014af4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIER);
24014af6:	4b16      	ldr	r3, [pc, #88]	; (24014b50 <HAL_RCC_DeInit+0x230>)
24014af8:	2200      	movs	r2, #0
24014afa:	661a      	str	r2, [r3, #96]	; 0x60

  /* Clear all interrupts flags */
  WRITE_REG(RCC->CICR, 0xFFFFFFFFU);
24014afc:	4b14      	ldr	r3, [pc, #80]	; (24014b50 <HAL_RCC_DeInit+0x230>)
24014afe:	f04f 32ff 	mov.w	r2, #4294967295
24014b02:	669a      	str	r2, [r3, #104]	; 0x68

  /* Reset all RSR flags */
  SET_BIT(RCC->RSR, RCC_RSR_RMVF);
24014b04:	4b12      	ldr	r3, [pc, #72]	; (24014b50 <HAL_RCC_DeInit+0x230>)
24014b06:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
24014b0a:	4a11      	ldr	r2, [pc, #68]	; (24014b50 <HAL_RCC_DeInit+0x230>)
24014b0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
24014b10:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLASH_LATENCY_DEFAULT  < __HAL_FLASH_GET_LATENCY())
24014b14:	4b0d      	ldr	r3, [pc, #52]	; (24014b4c <HAL_RCC_DeInit+0x22c>)
24014b16:	681b      	ldr	r3, [r3, #0]
24014b18:	f003 0308 	and.w	r3, r3, #8
24014b1c:	2b00      	cmp	r3, #0
24014b1e:	d00f      	beq.n	24014b40 <HAL_RCC_DeInit+0x220>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_DEFAULT);
24014b20:	4b0a      	ldr	r3, [pc, #40]	; (24014b4c <HAL_RCC_DeInit+0x22c>)
24014b22:	681b      	ldr	r3, [r3, #0]
24014b24:	f023 030f 	bic.w	r3, r3, #15
24014b28:	4a08      	ldr	r2, [pc, #32]	; (24014b4c <HAL_RCC_DeInit+0x22c>)
24014b2a:	f043 0307 	orr.w	r3, r3, #7
24014b2e:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLASH_LATENCY_DEFAULT)
24014b30:	4b06      	ldr	r3, [pc, #24]	; (24014b4c <HAL_RCC_DeInit+0x22c>)
24014b32:	681b      	ldr	r3, [r3, #0]
24014b34:	f003 030f 	and.w	r3, r3, #15
24014b38:	2b07      	cmp	r3, #7
24014b3a:	d001      	beq.n	24014b40 <HAL_RCC_DeInit+0x220>
    {
      return HAL_ERROR;
24014b3c:	2301      	movs	r3, #1
24014b3e:	e000      	b.n	24014b42 <HAL_RCC_DeInit+0x222>
    }

  }

  return HAL_OK;
24014b40:	2300      	movs	r3, #0
}
24014b42:	4618      	mov	r0, r3
24014b44:	3708      	adds	r7, #8
24014b46:	46bd      	mov	sp, r7
24014b48:	bd80      	pop	{r7, pc}
24014b4a:	bf00      	nop
24014b4c:	52002000 	.word	0x52002000
24014b50:	58024400 	.word	0x58024400
24014b54:	240004b0 	.word	0x240004b0
24014b58:	03d09000 	.word	0x03d09000
24014b5c:	240004b4 	.word	0x240004b4
24014b60:	240004b8 	.word	0x240004b8
24014b64:	fff6ed45 	.word	0xfff6ed45
24014b68:	02020200 	.word	0x02020200
24014b6c:	01ff0000 	.word	0x01ff0000
24014b70:	01010280 	.word	0x01010280

24014b74 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
24014b74:	b580      	push	{r7, lr}
24014b76:	b08c      	sub	sp, #48	; 0x30
24014b78:	af00      	add	r7, sp, #0
24014b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
24014b7c:	687b      	ldr	r3, [r7, #4]
24014b7e:	2b00      	cmp	r3, #0
24014b80:	d102      	bne.n	24014b88 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
24014b82:	2301      	movs	r3, #1
24014b84:	f000 bc48 	b.w	24015418 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
24014b88:	687b      	ldr	r3, [r7, #4]
24014b8a:	681b      	ldr	r3, [r3, #0]
24014b8c:	f003 0301 	and.w	r3, r3, #1
24014b90:	2b00      	cmp	r3, #0
24014b92:	f000 8088 	beq.w	24014ca6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
24014b96:	4b99      	ldr	r3, [pc, #612]	; (24014dfc <HAL_RCC_OscConfig+0x288>)
24014b98:	691b      	ldr	r3, [r3, #16]
24014b9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
24014b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
24014ba0:	4b96      	ldr	r3, [pc, #600]	; (24014dfc <HAL_RCC_OscConfig+0x288>)
24014ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24014ba4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
24014ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
24014ba8:	2b10      	cmp	r3, #16
24014baa:	d007      	beq.n	24014bbc <HAL_RCC_OscConfig+0x48>
24014bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
24014bae:	2b18      	cmp	r3, #24
24014bb0:	d111      	bne.n	24014bd6 <HAL_RCC_OscConfig+0x62>
24014bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
24014bb4:	f003 0303 	and.w	r3, r3, #3
24014bb8:	2b02      	cmp	r3, #2
24014bba:	d10c      	bne.n	24014bd6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
24014bbc:	4b8f      	ldr	r3, [pc, #572]	; (24014dfc <HAL_RCC_OscConfig+0x288>)
24014bbe:	681b      	ldr	r3, [r3, #0]
24014bc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
24014bc4:	2b00      	cmp	r3, #0
24014bc6:	d06d      	beq.n	24014ca4 <HAL_RCC_OscConfig+0x130>
24014bc8:	687b      	ldr	r3, [r7, #4]
24014bca:	685b      	ldr	r3, [r3, #4]
24014bcc:	2b00      	cmp	r3, #0
24014bce:	d169      	bne.n	24014ca4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
24014bd0:	2301      	movs	r3, #1
24014bd2:	f000 bc21 	b.w	24015418 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
24014bd6:	687b      	ldr	r3, [r7, #4]
24014bd8:	685b      	ldr	r3, [r3, #4]
24014bda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
24014bde:	d106      	bne.n	24014bee <HAL_RCC_OscConfig+0x7a>
24014be0:	4b86      	ldr	r3, [pc, #536]	; (24014dfc <HAL_RCC_OscConfig+0x288>)
24014be2:	681b      	ldr	r3, [r3, #0]
24014be4:	4a85      	ldr	r2, [pc, #532]	; (24014dfc <HAL_RCC_OscConfig+0x288>)
24014be6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
24014bea:	6013      	str	r3, [r2, #0]
24014bec:	e02e      	b.n	24014c4c <HAL_RCC_OscConfig+0xd8>
24014bee:	687b      	ldr	r3, [r7, #4]
24014bf0:	685b      	ldr	r3, [r3, #4]
24014bf2:	2b00      	cmp	r3, #0
24014bf4:	d10c      	bne.n	24014c10 <HAL_RCC_OscConfig+0x9c>
24014bf6:	4b81      	ldr	r3, [pc, #516]	; (24014dfc <HAL_RCC_OscConfig+0x288>)
24014bf8:	681b      	ldr	r3, [r3, #0]
24014bfa:	4a80      	ldr	r2, [pc, #512]	; (24014dfc <HAL_RCC_OscConfig+0x288>)
24014bfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
24014c00:	6013      	str	r3, [r2, #0]
24014c02:	4b7e      	ldr	r3, [pc, #504]	; (24014dfc <HAL_RCC_OscConfig+0x288>)
24014c04:	681b      	ldr	r3, [r3, #0]
24014c06:	4a7d      	ldr	r2, [pc, #500]	; (24014dfc <HAL_RCC_OscConfig+0x288>)
24014c08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
24014c0c:	6013      	str	r3, [r2, #0]
24014c0e:	e01d      	b.n	24014c4c <HAL_RCC_OscConfig+0xd8>
24014c10:	687b      	ldr	r3, [r7, #4]
24014c12:	685b      	ldr	r3, [r3, #4]
24014c14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
24014c18:	d10c      	bne.n	24014c34 <HAL_RCC_OscConfig+0xc0>
24014c1a:	4b78      	ldr	r3, [pc, #480]	; (24014dfc <HAL_RCC_OscConfig+0x288>)
24014c1c:	681b      	ldr	r3, [r3, #0]
24014c1e:	4a77      	ldr	r2, [pc, #476]	; (24014dfc <HAL_RCC_OscConfig+0x288>)
24014c20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
24014c24:	6013      	str	r3, [r2, #0]
24014c26:	4b75      	ldr	r3, [pc, #468]	; (24014dfc <HAL_RCC_OscConfig+0x288>)
24014c28:	681b      	ldr	r3, [r3, #0]
24014c2a:	4a74      	ldr	r2, [pc, #464]	; (24014dfc <HAL_RCC_OscConfig+0x288>)
24014c2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
24014c30:	6013      	str	r3, [r2, #0]
24014c32:	e00b      	b.n	24014c4c <HAL_RCC_OscConfig+0xd8>
24014c34:	4b71      	ldr	r3, [pc, #452]	; (24014dfc <HAL_RCC_OscConfig+0x288>)
24014c36:	681b      	ldr	r3, [r3, #0]
24014c38:	4a70      	ldr	r2, [pc, #448]	; (24014dfc <HAL_RCC_OscConfig+0x288>)
24014c3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
24014c3e:	6013      	str	r3, [r2, #0]
24014c40:	4b6e      	ldr	r3, [pc, #440]	; (24014dfc <HAL_RCC_OscConfig+0x288>)
24014c42:	681b      	ldr	r3, [r3, #0]
24014c44:	4a6d      	ldr	r2, [pc, #436]	; (24014dfc <HAL_RCC_OscConfig+0x288>)
24014c46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
24014c4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
24014c4c:	687b      	ldr	r3, [r7, #4]
24014c4e:	685b      	ldr	r3, [r3, #4]
24014c50:	2b00      	cmp	r3, #0
24014c52:	d013      	beq.n	24014c7c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
24014c54:	f7ee fa26 	bl	240030a4 <HAL_GetTick>
24014c58:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
24014c5a:	e008      	b.n	24014c6e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
24014c5c:	f7ee fa22 	bl	240030a4 <HAL_GetTick>
24014c60:	4602      	mov	r2, r0
24014c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24014c64:	1ad3      	subs	r3, r2, r3
24014c66:	2b64      	cmp	r3, #100	; 0x64
24014c68:	d901      	bls.n	24014c6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
24014c6a:	2303      	movs	r3, #3
24014c6c:	e3d4      	b.n	24015418 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
24014c6e:	4b63      	ldr	r3, [pc, #396]	; (24014dfc <HAL_RCC_OscConfig+0x288>)
24014c70:	681b      	ldr	r3, [r3, #0]
24014c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
24014c76:	2b00      	cmp	r3, #0
24014c78:	d0f0      	beq.n	24014c5c <HAL_RCC_OscConfig+0xe8>
24014c7a:	e014      	b.n	24014ca6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
24014c7c:	f7ee fa12 	bl	240030a4 <HAL_GetTick>
24014c80:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
24014c82:	e008      	b.n	24014c96 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
24014c84:	f7ee fa0e 	bl	240030a4 <HAL_GetTick>
24014c88:	4602      	mov	r2, r0
24014c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24014c8c:	1ad3      	subs	r3, r2, r3
24014c8e:	2b64      	cmp	r3, #100	; 0x64
24014c90:	d901      	bls.n	24014c96 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
24014c92:	2303      	movs	r3, #3
24014c94:	e3c0      	b.n	24015418 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
24014c96:	4b59      	ldr	r3, [pc, #356]	; (24014dfc <HAL_RCC_OscConfig+0x288>)
24014c98:	681b      	ldr	r3, [r3, #0]
24014c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
24014c9e:	2b00      	cmp	r3, #0
24014ca0:	d1f0      	bne.n	24014c84 <HAL_RCC_OscConfig+0x110>
24014ca2:	e000      	b.n	24014ca6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
24014ca4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
24014ca6:	687b      	ldr	r3, [r7, #4]
24014ca8:	681b      	ldr	r3, [r3, #0]
24014caa:	f003 0302 	and.w	r3, r3, #2
24014cae:	2b00      	cmp	r3, #0
24014cb0:	f000 80ca 	beq.w	24014e48 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
24014cb4:	4b51      	ldr	r3, [pc, #324]	; (24014dfc <HAL_RCC_OscConfig+0x288>)
24014cb6:	691b      	ldr	r3, [r3, #16]
24014cb8:	f003 0338 	and.w	r3, r3, #56	; 0x38
24014cbc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
24014cbe:	4b4f      	ldr	r3, [pc, #316]	; (24014dfc <HAL_RCC_OscConfig+0x288>)
24014cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24014cc2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
24014cc4:	6a3b      	ldr	r3, [r7, #32]
24014cc6:	2b00      	cmp	r3, #0
24014cc8:	d007      	beq.n	24014cda <HAL_RCC_OscConfig+0x166>
24014cca:	6a3b      	ldr	r3, [r7, #32]
24014ccc:	2b18      	cmp	r3, #24
24014cce:	d156      	bne.n	24014d7e <HAL_RCC_OscConfig+0x20a>
24014cd0:	69fb      	ldr	r3, [r7, #28]
24014cd2:	f003 0303 	and.w	r3, r3, #3
24014cd6:	2b00      	cmp	r3, #0
24014cd8:	d151      	bne.n	24014d7e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
24014cda:	4b48      	ldr	r3, [pc, #288]	; (24014dfc <HAL_RCC_OscConfig+0x288>)
24014cdc:	681b      	ldr	r3, [r3, #0]
24014cde:	f003 0304 	and.w	r3, r3, #4
24014ce2:	2b00      	cmp	r3, #0
24014ce4:	d005      	beq.n	24014cf2 <HAL_RCC_OscConfig+0x17e>
24014ce6:	687b      	ldr	r3, [r7, #4]
24014ce8:	68db      	ldr	r3, [r3, #12]
24014cea:	2b00      	cmp	r3, #0
24014cec:	d101      	bne.n	24014cf2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
24014cee:	2301      	movs	r3, #1
24014cf0:	e392      	b.n	24015418 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
24014cf2:	4b42      	ldr	r3, [pc, #264]	; (24014dfc <HAL_RCC_OscConfig+0x288>)
24014cf4:	681b      	ldr	r3, [r3, #0]
24014cf6:	f023 0219 	bic.w	r2, r3, #25
24014cfa:	687b      	ldr	r3, [r7, #4]
24014cfc:	68db      	ldr	r3, [r3, #12]
24014cfe:	493f      	ldr	r1, [pc, #252]	; (24014dfc <HAL_RCC_OscConfig+0x288>)
24014d00:	4313      	orrs	r3, r2
24014d02:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
24014d04:	f7ee f9ce 	bl	240030a4 <HAL_GetTick>
24014d08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
24014d0a:	e008      	b.n	24014d1e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
24014d0c:	f7ee f9ca 	bl	240030a4 <HAL_GetTick>
24014d10:	4602      	mov	r2, r0
24014d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24014d14:	1ad3      	subs	r3, r2, r3
24014d16:	2b02      	cmp	r3, #2
24014d18:	d901      	bls.n	24014d1e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
24014d1a:	2303      	movs	r3, #3
24014d1c:	e37c      	b.n	24015418 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
24014d1e:	4b37      	ldr	r3, [pc, #220]	; (24014dfc <HAL_RCC_OscConfig+0x288>)
24014d20:	681b      	ldr	r3, [r3, #0]
24014d22:	f003 0304 	and.w	r3, r3, #4
24014d26:	2b00      	cmp	r3, #0
24014d28:	d0f0      	beq.n	24014d0c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
24014d2a:	f7ee fa55 	bl	240031d8 <HAL_GetREVID>
24014d2e:	4603      	mov	r3, r0
24014d30:	f241 0203 	movw	r2, #4099	; 0x1003
24014d34:	4293      	cmp	r3, r2
24014d36:	d817      	bhi.n	24014d68 <HAL_RCC_OscConfig+0x1f4>
24014d38:	687b      	ldr	r3, [r7, #4]
24014d3a:	691b      	ldr	r3, [r3, #16]
24014d3c:	2b40      	cmp	r3, #64	; 0x40
24014d3e:	d108      	bne.n	24014d52 <HAL_RCC_OscConfig+0x1de>
24014d40:	4b2e      	ldr	r3, [pc, #184]	; (24014dfc <HAL_RCC_OscConfig+0x288>)
24014d42:	685b      	ldr	r3, [r3, #4]
24014d44:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
24014d48:	4a2c      	ldr	r2, [pc, #176]	; (24014dfc <HAL_RCC_OscConfig+0x288>)
24014d4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24014d4e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
24014d50:	e07a      	b.n	24014e48 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
24014d52:	4b2a      	ldr	r3, [pc, #168]	; (24014dfc <HAL_RCC_OscConfig+0x288>)
24014d54:	685b      	ldr	r3, [r3, #4]
24014d56:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
24014d5a:	687b      	ldr	r3, [r7, #4]
24014d5c:	691b      	ldr	r3, [r3, #16]
24014d5e:	031b      	lsls	r3, r3, #12
24014d60:	4926      	ldr	r1, [pc, #152]	; (24014dfc <HAL_RCC_OscConfig+0x288>)
24014d62:	4313      	orrs	r3, r2
24014d64:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
24014d66:	e06f      	b.n	24014e48 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
24014d68:	4b24      	ldr	r3, [pc, #144]	; (24014dfc <HAL_RCC_OscConfig+0x288>)
24014d6a:	685b      	ldr	r3, [r3, #4]
24014d6c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
24014d70:	687b      	ldr	r3, [r7, #4]
24014d72:	691b      	ldr	r3, [r3, #16]
24014d74:	061b      	lsls	r3, r3, #24
24014d76:	4921      	ldr	r1, [pc, #132]	; (24014dfc <HAL_RCC_OscConfig+0x288>)
24014d78:	4313      	orrs	r3, r2
24014d7a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
24014d7c:	e064      	b.n	24014e48 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
24014d7e:	687b      	ldr	r3, [r7, #4]
24014d80:	68db      	ldr	r3, [r3, #12]
24014d82:	2b00      	cmp	r3, #0
24014d84:	d047      	beq.n	24014e16 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
24014d86:	4b1d      	ldr	r3, [pc, #116]	; (24014dfc <HAL_RCC_OscConfig+0x288>)
24014d88:	681b      	ldr	r3, [r3, #0]
24014d8a:	f023 0219 	bic.w	r2, r3, #25
24014d8e:	687b      	ldr	r3, [r7, #4]
24014d90:	68db      	ldr	r3, [r3, #12]
24014d92:	491a      	ldr	r1, [pc, #104]	; (24014dfc <HAL_RCC_OscConfig+0x288>)
24014d94:	4313      	orrs	r3, r2
24014d96:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
24014d98:	f7ee f984 	bl	240030a4 <HAL_GetTick>
24014d9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
24014d9e:	e008      	b.n	24014db2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
24014da0:	f7ee f980 	bl	240030a4 <HAL_GetTick>
24014da4:	4602      	mov	r2, r0
24014da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24014da8:	1ad3      	subs	r3, r2, r3
24014daa:	2b02      	cmp	r3, #2
24014dac:	d901      	bls.n	24014db2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
24014dae:	2303      	movs	r3, #3
24014db0:	e332      	b.n	24015418 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
24014db2:	4b12      	ldr	r3, [pc, #72]	; (24014dfc <HAL_RCC_OscConfig+0x288>)
24014db4:	681b      	ldr	r3, [r3, #0]
24014db6:	f003 0304 	and.w	r3, r3, #4
24014dba:	2b00      	cmp	r3, #0
24014dbc:	d0f0      	beq.n	24014da0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
24014dbe:	f7ee fa0b 	bl	240031d8 <HAL_GetREVID>
24014dc2:	4603      	mov	r3, r0
24014dc4:	f241 0203 	movw	r2, #4099	; 0x1003
24014dc8:	4293      	cmp	r3, r2
24014dca:	d819      	bhi.n	24014e00 <HAL_RCC_OscConfig+0x28c>
24014dcc:	687b      	ldr	r3, [r7, #4]
24014dce:	691b      	ldr	r3, [r3, #16]
24014dd0:	2b40      	cmp	r3, #64	; 0x40
24014dd2:	d108      	bne.n	24014de6 <HAL_RCC_OscConfig+0x272>
24014dd4:	4b09      	ldr	r3, [pc, #36]	; (24014dfc <HAL_RCC_OscConfig+0x288>)
24014dd6:	685b      	ldr	r3, [r3, #4]
24014dd8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
24014ddc:	4a07      	ldr	r2, [pc, #28]	; (24014dfc <HAL_RCC_OscConfig+0x288>)
24014dde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24014de2:	6053      	str	r3, [r2, #4]
24014de4:	e030      	b.n	24014e48 <HAL_RCC_OscConfig+0x2d4>
24014de6:	4b05      	ldr	r3, [pc, #20]	; (24014dfc <HAL_RCC_OscConfig+0x288>)
24014de8:	685b      	ldr	r3, [r3, #4]
24014dea:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
24014dee:	687b      	ldr	r3, [r7, #4]
24014df0:	691b      	ldr	r3, [r3, #16]
24014df2:	031b      	lsls	r3, r3, #12
24014df4:	4901      	ldr	r1, [pc, #4]	; (24014dfc <HAL_RCC_OscConfig+0x288>)
24014df6:	4313      	orrs	r3, r2
24014df8:	604b      	str	r3, [r1, #4]
24014dfa:	e025      	b.n	24014e48 <HAL_RCC_OscConfig+0x2d4>
24014dfc:	58024400 	.word	0x58024400
24014e00:	4b9a      	ldr	r3, [pc, #616]	; (2401506c <HAL_RCC_OscConfig+0x4f8>)
24014e02:	685b      	ldr	r3, [r3, #4]
24014e04:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
24014e08:	687b      	ldr	r3, [r7, #4]
24014e0a:	691b      	ldr	r3, [r3, #16]
24014e0c:	061b      	lsls	r3, r3, #24
24014e0e:	4997      	ldr	r1, [pc, #604]	; (2401506c <HAL_RCC_OscConfig+0x4f8>)
24014e10:	4313      	orrs	r3, r2
24014e12:	604b      	str	r3, [r1, #4]
24014e14:	e018      	b.n	24014e48 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
24014e16:	4b95      	ldr	r3, [pc, #596]	; (2401506c <HAL_RCC_OscConfig+0x4f8>)
24014e18:	681b      	ldr	r3, [r3, #0]
24014e1a:	4a94      	ldr	r2, [pc, #592]	; (2401506c <HAL_RCC_OscConfig+0x4f8>)
24014e1c:	f023 0301 	bic.w	r3, r3, #1
24014e20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
24014e22:	f7ee f93f 	bl	240030a4 <HAL_GetTick>
24014e26:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
24014e28:	e008      	b.n	24014e3c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
24014e2a:	f7ee f93b 	bl	240030a4 <HAL_GetTick>
24014e2e:	4602      	mov	r2, r0
24014e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24014e32:	1ad3      	subs	r3, r2, r3
24014e34:	2b02      	cmp	r3, #2
24014e36:	d901      	bls.n	24014e3c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
24014e38:	2303      	movs	r3, #3
24014e3a:	e2ed      	b.n	24015418 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
24014e3c:	4b8b      	ldr	r3, [pc, #556]	; (2401506c <HAL_RCC_OscConfig+0x4f8>)
24014e3e:	681b      	ldr	r3, [r3, #0]
24014e40:	f003 0304 	and.w	r3, r3, #4
24014e44:	2b00      	cmp	r3, #0
24014e46:	d1f0      	bne.n	24014e2a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
24014e48:	687b      	ldr	r3, [r7, #4]
24014e4a:	681b      	ldr	r3, [r3, #0]
24014e4c:	f003 0310 	and.w	r3, r3, #16
24014e50:	2b00      	cmp	r3, #0
24014e52:	f000 80a9 	beq.w	24014fa8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
24014e56:	4b85      	ldr	r3, [pc, #532]	; (2401506c <HAL_RCC_OscConfig+0x4f8>)
24014e58:	691b      	ldr	r3, [r3, #16]
24014e5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
24014e5e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
24014e60:	4b82      	ldr	r3, [pc, #520]	; (2401506c <HAL_RCC_OscConfig+0x4f8>)
24014e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24014e64:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
24014e66:	69bb      	ldr	r3, [r7, #24]
24014e68:	2b08      	cmp	r3, #8
24014e6a:	d007      	beq.n	24014e7c <HAL_RCC_OscConfig+0x308>
24014e6c:	69bb      	ldr	r3, [r7, #24]
24014e6e:	2b18      	cmp	r3, #24
24014e70:	d13a      	bne.n	24014ee8 <HAL_RCC_OscConfig+0x374>
24014e72:	697b      	ldr	r3, [r7, #20]
24014e74:	f003 0303 	and.w	r3, r3, #3
24014e78:	2b01      	cmp	r3, #1
24014e7a:	d135      	bne.n	24014ee8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
24014e7c:	4b7b      	ldr	r3, [pc, #492]	; (2401506c <HAL_RCC_OscConfig+0x4f8>)
24014e7e:	681b      	ldr	r3, [r3, #0]
24014e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
24014e84:	2b00      	cmp	r3, #0
24014e86:	d005      	beq.n	24014e94 <HAL_RCC_OscConfig+0x320>
24014e88:	687b      	ldr	r3, [r7, #4]
24014e8a:	69db      	ldr	r3, [r3, #28]
24014e8c:	2b80      	cmp	r3, #128	; 0x80
24014e8e:	d001      	beq.n	24014e94 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
24014e90:	2301      	movs	r3, #1
24014e92:	e2c1      	b.n	24015418 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
24014e94:	f7ee f9a0 	bl	240031d8 <HAL_GetREVID>
24014e98:	4603      	mov	r3, r0
24014e9a:	f241 0203 	movw	r2, #4099	; 0x1003
24014e9e:	4293      	cmp	r3, r2
24014ea0:	d817      	bhi.n	24014ed2 <HAL_RCC_OscConfig+0x35e>
24014ea2:	687b      	ldr	r3, [r7, #4]
24014ea4:	6a1b      	ldr	r3, [r3, #32]
24014ea6:	2b20      	cmp	r3, #32
24014ea8:	d108      	bne.n	24014ebc <HAL_RCC_OscConfig+0x348>
24014eaa:	4b70      	ldr	r3, [pc, #448]	; (2401506c <HAL_RCC_OscConfig+0x4f8>)
24014eac:	685b      	ldr	r3, [r3, #4]
24014eae:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
24014eb2:	4a6e      	ldr	r2, [pc, #440]	; (2401506c <HAL_RCC_OscConfig+0x4f8>)
24014eb4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
24014eb8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
24014eba:	e075      	b.n	24014fa8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
24014ebc:	4b6b      	ldr	r3, [pc, #428]	; (2401506c <HAL_RCC_OscConfig+0x4f8>)
24014ebe:	685b      	ldr	r3, [r3, #4]
24014ec0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
24014ec4:	687b      	ldr	r3, [r7, #4]
24014ec6:	6a1b      	ldr	r3, [r3, #32]
24014ec8:	069b      	lsls	r3, r3, #26
24014eca:	4968      	ldr	r1, [pc, #416]	; (2401506c <HAL_RCC_OscConfig+0x4f8>)
24014ecc:	4313      	orrs	r3, r2
24014ece:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
24014ed0:	e06a      	b.n	24014fa8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
24014ed2:	4b66      	ldr	r3, [pc, #408]	; (2401506c <HAL_RCC_OscConfig+0x4f8>)
24014ed4:	68db      	ldr	r3, [r3, #12]
24014ed6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
24014eda:	687b      	ldr	r3, [r7, #4]
24014edc:	6a1b      	ldr	r3, [r3, #32]
24014ede:	061b      	lsls	r3, r3, #24
24014ee0:	4962      	ldr	r1, [pc, #392]	; (2401506c <HAL_RCC_OscConfig+0x4f8>)
24014ee2:	4313      	orrs	r3, r2
24014ee4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
24014ee6:	e05f      	b.n	24014fa8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
24014ee8:	687b      	ldr	r3, [r7, #4]
24014eea:	69db      	ldr	r3, [r3, #28]
24014eec:	2b00      	cmp	r3, #0
24014eee:	d042      	beq.n	24014f76 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
24014ef0:	4b5e      	ldr	r3, [pc, #376]	; (2401506c <HAL_RCC_OscConfig+0x4f8>)
24014ef2:	681b      	ldr	r3, [r3, #0]
24014ef4:	4a5d      	ldr	r2, [pc, #372]	; (2401506c <HAL_RCC_OscConfig+0x4f8>)
24014ef6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
24014efa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
24014efc:	f7ee f8d2 	bl	240030a4 <HAL_GetTick>
24014f00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
24014f02:	e008      	b.n	24014f16 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
24014f04:	f7ee f8ce 	bl	240030a4 <HAL_GetTick>
24014f08:	4602      	mov	r2, r0
24014f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24014f0c:	1ad3      	subs	r3, r2, r3
24014f0e:	2b02      	cmp	r3, #2
24014f10:	d901      	bls.n	24014f16 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
24014f12:	2303      	movs	r3, #3
24014f14:	e280      	b.n	24015418 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
24014f16:	4b55      	ldr	r3, [pc, #340]	; (2401506c <HAL_RCC_OscConfig+0x4f8>)
24014f18:	681b      	ldr	r3, [r3, #0]
24014f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
24014f1e:	2b00      	cmp	r3, #0
24014f20:	d0f0      	beq.n	24014f04 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
24014f22:	f7ee f959 	bl	240031d8 <HAL_GetREVID>
24014f26:	4603      	mov	r3, r0
24014f28:	f241 0203 	movw	r2, #4099	; 0x1003
24014f2c:	4293      	cmp	r3, r2
24014f2e:	d817      	bhi.n	24014f60 <HAL_RCC_OscConfig+0x3ec>
24014f30:	687b      	ldr	r3, [r7, #4]
24014f32:	6a1b      	ldr	r3, [r3, #32]
24014f34:	2b20      	cmp	r3, #32
24014f36:	d108      	bne.n	24014f4a <HAL_RCC_OscConfig+0x3d6>
24014f38:	4b4c      	ldr	r3, [pc, #304]	; (2401506c <HAL_RCC_OscConfig+0x4f8>)
24014f3a:	685b      	ldr	r3, [r3, #4]
24014f3c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
24014f40:	4a4a      	ldr	r2, [pc, #296]	; (2401506c <HAL_RCC_OscConfig+0x4f8>)
24014f42:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
24014f46:	6053      	str	r3, [r2, #4]
24014f48:	e02e      	b.n	24014fa8 <HAL_RCC_OscConfig+0x434>
24014f4a:	4b48      	ldr	r3, [pc, #288]	; (2401506c <HAL_RCC_OscConfig+0x4f8>)
24014f4c:	685b      	ldr	r3, [r3, #4]
24014f4e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
24014f52:	687b      	ldr	r3, [r7, #4]
24014f54:	6a1b      	ldr	r3, [r3, #32]
24014f56:	069b      	lsls	r3, r3, #26
24014f58:	4944      	ldr	r1, [pc, #272]	; (2401506c <HAL_RCC_OscConfig+0x4f8>)
24014f5a:	4313      	orrs	r3, r2
24014f5c:	604b      	str	r3, [r1, #4]
24014f5e:	e023      	b.n	24014fa8 <HAL_RCC_OscConfig+0x434>
24014f60:	4b42      	ldr	r3, [pc, #264]	; (2401506c <HAL_RCC_OscConfig+0x4f8>)
24014f62:	68db      	ldr	r3, [r3, #12]
24014f64:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
24014f68:	687b      	ldr	r3, [r7, #4]
24014f6a:	6a1b      	ldr	r3, [r3, #32]
24014f6c:	061b      	lsls	r3, r3, #24
24014f6e:	493f      	ldr	r1, [pc, #252]	; (2401506c <HAL_RCC_OscConfig+0x4f8>)
24014f70:	4313      	orrs	r3, r2
24014f72:	60cb      	str	r3, [r1, #12]
24014f74:	e018      	b.n	24014fa8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
24014f76:	4b3d      	ldr	r3, [pc, #244]	; (2401506c <HAL_RCC_OscConfig+0x4f8>)
24014f78:	681b      	ldr	r3, [r3, #0]
24014f7a:	4a3c      	ldr	r2, [pc, #240]	; (2401506c <HAL_RCC_OscConfig+0x4f8>)
24014f7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
24014f80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
24014f82:	f7ee f88f 	bl	240030a4 <HAL_GetTick>
24014f86:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
24014f88:	e008      	b.n	24014f9c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
24014f8a:	f7ee f88b 	bl	240030a4 <HAL_GetTick>
24014f8e:	4602      	mov	r2, r0
24014f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24014f92:	1ad3      	subs	r3, r2, r3
24014f94:	2b02      	cmp	r3, #2
24014f96:	d901      	bls.n	24014f9c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
24014f98:	2303      	movs	r3, #3
24014f9a:	e23d      	b.n	24015418 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
24014f9c:	4b33      	ldr	r3, [pc, #204]	; (2401506c <HAL_RCC_OscConfig+0x4f8>)
24014f9e:	681b      	ldr	r3, [r3, #0]
24014fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
24014fa4:	2b00      	cmp	r3, #0
24014fa6:	d1f0      	bne.n	24014f8a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
24014fa8:	687b      	ldr	r3, [r7, #4]
24014faa:	681b      	ldr	r3, [r3, #0]
24014fac:	f003 0308 	and.w	r3, r3, #8
24014fb0:	2b00      	cmp	r3, #0
24014fb2:	d036      	beq.n	24015022 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
24014fb4:	687b      	ldr	r3, [r7, #4]
24014fb6:	695b      	ldr	r3, [r3, #20]
24014fb8:	2b00      	cmp	r3, #0
24014fba:	d019      	beq.n	24014ff0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
24014fbc:	4b2b      	ldr	r3, [pc, #172]	; (2401506c <HAL_RCC_OscConfig+0x4f8>)
24014fbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
24014fc0:	4a2a      	ldr	r2, [pc, #168]	; (2401506c <HAL_RCC_OscConfig+0x4f8>)
24014fc2:	f043 0301 	orr.w	r3, r3, #1
24014fc6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
24014fc8:	f7ee f86c 	bl	240030a4 <HAL_GetTick>
24014fcc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
24014fce:	e008      	b.n	24014fe2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
24014fd0:	f7ee f868 	bl	240030a4 <HAL_GetTick>
24014fd4:	4602      	mov	r2, r0
24014fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24014fd8:	1ad3      	subs	r3, r2, r3
24014fda:	2b02      	cmp	r3, #2
24014fdc:	d901      	bls.n	24014fe2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
24014fde:	2303      	movs	r3, #3
24014fe0:	e21a      	b.n	24015418 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
24014fe2:	4b22      	ldr	r3, [pc, #136]	; (2401506c <HAL_RCC_OscConfig+0x4f8>)
24014fe4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
24014fe6:	f003 0302 	and.w	r3, r3, #2
24014fea:	2b00      	cmp	r3, #0
24014fec:	d0f0      	beq.n	24014fd0 <HAL_RCC_OscConfig+0x45c>
24014fee:	e018      	b.n	24015022 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
24014ff0:	4b1e      	ldr	r3, [pc, #120]	; (2401506c <HAL_RCC_OscConfig+0x4f8>)
24014ff2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
24014ff4:	4a1d      	ldr	r2, [pc, #116]	; (2401506c <HAL_RCC_OscConfig+0x4f8>)
24014ff6:	f023 0301 	bic.w	r3, r3, #1
24014ffa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
24014ffc:	f7ee f852 	bl	240030a4 <HAL_GetTick>
24015000:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
24015002:	e008      	b.n	24015016 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
24015004:	f7ee f84e 	bl	240030a4 <HAL_GetTick>
24015008:	4602      	mov	r2, r0
2401500a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2401500c:	1ad3      	subs	r3, r2, r3
2401500e:	2b02      	cmp	r3, #2
24015010:	d901      	bls.n	24015016 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
24015012:	2303      	movs	r3, #3
24015014:	e200      	b.n	24015418 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
24015016:	4b15      	ldr	r3, [pc, #84]	; (2401506c <HAL_RCC_OscConfig+0x4f8>)
24015018:	6f5b      	ldr	r3, [r3, #116]	; 0x74
2401501a:	f003 0302 	and.w	r3, r3, #2
2401501e:	2b00      	cmp	r3, #0
24015020:	d1f0      	bne.n	24015004 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
24015022:	687b      	ldr	r3, [r7, #4]
24015024:	681b      	ldr	r3, [r3, #0]
24015026:	f003 0320 	and.w	r3, r3, #32
2401502a:	2b00      	cmp	r3, #0
2401502c:	d039      	beq.n	240150a2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
2401502e:	687b      	ldr	r3, [r7, #4]
24015030:	699b      	ldr	r3, [r3, #24]
24015032:	2b00      	cmp	r3, #0
24015034:	d01c      	beq.n	24015070 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
24015036:	4b0d      	ldr	r3, [pc, #52]	; (2401506c <HAL_RCC_OscConfig+0x4f8>)
24015038:	681b      	ldr	r3, [r3, #0]
2401503a:	4a0c      	ldr	r2, [pc, #48]	; (2401506c <HAL_RCC_OscConfig+0x4f8>)
2401503c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
24015040:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
24015042:	f7ee f82f 	bl	240030a4 <HAL_GetTick>
24015046:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
24015048:	e008      	b.n	2401505c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
2401504a:	f7ee f82b 	bl	240030a4 <HAL_GetTick>
2401504e:	4602      	mov	r2, r0
24015050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24015052:	1ad3      	subs	r3, r2, r3
24015054:	2b02      	cmp	r3, #2
24015056:	d901      	bls.n	2401505c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
24015058:	2303      	movs	r3, #3
2401505a:	e1dd      	b.n	24015418 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
2401505c:	4b03      	ldr	r3, [pc, #12]	; (2401506c <HAL_RCC_OscConfig+0x4f8>)
2401505e:	681b      	ldr	r3, [r3, #0]
24015060:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
24015064:	2b00      	cmp	r3, #0
24015066:	d0f0      	beq.n	2401504a <HAL_RCC_OscConfig+0x4d6>
24015068:	e01b      	b.n	240150a2 <HAL_RCC_OscConfig+0x52e>
2401506a:	bf00      	nop
2401506c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
24015070:	4b9b      	ldr	r3, [pc, #620]	; (240152e0 <HAL_RCC_OscConfig+0x76c>)
24015072:	681b      	ldr	r3, [r3, #0]
24015074:	4a9a      	ldr	r2, [pc, #616]	; (240152e0 <HAL_RCC_OscConfig+0x76c>)
24015076:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
2401507a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
2401507c:	f7ee f812 	bl	240030a4 <HAL_GetTick>
24015080:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
24015082:	e008      	b.n	24015096 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
24015084:	f7ee f80e 	bl	240030a4 <HAL_GetTick>
24015088:	4602      	mov	r2, r0
2401508a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2401508c:	1ad3      	subs	r3, r2, r3
2401508e:	2b02      	cmp	r3, #2
24015090:	d901      	bls.n	24015096 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
24015092:	2303      	movs	r3, #3
24015094:	e1c0      	b.n	24015418 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
24015096:	4b92      	ldr	r3, [pc, #584]	; (240152e0 <HAL_RCC_OscConfig+0x76c>)
24015098:	681b      	ldr	r3, [r3, #0]
2401509a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
2401509e:	2b00      	cmp	r3, #0
240150a0:	d1f0      	bne.n	24015084 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
240150a2:	687b      	ldr	r3, [r7, #4]
240150a4:	681b      	ldr	r3, [r3, #0]
240150a6:	f003 0304 	and.w	r3, r3, #4
240150aa:	2b00      	cmp	r3, #0
240150ac:	f000 8081 	beq.w	240151b2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
240150b0:	4b8c      	ldr	r3, [pc, #560]	; (240152e4 <HAL_RCC_OscConfig+0x770>)
240150b2:	681b      	ldr	r3, [r3, #0]
240150b4:	4a8b      	ldr	r2, [pc, #556]	; (240152e4 <HAL_RCC_OscConfig+0x770>)
240150b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
240150ba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
240150bc:	f7ed fff2 	bl	240030a4 <HAL_GetTick>
240150c0:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
240150c2:	e008      	b.n	240150d6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
240150c4:	f7ed ffee 	bl	240030a4 <HAL_GetTick>
240150c8:	4602      	mov	r2, r0
240150ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
240150cc:	1ad3      	subs	r3, r2, r3
240150ce:	2b64      	cmp	r3, #100	; 0x64
240150d0:	d901      	bls.n	240150d6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
240150d2:	2303      	movs	r3, #3
240150d4:	e1a0      	b.n	24015418 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
240150d6:	4b83      	ldr	r3, [pc, #524]	; (240152e4 <HAL_RCC_OscConfig+0x770>)
240150d8:	681b      	ldr	r3, [r3, #0]
240150da:	f403 7380 	and.w	r3, r3, #256	; 0x100
240150de:	2b00      	cmp	r3, #0
240150e0:	d0f0      	beq.n	240150c4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
240150e2:	687b      	ldr	r3, [r7, #4]
240150e4:	689b      	ldr	r3, [r3, #8]
240150e6:	2b01      	cmp	r3, #1
240150e8:	d106      	bne.n	240150f8 <HAL_RCC_OscConfig+0x584>
240150ea:	4b7d      	ldr	r3, [pc, #500]	; (240152e0 <HAL_RCC_OscConfig+0x76c>)
240150ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
240150ee:	4a7c      	ldr	r2, [pc, #496]	; (240152e0 <HAL_RCC_OscConfig+0x76c>)
240150f0:	f043 0301 	orr.w	r3, r3, #1
240150f4:	6713      	str	r3, [r2, #112]	; 0x70
240150f6:	e02d      	b.n	24015154 <HAL_RCC_OscConfig+0x5e0>
240150f8:	687b      	ldr	r3, [r7, #4]
240150fa:	689b      	ldr	r3, [r3, #8]
240150fc:	2b00      	cmp	r3, #0
240150fe:	d10c      	bne.n	2401511a <HAL_RCC_OscConfig+0x5a6>
24015100:	4b77      	ldr	r3, [pc, #476]	; (240152e0 <HAL_RCC_OscConfig+0x76c>)
24015102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24015104:	4a76      	ldr	r2, [pc, #472]	; (240152e0 <HAL_RCC_OscConfig+0x76c>)
24015106:	f023 0301 	bic.w	r3, r3, #1
2401510a:	6713      	str	r3, [r2, #112]	; 0x70
2401510c:	4b74      	ldr	r3, [pc, #464]	; (240152e0 <HAL_RCC_OscConfig+0x76c>)
2401510e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24015110:	4a73      	ldr	r2, [pc, #460]	; (240152e0 <HAL_RCC_OscConfig+0x76c>)
24015112:	f023 0304 	bic.w	r3, r3, #4
24015116:	6713      	str	r3, [r2, #112]	; 0x70
24015118:	e01c      	b.n	24015154 <HAL_RCC_OscConfig+0x5e0>
2401511a:	687b      	ldr	r3, [r7, #4]
2401511c:	689b      	ldr	r3, [r3, #8]
2401511e:	2b05      	cmp	r3, #5
24015120:	d10c      	bne.n	2401513c <HAL_RCC_OscConfig+0x5c8>
24015122:	4b6f      	ldr	r3, [pc, #444]	; (240152e0 <HAL_RCC_OscConfig+0x76c>)
24015124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24015126:	4a6e      	ldr	r2, [pc, #440]	; (240152e0 <HAL_RCC_OscConfig+0x76c>)
24015128:	f043 0304 	orr.w	r3, r3, #4
2401512c:	6713      	str	r3, [r2, #112]	; 0x70
2401512e:	4b6c      	ldr	r3, [pc, #432]	; (240152e0 <HAL_RCC_OscConfig+0x76c>)
24015130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24015132:	4a6b      	ldr	r2, [pc, #428]	; (240152e0 <HAL_RCC_OscConfig+0x76c>)
24015134:	f043 0301 	orr.w	r3, r3, #1
24015138:	6713      	str	r3, [r2, #112]	; 0x70
2401513a:	e00b      	b.n	24015154 <HAL_RCC_OscConfig+0x5e0>
2401513c:	4b68      	ldr	r3, [pc, #416]	; (240152e0 <HAL_RCC_OscConfig+0x76c>)
2401513e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24015140:	4a67      	ldr	r2, [pc, #412]	; (240152e0 <HAL_RCC_OscConfig+0x76c>)
24015142:	f023 0301 	bic.w	r3, r3, #1
24015146:	6713      	str	r3, [r2, #112]	; 0x70
24015148:	4b65      	ldr	r3, [pc, #404]	; (240152e0 <HAL_RCC_OscConfig+0x76c>)
2401514a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2401514c:	4a64      	ldr	r2, [pc, #400]	; (240152e0 <HAL_RCC_OscConfig+0x76c>)
2401514e:	f023 0304 	bic.w	r3, r3, #4
24015152:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
24015154:	687b      	ldr	r3, [r7, #4]
24015156:	689b      	ldr	r3, [r3, #8]
24015158:	2b00      	cmp	r3, #0
2401515a:	d015      	beq.n	24015188 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
2401515c:	f7ed ffa2 	bl	240030a4 <HAL_GetTick>
24015160:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
24015162:	e00a      	b.n	2401517a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
24015164:	f7ed ff9e 	bl	240030a4 <HAL_GetTick>
24015168:	4602      	mov	r2, r0
2401516a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2401516c:	1ad3      	subs	r3, r2, r3
2401516e:	f241 3288 	movw	r2, #5000	; 0x1388
24015172:	4293      	cmp	r3, r2
24015174:	d901      	bls.n	2401517a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
24015176:	2303      	movs	r3, #3
24015178:	e14e      	b.n	24015418 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
2401517a:	4b59      	ldr	r3, [pc, #356]	; (240152e0 <HAL_RCC_OscConfig+0x76c>)
2401517c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2401517e:	f003 0302 	and.w	r3, r3, #2
24015182:	2b00      	cmp	r3, #0
24015184:	d0ee      	beq.n	24015164 <HAL_RCC_OscConfig+0x5f0>
24015186:	e014      	b.n	240151b2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
24015188:	f7ed ff8c 	bl	240030a4 <HAL_GetTick>
2401518c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
2401518e:	e00a      	b.n	240151a6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
24015190:	f7ed ff88 	bl	240030a4 <HAL_GetTick>
24015194:	4602      	mov	r2, r0
24015196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24015198:	1ad3      	subs	r3, r2, r3
2401519a:	f241 3288 	movw	r2, #5000	; 0x1388
2401519e:	4293      	cmp	r3, r2
240151a0:	d901      	bls.n	240151a6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
240151a2:	2303      	movs	r3, #3
240151a4:	e138      	b.n	24015418 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
240151a6:	4b4e      	ldr	r3, [pc, #312]	; (240152e0 <HAL_RCC_OscConfig+0x76c>)
240151a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
240151aa:	f003 0302 	and.w	r3, r3, #2
240151ae:	2b00      	cmp	r3, #0
240151b0:	d1ee      	bne.n	24015190 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
240151b2:	687b      	ldr	r3, [r7, #4]
240151b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
240151b6:	2b00      	cmp	r3, #0
240151b8:	f000 812d 	beq.w	24015416 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
240151bc:	4b48      	ldr	r3, [pc, #288]	; (240152e0 <HAL_RCC_OscConfig+0x76c>)
240151be:	691b      	ldr	r3, [r3, #16]
240151c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
240151c4:	2b18      	cmp	r3, #24
240151c6:	f000 80bd 	beq.w	24015344 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
240151ca:	687b      	ldr	r3, [r7, #4]
240151cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
240151ce:	2b02      	cmp	r3, #2
240151d0:	f040 809e 	bne.w	24015310 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
240151d4:	4b42      	ldr	r3, [pc, #264]	; (240152e0 <HAL_RCC_OscConfig+0x76c>)
240151d6:	681b      	ldr	r3, [r3, #0]
240151d8:	4a41      	ldr	r2, [pc, #260]	; (240152e0 <HAL_RCC_OscConfig+0x76c>)
240151da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
240151de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
240151e0:	f7ed ff60 	bl	240030a4 <HAL_GetTick>
240151e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
240151e6:	e008      	b.n	240151fa <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
240151e8:	f7ed ff5c 	bl	240030a4 <HAL_GetTick>
240151ec:	4602      	mov	r2, r0
240151ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
240151f0:	1ad3      	subs	r3, r2, r3
240151f2:	2b02      	cmp	r3, #2
240151f4:	d901      	bls.n	240151fa <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
240151f6:	2303      	movs	r3, #3
240151f8:	e10e      	b.n	24015418 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
240151fa:	4b39      	ldr	r3, [pc, #228]	; (240152e0 <HAL_RCC_OscConfig+0x76c>)
240151fc:	681b      	ldr	r3, [r3, #0]
240151fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
24015202:	2b00      	cmp	r3, #0
24015204:	d1f0      	bne.n	240151e8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
24015206:	4b36      	ldr	r3, [pc, #216]	; (240152e0 <HAL_RCC_OscConfig+0x76c>)
24015208:	6a9a      	ldr	r2, [r3, #40]	; 0x28
2401520a:	4b37      	ldr	r3, [pc, #220]	; (240152e8 <HAL_RCC_OscConfig+0x774>)
2401520c:	4013      	ands	r3, r2
2401520e:	687a      	ldr	r2, [r7, #4]
24015210:	6a91      	ldr	r1, [r2, #40]	; 0x28
24015212:	687a      	ldr	r2, [r7, #4]
24015214:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
24015216:	0112      	lsls	r2, r2, #4
24015218:	430a      	orrs	r2, r1
2401521a:	4931      	ldr	r1, [pc, #196]	; (240152e0 <HAL_RCC_OscConfig+0x76c>)
2401521c:	4313      	orrs	r3, r2
2401521e:	628b      	str	r3, [r1, #40]	; 0x28
24015220:	687b      	ldr	r3, [r7, #4]
24015222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24015224:	3b01      	subs	r3, #1
24015226:	f3c3 0208 	ubfx	r2, r3, #0, #9
2401522a:	687b      	ldr	r3, [r7, #4]
2401522c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2401522e:	3b01      	subs	r3, #1
24015230:	025b      	lsls	r3, r3, #9
24015232:	b29b      	uxth	r3, r3
24015234:	431a      	orrs	r2, r3
24015236:	687b      	ldr	r3, [r7, #4]
24015238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2401523a:	3b01      	subs	r3, #1
2401523c:	041b      	lsls	r3, r3, #16
2401523e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
24015242:	431a      	orrs	r2, r3
24015244:	687b      	ldr	r3, [r7, #4]
24015246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24015248:	3b01      	subs	r3, #1
2401524a:	061b      	lsls	r3, r3, #24
2401524c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
24015250:	4923      	ldr	r1, [pc, #140]	; (240152e0 <HAL_RCC_OscConfig+0x76c>)
24015252:	4313      	orrs	r3, r2
24015254:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
24015256:	4b22      	ldr	r3, [pc, #136]	; (240152e0 <HAL_RCC_OscConfig+0x76c>)
24015258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2401525a:	4a21      	ldr	r2, [pc, #132]	; (240152e0 <HAL_RCC_OscConfig+0x76c>)
2401525c:	f023 0301 	bic.w	r3, r3, #1
24015260:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
24015262:	4b1f      	ldr	r3, [pc, #124]	; (240152e0 <HAL_RCC_OscConfig+0x76c>)
24015264:	6b5a      	ldr	r2, [r3, #52]	; 0x34
24015266:	4b21      	ldr	r3, [pc, #132]	; (240152ec <HAL_RCC_OscConfig+0x778>)
24015268:	4013      	ands	r3, r2
2401526a:	687a      	ldr	r2, [r7, #4]
2401526c:	6c92      	ldr	r2, [r2, #72]	; 0x48
2401526e:	00d2      	lsls	r2, r2, #3
24015270:	491b      	ldr	r1, [pc, #108]	; (240152e0 <HAL_RCC_OscConfig+0x76c>)
24015272:	4313      	orrs	r3, r2
24015274:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
24015276:	4b1a      	ldr	r3, [pc, #104]	; (240152e0 <HAL_RCC_OscConfig+0x76c>)
24015278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2401527a:	f023 020c 	bic.w	r2, r3, #12
2401527e:	687b      	ldr	r3, [r7, #4]
24015280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24015282:	4917      	ldr	r1, [pc, #92]	; (240152e0 <HAL_RCC_OscConfig+0x76c>)
24015284:	4313      	orrs	r3, r2
24015286:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
24015288:	4b15      	ldr	r3, [pc, #84]	; (240152e0 <HAL_RCC_OscConfig+0x76c>)
2401528a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2401528c:	f023 0202 	bic.w	r2, r3, #2
24015290:	687b      	ldr	r3, [r7, #4]
24015292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24015294:	4912      	ldr	r1, [pc, #72]	; (240152e0 <HAL_RCC_OscConfig+0x76c>)
24015296:	4313      	orrs	r3, r2
24015298:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
2401529a:	4b11      	ldr	r3, [pc, #68]	; (240152e0 <HAL_RCC_OscConfig+0x76c>)
2401529c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2401529e:	4a10      	ldr	r2, [pc, #64]	; (240152e0 <HAL_RCC_OscConfig+0x76c>)
240152a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
240152a4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
240152a6:	4b0e      	ldr	r3, [pc, #56]	; (240152e0 <HAL_RCC_OscConfig+0x76c>)
240152a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
240152aa:	4a0d      	ldr	r2, [pc, #52]	; (240152e0 <HAL_RCC_OscConfig+0x76c>)
240152ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
240152b0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
240152b2:	4b0b      	ldr	r3, [pc, #44]	; (240152e0 <HAL_RCC_OscConfig+0x76c>)
240152b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
240152b6:	4a0a      	ldr	r2, [pc, #40]	; (240152e0 <HAL_RCC_OscConfig+0x76c>)
240152b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
240152bc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
240152be:	4b08      	ldr	r3, [pc, #32]	; (240152e0 <HAL_RCC_OscConfig+0x76c>)
240152c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
240152c2:	4a07      	ldr	r2, [pc, #28]	; (240152e0 <HAL_RCC_OscConfig+0x76c>)
240152c4:	f043 0301 	orr.w	r3, r3, #1
240152c8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
240152ca:	4b05      	ldr	r3, [pc, #20]	; (240152e0 <HAL_RCC_OscConfig+0x76c>)
240152cc:	681b      	ldr	r3, [r3, #0]
240152ce:	4a04      	ldr	r2, [pc, #16]	; (240152e0 <HAL_RCC_OscConfig+0x76c>)
240152d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
240152d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
240152d6:	f7ed fee5 	bl	240030a4 <HAL_GetTick>
240152da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
240152dc:	e011      	b.n	24015302 <HAL_RCC_OscConfig+0x78e>
240152de:	bf00      	nop
240152e0:	58024400 	.word	0x58024400
240152e4:	58024800 	.word	0x58024800
240152e8:	fffffc0c 	.word	0xfffffc0c
240152ec:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
240152f0:	f7ed fed8 	bl	240030a4 <HAL_GetTick>
240152f4:	4602      	mov	r2, r0
240152f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
240152f8:	1ad3      	subs	r3, r2, r3
240152fa:	2b02      	cmp	r3, #2
240152fc:	d901      	bls.n	24015302 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
240152fe:	2303      	movs	r3, #3
24015300:	e08a      	b.n	24015418 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
24015302:	4b47      	ldr	r3, [pc, #284]	; (24015420 <HAL_RCC_OscConfig+0x8ac>)
24015304:	681b      	ldr	r3, [r3, #0]
24015306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2401530a:	2b00      	cmp	r3, #0
2401530c:	d0f0      	beq.n	240152f0 <HAL_RCC_OscConfig+0x77c>
2401530e:	e082      	b.n	24015416 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
24015310:	4b43      	ldr	r3, [pc, #268]	; (24015420 <HAL_RCC_OscConfig+0x8ac>)
24015312:	681b      	ldr	r3, [r3, #0]
24015314:	4a42      	ldr	r2, [pc, #264]	; (24015420 <HAL_RCC_OscConfig+0x8ac>)
24015316:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
2401531a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2401531c:	f7ed fec2 	bl	240030a4 <HAL_GetTick>
24015320:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
24015322:	e008      	b.n	24015336 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
24015324:	f7ed febe 	bl	240030a4 <HAL_GetTick>
24015328:	4602      	mov	r2, r0
2401532a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2401532c:	1ad3      	subs	r3, r2, r3
2401532e:	2b02      	cmp	r3, #2
24015330:	d901      	bls.n	24015336 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
24015332:	2303      	movs	r3, #3
24015334:	e070      	b.n	24015418 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
24015336:	4b3a      	ldr	r3, [pc, #232]	; (24015420 <HAL_RCC_OscConfig+0x8ac>)
24015338:	681b      	ldr	r3, [r3, #0]
2401533a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2401533e:	2b00      	cmp	r3, #0
24015340:	d1f0      	bne.n	24015324 <HAL_RCC_OscConfig+0x7b0>
24015342:	e068      	b.n	24015416 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
24015344:	4b36      	ldr	r3, [pc, #216]	; (24015420 <HAL_RCC_OscConfig+0x8ac>)
24015346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24015348:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
2401534a:	4b35      	ldr	r3, [pc, #212]	; (24015420 <HAL_RCC_OscConfig+0x8ac>)
2401534c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2401534e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
24015350:	687b      	ldr	r3, [r7, #4]
24015352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24015354:	2b01      	cmp	r3, #1
24015356:	d031      	beq.n	240153bc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
24015358:	693b      	ldr	r3, [r7, #16]
2401535a:	f003 0203 	and.w	r2, r3, #3
2401535e:	687b      	ldr	r3, [r7, #4]
24015360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
24015362:	429a      	cmp	r2, r3
24015364:	d12a      	bne.n	240153bc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
24015366:	693b      	ldr	r3, [r7, #16]
24015368:	091b      	lsrs	r3, r3, #4
2401536a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
2401536e:	687b      	ldr	r3, [r7, #4]
24015370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
24015372:	429a      	cmp	r2, r3
24015374:	d122      	bne.n	240153bc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
24015376:	68fb      	ldr	r3, [r7, #12]
24015378:	f3c3 0208 	ubfx	r2, r3, #0, #9
2401537c:	687b      	ldr	r3, [r7, #4]
2401537e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24015380:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
24015382:	429a      	cmp	r2, r3
24015384:	d11a      	bne.n	240153bc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
24015386:	68fb      	ldr	r3, [r7, #12]
24015388:	0a5b      	lsrs	r3, r3, #9
2401538a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
2401538e:	687b      	ldr	r3, [r7, #4]
24015390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24015392:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
24015394:	429a      	cmp	r2, r3
24015396:	d111      	bne.n	240153bc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
24015398:	68fb      	ldr	r3, [r7, #12]
2401539a:	0c1b      	lsrs	r3, r3, #16
2401539c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
240153a0:	687b      	ldr	r3, [r7, #4]
240153a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
240153a4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
240153a6:	429a      	cmp	r2, r3
240153a8:	d108      	bne.n	240153bc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
240153aa:	68fb      	ldr	r3, [r7, #12]
240153ac:	0e1b      	lsrs	r3, r3, #24
240153ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
240153b2:	687b      	ldr	r3, [r7, #4]
240153b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
240153b6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
240153b8:	429a      	cmp	r2, r3
240153ba:	d001      	beq.n	240153c0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
240153bc:	2301      	movs	r3, #1
240153be:	e02b      	b.n	24015418 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
240153c0:	4b17      	ldr	r3, [pc, #92]	; (24015420 <HAL_RCC_OscConfig+0x8ac>)
240153c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
240153c4:	08db      	lsrs	r3, r3, #3
240153c6:	f3c3 030c 	ubfx	r3, r3, #0, #13
240153ca:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
240153cc:	687b      	ldr	r3, [r7, #4]
240153ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
240153d0:	693a      	ldr	r2, [r7, #16]
240153d2:	429a      	cmp	r2, r3
240153d4:	d01f      	beq.n	24015416 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
240153d6:	4b12      	ldr	r3, [pc, #72]	; (24015420 <HAL_RCC_OscConfig+0x8ac>)
240153d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
240153da:	4a11      	ldr	r2, [pc, #68]	; (24015420 <HAL_RCC_OscConfig+0x8ac>)
240153dc:	f023 0301 	bic.w	r3, r3, #1
240153e0:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
240153e2:	f7ed fe5f 	bl	240030a4 <HAL_GetTick>
240153e6:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
240153e8:	bf00      	nop
240153ea:	f7ed fe5b 	bl	240030a4 <HAL_GetTick>
240153ee:	4602      	mov	r2, r0
240153f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
240153f2:	4293      	cmp	r3, r2
240153f4:	d0f9      	beq.n	240153ea <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
240153f6:	4b0a      	ldr	r3, [pc, #40]	; (24015420 <HAL_RCC_OscConfig+0x8ac>)
240153f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
240153fa:	4b0a      	ldr	r3, [pc, #40]	; (24015424 <HAL_RCC_OscConfig+0x8b0>)
240153fc:	4013      	ands	r3, r2
240153fe:	687a      	ldr	r2, [r7, #4]
24015400:	6c92      	ldr	r2, [r2, #72]	; 0x48
24015402:	00d2      	lsls	r2, r2, #3
24015404:	4906      	ldr	r1, [pc, #24]	; (24015420 <HAL_RCC_OscConfig+0x8ac>)
24015406:	4313      	orrs	r3, r2
24015408:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
2401540a:	4b05      	ldr	r3, [pc, #20]	; (24015420 <HAL_RCC_OscConfig+0x8ac>)
2401540c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2401540e:	4a04      	ldr	r2, [pc, #16]	; (24015420 <HAL_RCC_OscConfig+0x8ac>)
24015410:	f043 0301 	orr.w	r3, r3, #1
24015414:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
24015416:	2300      	movs	r3, #0
}
24015418:	4618      	mov	r0, r3
2401541a:	3730      	adds	r7, #48	; 0x30
2401541c:	46bd      	mov	sp, r7
2401541e:	bd80      	pop	{r7, pc}
24015420:	58024400 	.word	0x58024400
24015424:	ffff0007 	.word	0xffff0007

24015428 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
24015428:	b580      	push	{r7, lr}
2401542a:	b086      	sub	sp, #24
2401542c:	af00      	add	r7, sp, #0
2401542e:	6078      	str	r0, [r7, #4]
24015430:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
24015432:	687b      	ldr	r3, [r7, #4]
24015434:	2b00      	cmp	r3, #0
24015436:	d101      	bne.n	2401543c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
24015438:	2301      	movs	r3, #1
2401543a:	e19c      	b.n	24015776 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
2401543c:	4b8a      	ldr	r3, [pc, #552]	; (24015668 <HAL_RCC_ClockConfig+0x240>)
2401543e:	681b      	ldr	r3, [r3, #0]
24015440:	f003 030f 	and.w	r3, r3, #15
24015444:	683a      	ldr	r2, [r7, #0]
24015446:	429a      	cmp	r2, r3
24015448:	d910      	bls.n	2401546c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
2401544a:	4b87      	ldr	r3, [pc, #540]	; (24015668 <HAL_RCC_ClockConfig+0x240>)
2401544c:	681b      	ldr	r3, [r3, #0]
2401544e:	f023 020f 	bic.w	r2, r3, #15
24015452:	4985      	ldr	r1, [pc, #532]	; (24015668 <HAL_RCC_ClockConfig+0x240>)
24015454:	683b      	ldr	r3, [r7, #0]
24015456:	4313      	orrs	r3, r2
24015458:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
2401545a:	4b83      	ldr	r3, [pc, #524]	; (24015668 <HAL_RCC_ClockConfig+0x240>)
2401545c:	681b      	ldr	r3, [r3, #0]
2401545e:	f003 030f 	and.w	r3, r3, #15
24015462:	683a      	ldr	r2, [r7, #0]
24015464:	429a      	cmp	r2, r3
24015466:	d001      	beq.n	2401546c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
24015468:	2301      	movs	r3, #1
2401546a:	e184      	b.n	24015776 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
2401546c:	687b      	ldr	r3, [r7, #4]
2401546e:	681b      	ldr	r3, [r3, #0]
24015470:	f003 0304 	and.w	r3, r3, #4
24015474:	2b00      	cmp	r3, #0
24015476:	d010      	beq.n	2401549a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
24015478:	687b      	ldr	r3, [r7, #4]
2401547a:	691a      	ldr	r2, [r3, #16]
2401547c:	4b7b      	ldr	r3, [pc, #492]	; (2401566c <HAL_RCC_ClockConfig+0x244>)
2401547e:	699b      	ldr	r3, [r3, #24]
24015480:	f003 0370 	and.w	r3, r3, #112	; 0x70
24015484:	429a      	cmp	r2, r3
24015486:	d908      	bls.n	2401549a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
24015488:	4b78      	ldr	r3, [pc, #480]	; (2401566c <HAL_RCC_ClockConfig+0x244>)
2401548a:	699b      	ldr	r3, [r3, #24]
2401548c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
24015490:	687b      	ldr	r3, [r7, #4]
24015492:	691b      	ldr	r3, [r3, #16]
24015494:	4975      	ldr	r1, [pc, #468]	; (2401566c <HAL_RCC_ClockConfig+0x244>)
24015496:	4313      	orrs	r3, r2
24015498:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
2401549a:	687b      	ldr	r3, [r7, #4]
2401549c:	681b      	ldr	r3, [r3, #0]
2401549e:	f003 0308 	and.w	r3, r3, #8
240154a2:	2b00      	cmp	r3, #0
240154a4:	d010      	beq.n	240154c8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
240154a6:	687b      	ldr	r3, [r7, #4]
240154a8:	695a      	ldr	r2, [r3, #20]
240154aa:	4b70      	ldr	r3, [pc, #448]	; (2401566c <HAL_RCC_ClockConfig+0x244>)
240154ac:	69db      	ldr	r3, [r3, #28]
240154ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
240154b2:	429a      	cmp	r2, r3
240154b4:	d908      	bls.n	240154c8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
240154b6:	4b6d      	ldr	r3, [pc, #436]	; (2401566c <HAL_RCC_ClockConfig+0x244>)
240154b8:	69db      	ldr	r3, [r3, #28]
240154ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
240154be:	687b      	ldr	r3, [r7, #4]
240154c0:	695b      	ldr	r3, [r3, #20]
240154c2:	496a      	ldr	r1, [pc, #424]	; (2401566c <HAL_RCC_ClockConfig+0x244>)
240154c4:	4313      	orrs	r3, r2
240154c6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
240154c8:	687b      	ldr	r3, [r7, #4]
240154ca:	681b      	ldr	r3, [r3, #0]
240154cc:	f003 0310 	and.w	r3, r3, #16
240154d0:	2b00      	cmp	r3, #0
240154d2:	d010      	beq.n	240154f6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
240154d4:	687b      	ldr	r3, [r7, #4]
240154d6:	699a      	ldr	r2, [r3, #24]
240154d8:	4b64      	ldr	r3, [pc, #400]	; (2401566c <HAL_RCC_ClockConfig+0x244>)
240154da:	69db      	ldr	r3, [r3, #28]
240154dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
240154e0:	429a      	cmp	r2, r3
240154e2:	d908      	bls.n	240154f6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
240154e4:	4b61      	ldr	r3, [pc, #388]	; (2401566c <HAL_RCC_ClockConfig+0x244>)
240154e6:	69db      	ldr	r3, [r3, #28]
240154e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
240154ec:	687b      	ldr	r3, [r7, #4]
240154ee:	699b      	ldr	r3, [r3, #24]
240154f0:	495e      	ldr	r1, [pc, #376]	; (2401566c <HAL_RCC_ClockConfig+0x244>)
240154f2:	4313      	orrs	r3, r2
240154f4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
240154f6:	687b      	ldr	r3, [r7, #4]
240154f8:	681b      	ldr	r3, [r3, #0]
240154fa:	f003 0320 	and.w	r3, r3, #32
240154fe:	2b00      	cmp	r3, #0
24015500:	d010      	beq.n	24015524 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
24015502:	687b      	ldr	r3, [r7, #4]
24015504:	69da      	ldr	r2, [r3, #28]
24015506:	4b59      	ldr	r3, [pc, #356]	; (2401566c <HAL_RCC_ClockConfig+0x244>)
24015508:	6a1b      	ldr	r3, [r3, #32]
2401550a:	f003 0370 	and.w	r3, r3, #112	; 0x70
2401550e:	429a      	cmp	r2, r3
24015510:	d908      	bls.n	24015524 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
24015512:	4b56      	ldr	r3, [pc, #344]	; (2401566c <HAL_RCC_ClockConfig+0x244>)
24015514:	6a1b      	ldr	r3, [r3, #32]
24015516:	f023 0270 	bic.w	r2, r3, #112	; 0x70
2401551a:	687b      	ldr	r3, [r7, #4]
2401551c:	69db      	ldr	r3, [r3, #28]
2401551e:	4953      	ldr	r1, [pc, #332]	; (2401566c <HAL_RCC_ClockConfig+0x244>)
24015520:	4313      	orrs	r3, r2
24015522:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
24015524:	687b      	ldr	r3, [r7, #4]
24015526:	681b      	ldr	r3, [r3, #0]
24015528:	f003 0302 	and.w	r3, r3, #2
2401552c:	2b00      	cmp	r3, #0
2401552e:	d010      	beq.n	24015552 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
24015530:	687b      	ldr	r3, [r7, #4]
24015532:	68da      	ldr	r2, [r3, #12]
24015534:	4b4d      	ldr	r3, [pc, #308]	; (2401566c <HAL_RCC_ClockConfig+0x244>)
24015536:	699b      	ldr	r3, [r3, #24]
24015538:	f003 030f 	and.w	r3, r3, #15
2401553c:	429a      	cmp	r2, r3
2401553e:	d908      	bls.n	24015552 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
24015540:	4b4a      	ldr	r3, [pc, #296]	; (2401566c <HAL_RCC_ClockConfig+0x244>)
24015542:	699b      	ldr	r3, [r3, #24]
24015544:	f023 020f 	bic.w	r2, r3, #15
24015548:	687b      	ldr	r3, [r7, #4]
2401554a:	68db      	ldr	r3, [r3, #12]
2401554c:	4947      	ldr	r1, [pc, #284]	; (2401566c <HAL_RCC_ClockConfig+0x244>)
2401554e:	4313      	orrs	r3, r2
24015550:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
24015552:	687b      	ldr	r3, [r7, #4]
24015554:	681b      	ldr	r3, [r3, #0]
24015556:	f003 0301 	and.w	r3, r3, #1
2401555a:	2b00      	cmp	r3, #0
2401555c:	d055      	beq.n	2401560a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
2401555e:	4b43      	ldr	r3, [pc, #268]	; (2401566c <HAL_RCC_ClockConfig+0x244>)
24015560:	699b      	ldr	r3, [r3, #24]
24015562:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
24015566:	687b      	ldr	r3, [r7, #4]
24015568:	689b      	ldr	r3, [r3, #8]
2401556a:	4940      	ldr	r1, [pc, #256]	; (2401566c <HAL_RCC_ClockConfig+0x244>)
2401556c:	4313      	orrs	r3, r2
2401556e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
24015570:	687b      	ldr	r3, [r7, #4]
24015572:	685b      	ldr	r3, [r3, #4]
24015574:	2b02      	cmp	r3, #2
24015576:	d107      	bne.n	24015588 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
24015578:	4b3c      	ldr	r3, [pc, #240]	; (2401566c <HAL_RCC_ClockConfig+0x244>)
2401557a:	681b      	ldr	r3, [r3, #0]
2401557c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
24015580:	2b00      	cmp	r3, #0
24015582:	d121      	bne.n	240155c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
24015584:	2301      	movs	r3, #1
24015586:	e0f6      	b.n	24015776 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
24015588:	687b      	ldr	r3, [r7, #4]
2401558a:	685b      	ldr	r3, [r3, #4]
2401558c:	2b03      	cmp	r3, #3
2401558e:	d107      	bne.n	240155a0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
24015590:	4b36      	ldr	r3, [pc, #216]	; (2401566c <HAL_RCC_ClockConfig+0x244>)
24015592:	681b      	ldr	r3, [r3, #0]
24015594:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
24015598:	2b00      	cmp	r3, #0
2401559a:	d115      	bne.n	240155c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
2401559c:	2301      	movs	r3, #1
2401559e:	e0ea      	b.n	24015776 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
240155a0:	687b      	ldr	r3, [r7, #4]
240155a2:	685b      	ldr	r3, [r3, #4]
240155a4:	2b01      	cmp	r3, #1
240155a6:	d107      	bne.n	240155b8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
240155a8:	4b30      	ldr	r3, [pc, #192]	; (2401566c <HAL_RCC_ClockConfig+0x244>)
240155aa:	681b      	ldr	r3, [r3, #0]
240155ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
240155b0:	2b00      	cmp	r3, #0
240155b2:	d109      	bne.n	240155c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
240155b4:	2301      	movs	r3, #1
240155b6:	e0de      	b.n	24015776 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
240155b8:	4b2c      	ldr	r3, [pc, #176]	; (2401566c <HAL_RCC_ClockConfig+0x244>)
240155ba:	681b      	ldr	r3, [r3, #0]
240155bc:	f003 0304 	and.w	r3, r3, #4
240155c0:	2b00      	cmp	r3, #0
240155c2:	d101      	bne.n	240155c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
240155c4:	2301      	movs	r3, #1
240155c6:	e0d6      	b.n	24015776 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
240155c8:	4b28      	ldr	r3, [pc, #160]	; (2401566c <HAL_RCC_ClockConfig+0x244>)
240155ca:	691b      	ldr	r3, [r3, #16]
240155cc:	f023 0207 	bic.w	r2, r3, #7
240155d0:	687b      	ldr	r3, [r7, #4]
240155d2:	685b      	ldr	r3, [r3, #4]
240155d4:	4925      	ldr	r1, [pc, #148]	; (2401566c <HAL_RCC_ClockConfig+0x244>)
240155d6:	4313      	orrs	r3, r2
240155d8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
240155da:	f7ed fd63 	bl	240030a4 <HAL_GetTick>
240155de:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
240155e0:	e00a      	b.n	240155f8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
240155e2:	f7ed fd5f 	bl	240030a4 <HAL_GetTick>
240155e6:	4602      	mov	r2, r0
240155e8:	697b      	ldr	r3, [r7, #20]
240155ea:	1ad3      	subs	r3, r2, r3
240155ec:	f241 3288 	movw	r2, #5000	; 0x1388
240155f0:	4293      	cmp	r3, r2
240155f2:	d901      	bls.n	240155f8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
240155f4:	2303      	movs	r3, #3
240155f6:	e0be      	b.n	24015776 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
240155f8:	4b1c      	ldr	r3, [pc, #112]	; (2401566c <HAL_RCC_ClockConfig+0x244>)
240155fa:	691b      	ldr	r3, [r3, #16]
240155fc:	f003 0238 	and.w	r2, r3, #56	; 0x38
24015600:	687b      	ldr	r3, [r7, #4]
24015602:	685b      	ldr	r3, [r3, #4]
24015604:	00db      	lsls	r3, r3, #3
24015606:	429a      	cmp	r2, r3
24015608:	d1eb      	bne.n	240155e2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
2401560a:	687b      	ldr	r3, [r7, #4]
2401560c:	681b      	ldr	r3, [r3, #0]
2401560e:	f003 0302 	and.w	r3, r3, #2
24015612:	2b00      	cmp	r3, #0
24015614:	d010      	beq.n	24015638 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
24015616:	687b      	ldr	r3, [r7, #4]
24015618:	68da      	ldr	r2, [r3, #12]
2401561a:	4b14      	ldr	r3, [pc, #80]	; (2401566c <HAL_RCC_ClockConfig+0x244>)
2401561c:	699b      	ldr	r3, [r3, #24]
2401561e:	f003 030f 	and.w	r3, r3, #15
24015622:	429a      	cmp	r2, r3
24015624:	d208      	bcs.n	24015638 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
24015626:	4b11      	ldr	r3, [pc, #68]	; (2401566c <HAL_RCC_ClockConfig+0x244>)
24015628:	699b      	ldr	r3, [r3, #24]
2401562a:	f023 020f 	bic.w	r2, r3, #15
2401562e:	687b      	ldr	r3, [r7, #4]
24015630:	68db      	ldr	r3, [r3, #12]
24015632:	490e      	ldr	r1, [pc, #56]	; (2401566c <HAL_RCC_ClockConfig+0x244>)
24015634:	4313      	orrs	r3, r2
24015636:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
24015638:	4b0b      	ldr	r3, [pc, #44]	; (24015668 <HAL_RCC_ClockConfig+0x240>)
2401563a:	681b      	ldr	r3, [r3, #0]
2401563c:	f003 030f 	and.w	r3, r3, #15
24015640:	683a      	ldr	r2, [r7, #0]
24015642:	429a      	cmp	r2, r3
24015644:	d214      	bcs.n	24015670 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
24015646:	4b08      	ldr	r3, [pc, #32]	; (24015668 <HAL_RCC_ClockConfig+0x240>)
24015648:	681b      	ldr	r3, [r3, #0]
2401564a:	f023 020f 	bic.w	r2, r3, #15
2401564e:	4906      	ldr	r1, [pc, #24]	; (24015668 <HAL_RCC_ClockConfig+0x240>)
24015650:	683b      	ldr	r3, [r7, #0]
24015652:	4313      	orrs	r3, r2
24015654:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
24015656:	4b04      	ldr	r3, [pc, #16]	; (24015668 <HAL_RCC_ClockConfig+0x240>)
24015658:	681b      	ldr	r3, [r3, #0]
2401565a:	f003 030f 	and.w	r3, r3, #15
2401565e:	683a      	ldr	r2, [r7, #0]
24015660:	429a      	cmp	r2, r3
24015662:	d005      	beq.n	24015670 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
24015664:	2301      	movs	r3, #1
24015666:	e086      	b.n	24015776 <HAL_RCC_ClockConfig+0x34e>
24015668:	52002000 	.word	0x52002000
2401566c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
24015670:	687b      	ldr	r3, [r7, #4]
24015672:	681b      	ldr	r3, [r3, #0]
24015674:	f003 0304 	and.w	r3, r3, #4
24015678:	2b00      	cmp	r3, #0
2401567a:	d010      	beq.n	2401569e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
2401567c:	687b      	ldr	r3, [r7, #4]
2401567e:	691a      	ldr	r2, [r3, #16]
24015680:	4b3f      	ldr	r3, [pc, #252]	; (24015780 <HAL_RCC_ClockConfig+0x358>)
24015682:	699b      	ldr	r3, [r3, #24]
24015684:	f003 0370 	and.w	r3, r3, #112	; 0x70
24015688:	429a      	cmp	r2, r3
2401568a:	d208      	bcs.n	2401569e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
2401568c:	4b3c      	ldr	r3, [pc, #240]	; (24015780 <HAL_RCC_ClockConfig+0x358>)
2401568e:	699b      	ldr	r3, [r3, #24]
24015690:	f023 0270 	bic.w	r2, r3, #112	; 0x70
24015694:	687b      	ldr	r3, [r7, #4]
24015696:	691b      	ldr	r3, [r3, #16]
24015698:	4939      	ldr	r1, [pc, #228]	; (24015780 <HAL_RCC_ClockConfig+0x358>)
2401569a:	4313      	orrs	r3, r2
2401569c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
2401569e:	687b      	ldr	r3, [r7, #4]
240156a0:	681b      	ldr	r3, [r3, #0]
240156a2:	f003 0308 	and.w	r3, r3, #8
240156a6:	2b00      	cmp	r3, #0
240156a8:	d010      	beq.n	240156cc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
240156aa:	687b      	ldr	r3, [r7, #4]
240156ac:	695a      	ldr	r2, [r3, #20]
240156ae:	4b34      	ldr	r3, [pc, #208]	; (24015780 <HAL_RCC_ClockConfig+0x358>)
240156b0:	69db      	ldr	r3, [r3, #28]
240156b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
240156b6:	429a      	cmp	r2, r3
240156b8:	d208      	bcs.n	240156cc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
240156ba:	4b31      	ldr	r3, [pc, #196]	; (24015780 <HAL_RCC_ClockConfig+0x358>)
240156bc:	69db      	ldr	r3, [r3, #28]
240156be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
240156c2:	687b      	ldr	r3, [r7, #4]
240156c4:	695b      	ldr	r3, [r3, #20]
240156c6:	492e      	ldr	r1, [pc, #184]	; (24015780 <HAL_RCC_ClockConfig+0x358>)
240156c8:	4313      	orrs	r3, r2
240156ca:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
240156cc:	687b      	ldr	r3, [r7, #4]
240156ce:	681b      	ldr	r3, [r3, #0]
240156d0:	f003 0310 	and.w	r3, r3, #16
240156d4:	2b00      	cmp	r3, #0
240156d6:	d010      	beq.n	240156fa <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
240156d8:	687b      	ldr	r3, [r7, #4]
240156da:	699a      	ldr	r2, [r3, #24]
240156dc:	4b28      	ldr	r3, [pc, #160]	; (24015780 <HAL_RCC_ClockConfig+0x358>)
240156de:	69db      	ldr	r3, [r3, #28]
240156e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
240156e4:	429a      	cmp	r2, r3
240156e6:	d208      	bcs.n	240156fa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
240156e8:	4b25      	ldr	r3, [pc, #148]	; (24015780 <HAL_RCC_ClockConfig+0x358>)
240156ea:	69db      	ldr	r3, [r3, #28]
240156ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
240156f0:	687b      	ldr	r3, [r7, #4]
240156f2:	699b      	ldr	r3, [r3, #24]
240156f4:	4922      	ldr	r1, [pc, #136]	; (24015780 <HAL_RCC_ClockConfig+0x358>)
240156f6:	4313      	orrs	r3, r2
240156f8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
240156fa:	687b      	ldr	r3, [r7, #4]
240156fc:	681b      	ldr	r3, [r3, #0]
240156fe:	f003 0320 	and.w	r3, r3, #32
24015702:	2b00      	cmp	r3, #0
24015704:	d010      	beq.n	24015728 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
24015706:	687b      	ldr	r3, [r7, #4]
24015708:	69da      	ldr	r2, [r3, #28]
2401570a:	4b1d      	ldr	r3, [pc, #116]	; (24015780 <HAL_RCC_ClockConfig+0x358>)
2401570c:	6a1b      	ldr	r3, [r3, #32]
2401570e:	f003 0370 	and.w	r3, r3, #112	; 0x70
24015712:	429a      	cmp	r2, r3
24015714:	d208      	bcs.n	24015728 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
24015716:	4b1a      	ldr	r3, [pc, #104]	; (24015780 <HAL_RCC_ClockConfig+0x358>)
24015718:	6a1b      	ldr	r3, [r3, #32]
2401571a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
2401571e:	687b      	ldr	r3, [r7, #4]
24015720:	69db      	ldr	r3, [r3, #28]
24015722:	4917      	ldr	r1, [pc, #92]	; (24015780 <HAL_RCC_ClockConfig+0x358>)
24015724:	4313      	orrs	r3, r2
24015726:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
24015728:	f000 f8be 	bl	240158a8 <HAL_RCC_GetSysClockFreq>
2401572c:	4602      	mov	r2, r0
2401572e:	4b14      	ldr	r3, [pc, #80]	; (24015780 <HAL_RCC_ClockConfig+0x358>)
24015730:	699b      	ldr	r3, [r3, #24]
24015732:	0a1b      	lsrs	r3, r3, #8
24015734:	f003 030f 	and.w	r3, r3, #15
24015738:	4912      	ldr	r1, [pc, #72]	; (24015784 <HAL_RCC_ClockConfig+0x35c>)
2401573a:	5ccb      	ldrb	r3, [r1, r3]
2401573c:	f003 031f 	and.w	r3, r3, #31
24015740:	fa22 f303 	lsr.w	r3, r2, r3
24015744:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24015746:	4b0e      	ldr	r3, [pc, #56]	; (24015780 <HAL_RCC_ClockConfig+0x358>)
24015748:	699b      	ldr	r3, [r3, #24]
2401574a:	f003 030f 	and.w	r3, r3, #15
2401574e:	4a0d      	ldr	r2, [pc, #52]	; (24015784 <HAL_RCC_ClockConfig+0x35c>)
24015750:	5cd3      	ldrb	r3, [r2, r3]
24015752:	f003 031f 	and.w	r3, r3, #31
24015756:	693a      	ldr	r2, [r7, #16]
24015758:	fa22 f303 	lsr.w	r3, r2, r3
2401575c:	4a0a      	ldr	r2, [pc, #40]	; (24015788 <HAL_RCC_ClockConfig+0x360>)
2401575e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
24015760:	4a0a      	ldr	r2, [pc, #40]	; (2401578c <HAL_RCC_ClockConfig+0x364>)
24015762:	693b      	ldr	r3, [r7, #16]
24015764:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
24015766:	4b0a      	ldr	r3, [pc, #40]	; (24015790 <HAL_RCC_ClockConfig+0x368>)
24015768:	681b      	ldr	r3, [r3, #0]
2401576a:	4618      	mov	r0, r3
2401576c:	f7ed fc50 	bl	24003010 <HAL_InitTick>
24015770:	4603      	mov	r3, r0
24015772:	73fb      	strb	r3, [r7, #15]

  return halstatus;
24015774:	7bfb      	ldrb	r3, [r7, #15]
}
24015776:	4618      	mov	r0, r3
24015778:	3718      	adds	r7, #24
2401577a:	46bd      	mov	sp, r7
2401577c:	bd80      	pop	{r7, pc}
2401577e:	bf00      	nop
24015780:	58024400 	.word	0x58024400
24015784:	24019ad0 	.word	0x24019ad0
24015788:	240004b4 	.word	0x240004b4
2401578c:	240004b0 	.word	0x240004b0
24015790:	240004b8 	.word	0x240004b8

24015794 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
24015794:	b580      	push	{r7, lr}
24015796:	b08c      	sub	sp, #48	; 0x30
24015798:	af00      	add	r7, sp, #0
2401579a:	60f8      	str	r0, [r7, #12]
2401579c:	60b9      	str	r1, [r7, #8]
2401579e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
240157a0:	68fb      	ldr	r3, [r7, #12]
240157a2:	2b00      	cmp	r3, #0
240157a4:	d12a      	bne.n	240157fc <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
240157a6:	4b2d      	ldr	r3, [pc, #180]	; (2401585c <HAL_RCC_MCOConfig+0xc8>)
240157a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
240157ac:	4a2b      	ldr	r2, [pc, #172]	; (2401585c <HAL_RCC_MCOConfig+0xc8>)
240157ae:	f043 0301 	orr.w	r3, r3, #1
240157b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
240157b6:	4b29      	ldr	r3, [pc, #164]	; (2401585c <HAL_RCC_MCOConfig+0xc8>)
240157b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
240157bc:	f003 0301 	and.w	r3, r3, #1
240157c0:	61bb      	str	r3, [r7, #24]
240157c2:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
240157c4:	f44f 7380 	mov.w	r3, #256	; 0x100
240157c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
240157ca:	2302      	movs	r3, #2
240157cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
240157ce:	2303      	movs	r3, #3
240157d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
240157d2:	2300      	movs	r3, #0
240157d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
240157d6:	2300      	movs	r3, #0
240157d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
240157da:	f107 031c 	add.w	r3, r7, #28
240157de:	4619      	mov	r1, r3
240157e0:	481f      	ldr	r0, [pc, #124]	; (24015860 <HAL_RCC_MCOConfig+0xcc>)
240157e2:	f7f5 fa17 	bl	2400ac14 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
240157e6:	4b1d      	ldr	r3, [pc, #116]	; (2401585c <HAL_RCC_MCOConfig+0xc8>)
240157e8:	691b      	ldr	r3, [r3, #16]
240157ea:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
240157ee:	68b9      	ldr	r1, [r7, #8]
240157f0:	687b      	ldr	r3, [r7, #4]
240157f2:	430b      	orrs	r3, r1
240157f4:	4919      	ldr	r1, [pc, #100]	; (2401585c <HAL_RCC_MCOConfig+0xc8>)
240157f6:	4313      	orrs	r3, r2
240157f8:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
240157fa:	e02a      	b.n	24015852 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
240157fc:	4b17      	ldr	r3, [pc, #92]	; (2401585c <HAL_RCC_MCOConfig+0xc8>)
240157fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24015802:	4a16      	ldr	r2, [pc, #88]	; (2401585c <HAL_RCC_MCOConfig+0xc8>)
24015804:	f043 0304 	orr.w	r3, r3, #4
24015808:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
2401580c:	4b13      	ldr	r3, [pc, #76]	; (2401585c <HAL_RCC_MCOConfig+0xc8>)
2401580e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24015812:	f003 0304 	and.w	r3, r3, #4
24015816:	617b      	str	r3, [r7, #20]
24015818:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
2401581a:	f44f 7300 	mov.w	r3, #512	; 0x200
2401581e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24015820:	2302      	movs	r3, #2
24015822:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
24015824:	2303      	movs	r3, #3
24015826:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24015828:	2300      	movs	r3, #0
2401582a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
2401582c:	2300      	movs	r3, #0
2401582e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
24015830:	f107 031c 	add.w	r3, r7, #28
24015834:	4619      	mov	r1, r3
24015836:	480b      	ldr	r0, [pc, #44]	; (24015864 <HAL_RCC_MCOConfig+0xd0>)
24015838:	f7f5 f9ec 	bl	2400ac14 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
2401583c:	4b07      	ldr	r3, [pc, #28]	; (2401585c <HAL_RCC_MCOConfig+0xc8>)
2401583e:	691b      	ldr	r3, [r3, #16]
24015840:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
24015844:	687b      	ldr	r3, [r7, #4]
24015846:	01d9      	lsls	r1, r3, #7
24015848:	68bb      	ldr	r3, [r7, #8]
2401584a:	430b      	orrs	r3, r1
2401584c:	4903      	ldr	r1, [pc, #12]	; (2401585c <HAL_RCC_MCOConfig+0xc8>)
2401584e:	4313      	orrs	r3, r2
24015850:	610b      	str	r3, [r1, #16]
}
24015852:	bf00      	nop
24015854:	3730      	adds	r7, #48	; 0x30
24015856:	46bd      	mov	sp, r7
24015858:	bd80      	pop	{r7, pc}
2401585a:	bf00      	nop
2401585c:	58024400 	.word	0x58024400
24015860:	58020000 	.word	0x58020000
24015864:	58020800 	.word	0x58020800

24015868 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
24015868:	b480      	push	{r7}
2401586a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
2401586c:	4b05      	ldr	r3, [pc, #20]	; (24015884 <HAL_RCC_EnableCSS+0x1c>)
2401586e:	681b      	ldr	r3, [r3, #0]
24015870:	4a04      	ldr	r2, [pc, #16]	; (24015884 <HAL_RCC_EnableCSS+0x1c>)
24015872:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
24015876:	6013      	str	r3, [r2, #0]
}
24015878:	bf00      	nop
2401587a:	46bd      	mov	sp, r7
2401587c:	f85d 7b04 	ldr.w	r7, [sp], #4
24015880:	4770      	bx	lr
24015882:	bf00      	nop
24015884:	58024400 	.word	0x58024400

24015888 <HAL_RCC_DisableCSS>:
/**
  * @brief  Disables the Clock Security System.
  * @retval None
  */
void HAL_RCC_DisableCSS(void)
{
24015888:	b480      	push	{r7}
2401588a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_CSSHSEON);
2401588c:	4b05      	ldr	r3, [pc, #20]	; (240158a4 <HAL_RCC_DisableCSS+0x1c>)
2401588e:	681b      	ldr	r3, [r3, #0]
24015890:	4a04      	ldr	r2, [pc, #16]	; (240158a4 <HAL_RCC_DisableCSS+0x1c>)
24015892:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
24015896:	6013      	str	r3, [r2, #0]
}
24015898:	bf00      	nop
2401589a:	46bd      	mov	sp, r7
2401589c:	f85d 7b04 	ldr.w	r7, [sp], #4
240158a0:	4770      	bx	lr
240158a2:	bf00      	nop
240158a4:	58024400 	.word	0x58024400

240158a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
240158a8:	b480      	push	{r7}
240158aa:	b089      	sub	sp, #36	; 0x24
240158ac:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
240158ae:	4bb3      	ldr	r3, [pc, #716]	; (24015b7c <HAL_RCC_GetSysClockFreq+0x2d4>)
240158b0:	691b      	ldr	r3, [r3, #16]
240158b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
240158b6:	2b18      	cmp	r3, #24
240158b8:	f200 8155 	bhi.w	24015b66 <HAL_RCC_GetSysClockFreq+0x2be>
240158bc:	a201      	add	r2, pc, #4	; (adr r2, 240158c4 <HAL_RCC_GetSysClockFreq+0x1c>)
240158be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
240158c2:	bf00      	nop
240158c4:	24015929 	.word	0x24015929
240158c8:	24015b67 	.word	0x24015b67
240158cc:	24015b67 	.word	0x24015b67
240158d0:	24015b67 	.word	0x24015b67
240158d4:	24015b67 	.word	0x24015b67
240158d8:	24015b67 	.word	0x24015b67
240158dc:	24015b67 	.word	0x24015b67
240158e0:	24015b67 	.word	0x24015b67
240158e4:	2401594f 	.word	0x2401594f
240158e8:	24015b67 	.word	0x24015b67
240158ec:	24015b67 	.word	0x24015b67
240158f0:	24015b67 	.word	0x24015b67
240158f4:	24015b67 	.word	0x24015b67
240158f8:	24015b67 	.word	0x24015b67
240158fc:	24015b67 	.word	0x24015b67
24015900:	24015b67 	.word	0x24015b67
24015904:	24015955 	.word	0x24015955
24015908:	24015b67 	.word	0x24015b67
2401590c:	24015b67 	.word	0x24015b67
24015910:	24015b67 	.word	0x24015b67
24015914:	24015b67 	.word	0x24015b67
24015918:	24015b67 	.word	0x24015b67
2401591c:	24015b67 	.word	0x24015b67
24015920:	24015b67 	.word	0x24015b67
24015924:	2401595b 	.word	0x2401595b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
24015928:	4b94      	ldr	r3, [pc, #592]	; (24015b7c <HAL_RCC_GetSysClockFreq+0x2d4>)
2401592a:	681b      	ldr	r3, [r3, #0]
2401592c:	f003 0320 	and.w	r3, r3, #32
24015930:	2b00      	cmp	r3, #0
24015932:	d009      	beq.n	24015948 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24015934:	4b91      	ldr	r3, [pc, #580]	; (24015b7c <HAL_RCC_GetSysClockFreq+0x2d4>)
24015936:	681b      	ldr	r3, [r3, #0]
24015938:	08db      	lsrs	r3, r3, #3
2401593a:	f003 0303 	and.w	r3, r3, #3
2401593e:	4a90      	ldr	r2, [pc, #576]	; (24015b80 <HAL_RCC_GetSysClockFreq+0x2d8>)
24015940:	fa22 f303 	lsr.w	r3, r2, r3
24015944:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
24015946:	e111      	b.n	24015b6c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
24015948:	4b8d      	ldr	r3, [pc, #564]	; (24015b80 <HAL_RCC_GetSysClockFreq+0x2d8>)
2401594a:	61bb      	str	r3, [r7, #24]
      break;
2401594c:	e10e      	b.n	24015b6c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
2401594e:	4b8d      	ldr	r3, [pc, #564]	; (24015b84 <HAL_RCC_GetSysClockFreq+0x2dc>)
24015950:	61bb      	str	r3, [r7, #24]
      break;
24015952:	e10b      	b.n	24015b6c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
24015954:	4b8c      	ldr	r3, [pc, #560]	; (24015b88 <HAL_RCC_GetSysClockFreq+0x2e0>)
24015956:	61bb      	str	r3, [r7, #24]
      break;
24015958:	e108      	b.n	24015b6c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
2401595a:	4b88      	ldr	r3, [pc, #544]	; (24015b7c <HAL_RCC_GetSysClockFreq+0x2d4>)
2401595c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2401595e:	f003 0303 	and.w	r3, r3, #3
24015962:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
24015964:	4b85      	ldr	r3, [pc, #532]	; (24015b7c <HAL_RCC_GetSysClockFreq+0x2d4>)
24015966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24015968:	091b      	lsrs	r3, r3, #4
2401596a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2401596e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
24015970:	4b82      	ldr	r3, [pc, #520]	; (24015b7c <HAL_RCC_GetSysClockFreq+0x2d4>)
24015972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24015974:	f003 0301 	and.w	r3, r3, #1
24015978:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
2401597a:	4b80      	ldr	r3, [pc, #512]	; (24015b7c <HAL_RCC_GetSysClockFreq+0x2d4>)
2401597c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2401597e:	08db      	lsrs	r3, r3, #3
24015980:	f3c3 030c 	ubfx	r3, r3, #0, #13
24015984:	68fa      	ldr	r2, [r7, #12]
24015986:	fb02 f303 	mul.w	r3, r2, r3
2401598a:	ee07 3a90 	vmov	s15, r3
2401598e:	eef8 7a67 	vcvt.f32.u32	s15, s15
24015992:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
24015996:	693b      	ldr	r3, [r7, #16]
24015998:	2b00      	cmp	r3, #0
2401599a:	f000 80e1 	beq.w	24015b60 <HAL_RCC_GetSysClockFreq+0x2b8>
2401599e:	697b      	ldr	r3, [r7, #20]
240159a0:	2b02      	cmp	r3, #2
240159a2:	f000 8083 	beq.w	24015aac <HAL_RCC_GetSysClockFreq+0x204>
240159a6:	697b      	ldr	r3, [r7, #20]
240159a8:	2b02      	cmp	r3, #2
240159aa:	f200 80a1 	bhi.w	24015af0 <HAL_RCC_GetSysClockFreq+0x248>
240159ae:	697b      	ldr	r3, [r7, #20]
240159b0:	2b00      	cmp	r3, #0
240159b2:	d003      	beq.n	240159bc <HAL_RCC_GetSysClockFreq+0x114>
240159b4:	697b      	ldr	r3, [r7, #20]
240159b6:	2b01      	cmp	r3, #1
240159b8:	d056      	beq.n	24015a68 <HAL_RCC_GetSysClockFreq+0x1c0>
240159ba:	e099      	b.n	24015af0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
240159bc:	4b6f      	ldr	r3, [pc, #444]	; (24015b7c <HAL_RCC_GetSysClockFreq+0x2d4>)
240159be:	681b      	ldr	r3, [r3, #0]
240159c0:	f003 0320 	and.w	r3, r3, #32
240159c4:	2b00      	cmp	r3, #0
240159c6:	d02d      	beq.n	24015a24 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
240159c8:	4b6c      	ldr	r3, [pc, #432]	; (24015b7c <HAL_RCC_GetSysClockFreq+0x2d4>)
240159ca:	681b      	ldr	r3, [r3, #0]
240159cc:	08db      	lsrs	r3, r3, #3
240159ce:	f003 0303 	and.w	r3, r3, #3
240159d2:	4a6b      	ldr	r2, [pc, #428]	; (24015b80 <HAL_RCC_GetSysClockFreq+0x2d8>)
240159d4:	fa22 f303 	lsr.w	r3, r2, r3
240159d8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
240159da:	687b      	ldr	r3, [r7, #4]
240159dc:	ee07 3a90 	vmov	s15, r3
240159e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
240159e4:	693b      	ldr	r3, [r7, #16]
240159e6:	ee07 3a90 	vmov	s15, r3
240159ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
240159ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
240159f2:	4b62      	ldr	r3, [pc, #392]	; (24015b7c <HAL_RCC_GetSysClockFreq+0x2d4>)
240159f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
240159f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
240159fa:	ee07 3a90 	vmov	s15, r3
240159fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
24015a02:	ed97 6a02 	vldr	s12, [r7, #8]
24015a06:	eddf 5a61 	vldr	s11, [pc, #388]	; 24015b8c <HAL_RCC_GetSysClockFreq+0x2e4>
24015a0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
24015a0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
24015a12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24015a16:	ee77 7aa6 	vadd.f32	s15, s15, s13
24015a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
24015a1e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
24015a22:	e087      	b.n	24015b34 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24015a24:	693b      	ldr	r3, [r7, #16]
24015a26:	ee07 3a90 	vmov	s15, r3
24015a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
24015a2e:	eddf 6a58 	vldr	s13, [pc, #352]	; 24015b90 <HAL_RCC_GetSysClockFreq+0x2e8>
24015a32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24015a36:	4b51      	ldr	r3, [pc, #324]	; (24015b7c <HAL_RCC_GetSysClockFreq+0x2d4>)
24015a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24015a3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
24015a3e:	ee07 3a90 	vmov	s15, r3
24015a42:	eef8 6a67 	vcvt.f32.u32	s13, s15
24015a46:	ed97 6a02 	vldr	s12, [r7, #8]
24015a4a:	eddf 5a50 	vldr	s11, [pc, #320]	; 24015b8c <HAL_RCC_GetSysClockFreq+0x2e4>
24015a4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
24015a52:	ee76 7aa7 	vadd.f32	s15, s13, s15
24015a56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24015a5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
24015a5e:	ee67 7a27 	vmul.f32	s15, s14, s15
24015a62:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
24015a66:	e065      	b.n	24015b34 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24015a68:	693b      	ldr	r3, [r7, #16]
24015a6a:	ee07 3a90 	vmov	s15, r3
24015a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
24015a72:	eddf 6a48 	vldr	s13, [pc, #288]	; 24015b94 <HAL_RCC_GetSysClockFreq+0x2ec>
24015a76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24015a7a:	4b40      	ldr	r3, [pc, #256]	; (24015b7c <HAL_RCC_GetSysClockFreq+0x2d4>)
24015a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24015a7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
24015a82:	ee07 3a90 	vmov	s15, r3
24015a86:	eef8 6a67 	vcvt.f32.u32	s13, s15
24015a8a:	ed97 6a02 	vldr	s12, [r7, #8]
24015a8e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 24015b8c <HAL_RCC_GetSysClockFreq+0x2e4>
24015a92:	eec6 7a25 	vdiv.f32	s15, s12, s11
24015a96:	ee76 7aa7 	vadd.f32	s15, s13, s15
24015a9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24015a9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
24015aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
24015aa6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
24015aaa:	e043      	b.n	24015b34 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24015aac:	693b      	ldr	r3, [r7, #16]
24015aae:	ee07 3a90 	vmov	s15, r3
24015ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
24015ab6:	eddf 6a38 	vldr	s13, [pc, #224]	; 24015b98 <HAL_RCC_GetSysClockFreq+0x2f0>
24015aba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24015abe:	4b2f      	ldr	r3, [pc, #188]	; (24015b7c <HAL_RCC_GetSysClockFreq+0x2d4>)
24015ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24015ac2:	f3c3 0308 	ubfx	r3, r3, #0, #9
24015ac6:	ee07 3a90 	vmov	s15, r3
24015aca:	eef8 6a67 	vcvt.f32.u32	s13, s15
24015ace:	ed97 6a02 	vldr	s12, [r7, #8]
24015ad2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 24015b8c <HAL_RCC_GetSysClockFreq+0x2e4>
24015ad6:	eec6 7a25 	vdiv.f32	s15, s12, s11
24015ada:	ee76 7aa7 	vadd.f32	s15, s13, s15
24015ade:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24015ae2:	ee77 7aa6 	vadd.f32	s15, s15, s13
24015ae6:	ee67 7a27 	vmul.f32	s15, s14, s15
24015aea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
24015aee:	e021      	b.n	24015b34 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24015af0:	693b      	ldr	r3, [r7, #16]
24015af2:	ee07 3a90 	vmov	s15, r3
24015af6:	eef8 7a67 	vcvt.f32.u32	s15, s15
24015afa:	eddf 6a26 	vldr	s13, [pc, #152]	; 24015b94 <HAL_RCC_GetSysClockFreq+0x2ec>
24015afe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24015b02:	4b1e      	ldr	r3, [pc, #120]	; (24015b7c <HAL_RCC_GetSysClockFreq+0x2d4>)
24015b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24015b06:	f3c3 0308 	ubfx	r3, r3, #0, #9
24015b0a:	ee07 3a90 	vmov	s15, r3
24015b0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
24015b12:	ed97 6a02 	vldr	s12, [r7, #8]
24015b16:	eddf 5a1d 	vldr	s11, [pc, #116]	; 24015b8c <HAL_RCC_GetSysClockFreq+0x2e4>
24015b1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
24015b1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
24015b22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24015b26:	ee77 7aa6 	vadd.f32	s15, s15, s13
24015b2a:	ee67 7a27 	vmul.f32	s15, s14, s15
24015b2e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
24015b32:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
24015b34:	4b11      	ldr	r3, [pc, #68]	; (24015b7c <HAL_RCC_GetSysClockFreq+0x2d4>)
24015b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24015b38:	0a5b      	lsrs	r3, r3, #9
24015b3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
24015b3e:	3301      	adds	r3, #1
24015b40:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
24015b42:	683b      	ldr	r3, [r7, #0]
24015b44:	ee07 3a90 	vmov	s15, r3
24015b48:	eeb8 7a67 	vcvt.f32.u32	s14, s15
24015b4c:	edd7 6a07 	vldr	s13, [r7, #28]
24015b50:	eec6 7a87 	vdiv.f32	s15, s13, s14
24015b54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24015b58:	ee17 3a90 	vmov	r3, s15
24015b5c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
24015b5e:	e005      	b.n	24015b6c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
24015b60:	2300      	movs	r3, #0
24015b62:	61bb      	str	r3, [r7, #24]
      break;
24015b64:	e002      	b.n	24015b6c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
24015b66:	4b07      	ldr	r3, [pc, #28]	; (24015b84 <HAL_RCC_GetSysClockFreq+0x2dc>)
24015b68:	61bb      	str	r3, [r7, #24]
      break;
24015b6a:	bf00      	nop
  }

  return sysclockfreq;
24015b6c:	69bb      	ldr	r3, [r7, #24]
}
24015b6e:	4618      	mov	r0, r3
24015b70:	3724      	adds	r7, #36	; 0x24
24015b72:	46bd      	mov	sp, r7
24015b74:	f85d 7b04 	ldr.w	r7, [sp], #4
24015b78:	4770      	bx	lr
24015b7a:	bf00      	nop
24015b7c:	58024400 	.word	0x58024400
24015b80:	03d09000 	.word	0x03d09000
24015b84:	003d0900 	.word	0x003d0900
24015b88:	017d7840 	.word	0x017d7840
24015b8c:	46000000 	.word	0x46000000
24015b90:	4c742400 	.word	0x4c742400
24015b94:	4a742400 	.word	0x4a742400
24015b98:	4bbebc20 	.word	0x4bbebc20

24015b9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
24015b9c:	b580      	push	{r7, lr}
24015b9e:	b082      	sub	sp, #8
24015ba0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
24015ba2:	f7ff fe81 	bl	240158a8 <HAL_RCC_GetSysClockFreq>
24015ba6:	4602      	mov	r2, r0
24015ba8:	4b10      	ldr	r3, [pc, #64]	; (24015bec <HAL_RCC_GetHCLKFreq+0x50>)
24015baa:	699b      	ldr	r3, [r3, #24]
24015bac:	0a1b      	lsrs	r3, r3, #8
24015bae:	f003 030f 	and.w	r3, r3, #15
24015bb2:	490f      	ldr	r1, [pc, #60]	; (24015bf0 <HAL_RCC_GetHCLKFreq+0x54>)
24015bb4:	5ccb      	ldrb	r3, [r1, r3]
24015bb6:	f003 031f 	and.w	r3, r3, #31
24015bba:	fa22 f303 	lsr.w	r3, r2, r3
24015bbe:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24015bc0:	4b0a      	ldr	r3, [pc, #40]	; (24015bec <HAL_RCC_GetHCLKFreq+0x50>)
24015bc2:	699b      	ldr	r3, [r3, #24]
24015bc4:	f003 030f 	and.w	r3, r3, #15
24015bc8:	4a09      	ldr	r2, [pc, #36]	; (24015bf0 <HAL_RCC_GetHCLKFreq+0x54>)
24015bca:	5cd3      	ldrb	r3, [r2, r3]
24015bcc:	f003 031f 	and.w	r3, r3, #31
24015bd0:	687a      	ldr	r2, [r7, #4]
24015bd2:	fa22 f303 	lsr.w	r3, r2, r3
24015bd6:	4a07      	ldr	r2, [pc, #28]	; (24015bf4 <HAL_RCC_GetHCLKFreq+0x58>)
24015bd8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
24015bda:	4a07      	ldr	r2, [pc, #28]	; (24015bf8 <HAL_RCC_GetHCLKFreq+0x5c>)
24015bdc:	687b      	ldr	r3, [r7, #4]
24015bde:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
24015be0:	4b04      	ldr	r3, [pc, #16]	; (24015bf4 <HAL_RCC_GetHCLKFreq+0x58>)
24015be2:	681b      	ldr	r3, [r3, #0]
}
24015be4:	4618      	mov	r0, r3
24015be6:	3708      	adds	r7, #8
24015be8:	46bd      	mov	sp, r7
24015bea:	bd80      	pop	{r7, pc}
24015bec:	58024400 	.word	0x58024400
24015bf0:	24019ad0 	.word	0x24019ad0
24015bf4:	240004b4 	.word	0x240004b4
24015bf8:	240004b0 	.word	0x240004b0

24015bfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
24015bfc:	b580      	push	{r7, lr}
24015bfe:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
24015c00:	f7ff ffcc 	bl	24015b9c <HAL_RCC_GetHCLKFreq>
24015c04:	4602      	mov	r2, r0
24015c06:	4b06      	ldr	r3, [pc, #24]	; (24015c20 <HAL_RCC_GetPCLK1Freq+0x24>)
24015c08:	69db      	ldr	r3, [r3, #28]
24015c0a:	091b      	lsrs	r3, r3, #4
24015c0c:	f003 0307 	and.w	r3, r3, #7
24015c10:	4904      	ldr	r1, [pc, #16]	; (24015c24 <HAL_RCC_GetPCLK1Freq+0x28>)
24015c12:	5ccb      	ldrb	r3, [r1, r3]
24015c14:	f003 031f 	and.w	r3, r3, #31
24015c18:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
24015c1c:	4618      	mov	r0, r3
24015c1e:	bd80      	pop	{r7, pc}
24015c20:	58024400 	.word	0x58024400
24015c24:	24019ad0 	.word	0x24019ad0

24015c28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
24015c28:	b580      	push	{r7, lr}
24015c2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
24015c2c:	f7ff ffb6 	bl	24015b9c <HAL_RCC_GetHCLKFreq>
24015c30:	4602      	mov	r2, r0
24015c32:	4b06      	ldr	r3, [pc, #24]	; (24015c4c <HAL_RCC_GetPCLK2Freq+0x24>)
24015c34:	69db      	ldr	r3, [r3, #28]
24015c36:	0a1b      	lsrs	r3, r3, #8
24015c38:	f003 0307 	and.w	r3, r3, #7
24015c3c:	4904      	ldr	r1, [pc, #16]	; (24015c50 <HAL_RCC_GetPCLK2Freq+0x28>)
24015c3e:	5ccb      	ldrb	r3, [r1, r3]
24015c40:	f003 031f 	and.w	r3, r3, #31
24015c44:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
24015c48:	4618      	mov	r0, r3
24015c4a:	bd80      	pop	{r7, pc}
24015c4c:	58024400 	.word	0x58024400
24015c50:	24019ad0 	.word	0x24019ad0

24015c54 <HAL_RCC_GetOscConfig>:
  * @param  RCC_OscInitStruct: pointer to an RCC_OscInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
24015c54:	b580      	push	{r7, lr}
24015c56:	b082      	sub	sp, #8
24015c58:	af00      	add	r7, sp, #0
24015c5a:	6078      	str	r0, [r7, #4]
  /* Set all possible values for the Oscillator type parameter ---------------*/
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_CSI | \
24015c5c:	687b      	ldr	r3, [r7, #4]
24015c5e:	223f      	movs	r2, #63	; 0x3f
24015c60:	601a      	str	r2, [r3, #0]
  else
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
  }
#else
  if ((RCC->CR & RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
24015c62:	4b72      	ldr	r3, [pc, #456]	; (24015e2c <HAL_RCC_GetOscConfig+0x1d8>)
24015c64:	681b      	ldr	r3, [r3, #0]
24015c66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
24015c6a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
24015c6e:	d104      	bne.n	24015c7a <HAL_RCC_GetOscConfig+0x26>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
24015c70:	687b      	ldr	r3, [r7, #4]
24015c72:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
24015c76:	605a      	str	r2, [r3, #4]
24015c78:	e00e      	b.n	24015c98 <HAL_RCC_GetOscConfig+0x44>
  }
  else if ((RCC->CR & RCC_CR_HSEON) == RCC_CR_HSEON)
24015c7a:	4b6c      	ldr	r3, [pc, #432]	; (24015e2c <HAL_RCC_GetOscConfig+0x1d8>)
24015c7c:	681b      	ldr	r3, [r3, #0]
24015c7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
24015c82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
24015c86:	d104      	bne.n	24015c92 <HAL_RCC_GetOscConfig+0x3e>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
24015c88:	687b      	ldr	r3, [r7, #4]
24015c8a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
24015c8e:	605a      	str	r2, [r3, #4]
24015c90:	e002      	b.n	24015c98 <HAL_RCC_GetOscConfig+0x44>
  }
  else
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
24015c92:	687b      	ldr	r3, [r7, #4]
24015c94:	2200      	movs	r2, #0
24015c96:	605a      	str	r2, [r3, #4]
  }
#endif /* RCC_CR_HSEEXT */

  /* Get the CSI configuration -----------------------------------------------*/
  if ((RCC->CR & RCC_CR_CSION) == RCC_CR_CSION)
24015c98:	4b64      	ldr	r3, [pc, #400]	; (24015e2c <HAL_RCC_GetOscConfig+0x1d8>)
24015c9a:	681b      	ldr	r3, [r3, #0]
24015c9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
24015ca0:	2b80      	cmp	r3, #128	; 0x80
24015ca2:	d103      	bne.n	24015cac <HAL_RCC_GetOscConfig+0x58>
  {
    RCC_OscInitStruct->CSIState = RCC_CSI_ON;
24015ca4:	687b      	ldr	r3, [r7, #4]
24015ca6:	2280      	movs	r2, #128	; 0x80
24015ca8:	61da      	str	r2, [r3, #28]
24015caa:	e002      	b.n	24015cb2 <HAL_RCC_GetOscConfig+0x5e>
  }
  else
  {
    RCC_OscInitStruct->CSIState = RCC_CSI_OFF;
24015cac:	687b      	ldr	r3, [r7, #4]
24015cae:	2200      	movs	r2, #0
24015cb0:	61da      	str	r2, [r3, #28]
  }

#if defined(RCC_VER_X)
  if (HAL_GetREVID() <= REV_ID_Y)
24015cb2:	f7ed fa91 	bl	240031d8 <HAL_GetREVID>
24015cb6:	4603      	mov	r3, r0
24015cb8:	f241 0203 	movw	r2, #4099	; 0x1003
24015cbc:	4293      	cmp	r3, r2
24015cbe:	d807      	bhi.n	24015cd0 <HAL_RCC_GetOscConfig+0x7c>
  {
    RCC_OscInitStruct->CSICalibrationValue = (uint32_t)(READ_BIT(RCC->HSICFGR, HAL_RCC_REV_Y_CSITRIM_Msk) >> HAL_RCC_REV_Y_CSITRIM_Pos);
24015cc0:	4b5a      	ldr	r3, [pc, #360]	; (24015e2c <HAL_RCC_GetOscConfig+0x1d8>)
24015cc2:	685b      	ldr	r3, [r3, #4]
24015cc4:	0e9b      	lsrs	r3, r3, #26
24015cc6:	f003 021f 	and.w	r2, r3, #31
24015cca:	687b      	ldr	r3, [r7, #4]
24015ccc:	621a      	str	r2, [r3, #32]
24015cce:	e006      	b.n	24015cde <HAL_RCC_GetOscConfig+0x8a>
  }
  else
  {
    RCC_OscInitStruct->CSICalibrationValue = (uint32_t)(READ_BIT(RCC->CSICFGR, RCC_CSICFGR_CSITRIM) >> RCC_CSICFGR_CSITRIM_Pos);
24015cd0:	4b56      	ldr	r3, [pc, #344]	; (24015e2c <HAL_RCC_GetOscConfig+0x1d8>)
24015cd2:	68db      	ldr	r3, [r3, #12]
24015cd4:	0e1b      	lsrs	r3, r3, #24
24015cd6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
24015cda:	687b      	ldr	r3, [r7, #4]
24015cdc:	621a      	str	r2, [r3, #32]
#else
  RCC_OscInitStruct->CSICalibrationValue = (uint32_t)(READ_BIT(RCC->CSICFGR, RCC_CSICFGR_CSITRIM) >> RCC_CSICFGR_CSITRIM_Pos);
#endif /*RCC_VER_X*/

  /* Get the HSI configuration -----------------------------------------------*/
  if ((RCC->CR & RCC_CR_HSION) == RCC_CR_HSION)
24015cde:	4b53      	ldr	r3, [pc, #332]	; (24015e2c <HAL_RCC_GetOscConfig+0x1d8>)
24015ce0:	681b      	ldr	r3, [r3, #0]
24015ce2:	f003 0301 	and.w	r3, r3, #1
24015ce6:	2b01      	cmp	r3, #1
24015ce8:	d103      	bne.n	24015cf2 <HAL_RCC_GetOscConfig+0x9e>
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_ON;
24015cea:	687b      	ldr	r3, [r7, #4]
24015cec:	2201      	movs	r2, #1
24015cee:	60da      	str	r2, [r3, #12]
24015cf0:	e002      	b.n	24015cf8 <HAL_RCC_GetOscConfig+0xa4>
  }
  else
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
24015cf2:	687b      	ldr	r3, [r7, #4]
24015cf4:	2200      	movs	r2, #0
24015cf6:	60da      	str	r2, [r3, #12]
  }

#if defined(RCC_VER_X)
  if (HAL_GetREVID() <= REV_ID_Y)
24015cf8:	f7ed fa6e 	bl	240031d8 <HAL_GetREVID>
24015cfc:	4603      	mov	r3, r0
24015cfe:	f241 0203 	movw	r2, #4099	; 0x1003
24015d02:	4293      	cmp	r3, r2
24015d04:	d807      	bhi.n	24015d16 <HAL_RCC_GetOscConfig+0xc2>
  {
    RCC_OscInitStruct->HSICalibrationValue = (uint32_t)(READ_BIT(RCC->HSICFGR, HAL_RCC_REV_Y_HSITRIM_Msk) >> HAL_RCC_REV_Y_HSITRIM_Pos);
24015d06:	4b49      	ldr	r3, [pc, #292]	; (24015e2c <HAL_RCC_GetOscConfig+0x1d8>)
24015d08:	685b      	ldr	r3, [r3, #4]
24015d0a:	0b1b      	lsrs	r3, r3, #12
24015d0c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
24015d10:	687b      	ldr	r3, [r7, #4]
24015d12:	611a      	str	r2, [r3, #16]
24015d14:	e006      	b.n	24015d24 <HAL_RCC_GetOscConfig+0xd0>
  }
  else
  {
    RCC_OscInitStruct->HSICalibrationValue = (uint32_t)(READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSITRIM) >> RCC_HSICFGR_HSITRIM_Pos);
24015d16:	4b45      	ldr	r3, [pc, #276]	; (24015e2c <HAL_RCC_GetOscConfig+0x1d8>)
24015d18:	685b      	ldr	r3, [r3, #4]
24015d1a:	0e1b      	lsrs	r3, r3, #24
24015d1c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
24015d20:	687b      	ldr	r3, [r7, #4]
24015d22:	611a      	str	r2, [r3, #16]
  else
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
  }
#else
  if ((RCC->BDCR & RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
24015d24:	4b41      	ldr	r3, [pc, #260]	; (24015e2c <HAL_RCC_GetOscConfig+0x1d8>)
24015d26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24015d28:	f003 0304 	and.w	r3, r3, #4
24015d2c:	2b04      	cmp	r3, #4
24015d2e:	d103      	bne.n	24015d38 <HAL_RCC_GetOscConfig+0xe4>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
24015d30:	687b      	ldr	r3, [r7, #4]
24015d32:	2205      	movs	r2, #5
24015d34:	609a      	str	r2, [r3, #8]
24015d36:	e00c      	b.n	24015d52 <HAL_RCC_GetOscConfig+0xfe>
  }
  else if ((RCC->BDCR & RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
24015d38:	4b3c      	ldr	r3, [pc, #240]	; (24015e2c <HAL_RCC_GetOscConfig+0x1d8>)
24015d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24015d3c:	f003 0301 	and.w	r3, r3, #1
24015d40:	2b01      	cmp	r3, #1
24015d42:	d103      	bne.n	24015d4c <HAL_RCC_GetOscConfig+0xf8>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_ON;
24015d44:	687b      	ldr	r3, [r7, #4]
24015d46:	2201      	movs	r2, #1
24015d48:	609a      	str	r2, [r3, #8]
24015d4a:	e002      	b.n	24015d52 <HAL_RCC_GetOscConfig+0xfe>
  }
  else
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
24015d4c:	687b      	ldr	r3, [r7, #4]
24015d4e:	2200      	movs	r2, #0
24015d50:	609a      	str	r2, [r3, #8]
  }
#endif /* RCC_BDCR_LSEEXT */

  /* Get the LSI configuration -----------------------------------------------*/
  if ((RCC->CSR & RCC_CSR_LSION) == RCC_CSR_LSION)
24015d52:	4b36      	ldr	r3, [pc, #216]	; (24015e2c <HAL_RCC_GetOscConfig+0x1d8>)
24015d54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
24015d56:	f003 0301 	and.w	r3, r3, #1
24015d5a:	2b01      	cmp	r3, #1
24015d5c:	d103      	bne.n	24015d66 <HAL_RCC_GetOscConfig+0x112>
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_ON;
24015d5e:	687b      	ldr	r3, [r7, #4]
24015d60:	2201      	movs	r2, #1
24015d62:	615a      	str	r2, [r3, #20]
24015d64:	e002      	b.n	24015d6c <HAL_RCC_GetOscConfig+0x118>
  }
  else
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
24015d66:	687b      	ldr	r3, [r7, #4]
24015d68:	2200      	movs	r2, #0
24015d6a:	615a      	str	r2, [r3, #20]
  }

  /* Get the HSI48 configuration ---------------------------------------------*/
  if ((RCC->CR & RCC_CR_HSI48ON) == RCC_CR_HSI48ON)
24015d6c:	4b2f      	ldr	r3, [pc, #188]	; (24015e2c <HAL_RCC_GetOscConfig+0x1d8>)
24015d6e:	681b      	ldr	r3, [r3, #0]
24015d70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
24015d74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
24015d78:	d103      	bne.n	24015d82 <HAL_RCC_GetOscConfig+0x12e>
  {
    RCC_OscInitStruct->HSI48State = RCC_HSI48_ON;
24015d7a:	687b      	ldr	r3, [r7, #4]
24015d7c:	2201      	movs	r2, #1
24015d7e:	619a      	str	r2, [r3, #24]
24015d80:	e002      	b.n	24015d88 <HAL_RCC_GetOscConfig+0x134>
  }
  else
  {
    RCC_OscInitStruct->HSI48State = RCC_HSI48_OFF;
24015d82:	687b      	ldr	r3, [r7, #4]
24015d84:	2200      	movs	r2, #0
24015d86:	619a      	str	r2, [r3, #24]
  }

  /* Get the PLL configuration -----------------------------------------------*/
  if ((RCC->CR & RCC_CR_PLLON) == RCC_CR_PLLON)
24015d88:	4b28      	ldr	r3, [pc, #160]	; (24015e2c <HAL_RCC_GetOscConfig+0x1d8>)
24015d8a:	681b      	ldr	r3, [r3, #0]
24015d8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
24015d90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
24015d94:	d103      	bne.n	24015d9e <HAL_RCC_GetOscConfig+0x14a>
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
24015d96:	687b      	ldr	r3, [r7, #4]
24015d98:	2202      	movs	r2, #2
24015d9a:	625a      	str	r2, [r3, #36]	; 0x24
24015d9c:	e002      	b.n	24015da4 <HAL_RCC_GetOscConfig+0x150>
  }
  else
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
24015d9e:	687b      	ldr	r3, [r7, #4]
24015da0:	2201      	movs	r2, #1
24015da2:	625a      	str	r2, [r3, #36]	; 0x24
  }
  RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24015da4:	4b21      	ldr	r3, [pc, #132]	; (24015e2c <HAL_RCC_GetOscConfig+0x1d8>)
24015da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24015da8:	f003 0203 	and.w	r2, r3, #3
24015dac:	687b      	ldr	r3, [r7, #4]
24015dae:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct->PLL.PLLM = (uint32_t)((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos);
24015db0:	4b1e      	ldr	r3, [pc, #120]	; (24015e2c <HAL_RCC_GetOscConfig+0x1d8>)
24015db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24015db4:	091b      	lsrs	r3, r3, #4
24015db6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
24015dba:	687b      	ldr	r3, [r7, #4]
24015dbc:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct->PLL.PLLN = (uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) >> RCC_PLL1DIVR_N1_Pos) + 1U;
24015dbe:	4b1b      	ldr	r3, [pc, #108]	; (24015e2c <HAL_RCC_GetOscConfig+0x1d8>)
24015dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24015dc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
24015dc6:	1c5a      	adds	r2, r3, #1
24015dc8:	687b      	ldr	r3, [r7, #4]
24015dca:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct->PLL.PLLR = (uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) + 1U;
24015dcc:	4b17      	ldr	r3, [pc, #92]	; (24015e2c <HAL_RCC_GetOscConfig+0x1d8>)
24015dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24015dd0:	0e1b      	lsrs	r3, r3, #24
24015dd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
24015dd6:	1c5a      	adds	r2, r3, #1
24015dd8:	687b      	ldr	r3, [r7, #4]
24015dda:	63da      	str	r2, [r3, #60]	; 0x3c
  RCC_OscInitStruct->PLL.PLLP = (uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) + 1U;
24015ddc:	4b13      	ldr	r3, [pc, #76]	; (24015e2c <HAL_RCC_GetOscConfig+0x1d8>)
24015dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24015de0:	0a5b      	lsrs	r3, r3, #9
24015de2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
24015de6:	1c5a      	adds	r2, r3, #1
24015de8:	687b      	ldr	r3, [r7, #4]
24015dea:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct->PLL.PLLQ = (uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) + 1U;
24015dec:	4b0f      	ldr	r3, [pc, #60]	; (24015e2c <HAL_RCC_GetOscConfig+0x1d8>)
24015dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24015df0:	0c1b      	lsrs	r3, r3, #16
24015df2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
24015df6:	1c5a      	adds	r2, r3, #1
24015df8:	687b      	ldr	r3, [r7, #4]
24015dfa:	639a      	str	r2, [r3, #56]	; 0x38
  RCC_OscInitStruct->PLL.PLLRGE = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL1RGE));
24015dfc:	4b0b      	ldr	r3, [pc, #44]	; (24015e2c <HAL_RCC_GetOscConfig+0x1d8>)
24015dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24015e00:	f003 020c 	and.w	r2, r3, #12
24015e04:	687b      	ldr	r3, [r7, #4]
24015e06:	641a      	str	r2, [r3, #64]	; 0x40
  RCC_OscInitStruct->PLL.PLLVCOSEL = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL1VCOSEL) >> RCC_PLLCFGR_PLL1VCOSEL_Pos);
24015e08:	4b08      	ldr	r3, [pc, #32]	; (24015e2c <HAL_RCC_GetOscConfig+0x1d8>)
24015e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24015e0c:	085b      	lsrs	r3, r3, #1
24015e0e:	f003 0201 	and.w	r2, r3, #1
24015e12:	687b      	ldr	r3, [r7, #4]
24015e14:	645a      	str	r2, [r3, #68]	; 0x44
  RCC_OscInitStruct->PLL.PLLFRACN = (uint32_t)(((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos));
24015e16:	4b05      	ldr	r3, [pc, #20]	; (24015e2c <HAL_RCC_GetOscConfig+0x1d8>)
24015e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24015e1a:	08db      	lsrs	r3, r3, #3
24015e1c:	f3c3 020c 	ubfx	r2, r3, #0, #13
24015e20:	687b      	ldr	r3, [r7, #4]
24015e22:	649a      	str	r2, [r3, #72]	; 0x48
}
24015e24:	bf00      	nop
24015e26:	3708      	adds	r7, #8
24015e28:	46bd      	mov	sp, r7
24015e2a:	bd80      	pop	{r7, pc}
24015e2c:	58024400 	.word	0x58024400

24015e30 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
24015e30:	b480      	push	{r7}
24015e32:	b083      	sub	sp, #12
24015e34:	af00      	add	r7, sp, #0
24015e36:	6078      	str	r0, [r7, #4]
24015e38:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
24015e3a:	687b      	ldr	r3, [r7, #4]
24015e3c:	223f      	movs	r2, #63	; 0x3f
24015e3e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
24015e40:	4b1a      	ldr	r3, [pc, #104]	; (24015eac <HAL_RCC_GetClockConfig+0x7c>)
24015e42:	691b      	ldr	r3, [r3, #16]
24015e44:	f003 0207 	and.w	r2, r3, #7
24015e48:	687b      	ldr	r3, [r7, #4]
24015e4a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
24015e4c:	4b17      	ldr	r3, [pc, #92]	; (24015eac <HAL_RCC_GetClockConfig+0x7c>)
24015e4e:	699b      	ldr	r3, [r3, #24]
24015e50:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
24015e54:	687b      	ldr	r3, [r7, #4]
24015e56:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
24015e58:	4b14      	ldr	r3, [pc, #80]	; (24015eac <HAL_RCC_GetClockConfig+0x7c>)
24015e5a:	699b      	ldr	r3, [r3, #24]
24015e5c:	f003 020f 	and.w	r2, r3, #15
24015e60:	687b      	ldr	r3, [r7, #4]
24015e62:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
24015e64:	4b11      	ldr	r3, [pc, #68]	; (24015eac <HAL_RCC_GetClockConfig+0x7c>)
24015e66:	699b      	ldr	r3, [r3, #24]
24015e68:	f003 0270 	and.w	r2, r3, #112	; 0x70
24015e6c:	687b      	ldr	r3, [r7, #4]
24015e6e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
24015e70:	4b0e      	ldr	r3, [pc, #56]	; (24015eac <HAL_RCC_GetClockConfig+0x7c>)
24015e72:	69db      	ldr	r3, [r3, #28]
24015e74:	f003 0270 	and.w	r2, r3, #112	; 0x70
24015e78:	687b      	ldr	r3, [r7, #4]
24015e7a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
24015e7c:	4b0b      	ldr	r3, [pc, #44]	; (24015eac <HAL_RCC_GetClockConfig+0x7c>)
24015e7e:	69db      	ldr	r3, [r3, #28]
24015e80:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
24015e84:	687b      	ldr	r3, [r7, #4]
24015e86:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
24015e88:	4b08      	ldr	r3, [pc, #32]	; (24015eac <HAL_RCC_GetClockConfig+0x7c>)
24015e8a:	6a1b      	ldr	r3, [r3, #32]
24015e8c:	f003 0270 	and.w	r2, r3, #112	; 0x70
24015e90:	687b      	ldr	r3, [r7, #4]
24015e92:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
24015e94:	4b06      	ldr	r3, [pc, #24]	; (24015eb0 <HAL_RCC_GetClockConfig+0x80>)
24015e96:	681b      	ldr	r3, [r3, #0]
24015e98:	f003 020f 	and.w	r2, r3, #15
24015e9c:	683b      	ldr	r3, [r7, #0]
24015e9e:	601a      	str	r2, [r3, #0]
}
24015ea0:	bf00      	nop
24015ea2:	370c      	adds	r7, #12
24015ea4:	46bd      	mov	sp, r7
24015ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
24015eaa:	4770      	bx	lr
24015eac:	58024400 	.word	0x58024400
24015eb0:	52002000 	.word	0x52002000

24015eb4 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
24015eb4:	b580      	push	{r7, lr}
24015eb6:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
24015eb8:	4b07      	ldr	r3, [pc, #28]	; (24015ed8 <HAL_RCC_NMI_IRQHandler+0x24>)
24015eba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
24015ebc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
24015ec0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
24015ec4:	d105      	bne.n	24015ed2 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
24015ec6:	f000 f809 	bl	24015edc <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
24015eca:	4b03      	ldr	r3, [pc, #12]	; (24015ed8 <HAL_RCC_NMI_IRQHandler+0x24>)
24015ecc:	f44f 6280 	mov.w	r2, #1024	; 0x400
24015ed0:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
24015ed2:	bf00      	nop
24015ed4:	bd80      	pop	{r7, pc}
24015ed6:	bf00      	nop
24015ed8:	58024400 	.word	0x58024400

24015edc <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
24015edc:	b480      	push	{r7}
24015ede:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
24015ee0:	bf00      	nop
24015ee2:	46bd      	mov	sp, r7
24015ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
24015ee8:	4770      	bx	lr
	...

24015eec <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
24015eec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
24015ef0:	b0ca      	sub	sp, #296	; 0x128
24015ef2:	af00      	add	r7, sp, #0
24015ef4:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
24015ef8:	2300      	movs	r3, #0
24015efa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
24015efe:	2300      	movs	r3, #0
24015f00:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
24015f04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
24015f08:	e9d3 2300 	ldrd	r2, r3, [r3]
24015f0c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
24015f10:	2500      	movs	r5, #0
24015f12:	ea54 0305 	orrs.w	r3, r4, r5
24015f16:	d049      	beq.n	24015fac <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
24015f18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
24015f1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
24015f1e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
24015f22:	d02f      	beq.n	24015f84 <HAL_RCCEx_PeriphCLKConfig+0x98>
24015f24:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
24015f28:	d828      	bhi.n	24015f7c <HAL_RCCEx_PeriphCLKConfig+0x90>
24015f2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
24015f2e:	d01a      	beq.n	24015f66 <HAL_RCCEx_PeriphCLKConfig+0x7a>
24015f30:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
24015f34:	d822      	bhi.n	24015f7c <HAL_RCCEx_PeriphCLKConfig+0x90>
24015f36:	2b00      	cmp	r3, #0
24015f38:	d003      	beq.n	24015f42 <HAL_RCCEx_PeriphCLKConfig+0x56>
24015f3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
24015f3e:	d007      	beq.n	24015f50 <HAL_RCCEx_PeriphCLKConfig+0x64>
24015f40:	e01c      	b.n	24015f7c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24015f42:	4bb8      	ldr	r3, [pc, #736]	; (24016224 <HAL_RCCEx_PeriphCLKConfig+0x338>)
24015f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24015f46:	4ab7      	ldr	r2, [pc, #732]	; (24016224 <HAL_RCCEx_PeriphCLKConfig+0x338>)
24015f48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24015f4c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
24015f4e:	e01a      	b.n	24015f86 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
24015f50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
24015f54:	3308      	adds	r3, #8
24015f56:	2102      	movs	r1, #2
24015f58:	4618      	mov	r0, r3
24015f5a:	f002 ff4d 	bl	24018df8 <RCCEx_PLL2_Config>
24015f5e:	4603      	mov	r3, r0
24015f60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
24015f64:	e00f      	b.n	24015f86 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
24015f66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
24015f6a:	3328      	adds	r3, #40	; 0x28
24015f6c:	2102      	movs	r1, #2
24015f6e:	4618      	mov	r0, r3
24015f70:	f002 fff4 	bl	24018f5c <RCCEx_PLL3_Config>
24015f74:	4603      	mov	r3, r0
24015f76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
24015f7a:	e004      	b.n	24015f86 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
24015f7c:	2301      	movs	r3, #1
24015f7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
24015f82:	e000      	b.n	24015f86 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
24015f84:	bf00      	nop
    }

    if (ret == HAL_OK)
24015f86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
24015f8a:	2b00      	cmp	r3, #0
24015f8c:	d10a      	bne.n	24015fa4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
24015f8e:	4ba5      	ldr	r3, [pc, #660]	; (24016224 <HAL_RCCEx_PeriphCLKConfig+0x338>)
24015f90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24015f92:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
24015f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
24015f9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
24015f9c:	4aa1      	ldr	r2, [pc, #644]	; (24016224 <HAL_RCCEx_PeriphCLKConfig+0x338>)
24015f9e:	430b      	orrs	r3, r1
24015fa0:	6513      	str	r3, [r2, #80]	; 0x50
24015fa2:	e003      	b.n	24015fac <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
24015fa4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
24015fa8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
24015fac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
24015fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
24015fb4:	f402 7880 	and.w	r8, r2, #256	; 0x100
24015fb8:	f04f 0900 	mov.w	r9, #0
24015fbc:	ea58 0309 	orrs.w	r3, r8, r9
24015fc0:	d047      	beq.n	24016052 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
24015fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
24015fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24015fc8:	2b04      	cmp	r3, #4
24015fca:	d82a      	bhi.n	24016022 <HAL_RCCEx_PeriphCLKConfig+0x136>
24015fcc:	a201      	add	r2, pc, #4	; (adr r2, 24015fd4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
24015fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
24015fd2:	bf00      	nop
24015fd4:	24015fe9 	.word	0x24015fe9
24015fd8:	24015ff7 	.word	0x24015ff7
24015fdc:	2401600d 	.word	0x2401600d
24015fe0:	2401602b 	.word	0x2401602b
24015fe4:	2401602b 	.word	0x2401602b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24015fe8:	4b8e      	ldr	r3, [pc, #568]	; (24016224 <HAL_RCCEx_PeriphCLKConfig+0x338>)
24015fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24015fec:	4a8d      	ldr	r2, [pc, #564]	; (24016224 <HAL_RCCEx_PeriphCLKConfig+0x338>)
24015fee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24015ff2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
24015ff4:	e01a      	b.n	2401602c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24015ff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
24015ffa:	3308      	adds	r3, #8
24015ffc:	2100      	movs	r1, #0
24015ffe:	4618      	mov	r0, r3
24016000:	f002 fefa 	bl	24018df8 <RCCEx_PLL2_Config>
24016004:	4603      	mov	r3, r0
24016006:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
2401600a:	e00f      	b.n	2401602c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
2401600c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
24016010:	3328      	adds	r3, #40	; 0x28
24016012:	2100      	movs	r1, #0
24016014:	4618      	mov	r0, r3
24016016:	f002 ffa1 	bl	24018f5c <RCCEx_PLL3_Config>
2401601a:	4603      	mov	r3, r0
2401601c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
24016020:	e004      	b.n	2401602c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
24016022:	2301      	movs	r3, #1
24016024:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
24016028:	e000      	b.n	2401602c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
2401602a:	bf00      	nop
    }

    if (ret == HAL_OK)
2401602c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
24016030:	2b00      	cmp	r3, #0
24016032:	d10a      	bne.n	2401604a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
24016034:	4b7b      	ldr	r3, [pc, #492]	; (24016224 <HAL_RCCEx_PeriphCLKConfig+0x338>)
24016036:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24016038:	f023 0107 	bic.w	r1, r3, #7
2401603c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
24016040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24016042:	4a78      	ldr	r2, [pc, #480]	; (24016224 <HAL_RCCEx_PeriphCLKConfig+0x338>)
24016044:	430b      	orrs	r3, r1
24016046:	6513      	str	r3, [r2, #80]	; 0x50
24016048:	e003      	b.n	24016052 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
2401604a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
2401604e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
24016052:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
24016056:	e9d3 2300 	ldrd	r2, r3, [r3]
2401605a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
2401605e:	f04f 0b00 	mov.w	fp, #0
24016062:	ea5a 030b 	orrs.w	r3, sl, fp
24016066:	d04c      	beq.n	24016102 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
24016068:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
2401606c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2401606e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
24016072:	d030      	beq.n	240160d6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
24016074:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
24016078:	d829      	bhi.n	240160ce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
2401607a:	2bc0      	cmp	r3, #192	; 0xc0
2401607c:	d02d      	beq.n	240160da <HAL_RCCEx_PeriphCLKConfig+0x1ee>
2401607e:	2bc0      	cmp	r3, #192	; 0xc0
24016080:	d825      	bhi.n	240160ce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
24016082:	2b80      	cmp	r3, #128	; 0x80
24016084:	d018      	beq.n	240160b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
24016086:	2b80      	cmp	r3, #128	; 0x80
24016088:	d821      	bhi.n	240160ce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
2401608a:	2b00      	cmp	r3, #0
2401608c:	d002      	beq.n	24016094 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
2401608e:	2b40      	cmp	r3, #64	; 0x40
24016090:	d007      	beq.n	240160a2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
24016092:	e01c      	b.n	240160ce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24016094:	4b63      	ldr	r3, [pc, #396]	; (24016224 <HAL_RCCEx_PeriphCLKConfig+0x338>)
24016096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24016098:	4a62      	ldr	r2, [pc, #392]	; (24016224 <HAL_RCCEx_PeriphCLKConfig+0x338>)
2401609a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2401609e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
240160a0:	e01c      	b.n	240160dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
240160a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
240160a6:	3308      	adds	r3, #8
240160a8:	2100      	movs	r1, #0
240160aa:	4618      	mov	r0, r3
240160ac:	f002 fea4 	bl	24018df8 <RCCEx_PLL2_Config>
240160b0:	4603      	mov	r3, r0
240160b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
240160b6:	e011      	b.n	240160dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
240160b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
240160bc:	3328      	adds	r3, #40	; 0x28
240160be:	2100      	movs	r1, #0
240160c0:	4618      	mov	r0, r3
240160c2:	f002 ff4b 	bl	24018f5c <RCCEx_PLL3_Config>
240160c6:	4603      	mov	r3, r0
240160c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
240160cc:	e006      	b.n	240160dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
240160ce:	2301      	movs	r3, #1
240160d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
240160d4:	e002      	b.n	240160dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
240160d6:	bf00      	nop
240160d8:	e000      	b.n	240160dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
240160da:	bf00      	nop
    }

    if (ret == HAL_OK)
240160dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
240160e0:	2b00      	cmp	r3, #0
240160e2:	d10a      	bne.n	240160fa <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
240160e4:	4b4f      	ldr	r3, [pc, #316]	; (24016224 <HAL_RCCEx_PeriphCLKConfig+0x338>)
240160e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
240160e8:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
240160ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
240160f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
240160f2:	4a4c      	ldr	r2, [pc, #304]	; (24016224 <HAL_RCCEx_PeriphCLKConfig+0x338>)
240160f4:	430b      	orrs	r3, r1
240160f6:	6513      	str	r3, [r2, #80]	; 0x50
240160f8:	e003      	b.n	24016102 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
240160fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
240160fe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
24016102:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
24016106:	e9d3 2300 	ldrd	r2, r3, [r3]
2401610a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
2401610e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
24016112:	2300      	movs	r3, #0
24016114:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
24016118:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
2401611c:	460b      	mov	r3, r1
2401611e:	4313      	orrs	r3, r2
24016120:	d053      	beq.n	240161ca <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
24016122:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
24016126:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
2401612a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
2401612e:	d035      	beq.n	2401619c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
24016130:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
24016134:	d82e      	bhi.n	24016194 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
24016136:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
2401613a:	d031      	beq.n	240161a0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
2401613c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
24016140:	d828      	bhi.n	24016194 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
24016142:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
24016146:	d01a      	beq.n	2401617e <HAL_RCCEx_PeriphCLKConfig+0x292>
24016148:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
2401614c:	d822      	bhi.n	24016194 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
2401614e:	2b00      	cmp	r3, #0
24016150:	d003      	beq.n	2401615a <HAL_RCCEx_PeriphCLKConfig+0x26e>
24016152:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
24016156:	d007      	beq.n	24016168 <HAL_RCCEx_PeriphCLKConfig+0x27c>
24016158:	e01c      	b.n	24016194 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2401615a:	4b32      	ldr	r3, [pc, #200]	; (24016224 <HAL_RCCEx_PeriphCLKConfig+0x338>)
2401615c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2401615e:	4a31      	ldr	r2, [pc, #196]	; (24016224 <HAL_RCCEx_PeriphCLKConfig+0x338>)
24016160:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24016164:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
24016166:	e01c      	b.n	240161a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24016168:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
2401616c:	3308      	adds	r3, #8
2401616e:	2100      	movs	r1, #0
24016170:	4618      	mov	r0, r3
24016172:	f002 fe41 	bl	24018df8 <RCCEx_PLL2_Config>
24016176:	4603      	mov	r3, r0
24016178:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
2401617c:	e011      	b.n	240161a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
2401617e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
24016182:	3328      	adds	r3, #40	; 0x28
24016184:	2100      	movs	r1, #0
24016186:	4618      	mov	r0, r3
24016188:	f002 fee8 	bl	24018f5c <RCCEx_PLL3_Config>
2401618c:	4603      	mov	r3, r0
2401618e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
24016192:	e006      	b.n	240161a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
24016194:	2301      	movs	r3, #1
24016196:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
2401619a:	e002      	b.n	240161a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
2401619c:	bf00      	nop
2401619e:	e000      	b.n	240161a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
240161a0:	bf00      	nop
    }

    if (ret == HAL_OK)
240161a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
240161a6:	2b00      	cmp	r3, #0
240161a8:	d10b      	bne.n	240161c2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
240161aa:	4b1e      	ldr	r3, [pc, #120]	; (24016224 <HAL_RCCEx_PeriphCLKConfig+0x338>)
240161ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
240161ae:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
240161b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
240161b6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
240161ba:	4a1a      	ldr	r2, [pc, #104]	; (24016224 <HAL_RCCEx_PeriphCLKConfig+0x338>)
240161bc:	430b      	orrs	r3, r1
240161be:	6593      	str	r3, [r2, #88]	; 0x58
240161c0:	e003      	b.n	240161ca <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
240161c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
240161c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
240161ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
240161ce:	e9d3 2300 	ldrd	r2, r3, [r3]
240161d2:	f402 6300 	and.w	r3, r2, #2048	; 0x800
240161d6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
240161da:	2300      	movs	r3, #0
240161dc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
240161e0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
240161e4:	460b      	mov	r3, r1
240161e6:	4313      	orrs	r3, r2
240161e8:	d056      	beq.n	24016298 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
240161ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
240161ee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
240161f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
240161f6:	d038      	beq.n	2401626a <HAL_RCCEx_PeriphCLKConfig+0x37e>
240161f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
240161fc:	d831      	bhi.n	24016262 <HAL_RCCEx_PeriphCLKConfig+0x376>
240161fe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
24016202:	d034      	beq.n	2401626e <HAL_RCCEx_PeriphCLKConfig+0x382>
24016204:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
24016208:	d82b      	bhi.n	24016262 <HAL_RCCEx_PeriphCLKConfig+0x376>
2401620a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
2401620e:	d01d      	beq.n	2401624c <HAL_RCCEx_PeriphCLKConfig+0x360>
24016210:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
24016214:	d825      	bhi.n	24016262 <HAL_RCCEx_PeriphCLKConfig+0x376>
24016216:	2b00      	cmp	r3, #0
24016218:	d006      	beq.n	24016228 <HAL_RCCEx_PeriphCLKConfig+0x33c>
2401621a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
2401621e:	d00a      	beq.n	24016236 <HAL_RCCEx_PeriphCLKConfig+0x34a>
24016220:	e01f      	b.n	24016262 <HAL_RCCEx_PeriphCLKConfig+0x376>
24016222:	bf00      	nop
24016224:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24016228:	4ba2      	ldr	r3, [pc, #648]	; (240164b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
2401622a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2401622c:	4aa1      	ldr	r2, [pc, #644]	; (240164b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
2401622e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24016232:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
24016234:	e01c      	b.n	24016270 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24016236:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
2401623a:	3308      	adds	r3, #8
2401623c:	2100      	movs	r1, #0
2401623e:	4618      	mov	r0, r3
24016240:	f002 fdda 	bl	24018df8 <RCCEx_PLL2_Config>
24016244:	4603      	mov	r3, r0
24016246:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
2401624a:	e011      	b.n	24016270 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
2401624c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
24016250:	3328      	adds	r3, #40	; 0x28
24016252:	2100      	movs	r1, #0
24016254:	4618      	mov	r0, r3
24016256:	f002 fe81 	bl	24018f5c <RCCEx_PLL3_Config>
2401625a:	4603      	mov	r3, r0
2401625c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
24016260:	e006      	b.n	24016270 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
24016262:	2301      	movs	r3, #1
24016264:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
24016268:	e002      	b.n	24016270 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
2401626a:	bf00      	nop
2401626c:	e000      	b.n	24016270 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
2401626e:	bf00      	nop
    }

    if (ret == HAL_OK)
24016270:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
24016274:	2b00      	cmp	r3, #0
24016276:	d10b      	bne.n	24016290 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
24016278:	4b8e      	ldr	r3, [pc, #568]	; (240164b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
2401627a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2401627c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
24016280:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
24016284:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
24016288:	4a8a      	ldr	r2, [pc, #552]	; (240164b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
2401628a:	430b      	orrs	r3, r1
2401628c:	6593      	str	r3, [r2, #88]	; 0x58
2401628e:	e003      	b.n	24016298 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
24016290:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
24016294:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
24016298:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
2401629c:	e9d3 2300 	ldrd	r2, r3, [r3]
240162a0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
240162a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
240162a8:	2300      	movs	r3, #0
240162aa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
240162ae:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
240162b2:	460b      	mov	r3, r1
240162b4:	4313      	orrs	r3, r2
240162b6:	d03a      	beq.n	2401632e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
240162b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
240162bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
240162be:	2b30      	cmp	r3, #48	; 0x30
240162c0:	d01f      	beq.n	24016302 <HAL_RCCEx_PeriphCLKConfig+0x416>
240162c2:	2b30      	cmp	r3, #48	; 0x30
240162c4:	d819      	bhi.n	240162fa <HAL_RCCEx_PeriphCLKConfig+0x40e>
240162c6:	2b20      	cmp	r3, #32
240162c8:	d00c      	beq.n	240162e4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
240162ca:	2b20      	cmp	r3, #32
240162cc:	d815      	bhi.n	240162fa <HAL_RCCEx_PeriphCLKConfig+0x40e>
240162ce:	2b00      	cmp	r3, #0
240162d0:	d019      	beq.n	24016306 <HAL_RCCEx_PeriphCLKConfig+0x41a>
240162d2:	2b10      	cmp	r3, #16
240162d4:	d111      	bne.n	240162fa <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
240162d6:	4b77      	ldr	r3, [pc, #476]	; (240164b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
240162d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
240162da:	4a76      	ldr	r2, [pc, #472]	; (240164b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
240162dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
240162e0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
240162e2:	e011      	b.n	24016308 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
240162e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
240162e8:	3308      	adds	r3, #8
240162ea:	2102      	movs	r1, #2
240162ec:	4618      	mov	r0, r3
240162ee:	f002 fd83 	bl	24018df8 <RCCEx_PLL2_Config>
240162f2:	4603      	mov	r3, r0
240162f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
240162f8:	e006      	b.n	24016308 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
240162fa:	2301      	movs	r3, #1
240162fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
24016300:	e002      	b.n	24016308 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
24016302:	bf00      	nop
24016304:	e000      	b.n	24016308 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
24016306:	bf00      	nop
    }

    if (ret == HAL_OK)
24016308:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
2401630c:	2b00      	cmp	r3, #0
2401630e:	d10a      	bne.n	24016326 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
24016310:	4b68      	ldr	r3, [pc, #416]	; (240164b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
24016312:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24016314:	f023 0130 	bic.w	r1, r3, #48	; 0x30
24016318:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
2401631c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2401631e:	4a65      	ldr	r2, [pc, #404]	; (240164b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
24016320:	430b      	orrs	r3, r1
24016322:	64d3      	str	r3, [r2, #76]	; 0x4c
24016324:	e003      	b.n	2401632e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
24016326:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
2401632a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
2401632e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
24016332:	e9d3 2300 	ldrd	r2, r3, [r3]
24016336:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
2401633a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
2401633e:	2300      	movs	r3, #0
24016340:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
24016344:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
24016348:	460b      	mov	r3, r1
2401634a:	4313      	orrs	r3, r2
2401634c:	d051      	beq.n	240163f2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
2401634e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
24016352:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24016354:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
24016358:	d035      	beq.n	240163c6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
2401635a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
2401635e:	d82e      	bhi.n	240163be <HAL_RCCEx_PeriphCLKConfig+0x4d2>
24016360:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
24016364:	d031      	beq.n	240163ca <HAL_RCCEx_PeriphCLKConfig+0x4de>
24016366:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
2401636a:	d828      	bhi.n	240163be <HAL_RCCEx_PeriphCLKConfig+0x4d2>
2401636c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
24016370:	d01a      	beq.n	240163a8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
24016372:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
24016376:	d822      	bhi.n	240163be <HAL_RCCEx_PeriphCLKConfig+0x4d2>
24016378:	2b00      	cmp	r3, #0
2401637a:	d003      	beq.n	24016384 <HAL_RCCEx_PeriphCLKConfig+0x498>
2401637c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
24016380:	d007      	beq.n	24016392 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
24016382:	e01c      	b.n	240163be <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24016384:	4b4b      	ldr	r3, [pc, #300]	; (240164b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
24016386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24016388:	4a4a      	ldr	r2, [pc, #296]	; (240164b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
2401638a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2401638e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
24016390:	e01c      	b.n	240163cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24016392:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
24016396:	3308      	adds	r3, #8
24016398:	2100      	movs	r1, #0
2401639a:	4618      	mov	r0, r3
2401639c:	f002 fd2c 	bl	24018df8 <RCCEx_PLL2_Config>
240163a0:	4603      	mov	r3, r0
240163a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
240163a6:	e011      	b.n	240163cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
240163a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
240163ac:	3328      	adds	r3, #40	; 0x28
240163ae:	2100      	movs	r1, #0
240163b0:	4618      	mov	r0, r3
240163b2:	f002 fdd3 	bl	24018f5c <RCCEx_PLL3_Config>
240163b6:	4603      	mov	r3, r0
240163b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
240163bc:	e006      	b.n	240163cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
240163be:	2301      	movs	r3, #1
240163c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
240163c4:	e002      	b.n	240163cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
240163c6:	bf00      	nop
240163c8:	e000      	b.n	240163cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
240163ca:	bf00      	nop
    }

    if (ret == HAL_OK)
240163cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
240163d0:	2b00      	cmp	r3, #0
240163d2:	d10a      	bne.n	240163ea <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
240163d4:	4b37      	ldr	r3, [pc, #220]	; (240164b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
240163d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
240163d8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
240163dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
240163e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
240163e2:	4a34      	ldr	r2, [pc, #208]	; (240164b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
240163e4:	430b      	orrs	r3, r1
240163e6:	6513      	str	r3, [r2, #80]	; 0x50
240163e8:	e003      	b.n	240163f2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
240163ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
240163ee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
240163f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
240163f6:	e9d3 2300 	ldrd	r2, r3, [r3]
240163fa:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
240163fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
24016402:	2300      	movs	r3, #0
24016404:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
24016408:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
2401640c:	460b      	mov	r3, r1
2401640e:	4313      	orrs	r3, r2
24016410:	d056      	beq.n	240164c0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
24016412:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
24016416:	6e5b      	ldr	r3, [r3, #100]	; 0x64
24016418:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
2401641c:	d033      	beq.n	24016486 <HAL_RCCEx_PeriphCLKConfig+0x59a>
2401641e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
24016422:	d82c      	bhi.n	2401647e <HAL_RCCEx_PeriphCLKConfig+0x592>
24016424:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
24016428:	d02f      	beq.n	2401648a <HAL_RCCEx_PeriphCLKConfig+0x59e>
2401642a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
2401642e:	d826      	bhi.n	2401647e <HAL_RCCEx_PeriphCLKConfig+0x592>
24016430:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
24016434:	d02b      	beq.n	2401648e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
24016436:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
2401643a:	d820      	bhi.n	2401647e <HAL_RCCEx_PeriphCLKConfig+0x592>
2401643c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
24016440:	d012      	beq.n	24016468 <HAL_RCCEx_PeriphCLKConfig+0x57c>
24016442:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
24016446:	d81a      	bhi.n	2401647e <HAL_RCCEx_PeriphCLKConfig+0x592>
24016448:	2b00      	cmp	r3, #0
2401644a:	d022      	beq.n	24016492 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
2401644c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
24016450:	d115      	bne.n	2401647e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
24016452:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
24016456:	3308      	adds	r3, #8
24016458:	2101      	movs	r1, #1
2401645a:	4618      	mov	r0, r3
2401645c:	f002 fccc 	bl	24018df8 <RCCEx_PLL2_Config>
24016460:	4603      	mov	r3, r0
24016462:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
24016466:	e015      	b.n	24016494 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
24016468:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
2401646c:	3328      	adds	r3, #40	; 0x28
2401646e:	2101      	movs	r1, #1
24016470:	4618      	mov	r0, r3
24016472:	f002 fd73 	bl	24018f5c <RCCEx_PLL3_Config>
24016476:	4603      	mov	r3, r0
24016478:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
2401647c:	e00a      	b.n	24016494 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
2401647e:	2301      	movs	r3, #1
24016480:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
24016484:	e006      	b.n	24016494 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
24016486:	bf00      	nop
24016488:	e004      	b.n	24016494 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
2401648a:	bf00      	nop
2401648c:	e002      	b.n	24016494 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
2401648e:	bf00      	nop
24016490:	e000      	b.n	24016494 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
24016492:	bf00      	nop
    }

    if (ret == HAL_OK)
24016494:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
24016498:	2b00      	cmp	r3, #0
2401649a:	d10d      	bne.n	240164b8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
2401649c:	4b05      	ldr	r3, [pc, #20]	; (240164b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
2401649e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
240164a0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
240164a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
240164a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
240164aa:	4a02      	ldr	r2, [pc, #8]	; (240164b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
240164ac:	430b      	orrs	r3, r1
240164ae:	6513      	str	r3, [r2, #80]	; 0x50
240164b0:	e006      	b.n	240164c0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
240164b2:	bf00      	nop
240164b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
240164b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
240164bc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
240164c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
240164c4:	e9d3 2300 	ldrd	r2, r3, [r3]
240164c8:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
240164cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
240164d0:	2300      	movs	r3, #0
240164d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
240164d6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
240164da:	460b      	mov	r3, r1
240164dc:	4313      	orrs	r3, r2
240164de:	d055      	beq.n	2401658c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
240164e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
240164e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
240164e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
240164ec:	d033      	beq.n	24016556 <HAL_RCCEx_PeriphCLKConfig+0x66a>
240164ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
240164f2:	d82c      	bhi.n	2401654e <HAL_RCCEx_PeriphCLKConfig+0x662>
240164f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
240164f8:	d02f      	beq.n	2401655a <HAL_RCCEx_PeriphCLKConfig+0x66e>
240164fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
240164fe:	d826      	bhi.n	2401654e <HAL_RCCEx_PeriphCLKConfig+0x662>
24016500:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
24016504:	d02b      	beq.n	2401655e <HAL_RCCEx_PeriphCLKConfig+0x672>
24016506:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
2401650a:	d820      	bhi.n	2401654e <HAL_RCCEx_PeriphCLKConfig+0x662>
2401650c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24016510:	d012      	beq.n	24016538 <HAL_RCCEx_PeriphCLKConfig+0x64c>
24016512:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24016516:	d81a      	bhi.n	2401654e <HAL_RCCEx_PeriphCLKConfig+0x662>
24016518:	2b00      	cmp	r3, #0
2401651a:	d022      	beq.n	24016562 <HAL_RCCEx_PeriphCLKConfig+0x676>
2401651c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
24016520:	d115      	bne.n	2401654e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
24016522:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
24016526:	3308      	adds	r3, #8
24016528:	2101      	movs	r1, #1
2401652a:	4618      	mov	r0, r3
2401652c:	f002 fc64 	bl	24018df8 <RCCEx_PLL2_Config>
24016530:	4603      	mov	r3, r0
24016532:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
24016536:	e015      	b.n	24016564 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
24016538:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
2401653c:	3328      	adds	r3, #40	; 0x28
2401653e:	2101      	movs	r1, #1
24016540:	4618      	mov	r0, r3
24016542:	f002 fd0b 	bl	24018f5c <RCCEx_PLL3_Config>
24016546:	4603      	mov	r3, r0
24016548:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
2401654c:	e00a      	b.n	24016564 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
2401654e:	2301      	movs	r3, #1
24016550:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
24016554:	e006      	b.n	24016564 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
24016556:	bf00      	nop
24016558:	e004      	b.n	24016564 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
2401655a:	bf00      	nop
2401655c:	e002      	b.n	24016564 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
2401655e:	bf00      	nop
24016560:	e000      	b.n	24016564 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
24016562:	bf00      	nop
    }

    if (ret == HAL_OK)
24016564:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
24016568:	2b00      	cmp	r3, #0
2401656a:	d10b      	bne.n	24016584 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
2401656c:	4ba3      	ldr	r3, [pc, #652]	; (240167fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
2401656e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24016570:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
24016574:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
24016578:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
2401657c:	4a9f      	ldr	r2, [pc, #636]	; (240167fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
2401657e:	430b      	orrs	r3, r1
24016580:	6593      	str	r3, [r2, #88]	; 0x58
24016582:	e003      	b.n	2401658c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
24016584:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
24016588:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
2401658c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
24016590:	e9d3 2300 	ldrd	r2, r3, [r3]
24016594:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
24016598:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
2401659c:	2300      	movs	r3, #0
2401659e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
240165a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
240165a6:	460b      	mov	r3, r1
240165a8:	4313      	orrs	r3, r2
240165aa:	d037      	beq.n	2401661c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
240165ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
240165b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
240165b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
240165b6:	d00e      	beq.n	240165d6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
240165b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
240165bc:	d816      	bhi.n	240165ec <HAL_RCCEx_PeriphCLKConfig+0x700>
240165be:	2b00      	cmp	r3, #0
240165c0:	d018      	beq.n	240165f4 <HAL_RCCEx_PeriphCLKConfig+0x708>
240165c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
240165c6:	d111      	bne.n	240165ec <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
240165c8:	4b8c      	ldr	r3, [pc, #560]	; (240167fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
240165ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
240165cc:	4a8b      	ldr	r2, [pc, #556]	; (240167fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
240165ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
240165d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
240165d4:	e00f      	b.n	240165f6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
240165d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
240165da:	3308      	adds	r3, #8
240165dc:	2101      	movs	r1, #1
240165de:	4618      	mov	r0, r3
240165e0:	f002 fc0a 	bl	24018df8 <RCCEx_PLL2_Config>
240165e4:	4603      	mov	r3, r0
240165e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
240165ea:	e004      	b.n	240165f6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
240165ec:	2301      	movs	r3, #1
240165ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
240165f2:	e000      	b.n	240165f6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
240165f4:	bf00      	nop
    }

    if (ret == HAL_OK)
240165f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
240165fa:	2b00      	cmp	r3, #0
240165fc:	d10a      	bne.n	24016614 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
240165fe:	4b7f      	ldr	r3, [pc, #508]	; (240167fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
24016600:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24016602:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
24016606:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
2401660a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2401660c:	4a7b      	ldr	r2, [pc, #492]	; (240167fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
2401660e:	430b      	orrs	r3, r1
24016610:	6513      	str	r3, [r2, #80]	; 0x50
24016612:	e003      	b.n	2401661c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
24016614:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
24016618:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
2401661c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
24016620:	e9d3 2300 	ldrd	r2, r3, [r3]
24016624:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
24016628:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
2401662c:	2300      	movs	r3, #0
2401662e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
24016632:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
24016636:	460b      	mov	r3, r1
24016638:	4313      	orrs	r3, r2
2401663a:	d039      	beq.n	240166b0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
2401663c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
24016640:	6c9b      	ldr	r3, [r3, #72]	; 0x48
24016642:	2b03      	cmp	r3, #3
24016644:	d81c      	bhi.n	24016680 <HAL_RCCEx_PeriphCLKConfig+0x794>
24016646:	a201      	add	r2, pc, #4	; (adr r2, 2401664c <HAL_RCCEx_PeriphCLKConfig+0x760>)
24016648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2401664c:	24016689 	.word	0x24016689
24016650:	2401665d 	.word	0x2401665d
24016654:	2401666b 	.word	0x2401666b
24016658:	24016689 	.word	0x24016689
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2401665c:	4b67      	ldr	r3, [pc, #412]	; (240167fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
2401665e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24016660:	4a66      	ldr	r2, [pc, #408]	; (240167fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
24016662:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24016666:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
24016668:	e00f      	b.n	2401668a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
2401666a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
2401666e:	3308      	adds	r3, #8
24016670:	2102      	movs	r1, #2
24016672:	4618      	mov	r0, r3
24016674:	f002 fbc0 	bl	24018df8 <RCCEx_PLL2_Config>
24016678:	4603      	mov	r3, r0
2401667a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
2401667e:	e004      	b.n	2401668a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
24016680:	2301      	movs	r3, #1
24016682:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
24016686:	e000      	b.n	2401668a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
24016688:	bf00      	nop
    }

    if (ret == HAL_OK)
2401668a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
2401668e:	2b00      	cmp	r3, #0
24016690:	d10a      	bne.n	240166a8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
24016692:	4b5a      	ldr	r3, [pc, #360]	; (240167fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
24016694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24016696:	f023 0103 	bic.w	r1, r3, #3
2401669a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
2401669e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
240166a0:	4a56      	ldr	r2, [pc, #344]	; (240167fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
240166a2:	430b      	orrs	r3, r1
240166a4:	64d3      	str	r3, [r2, #76]	; 0x4c
240166a6:	e003      	b.n	240166b0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
240166a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
240166ac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
240166b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
240166b4:	e9d3 2300 	ldrd	r2, r3, [r3]
240166b8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
240166bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
240166c0:	2300      	movs	r3, #0
240166c2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
240166c6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
240166ca:	460b      	mov	r3, r1
240166cc:	4313      	orrs	r3, r2
240166ce:	f000 809f 	beq.w	24016810 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
240166d2:	4b4b      	ldr	r3, [pc, #300]	; (24016800 <HAL_RCCEx_PeriphCLKConfig+0x914>)
240166d4:	681b      	ldr	r3, [r3, #0]
240166d6:	4a4a      	ldr	r2, [pc, #296]	; (24016800 <HAL_RCCEx_PeriphCLKConfig+0x914>)
240166d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
240166dc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
240166de:	f7ec fce1 	bl	240030a4 <HAL_GetTick>
240166e2:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
240166e6:	e00b      	b.n	24016700 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
240166e8:	f7ec fcdc 	bl	240030a4 <HAL_GetTick>
240166ec:	4602      	mov	r2, r0
240166ee:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
240166f2:	1ad3      	subs	r3, r2, r3
240166f4:	2b64      	cmp	r3, #100	; 0x64
240166f6:	d903      	bls.n	24016700 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
240166f8:	2303      	movs	r3, #3
240166fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
240166fe:	e005      	b.n	2401670c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
24016700:	4b3f      	ldr	r3, [pc, #252]	; (24016800 <HAL_RCCEx_PeriphCLKConfig+0x914>)
24016702:	681b      	ldr	r3, [r3, #0]
24016704:	f403 7380 	and.w	r3, r3, #256	; 0x100
24016708:	2b00      	cmp	r3, #0
2401670a:	d0ed      	beq.n	240166e8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
2401670c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
24016710:	2b00      	cmp	r3, #0
24016712:	d179      	bne.n	24016808 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
24016714:	4b39      	ldr	r3, [pc, #228]	; (240167fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
24016716:	6f1a      	ldr	r2, [r3, #112]	; 0x70
24016718:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
2401671c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
24016720:	4053      	eors	r3, r2
24016722:	f403 7340 	and.w	r3, r3, #768	; 0x300
24016726:	2b00      	cmp	r3, #0
24016728:	d015      	beq.n	24016756 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
2401672a:	4b34      	ldr	r3, [pc, #208]	; (240167fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
2401672c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2401672e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
24016732:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
24016736:	4b31      	ldr	r3, [pc, #196]	; (240167fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
24016738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2401673a:	4a30      	ldr	r2, [pc, #192]	; (240167fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
2401673c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
24016740:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
24016742:	4b2e      	ldr	r3, [pc, #184]	; (240167fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
24016744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24016746:	4a2d      	ldr	r2, [pc, #180]	; (240167fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
24016748:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
2401674c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
2401674e:	4a2b      	ldr	r2, [pc, #172]	; (240167fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
24016750:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
24016754:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
24016756:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
2401675a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
2401675e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
24016762:	d118      	bne.n	24016796 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
24016764:	f7ec fc9e 	bl	240030a4 <HAL_GetTick>
24016768:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
2401676c:	e00d      	b.n	2401678a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
2401676e:	f7ec fc99 	bl	240030a4 <HAL_GetTick>
24016772:	4602      	mov	r2, r0
24016774:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
24016778:	1ad2      	subs	r2, r2, r3
2401677a:	f241 3388 	movw	r3, #5000	; 0x1388
2401677e:	429a      	cmp	r2, r3
24016780:	d903      	bls.n	2401678a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
24016782:	2303      	movs	r3, #3
24016784:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
24016788:	e005      	b.n	24016796 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
2401678a:	4b1c      	ldr	r3, [pc, #112]	; (240167fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
2401678c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2401678e:	f003 0302 	and.w	r3, r3, #2
24016792:	2b00      	cmp	r3, #0
24016794:	d0eb      	beq.n	2401676e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
24016796:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
2401679a:	2b00      	cmp	r3, #0
2401679c:	d129      	bne.n	240167f2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
2401679e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
240167a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
240167a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
240167aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
240167ae:	d10e      	bne.n	240167ce <HAL_RCCEx_PeriphCLKConfig+0x8e2>
240167b0:	4b12      	ldr	r3, [pc, #72]	; (240167fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
240167b2:	691b      	ldr	r3, [r3, #16]
240167b4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
240167b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
240167bc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
240167c0:	091a      	lsrs	r2, r3, #4
240167c2:	4b10      	ldr	r3, [pc, #64]	; (24016804 <HAL_RCCEx_PeriphCLKConfig+0x918>)
240167c4:	4013      	ands	r3, r2
240167c6:	4a0d      	ldr	r2, [pc, #52]	; (240167fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
240167c8:	430b      	orrs	r3, r1
240167ca:	6113      	str	r3, [r2, #16]
240167cc:	e005      	b.n	240167da <HAL_RCCEx_PeriphCLKConfig+0x8ee>
240167ce:	4b0b      	ldr	r3, [pc, #44]	; (240167fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
240167d0:	691b      	ldr	r3, [r3, #16]
240167d2:	4a0a      	ldr	r2, [pc, #40]	; (240167fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
240167d4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
240167d8:	6113      	str	r3, [r2, #16]
240167da:	4b08      	ldr	r3, [pc, #32]	; (240167fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
240167dc:	6f19      	ldr	r1, [r3, #112]	; 0x70
240167de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
240167e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
240167e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
240167ea:	4a04      	ldr	r2, [pc, #16]	; (240167fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
240167ec:	430b      	orrs	r3, r1
240167ee:	6713      	str	r3, [r2, #112]	; 0x70
240167f0:	e00e      	b.n	24016810 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
240167f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
240167f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
240167fa:	e009      	b.n	24016810 <HAL_RCCEx_PeriphCLKConfig+0x924>
240167fc:	58024400 	.word	0x58024400
24016800:	58024800 	.word	0x58024800
24016804:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
24016808:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
2401680c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
24016810:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
24016814:	e9d3 2300 	ldrd	r2, r3, [r3]
24016818:	f002 0301 	and.w	r3, r2, #1
2401681c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
24016820:	2300      	movs	r3, #0
24016822:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
24016826:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
2401682a:	460b      	mov	r3, r1
2401682c:	4313      	orrs	r3, r2
2401682e:	f000 8089 	beq.w	24016944 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
24016832:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
24016836:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
24016838:	2b28      	cmp	r3, #40	; 0x28
2401683a:	d86b      	bhi.n	24016914 <HAL_RCCEx_PeriphCLKConfig+0xa28>
2401683c:	a201      	add	r2, pc, #4	; (adr r2, 24016844 <HAL_RCCEx_PeriphCLKConfig+0x958>)
2401683e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
24016842:	bf00      	nop
24016844:	2401691d 	.word	0x2401691d
24016848:	24016915 	.word	0x24016915
2401684c:	24016915 	.word	0x24016915
24016850:	24016915 	.word	0x24016915
24016854:	24016915 	.word	0x24016915
24016858:	24016915 	.word	0x24016915
2401685c:	24016915 	.word	0x24016915
24016860:	24016915 	.word	0x24016915
24016864:	240168e9 	.word	0x240168e9
24016868:	24016915 	.word	0x24016915
2401686c:	24016915 	.word	0x24016915
24016870:	24016915 	.word	0x24016915
24016874:	24016915 	.word	0x24016915
24016878:	24016915 	.word	0x24016915
2401687c:	24016915 	.word	0x24016915
24016880:	24016915 	.word	0x24016915
24016884:	240168ff 	.word	0x240168ff
24016888:	24016915 	.word	0x24016915
2401688c:	24016915 	.word	0x24016915
24016890:	24016915 	.word	0x24016915
24016894:	24016915 	.word	0x24016915
24016898:	24016915 	.word	0x24016915
2401689c:	24016915 	.word	0x24016915
240168a0:	24016915 	.word	0x24016915
240168a4:	2401691d 	.word	0x2401691d
240168a8:	24016915 	.word	0x24016915
240168ac:	24016915 	.word	0x24016915
240168b0:	24016915 	.word	0x24016915
240168b4:	24016915 	.word	0x24016915
240168b8:	24016915 	.word	0x24016915
240168bc:	24016915 	.word	0x24016915
240168c0:	24016915 	.word	0x24016915
240168c4:	2401691d 	.word	0x2401691d
240168c8:	24016915 	.word	0x24016915
240168cc:	24016915 	.word	0x24016915
240168d0:	24016915 	.word	0x24016915
240168d4:	24016915 	.word	0x24016915
240168d8:	24016915 	.word	0x24016915
240168dc:	24016915 	.word	0x24016915
240168e0:	24016915 	.word	0x24016915
240168e4:	2401691d 	.word	0x2401691d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
240168e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
240168ec:	3308      	adds	r3, #8
240168ee:	2101      	movs	r1, #1
240168f0:	4618      	mov	r0, r3
240168f2:	f002 fa81 	bl	24018df8 <RCCEx_PLL2_Config>
240168f6:	4603      	mov	r3, r0
240168f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
240168fc:	e00f      	b.n	2401691e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
240168fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
24016902:	3328      	adds	r3, #40	; 0x28
24016904:	2101      	movs	r1, #1
24016906:	4618      	mov	r0, r3
24016908:	f002 fb28 	bl	24018f5c <RCCEx_PLL3_Config>
2401690c:	4603      	mov	r3, r0
2401690e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
24016912:	e004      	b.n	2401691e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
24016914:	2301      	movs	r3, #1
24016916:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
2401691a:	e000      	b.n	2401691e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
2401691c:	bf00      	nop
    }

    if (ret == HAL_OK)
2401691e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
24016922:	2b00      	cmp	r3, #0
24016924:	d10a      	bne.n	2401693c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
24016926:	4bbf      	ldr	r3, [pc, #764]	; (24016c24 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
24016928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2401692a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
2401692e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
24016932:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
24016934:	4abb      	ldr	r2, [pc, #748]	; (24016c24 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
24016936:	430b      	orrs	r3, r1
24016938:	6553      	str	r3, [r2, #84]	; 0x54
2401693a:	e003      	b.n	24016944 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
2401693c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
24016940:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
24016944:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
24016948:	e9d3 2300 	ldrd	r2, r3, [r3]
2401694c:	f002 0302 	and.w	r3, r2, #2
24016950:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
24016954:	2300      	movs	r3, #0
24016956:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
2401695a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
2401695e:	460b      	mov	r3, r1
24016960:	4313      	orrs	r3, r2
24016962:	d041      	beq.n	240169e8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
24016964:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
24016968:	6f9b      	ldr	r3, [r3, #120]	; 0x78
2401696a:	2b05      	cmp	r3, #5
2401696c:	d824      	bhi.n	240169b8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
2401696e:	a201      	add	r2, pc, #4	; (adr r2, 24016974 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
24016970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
24016974:	240169c1 	.word	0x240169c1
24016978:	2401698d 	.word	0x2401698d
2401697c:	240169a3 	.word	0x240169a3
24016980:	240169c1 	.word	0x240169c1
24016984:	240169c1 	.word	0x240169c1
24016988:	240169c1 	.word	0x240169c1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
2401698c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
24016990:	3308      	adds	r3, #8
24016992:	2101      	movs	r1, #1
24016994:	4618      	mov	r0, r3
24016996:	f002 fa2f 	bl	24018df8 <RCCEx_PLL2_Config>
2401699a:	4603      	mov	r3, r0
2401699c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
240169a0:	e00f      	b.n	240169c2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
240169a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
240169a6:	3328      	adds	r3, #40	; 0x28
240169a8:	2101      	movs	r1, #1
240169aa:	4618      	mov	r0, r3
240169ac:	f002 fad6 	bl	24018f5c <RCCEx_PLL3_Config>
240169b0:	4603      	mov	r3, r0
240169b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
240169b6:	e004      	b.n	240169c2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
240169b8:	2301      	movs	r3, #1
240169ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
240169be:	e000      	b.n	240169c2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
240169c0:	bf00      	nop
    }

    if (ret == HAL_OK)
240169c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
240169c6:	2b00      	cmp	r3, #0
240169c8:	d10a      	bne.n	240169e0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
240169ca:	4b96      	ldr	r3, [pc, #600]	; (24016c24 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
240169cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
240169ce:	f023 0107 	bic.w	r1, r3, #7
240169d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
240169d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
240169d8:	4a92      	ldr	r2, [pc, #584]	; (24016c24 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
240169da:	430b      	orrs	r3, r1
240169dc:	6553      	str	r3, [r2, #84]	; 0x54
240169de:	e003      	b.n	240169e8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
240169e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
240169e4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
240169e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
240169ec:	e9d3 2300 	ldrd	r2, r3, [r3]
240169f0:	f002 0304 	and.w	r3, r2, #4
240169f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
240169f8:	2300      	movs	r3, #0
240169fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
240169fe:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
24016a02:	460b      	mov	r3, r1
24016a04:	4313      	orrs	r3, r2
24016a06:	d044      	beq.n	24016a92 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
24016a08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
24016a0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
24016a10:	2b05      	cmp	r3, #5
24016a12:	d825      	bhi.n	24016a60 <HAL_RCCEx_PeriphCLKConfig+0xb74>
24016a14:	a201      	add	r2, pc, #4	; (adr r2, 24016a1c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
24016a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
24016a1a:	bf00      	nop
24016a1c:	24016a69 	.word	0x24016a69
24016a20:	24016a35 	.word	0x24016a35
24016a24:	24016a4b 	.word	0x24016a4b
24016a28:	24016a69 	.word	0x24016a69
24016a2c:	24016a69 	.word	0x24016a69
24016a30:	24016a69 	.word	0x24016a69
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
24016a34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
24016a38:	3308      	adds	r3, #8
24016a3a:	2101      	movs	r1, #1
24016a3c:	4618      	mov	r0, r3
24016a3e:	f002 f9db 	bl	24018df8 <RCCEx_PLL2_Config>
24016a42:	4603      	mov	r3, r0
24016a44:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
24016a48:	e00f      	b.n	24016a6a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
24016a4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
24016a4e:	3328      	adds	r3, #40	; 0x28
24016a50:	2101      	movs	r1, #1
24016a52:	4618      	mov	r0, r3
24016a54:	f002 fa82 	bl	24018f5c <RCCEx_PLL3_Config>
24016a58:	4603      	mov	r3, r0
24016a5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
24016a5e:	e004      	b.n	24016a6a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
24016a60:	2301      	movs	r3, #1
24016a62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
24016a66:	e000      	b.n	24016a6a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
24016a68:	bf00      	nop
    }

    if (ret == HAL_OK)
24016a6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
24016a6e:	2b00      	cmp	r3, #0
24016a70:	d10b      	bne.n	24016a8a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
24016a72:	4b6c      	ldr	r3, [pc, #432]	; (24016c24 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
24016a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24016a76:	f023 0107 	bic.w	r1, r3, #7
24016a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
24016a7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
24016a82:	4a68      	ldr	r2, [pc, #416]	; (24016c24 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
24016a84:	430b      	orrs	r3, r1
24016a86:	6593      	str	r3, [r2, #88]	; 0x58
24016a88:	e003      	b.n	24016a92 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
24016a8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
24016a8e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
24016a92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
24016a96:	e9d3 2300 	ldrd	r2, r3, [r3]
24016a9a:	f002 0320 	and.w	r3, r2, #32
24016a9e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
24016aa2:	2300      	movs	r3, #0
24016aa4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
24016aa8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
24016aac:	460b      	mov	r3, r1
24016aae:	4313      	orrs	r3, r2
24016ab0:	d055      	beq.n	24016b5e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
24016ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
24016ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
24016aba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
24016abe:	d033      	beq.n	24016b28 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
24016ac0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
24016ac4:	d82c      	bhi.n	24016b20 <HAL_RCCEx_PeriphCLKConfig+0xc34>
24016ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
24016aca:	d02f      	beq.n	24016b2c <HAL_RCCEx_PeriphCLKConfig+0xc40>
24016acc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
24016ad0:	d826      	bhi.n	24016b20 <HAL_RCCEx_PeriphCLKConfig+0xc34>
24016ad2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
24016ad6:	d02b      	beq.n	24016b30 <HAL_RCCEx_PeriphCLKConfig+0xc44>
24016ad8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
24016adc:	d820      	bhi.n	24016b20 <HAL_RCCEx_PeriphCLKConfig+0xc34>
24016ade:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24016ae2:	d012      	beq.n	24016b0a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
24016ae4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24016ae8:	d81a      	bhi.n	24016b20 <HAL_RCCEx_PeriphCLKConfig+0xc34>
24016aea:	2b00      	cmp	r3, #0
24016aec:	d022      	beq.n	24016b34 <HAL_RCCEx_PeriphCLKConfig+0xc48>
24016aee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
24016af2:	d115      	bne.n	24016b20 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24016af4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
24016af8:	3308      	adds	r3, #8
24016afa:	2100      	movs	r1, #0
24016afc:	4618      	mov	r0, r3
24016afe:	f002 f97b 	bl	24018df8 <RCCEx_PLL2_Config>
24016b02:	4603      	mov	r3, r0
24016b04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
24016b08:	e015      	b.n	24016b36 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
24016b0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
24016b0e:	3328      	adds	r3, #40	; 0x28
24016b10:	2102      	movs	r1, #2
24016b12:	4618      	mov	r0, r3
24016b14:	f002 fa22 	bl	24018f5c <RCCEx_PLL3_Config>
24016b18:	4603      	mov	r3, r0
24016b1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
24016b1e:	e00a      	b.n	24016b36 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
24016b20:	2301      	movs	r3, #1
24016b22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
24016b26:	e006      	b.n	24016b36 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
24016b28:	bf00      	nop
24016b2a:	e004      	b.n	24016b36 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
24016b2c:	bf00      	nop
24016b2e:	e002      	b.n	24016b36 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
24016b30:	bf00      	nop
24016b32:	e000      	b.n	24016b36 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
24016b34:	bf00      	nop
    }

    if (ret == HAL_OK)
24016b36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
24016b3a:	2b00      	cmp	r3, #0
24016b3c:	d10b      	bne.n	24016b56 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
24016b3e:	4b39      	ldr	r3, [pc, #228]	; (24016c24 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
24016b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24016b42:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
24016b46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
24016b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
24016b4e:	4a35      	ldr	r2, [pc, #212]	; (24016c24 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
24016b50:	430b      	orrs	r3, r1
24016b52:	6553      	str	r3, [r2, #84]	; 0x54
24016b54:	e003      	b.n	24016b5e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
24016b56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
24016b5a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
24016b5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
24016b62:	e9d3 2300 	ldrd	r2, r3, [r3]
24016b66:	f002 0340 	and.w	r3, r2, #64	; 0x40
24016b6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
24016b6e:	2300      	movs	r3, #0
24016b70:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
24016b74:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
24016b78:	460b      	mov	r3, r1
24016b7a:	4313      	orrs	r3, r2
24016b7c:	d058      	beq.n	24016c30 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
24016b7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
24016b82:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
24016b86:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
24016b8a:	d033      	beq.n	24016bf4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
24016b8c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
24016b90:	d82c      	bhi.n	24016bec <HAL_RCCEx_PeriphCLKConfig+0xd00>
24016b92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
24016b96:	d02f      	beq.n	24016bf8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
24016b98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
24016b9c:	d826      	bhi.n	24016bec <HAL_RCCEx_PeriphCLKConfig+0xd00>
24016b9e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
24016ba2:	d02b      	beq.n	24016bfc <HAL_RCCEx_PeriphCLKConfig+0xd10>
24016ba4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
24016ba8:	d820      	bhi.n	24016bec <HAL_RCCEx_PeriphCLKConfig+0xd00>
24016baa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
24016bae:	d012      	beq.n	24016bd6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
24016bb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
24016bb4:	d81a      	bhi.n	24016bec <HAL_RCCEx_PeriphCLKConfig+0xd00>
24016bb6:	2b00      	cmp	r3, #0
24016bb8:	d022      	beq.n	24016c00 <HAL_RCCEx_PeriphCLKConfig+0xd14>
24016bba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
24016bbe:	d115      	bne.n	24016bec <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24016bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
24016bc4:	3308      	adds	r3, #8
24016bc6:	2100      	movs	r1, #0
24016bc8:	4618      	mov	r0, r3
24016bca:	f002 f915 	bl	24018df8 <RCCEx_PLL2_Config>
24016bce:	4603      	mov	r3, r0
24016bd0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
24016bd4:	e015      	b.n	24016c02 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
24016bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
24016bda:	3328      	adds	r3, #40	; 0x28
24016bdc:	2102      	movs	r1, #2
24016bde:	4618      	mov	r0, r3
24016be0:	f002 f9bc 	bl	24018f5c <RCCEx_PLL3_Config>
24016be4:	4603      	mov	r3, r0
24016be6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
24016bea:	e00a      	b.n	24016c02 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
24016bec:	2301      	movs	r3, #1
24016bee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
24016bf2:	e006      	b.n	24016c02 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
24016bf4:	bf00      	nop
24016bf6:	e004      	b.n	24016c02 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
24016bf8:	bf00      	nop
24016bfa:	e002      	b.n	24016c02 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
24016bfc:	bf00      	nop
24016bfe:	e000      	b.n	24016c02 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
24016c00:	bf00      	nop
    }

    if (ret == HAL_OK)
24016c02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
24016c06:	2b00      	cmp	r3, #0
24016c08:	d10e      	bne.n	24016c28 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
24016c0a:	4b06      	ldr	r3, [pc, #24]	; (24016c24 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
24016c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24016c0e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
24016c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
24016c16:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
24016c1a:	4a02      	ldr	r2, [pc, #8]	; (24016c24 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
24016c1c:	430b      	orrs	r3, r1
24016c1e:	6593      	str	r3, [r2, #88]	; 0x58
24016c20:	e006      	b.n	24016c30 <HAL_RCCEx_PeriphCLKConfig+0xd44>
24016c22:	bf00      	nop
24016c24:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
24016c28:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
24016c2c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
24016c30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
24016c34:	e9d3 2300 	ldrd	r2, r3, [r3]
24016c38:	f002 0380 	and.w	r3, r2, #128	; 0x80
24016c3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
24016c40:	2300      	movs	r3, #0
24016c42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
24016c46:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
24016c4a:	460b      	mov	r3, r1
24016c4c:	4313      	orrs	r3, r2
24016c4e:	d055      	beq.n	24016cfc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
24016c50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
24016c54:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
24016c58:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
24016c5c:	d033      	beq.n	24016cc6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
24016c5e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
24016c62:	d82c      	bhi.n	24016cbe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
24016c64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
24016c68:	d02f      	beq.n	24016cca <HAL_RCCEx_PeriphCLKConfig+0xdde>
24016c6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
24016c6e:	d826      	bhi.n	24016cbe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
24016c70:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
24016c74:	d02b      	beq.n	24016cce <HAL_RCCEx_PeriphCLKConfig+0xde2>
24016c76:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
24016c7a:	d820      	bhi.n	24016cbe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
24016c7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
24016c80:	d012      	beq.n	24016ca8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
24016c82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
24016c86:	d81a      	bhi.n	24016cbe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
24016c88:	2b00      	cmp	r3, #0
24016c8a:	d022      	beq.n	24016cd2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
24016c8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
24016c90:	d115      	bne.n	24016cbe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24016c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
24016c96:	3308      	adds	r3, #8
24016c98:	2100      	movs	r1, #0
24016c9a:	4618      	mov	r0, r3
24016c9c:	f002 f8ac 	bl	24018df8 <RCCEx_PLL2_Config>
24016ca0:	4603      	mov	r3, r0
24016ca2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
24016ca6:	e015      	b.n	24016cd4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
24016ca8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
24016cac:	3328      	adds	r3, #40	; 0x28
24016cae:	2102      	movs	r1, #2
24016cb0:	4618      	mov	r0, r3
24016cb2:	f002 f953 	bl	24018f5c <RCCEx_PLL3_Config>
24016cb6:	4603      	mov	r3, r0
24016cb8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
24016cbc:	e00a      	b.n	24016cd4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
24016cbe:	2301      	movs	r3, #1
24016cc0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
24016cc4:	e006      	b.n	24016cd4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
24016cc6:	bf00      	nop
24016cc8:	e004      	b.n	24016cd4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
24016cca:	bf00      	nop
24016ccc:	e002      	b.n	24016cd4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
24016cce:	bf00      	nop
24016cd0:	e000      	b.n	24016cd4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
24016cd2:	bf00      	nop
    }

    if (ret == HAL_OK)
24016cd4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
24016cd8:	2b00      	cmp	r3, #0
24016cda:	d10b      	bne.n	24016cf4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
24016cdc:	4ba1      	ldr	r3, [pc, #644]	; (24016f64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
24016cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24016ce0:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
24016ce4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
24016ce8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
24016cec:	4a9d      	ldr	r2, [pc, #628]	; (24016f64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
24016cee:	430b      	orrs	r3, r1
24016cf0:	6593      	str	r3, [r2, #88]	; 0x58
24016cf2:	e003      	b.n	24016cfc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
24016cf4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
24016cf8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
24016cfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
24016d00:	e9d3 2300 	ldrd	r2, r3, [r3]
24016d04:	f002 0308 	and.w	r3, r2, #8
24016d08:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
24016d0c:	2300      	movs	r3, #0
24016d0e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
24016d12:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
24016d16:	460b      	mov	r3, r1
24016d18:	4313      	orrs	r3, r2
24016d1a:	d01e      	beq.n	24016d5a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
24016d1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
24016d20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
24016d24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
24016d28:	d10c      	bne.n	24016d44 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
24016d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
24016d2e:	3328      	adds	r3, #40	; 0x28
24016d30:	2102      	movs	r1, #2
24016d32:	4618      	mov	r0, r3
24016d34:	f002 f912 	bl	24018f5c <RCCEx_PLL3_Config>
24016d38:	4603      	mov	r3, r0
24016d3a:	2b00      	cmp	r3, #0
24016d3c:	d002      	beq.n	24016d44 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
24016d3e:	2301      	movs	r3, #1
24016d40:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
24016d44:	4b87      	ldr	r3, [pc, #540]	; (24016f64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
24016d46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24016d48:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
24016d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
24016d50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
24016d54:	4a83      	ldr	r2, [pc, #524]	; (24016f64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
24016d56:	430b      	orrs	r3, r1
24016d58:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
24016d5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
24016d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
24016d62:	f002 0310 	and.w	r3, r2, #16
24016d66:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
24016d6a:	2300      	movs	r3, #0
24016d6c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
24016d70:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
24016d74:	460b      	mov	r3, r1
24016d76:	4313      	orrs	r3, r2
24016d78:	d01e      	beq.n	24016db8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
24016d7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
24016d7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
24016d82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
24016d86:	d10c      	bne.n	24016da2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
24016d88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
24016d8c:	3328      	adds	r3, #40	; 0x28
24016d8e:	2102      	movs	r1, #2
24016d90:	4618      	mov	r0, r3
24016d92:	f002 f8e3 	bl	24018f5c <RCCEx_PLL3_Config>
24016d96:	4603      	mov	r3, r0
24016d98:	2b00      	cmp	r3, #0
24016d9a:	d002      	beq.n	24016da2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
24016d9c:	2301      	movs	r3, #1
24016d9e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
24016da2:	4b70      	ldr	r3, [pc, #448]	; (24016f64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
24016da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24016da6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
24016daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
24016dae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
24016db2:	4a6c      	ldr	r2, [pc, #432]	; (24016f64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
24016db4:	430b      	orrs	r3, r1
24016db6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
24016db8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
24016dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
24016dc0:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
24016dc4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
24016dc8:	2300      	movs	r3, #0
24016dca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
24016dce:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
24016dd2:	460b      	mov	r3, r1
24016dd4:	4313      	orrs	r3, r2
24016dd6:	d03e      	beq.n	24016e56 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
24016dd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
24016ddc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
24016de0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
24016de4:	d022      	beq.n	24016e2c <HAL_RCCEx_PeriphCLKConfig+0xf40>
24016de6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
24016dea:	d81b      	bhi.n	24016e24 <HAL_RCCEx_PeriphCLKConfig+0xf38>
24016dec:	2b00      	cmp	r3, #0
24016dee:	d003      	beq.n	24016df8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
24016df0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
24016df4:	d00b      	beq.n	24016e0e <HAL_RCCEx_PeriphCLKConfig+0xf22>
24016df6:	e015      	b.n	24016e24 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24016df8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
24016dfc:	3308      	adds	r3, #8
24016dfe:	2100      	movs	r1, #0
24016e00:	4618      	mov	r0, r3
24016e02:	f001 fff9 	bl	24018df8 <RCCEx_PLL2_Config>
24016e06:	4603      	mov	r3, r0
24016e08:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
24016e0c:	e00f      	b.n	24016e2e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
24016e0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
24016e12:	3328      	adds	r3, #40	; 0x28
24016e14:	2102      	movs	r1, #2
24016e16:	4618      	mov	r0, r3
24016e18:	f002 f8a0 	bl	24018f5c <RCCEx_PLL3_Config>
24016e1c:	4603      	mov	r3, r0
24016e1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
24016e22:	e004      	b.n	24016e2e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
24016e24:	2301      	movs	r3, #1
24016e26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
24016e2a:	e000      	b.n	24016e2e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
24016e2c:	bf00      	nop
    }

    if (ret == HAL_OK)
24016e2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
24016e32:	2b00      	cmp	r3, #0
24016e34:	d10b      	bne.n	24016e4e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
24016e36:	4b4b      	ldr	r3, [pc, #300]	; (24016f64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
24016e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24016e3a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
24016e3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
24016e42:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
24016e46:	4a47      	ldr	r2, [pc, #284]	; (24016f64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
24016e48:	430b      	orrs	r3, r1
24016e4a:	6593      	str	r3, [r2, #88]	; 0x58
24016e4c:	e003      	b.n	24016e56 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
24016e4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
24016e52:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
24016e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
24016e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
24016e5e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
24016e62:	67bb      	str	r3, [r7, #120]	; 0x78
24016e64:	2300      	movs	r3, #0
24016e66:	67fb      	str	r3, [r7, #124]	; 0x7c
24016e68:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
24016e6c:	460b      	mov	r3, r1
24016e6e:	4313      	orrs	r3, r2
24016e70:	d03b      	beq.n	24016eea <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
24016e72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
24016e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
24016e7a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
24016e7e:	d01f      	beq.n	24016ec0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
24016e80:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
24016e84:	d818      	bhi.n	24016eb8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
24016e86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
24016e8a:	d003      	beq.n	24016e94 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
24016e8c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
24016e90:	d007      	beq.n	24016ea2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
24016e92:	e011      	b.n	24016eb8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24016e94:	4b33      	ldr	r3, [pc, #204]	; (24016f64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
24016e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24016e98:	4a32      	ldr	r2, [pc, #200]	; (24016f64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
24016e9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24016e9e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
24016ea0:	e00f      	b.n	24016ec2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
24016ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
24016ea6:	3328      	adds	r3, #40	; 0x28
24016ea8:	2101      	movs	r1, #1
24016eaa:	4618      	mov	r0, r3
24016eac:	f002 f856 	bl	24018f5c <RCCEx_PLL3_Config>
24016eb0:	4603      	mov	r3, r0
24016eb2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
24016eb6:	e004      	b.n	24016ec2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
24016eb8:	2301      	movs	r3, #1
24016eba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
24016ebe:	e000      	b.n	24016ec2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
24016ec0:	bf00      	nop
    }

    if (ret == HAL_OK)
24016ec2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
24016ec6:	2b00      	cmp	r3, #0
24016ec8:	d10b      	bne.n	24016ee2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
24016eca:	4b26      	ldr	r3, [pc, #152]	; (24016f64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
24016ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24016ece:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
24016ed2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
24016ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
24016eda:	4a22      	ldr	r2, [pc, #136]	; (24016f64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
24016edc:	430b      	orrs	r3, r1
24016ede:	6553      	str	r3, [r2, #84]	; 0x54
24016ee0:	e003      	b.n	24016eea <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
24016ee2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
24016ee6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
24016eea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
24016eee:	e9d3 2300 	ldrd	r2, r3, [r3]
24016ef2:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
24016ef6:	673b      	str	r3, [r7, #112]	; 0x70
24016ef8:	2300      	movs	r3, #0
24016efa:	677b      	str	r3, [r7, #116]	; 0x74
24016efc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
24016f00:	460b      	mov	r3, r1
24016f02:	4313      	orrs	r3, r2
24016f04:	d034      	beq.n	24016f70 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
24016f06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
24016f0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24016f0c:	2b00      	cmp	r3, #0
24016f0e:	d003      	beq.n	24016f18 <HAL_RCCEx_PeriphCLKConfig+0x102c>
24016f10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
24016f14:	d007      	beq.n	24016f26 <HAL_RCCEx_PeriphCLKConfig+0x103a>
24016f16:	e011      	b.n	24016f3c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24016f18:	4b12      	ldr	r3, [pc, #72]	; (24016f64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
24016f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24016f1c:	4a11      	ldr	r2, [pc, #68]	; (24016f64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
24016f1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24016f22:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
24016f24:	e00e      	b.n	24016f44 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
24016f26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
24016f2a:	3308      	adds	r3, #8
24016f2c:	2102      	movs	r1, #2
24016f2e:	4618      	mov	r0, r3
24016f30:	f001 ff62 	bl	24018df8 <RCCEx_PLL2_Config>
24016f34:	4603      	mov	r3, r0
24016f36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
24016f3a:	e003      	b.n	24016f44 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
24016f3c:	2301      	movs	r3, #1
24016f3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
24016f42:	bf00      	nop
    }

    if (ret == HAL_OK)
24016f44:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
24016f48:	2b00      	cmp	r3, #0
24016f4a:	d10d      	bne.n	24016f68 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
24016f4c:	4b05      	ldr	r3, [pc, #20]	; (24016f64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
24016f4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24016f50:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
24016f54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
24016f58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24016f5a:	4a02      	ldr	r2, [pc, #8]	; (24016f64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
24016f5c:	430b      	orrs	r3, r1
24016f5e:	64d3      	str	r3, [r2, #76]	; 0x4c
24016f60:	e006      	b.n	24016f70 <HAL_RCCEx_PeriphCLKConfig+0x1084>
24016f62:	bf00      	nop
24016f64:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
24016f68:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
24016f6c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
24016f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
24016f74:	e9d3 2300 	ldrd	r2, r3, [r3]
24016f78:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
24016f7c:	66bb      	str	r3, [r7, #104]	; 0x68
24016f7e:	2300      	movs	r3, #0
24016f80:	66fb      	str	r3, [r7, #108]	; 0x6c
24016f82:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
24016f86:	460b      	mov	r3, r1
24016f88:	4313      	orrs	r3, r2
24016f8a:	d00c      	beq.n	24016fa6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
24016f8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
24016f90:	3328      	adds	r3, #40	; 0x28
24016f92:	2102      	movs	r1, #2
24016f94:	4618      	mov	r0, r3
24016f96:	f001 ffe1 	bl	24018f5c <RCCEx_PLL3_Config>
24016f9a:	4603      	mov	r3, r0
24016f9c:	2b00      	cmp	r3, #0
24016f9e:	d002      	beq.n	24016fa6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
24016fa0:	2301      	movs	r3, #1
24016fa2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
24016fa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
24016faa:	e9d3 2300 	ldrd	r2, r3, [r3]
24016fae:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
24016fb2:	663b      	str	r3, [r7, #96]	; 0x60
24016fb4:	2300      	movs	r3, #0
24016fb6:	667b      	str	r3, [r7, #100]	; 0x64
24016fb8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
24016fbc:	460b      	mov	r3, r1
24016fbe:	4313      	orrs	r3, r2
24016fc0:	d038      	beq.n	24017034 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
24016fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
24016fc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
24016fca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
24016fce:	d018      	beq.n	24017002 <HAL_RCCEx_PeriphCLKConfig+0x1116>
24016fd0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
24016fd4:	d811      	bhi.n	24016ffa <HAL_RCCEx_PeriphCLKConfig+0x110e>
24016fd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
24016fda:	d014      	beq.n	24017006 <HAL_RCCEx_PeriphCLKConfig+0x111a>
24016fdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
24016fe0:	d80b      	bhi.n	24016ffa <HAL_RCCEx_PeriphCLKConfig+0x110e>
24016fe2:	2b00      	cmp	r3, #0
24016fe4:	d011      	beq.n	2401700a <HAL_RCCEx_PeriphCLKConfig+0x111e>
24016fe6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
24016fea:	d106      	bne.n	24016ffa <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24016fec:	4bc3      	ldr	r3, [pc, #780]	; (240172fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
24016fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24016ff0:	4ac2      	ldr	r2, [pc, #776]	; (240172fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
24016ff2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24016ff6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
24016ff8:	e008      	b.n	2401700c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
24016ffa:	2301      	movs	r3, #1
24016ffc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
24017000:	e004      	b.n	2401700c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
24017002:	bf00      	nop
24017004:	e002      	b.n	2401700c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
24017006:	bf00      	nop
24017008:	e000      	b.n	2401700c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
2401700a:	bf00      	nop
    }

    if (ret == HAL_OK)
2401700c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
24017010:	2b00      	cmp	r3, #0
24017012:	d10b      	bne.n	2401702c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
24017014:	4bb9      	ldr	r3, [pc, #740]	; (240172fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
24017016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24017018:	f423 7140 	bic.w	r1, r3, #768	; 0x300
2401701c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
24017020:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
24017024:	4ab5      	ldr	r2, [pc, #724]	; (240172fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
24017026:	430b      	orrs	r3, r1
24017028:	6553      	str	r3, [r2, #84]	; 0x54
2401702a:	e003      	b.n	24017034 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
2401702c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
24017030:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
24017034:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
24017038:	e9d3 2300 	ldrd	r2, r3, [r3]
2401703c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
24017040:	65bb      	str	r3, [r7, #88]	; 0x58
24017042:	2300      	movs	r3, #0
24017044:	65fb      	str	r3, [r7, #92]	; 0x5c
24017046:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
2401704a:	460b      	mov	r3, r1
2401704c:	4313      	orrs	r3, r2
2401704e:	d009      	beq.n	24017064 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
24017050:	4baa      	ldr	r3, [pc, #680]	; (240172fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
24017052:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24017054:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
24017058:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
2401705c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
2401705e:	4aa7      	ldr	r2, [pc, #668]	; (240172fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
24017060:	430b      	orrs	r3, r1
24017062:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
24017064:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
24017068:	e9d3 2300 	ldrd	r2, r3, [r3]
2401706c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
24017070:	653b      	str	r3, [r7, #80]	; 0x50
24017072:	2300      	movs	r3, #0
24017074:	657b      	str	r3, [r7, #84]	; 0x54
24017076:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
2401707a:	460b      	mov	r3, r1
2401707c:	4313      	orrs	r3, r2
2401707e:	d00a      	beq.n	24017096 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
24017080:	4b9e      	ldr	r3, [pc, #632]	; (240172fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
24017082:	691b      	ldr	r3, [r3, #16]
24017084:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
24017088:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
2401708c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
24017090:	4a9a      	ldr	r2, [pc, #616]	; (240172fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
24017092:	430b      	orrs	r3, r1
24017094:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
24017096:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
2401709a:	e9d3 2300 	ldrd	r2, r3, [r3]
2401709e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
240170a2:	64bb      	str	r3, [r7, #72]	; 0x48
240170a4:	2300      	movs	r3, #0
240170a6:	64fb      	str	r3, [r7, #76]	; 0x4c
240170a8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
240170ac:	460b      	mov	r3, r1
240170ae:	4313      	orrs	r3, r2
240170b0:	d009      	beq.n	240170c6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
240170b2:	4b92      	ldr	r3, [pc, #584]	; (240172fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
240170b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
240170b6:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
240170ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
240170be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
240170c0:	4a8e      	ldr	r2, [pc, #568]	; (240172fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
240170c2:	430b      	orrs	r3, r1
240170c4:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
240170c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
240170ca:	e9d3 2300 	ldrd	r2, r3, [r3]
240170ce:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
240170d2:	643b      	str	r3, [r7, #64]	; 0x40
240170d4:	2300      	movs	r3, #0
240170d6:	647b      	str	r3, [r7, #68]	; 0x44
240170d8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
240170dc:	460b      	mov	r3, r1
240170de:	4313      	orrs	r3, r2
240170e0:	d00e      	beq.n	24017100 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
240170e2:	4b86      	ldr	r3, [pc, #536]	; (240172fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
240170e4:	691b      	ldr	r3, [r3, #16]
240170e6:	4a85      	ldr	r2, [pc, #532]	; (240172fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
240170e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
240170ec:	6113      	str	r3, [r2, #16]
240170ee:	4b83      	ldr	r3, [pc, #524]	; (240172fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
240170f0:	6919      	ldr	r1, [r3, #16]
240170f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
240170f6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
240170fa:	4a80      	ldr	r2, [pc, #512]	; (240172fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
240170fc:	430b      	orrs	r3, r1
240170fe:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
24017100:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
24017104:	e9d3 2300 	ldrd	r2, r3, [r3]
24017108:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
2401710c:	63bb      	str	r3, [r7, #56]	; 0x38
2401710e:	2300      	movs	r3, #0
24017110:	63fb      	str	r3, [r7, #60]	; 0x3c
24017112:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
24017116:	460b      	mov	r3, r1
24017118:	4313      	orrs	r3, r2
2401711a:	d009      	beq.n	24017130 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
2401711c:	4b77      	ldr	r3, [pc, #476]	; (240172fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
2401711e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24017120:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
24017124:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
24017128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2401712a:	4a74      	ldr	r2, [pc, #464]	; (240172fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
2401712c:	430b      	orrs	r3, r1
2401712e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
24017130:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
24017134:	e9d3 2300 	ldrd	r2, r3, [r3]
24017138:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
2401713c:	633b      	str	r3, [r7, #48]	; 0x30
2401713e:	2300      	movs	r3, #0
24017140:	637b      	str	r3, [r7, #52]	; 0x34
24017142:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
24017146:	460b      	mov	r3, r1
24017148:	4313      	orrs	r3, r2
2401714a:	d00a      	beq.n	24017162 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
2401714c:	4b6b      	ldr	r3, [pc, #428]	; (240172fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
2401714e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24017150:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
24017154:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
24017158:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
2401715c:	4a67      	ldr	r2, [pc, #412]	; (240172fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
2401715e:	430b      	orrs	r3, r1
24017160:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
24017162:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
24017166:	e9d3 2300 	ldrd	r2, r3, [r3]
2401716a:	2100      	movs	r1, #0
2401716c:	62b9      	str	r1, [r7, #40]	; 0x28
2401716e:	f003 0301 	and.w	r3, r3, #1
24017172:	62fb      	str	r3, [r7, #44]	; 0x2c
24017174:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
24017178:	460b      	mov	r3, r1
2401717a:	4313      	orrs	r3, r2
2401717c:	d011      	beq.n	240171a2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
2401717e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
24017182:	3308      	adds	r3, #8
24017184:	2100      	movs	r1, #0
24017186:	4618      	mov	r0, r3
24017188:	f001 fe36 	bl	24018df8 <RCCEx_PLL2_Config>
2401718c:	4603      	mov	r3, r0
2401718e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
24017192:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
24017196:	2b00      	cmp	r3, #0
24017198:	d003      	beq.n	240171a2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
2401719a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
2401719e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
240171a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
240171a6:	e9d3 2300 	ldrd	r2, r3, [r3]
240171aa:	2100      	movs	r1, #0
240171ac:	6239      	str	r1, [r7, #32]
240171ae:	f003 0302 	and.w	r3, r3, #2
240171b2:	627b      	str	r3, [r7, #36]	; 0x24
240171b4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
240171b8:	460b      	mov	r3, r1
240171ba:	4313      	orrs	r3, r2
240171bc:	d011      	beq.n	240171e2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
240171be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
240171c2:	3308      	adds	r3, #8
240171c4:	2101      	movs	r1, #1
240171c6:	4618      	mov	r0, r3
240171c8:	f001 fe16 	bl	24018df8 <RCCEx_PLL2_Config>
240171cc:	4603      	mov	r3, r0
240171ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
240171d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
240171d6:	2b00      	cmp	r3, #0
240171d8:	d003      	beq.n	240171e2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
240171da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
240171de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
240171e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
240171e6:	e9d3 2300 	ldrd	r2, r3, [r3]
240171ea:	2100      	movs	r1, #0
240171ec:	61b9      	str	r1, [r7, #24]
240171ee:	f003 0304 	and.w	r3, r3, #4
240171f2:	61fb      	str	r3, [r7, #28]
240171f4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
240171f8:	460b      	mov	r3, r1
240171fa:	4313      	orrs	r3, r2
240171fc:	d011      	beq.n	24017222 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
240171fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
24017202:	3308      	adds	r3, #8
24017204:	2102      	movs	r1, #2
24017206:	4618      	mov	r0, r3
24017208:	f001 fdf6 	bl	24018df8 <RCCEx_PLL2_Config>
2401720c:	4603      	mov	r3, r0
2401720e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
24017212:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
24017216:	2b00      	cmp	r3, #0
24017218:	d003      	beq.n	24017222 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
2401721a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
2401721e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
24017222:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
24017226:	e9d3 2300 	ldrd	r2, r3, [r3]
2401722a:	2100      	movs	r1, #0
2401722c:	6139      	str	r1, [r7, #16]
2401722e:	f003 0308 	and.w	r3, r3, #8
24017232:	617b      	str	r3, [r7, #20]
24017234:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
24017238:	460b      	mov	r3, r1
2401723a:	4313      	orrs	r3, r2
2401723c:	d011      	beq.n	24017262 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
2401723e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
24017242:	3328      	adds	r3, #40	; 0x28
24017244:	2100      	movs	r1, #0
24017246:	4618      	mov	r0, r3
24017248:	f001 fe88 	bl	24018f5c <RCCEx_PLL3_Config>
2401724c:	4603      	mov	r3, r0
2401724e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
24017252:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
24017256:	2b00      	cmp	r3, #0
24017258:	d003      	beq.n	24017262 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
2401725a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
2401725e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
24017262:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
24017266:	e9d3 2300 	ldrd	r2, r3, [r3]
2401726a:	2100      	movs	r1, #0
2401726c:	60b9      	str	r1, [r7, #8]
2401726e:	f003 0310 	and.w	r3, r3, #16
24017272:	60fb      	str	r3, [r7, #12]
24017274:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
24017278:	460b      	mov	r3, r1
2401727a:	4313      	orrs	r3, r2
2401727c:	d011      	beq.n	240172a2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
2401727e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
24017282:	3328      	adds	r3, #40	; 0x28
24017284:	2101      	movs	r1, #1
24017286:	4618      	mov	r0, r3
24017288:	f001 fe68 	bl	24018f5c <RCCEx_PLL3_Config>
2401728c:	4603      	mov	r3, r0
2401728e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
24017292:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
24017296:	2b00      	cmp	r3, #0
24017298:	d003      	beq.n	240172a2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
2401729a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
2401729e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
240172a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
240172a6:	e9d3 2300 	ldrd	r2, r3, [r3]
240172aa:	2100      	movs	r1, #0
240172ac:	6039      	str	r1, [r7, #0]
240172ae:	f003 0320 	and.w	r3, r3, #32
240172b2:	607b      	str	r3, [r7, #4]
240172b4:	e9d7 1200 	ldrd	r1, r2, [r7]
240172b8:	460b      	mov	r3, r1
240172ba:	4313      	orrs	r3, r2
240172bc:	d011      	beq.n	240172e2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
240172be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
240172c2:	3328      	adds	r3, #40	; 0x28
240172c4:	2102      	movs	r1, #2
240172c6:	4618      	mov	r0, r3
240172c8:	f001 fe48 	bl	24018f5c <RCCEx_PLL3_Config>
240172cc:	4603      	mov	r3, r0
240172ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
240172d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
240172d6:	2b00      	cmp	r3, #0
240172d8:	d003      	beq.n	240172e2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
240172da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
240172de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
240172e2:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
240172e6:	2b00      	cmp	r3, #0
240172e8:	d101      	bne.n	240172ee <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
240172ea:	2300      	movs	r3, #0
240172ec:	e000      	b.n	240172f0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
240172ee:	2301      	movs	r3, #1
}
240172f0:	4618      	mov	r0, r3
240172f2:	f507 7794 	add.w	r7, r7, #296	; 0x128
240172f6:	46bd      	mov	sp, r7
240172f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
240172fc:	58024400 	.word	0x58024400

24017300 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @retval None
  *
  *   (*) : Available on some STM32H7 lines only.
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
24017300:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
24017304:	b08b      	sub	sp, #44	; 0x2c
24017306:	af00      	add	r7, sp, #0
24017308:	6278      	str	r0, [r7, #36]	; 0x24
  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection =
2401730a:	6a79      	ldr	r1, [r7, #36]	; 0x24
2401730c:	4aab      	ldr	r2, [pc, #684]	; (240175bc <HAL_RCCEx_GetPeriphCLKConfig+0x2bc>)
2401730e:	f04f 0300 	mov.w	r3, #0
24017312:	e9c1 2300 	strd	r2, r3, [r1]
    RCC_PERIPHCLK_CKPER;

#if defined(I2C5)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_I2C1235;
#else
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_I2C123;
24017316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24017318:	e9d3 2300 	ldrd	r2, r3, [r3]
2401731c:	f042 0408 	orr.w	r4, r2, #8
24017320:	461d      	mov	r5, r3
24017322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24017324:	e9c3 4500 	strd	r4, r5, [r3]
#endif /* RCC_CDCCIP1R_SAI2ASEL */
#if defined(RCC_CDCCIP1R_SAI2BSEL)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_SAI2B;
#endif /* RCC_CDCCIP1R_SAI2BSEL */
#if defined(SAI3)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_SAI23;
24017328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2401732a:	e9d3 2300 	ldrd	r2, r3, [r3]
2401732e:	f442 7100 	orr.w	r1, r2, #512	; 0x200
24017332:	61b9      	str	r1, [r7, #24]
24017334:	61fb      	str	r3, [r7, #28]
24017336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24017338:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
2401733c:	e9c3 1200 	strd	r1, r2, [r3]
#endif /* SAI3 */
#if defined(SAI4)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_SAI4A;
24017340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24017342:	e9d3 2300 	ldrd	r2, r3, [r3]
24017346:	f442 6180 	orr.w	r1, r2, #1024	; 0x400
2401734a:	6139      	str	r1, [r7, #16]
2401734c:	617b      	str	r3, [r7, #20]
2401734e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24017350:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
24017354:	e9c3 1200 	strd	r1, r2, [r3]
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_SAI4B;
24017358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2401735a:	e9d3 2300 	ldrd	r2, r3, [r3]
2401735e:	f442 6100 	orr.w	r1, r2, #2048	; 0x800
24017362:	60b9      	str	r1, [r7, #8]
24017364:	60fb      	str	r3, [r7, #12]
24017366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24017368:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
2401736c:	e9c3 1200 	strd	r1, r2, [r3]
#endif /* SAI4 */
#if defined(DFSDM2_BASE)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_DFSDM2;
#endif /* DFSDM2 */
#if defined(QUADSPI)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_QSPI;
24017370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24017372:	e9d3 2300 	ldrd	r2, r3, [r3]
24017376:	f042 7100 	orr.w	r1, r2, #33554432	; 0x2000000
2401737a:	6039      	str	r1, [r7, #0]
2401737c:	607b      	str	r3, [r7, #4]
2401737e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24017380:	e9d7 1200 	ldrd	r1, r2, [r7]
24017384:	e9c3 1200 	strd	r1, r2, [r3]
#endif /* QUADSPI */
#if defined(OCTOSPI1) || defined(OCTOSPI2)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_OSPI;
#endif /* OCTOSPI1 || OCTOSPI2 */
#if defined(HRTIM1)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_HRTIM1;
24017388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2401738a:	e9d3 2300 	ldrd	r2, r3, [r3]
2401738e:	f042 5a80 	orr.w	sl, r2, #268435456	; 0x10000000
24017392:	469b      	mov	fp, r3
24017394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24017396:	e9c3 ab00 	strd	sl, fp, [r3]
#endif /* HRTIM1 */
#if defined(LTDC)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_LTDC;
2401739a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2401739c:	e9d3 2300 	ldrd	r2, r3, [r3]
240173a0:	f042 5800 	orr.w	r8, r2, #536870912	; 0x20000000
240173a4:	4699      	mov	r9, r3
240173a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
240173a8:	e9c3 8900 	strd	r8, r9, [r3]
#if defined(DSI)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_DSI;
#endif /* DSI */

  /* Get the PLL3 Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLL3.PLL3M = (uint32_t)((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> RCC_PLLCKSELR_DIVM3_Pos);
240173ac:	4b84      	ldr	r3, [pc, #528]	; (240175c0 <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
240173ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
240173b0:	0d1b      	lsrs	r3, r3, #20
240173b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
240173b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
240173b8:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInit->PLL3.PLL3N = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) >> RCC_PLL3DIVR_N3_Pos) + 1U;
240173ba:	4b81      	ldr	r3, [pc, #516]	; (240175c0 <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
240173bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
240173be:	f3c3 0308 	ubfx	r3, r3, #0, #9
240173c2:	1c5a      	adds	r2, r3, #1
240173c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
240173c6:	62da      	str	r2, [r3, #44]	; 0x2c
  PeriphClkInit->PLL3.PLL3R = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> RCC_PLL3DIVR_R3_Pos) + 1U;
240173c8:	4b7d      	ldr	r3, [pc, #500]	; (240175c0 <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
240173ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
240173cc:	0e1b      	lsrs	r3, r3, #24
240173ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
240173d2:	1c5a      	adds	r2, r3, #1
240173d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
240173d6:	639a      	str	r2, [r3, #56]	; 0x38
  PeriphClkInit->PLL3.PLL3P = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> RCC_PLL3DIVR_P3_Pos) + 1U;
240173d8:	4b79      	ldr	r3, [pc, #484]	; (240175c0 <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
240173da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
240173dc:	0a5b      	lsrs	r3, r3, #9
240173de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
240173e2:	1c5a      	adds	r2, r3, #1
240173e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
240173e6:	631a      	str	r2, [r3, #48]	; 0x30
  PeriphClkInit->PLL3.PLL3Q = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> RCC_PLL3DIVR_Q3_Pos) + 1U;
240173e8:	4b75      	ldr	r3, [pc, #468]	; (240175c0 <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
240173ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
240173ec:	0c1b      	lsrs	r3, r3, #16
240173ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
240173f2:	1c5a      	adds	r2, r3, #1
240173f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
240173f6:	635a      	str	r2, [r3, #52]	; 0x34
  PeriphClkInit->PLL3.PLL3RGE = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL3RGE) >> RCC_PLLCFGR_PLL3RGE_Pos);
240173f8:	4b71      	ldr	r3, [pc, #452]	; (240175c0 <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
240173fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
240173fc:	0a9b      	lsrs	r3, r3, #10
240173fe:	f003 0203 	and.w	r2, r3, #3
24017402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24017404:	63da      	str	r2, [r3, #60]	; 0x3c
  PeriphClkInit->PLL3.PLL3VCOSEL = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL3VCOSEL) >> RCC_PLLCFGR_PLL3VCOSEL_Pos);
24017406:	4b6e      	ldr	r3, [pc, #440]	; (240175c0 <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
24017408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2401740a:	0a5b      	lsrs	r3, r3, #9
2401740c:	f003 0201 	and.w	r2, r3, #1
24017410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24017412:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get the PLL2 Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLL2.PLL2M = (uint32_t)((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> RCC_PLLCKSELR_DIVM2_Pos);
24017414:	4b6a      	ldr	r3, [pc, #424]	; (240175c0 <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
24017416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24017418:	0b1b      	lsrs	r3, r3, #12
2401741a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
2401741e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24017420:	609a      	str	r2, [r3, #8]
  PeriphClkInit->PLL2.PLL2N = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) >> RCC_PLL2DIVR_N2_Pos) + 1U;
24017422:	4b67      	ldr	r3, [pc, #412]	; (240175c0 <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
24017424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24017426:	f3c3 0308 	ubfx	r3, r3, #0, #9
2401742a:	1c5a      	adds	r2, r3, #1
2401742c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2401742e:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLL2.PLL2R = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> RCC_PLL2DIVR_R2_Pos) + 1U;
24017430:	4b63      	ldr	r3, [pc, #396]	; (240175c0 <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
24017432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24017434:	0e1b      	lsrs	r3, r3, #24
24017436:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2401743a:	1c5a      	adds	r2, r3, #1
2401743c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2401743e:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLL2.PLL2P = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> RCC_PLL2DIVR_P2_Pos) + 1U;
24017440:	4b5f      	ldr	r3, [pc, #380]	; (240175c0 <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
24017442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24017444:	0a5b      	lsrs	r3, r3, #9
24017446:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2401744a:	1c5a      	adds	r2, r3, #1
2401744c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2401744e:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLL2.PLL2Q = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> RCC_PLL2DIVR_Q2_Pos) + 1U;
24017450:	4b5b      	ldr	r3, [pc, #364]	; (240175c0 <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
24017452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24017454:	0c1b      	lsrs	r3, r3, #16
24017456:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2401745a:	1c5a      	adds	r2, r3, #1
2401745c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2401745e:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLL2.PLL2RGE = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL2RGE) >> RCC_PLLCFGR_PLL2RGE_Pos);
24017460:	4b57      	ldr	r3, [pc, #348]	; (240175c0 <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
24017462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24017464:	099b      	lsrs	r3, r3, #6
24017466:	f003 0203 	and.w	r2, r3, #3
2401746a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2401746c:	61da      	str	r2, [r3, #28]
  PeriphClkInit->PLL2.PLL2VCOSEL = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL2VCOSEL) >> RCC_PLLCFGR_PLL2VCOSEL_Pos);
2401746e:	4b54      	ldr	r3, [pc, #336]	; (240175c0 <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
24017470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24017472:	095b      	lsrs	r3, r3, #5
24017474:	f003 0201 	and.w	r2, r3, #1
24017478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2401747a:	621a      	str	r2, [r3, #32]

  /* Get the USART1 configuration --------------------------------------------*/
  PeriphClkInit->Usart16ClockSelection      = __HAL_RCC_GET_USART16_SOURCE();
2401747c:	4b50      	ldr	r3, [pc, #320]	; (240175c0 <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
2401747e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24017480:	f003 0238 	and.w	r2, r3, #56	; 0x38
24017484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24017486:	67da      	str	r2, [r3, #124]	; 0x7c
  /* Get the USART2/3/4/5/7/8 clock source -----------------------------------*/
  PeriphClkInit->Usart234578ClockSelection  = __HAL_RCC_GET_USART234578_SOURCE();
24017488:	4b4d      	ldr	r3, [pc, #308]	; (240175c0 <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
2401748a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2401748c:	f003 0207 	and.w	r2, r3, #7
24017490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24017492:	679a      	str	r2, [r3, #120]	; 0x78
  /* Get the LPUART1 clock source --------------------------------------------*/
  PeriphClkInit->Lpuart1ClockSelection      = __HAL_RCC_GET_LPUART1_SOURCE();
24017494:	4b4a      	ldr	r3, [pc, #296]	; (240175c0 <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
24017496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24017498:	f003 0207 	and.w	r2, r3, #7
2401749c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2401749e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if defined(I2C5)
  /* Get the I2C1/2/3/5 clock source -----------------------------------------*/
  PeriphClkInit->I2c1235ClockSelection       = __HAL_RCC_GET_I2C1_SOURCE();
#else
  /* Get the I2C1/2/3 clock source -------------------------------------------*/
  PeriphClkInit->I2c123ClockSelection       = __HAL_RCC_GET_I2C1_SOURCE();
240174a2:	4b47      	ldr	r3, [pc, #284]	; (240175c0 <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
240174a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
240174a6:	f403 5240 	and.w	r2, r3, #12288	; 0x3000
240174aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
240174ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /*I2C5*/
  /* Get the LPTIM1 clock source ---------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection       = __HAL_RCC_GET_LPTIM1_SOURCE();
240174b0:	4b43      	ldr	r3, [pc, #268]	; (240175c0 <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
240174b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
240174b4:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
240174b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
240174ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  /* Get the LPTIM2 clock source ---------------------------------------------*/
  PeriphClkInit->Lptim2ClockSelection       = __HAL_RCC_GET_LPTIM2_SOURCE();
240174be:	4b40      	ldr	r3, [pc, #256]	; (240175c0 <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
240174c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
240174c2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
240174c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
240174c8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  /* Get the LPTIM3/4/5 clock source -----------------------------------------*/
  PeriphClkInit->Lptim345ClockSelection     = __HAL_RCC_GET_LPTIM345_SOURCE();
240174cc:	4b3c      	ldr	r3, [pc, #240]	; (240175c0 <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
240174ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
240174d0:	f403 4260 	and.w	r2, r3, #57344	; 0xe000
240174d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
240174d6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  /* Get the SAI1 clock source -----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection         = __HAL_RCC_GET_SAI1_SOURCE();
240174da:	4b39      	ldr	r3, [pc, #228]	; (240175c0 <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
240174dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
240174de:	f003 0207 	and.w	r2, r3, #7
240174e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
240174e4:	659a      	str	r2, [r3, #88]	; 0x58
#if defined(SAI3)
  /* Get the SAI2/3 clock source ---------------------------------------------*/
  PeriphClkInit->Sai23ClockSelection        = __HAL_RCC_GET_SAI23_SOURCE();
240174e6:	4b36      	ldr	r3, [pc, #216]	; (240175c0 <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
240174e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
240174ea:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
240174ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
240174f0:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Get the SAI2B clock source ---------------------------------------------*/
  PeriphClkInit->Sai2BClockSelection        = __HAL_RCC_GET_SAI2B_SOURCE();
#endif  /*SAI2B*/
#if defined(SAI4)
  /* Get the SAI4A clock source ----------------------------------------------*/
  PeriphClkInit->Sai4AClockSelection        = __HAL_RCC_GET_SAI4A_SOURCE();
240174f2:	4b33      	ldr	r3, [pc, #204]	; (240175c0 <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
240174f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
240174f6:	f403 0260 	and.w	r2, r3, #14680064	; 0xe00000
240174fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
240174fc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  /* Get the SAI4B clock source ----------------------------------------------*/
  PeriphClkInit->Sai4BClockSelection        = __HAL_RCC_GET_SAI4B_SOURCE();
24017500:	4b2f      	ldr	r3, [pc, #188]	; (240175c0 <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
24017502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24017504:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
24017508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2401750a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif  /*SAI4*/
  /* Get the RTC clock source ------------------------------------------------*/
  PeriphClkInit->RTCClockSelection          = __HAL_RCC_GET_RTC_SOURCE();
2401750e:	4b2c      	ldr	r3, [pc, #176]	; (240175c0 <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
24017510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24017512:	f403 7240 	and.w	r2, r3, #768	; 0x300
24017516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24017518:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  /* Get the USB clock source ------------------------------------------------*/
  PeriphClkInit->UsbClockSelection          = __HAL_RCC_GET_USB_SOURCE();
2401751c:	4b28      	ldr	r3, [pc, #160]	; (240175c0 <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
2401751e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24017520:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
24017524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24017526:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  /* Get the SDMMC clock source ----------------------------------------------*/
  PeriphClkInit->SdmmcClockSelection        = __HAL_RCC_GET_SDMMC_SOURCE();
2401752a:	4b25      	ldr	r3, [pc, #148]	; (240175c0 <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
2401752c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2401752e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
24017532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24017534:	651a      	str	r2, [r3, #80]	; 0x50
  /* Get the RNG clock source ------------------------------------------------*/
  PeriphClkInit->RngClockSelection          = __HAL_RCC_GET_RNG_SOURCE();
24017536:	4b22      	ldr	r3, [pc, #136]	; (240175c0 <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
24017538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2401753a:	f403 7240 	and.w	r2, r3, #768	; 0x300
2401753e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24017540:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(HRTIM1)
  /* Get the HRTIM1 clock source ---------------------------------------------*/
  PeriphClkInit->Hrtim1ClockSelection       = __HAL_RCC_GET_HRTIM1_SOURCE();
24017544:	4b1e      	ldr	r3, [pc, #120]	; (240175c0 <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
24017546:	691b      	ldr	r3, [r3, #16]
24017548:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
2401754c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2401754e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
#endif /* HRTIM1 */
  /* Get the ADC clock source ------------------------------------------------*/
  PeriphClkInit->AdcClockSelection          = __HAL_RCC_GET_ADC_SOURCE();
24017552:	4b1b      	ldr	r3, [pc, #108]	; (240175c0 <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
24017554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24017556:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
2401755a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2401755c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  /* Get the SWPMI1 clock source ---------------------------------------------*/
  PeriphClkInit->Swpmi1ClockSelection       = __HAL_RCC_GET_SWPMI1_SOURCE();
24017560:	4b17      	ldr	r3, [pc, #92]	; (240175c0 <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
24017562:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24017564:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
24017568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2401756a:	675a      	str	r2, [r3, #116]	; 0x74
  /* Get the DFSDM1 clock source ---------------------------------------------*/
  PeriphClkInit->Dfsdm1ClockSelection       = __HAL_RCC_GET_DFSDM1_SOURCE();
2401756c:	4b14      	ldr	r3, [pc, #80]	; (240175c0 <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
2401756e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24017570:	f003 7280 	and.w	r2, r3, #16777216	; 0x1000000
24017574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24017576:	66da      	str	r2, [r3, #108]	; 0x6c
#if defined(DFSDM2_BASE)
  /* Get the DFSDM2 clock source ---------------------------------------------*/
  PeriphClkInit->Dfsdm2ClockSelection       = __HAL_RCC_GET_DFSDM2_SOURCE();
#endif /* DFSDM2 */
  /* Get the SPDIFRX clock source --------------------------------------------*/
  PeriphClkInit->SpdifrxClockSelection      = __HAL_RCC_GET_SPDIFRX_SOURCE();
24017578:	4b11      	ldr	r3, [pc, #68]	; (240175c0 <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
2401757a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2401757c:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
24017580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24017582:	669a      	str	r2, [r3, #104]	; 0x68
  /* Get the SPI1/2/3 clock source -------------------------------------------*/
  PeriphClkInit->Spi123ClockSelection       = __HAL_RCC_GET_SPI123_SOURCE();
24017584:	4b0e      	ldr	r3, [pc, #56]	; (240175c0 <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
24017586:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24017588:	f403 42e0 	and.w	r2, r3, #28672	; 0x7000
2401758c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2401758e:	661a      	str	r2, [r3, #96]	; 0x60
  /* Get the SPI4/5 clock source ---------------------------------------------*/
  PeriphClkInit->Spi45ClockSelection        = __HAL_RCC_GET_SPI45_SOURCE();
24017590:	4b0b      	ldr	r3, [pc, #44]	; (240175c0 <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
24017592:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24017594:	f403 22e0 	and.w	r2, r3, #458752	; 0x70000
24017598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2401759a:	665a      	str	r2, [r3, #100]	; 0x64
  /* Get the SPI6 clock source -----------------------------------------------*/
  PeriphClkInit->Spi6ClockSelection         = __HAL_RCC_GET_SPI6_SOURCE();
2401759c:	4b08      	ldr	r3, [pc, #32]	; (240175c0 <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
2401759e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
240175a0:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
240175a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
240175a6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* Get the FDCAN clock source ----------------------------------------------*/
  PeriphClkInit->FdcanClockSelection        = __HAL_RCC_GET_FDCAN_SOURCE();
240175aa:	4b05      	ldr	r3, [pc, #20]	; (240175c0 <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
240175ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
240175ae:	f003 5240 	and.w	r2, r3, #805306368	; 0x30000000
240175b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
240175b4:	671a      	str	r2, [r3, #112]	; 0x70
  /* Get the CEC clock source ------------------------------------------------*/
  PeriphClkInit->CecClockSelection          = __HAL_RCC_GET_CEC_SOURCE();
240175b6:	4b02      	ldr	r3, [pc, #8]	; (240175c0 <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
240175b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
240175ba:	e003      	b.n	240175c4 <HAL_RCCEx_GetPeriphCLKConfig+0x2c4>
240175bc:	c9fff1f7 	.word	0xc9fff1f7
240175c0:	58024400 	.word	0x58024400
240175c4:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
240175c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
240175ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  /* Get the FMC clock source ------------------------------------------------*/
  PeriphClkInit->FmcClockSelection          = __HAL_RCC_GET_FMC_SOURCE();
240175ce:	4b14      	ldr	r3, [pc, #80]	; (24017620 <HAL_RCCEx_GetPeriphCLKConfig+0x320>)
240175d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
240175d2:	f003 0203 	and.w	r2, r3, #3
240175d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
240175d8:	649a      	str	r2, [r3, #72]	; 0x48
#if defined(QUADSPI)
  /* Get the QSPI clock source -----------------------------------------------*/
  PeriphClkInit->QspiClockSelection         = __HAL_RCC_GET_QSPI_SOURCE();
240175da:	4b11      	ldr	r3, [pc, #68]	; (24017620 <HAL_RCCEx_GetPeriphCLKConfig+0x320>)
240175dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
240175de:	f003 0230 	and.w	r2, r3, #48	; 0x30
240175e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
240175e4:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Get the DSI clock source ------------------------------------------------*/
  PeriphClkInit->DsiClockSelection          = __HAL_RCC_GET_DSI_SOURCE();
#endif /*DSI*/

  /* Get the CKPER clock source ----------------------------------------------*/
  PeriphClkInit->CkperClockSelection        = __HAL_RCC_GET_CLKP_SOURCE();
240175e6:	4b0e      	ldr	r3, [pc, #56]	; (24017620 <HAL_RCCEx_GetPeriphCLKConfig+0x320>)
240175e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
240175ea:	f003 5240 	and.w	r2, r3, #805306368	; 0x30000000
240175ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
240175f0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get the TIM Prescaler configuration -------------------------------------*/
  if ((RCC->CFGR & RCC_CFGR_TIMPRE) == 0U)
240175f2:	4b0b      	ldr	r3, [pc, #44]	; (24017620 <HAL_RCCEx_GetPeriphCLKConfig+0x320>)
240175f4:	691b      	ldr	r3, [r3, #16]
240175f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
240175fa:	2b00      	cmp	r3, #0
240175fc:	d104      	bne.n	24017608 <HAL_RCCEx_GetPeriphCLKConfig+0x308>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
240175fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24017600:	2200      	movs	r2, #0
24017602:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
24017606:	e004      	b.n	24017612 <HAL_RCCEx_GetPeriphCLKConfig+0x312>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
24017608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2401760a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
2401760e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
}
24017612:	bf00      	nop
24017614:	372c      	adds	r7, #44	; 0x2c
24017616:	46bd      	mov	sp, r7
24017618:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
2401761c:	4770      	bx	lr
2401761e:	bf00      	nop
24017620:	58024400 	.word	0x58024400

24017624 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
24017624:	b580      	push	{r7, lr}
24017626:	b090      	sub	sp, #64	; 0x40
24017628:	af00      	add	r7, sp, #0
2401762a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
2401762e:	e9d7 2300 	ldrd	r2, r3, [r7]
24017632:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
24017636:	430b      	orrs	r3, r1
24017638:	f040 8094 	bne.w	24017764 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
2401763c:	4b9e      	ldr	r3, [pc, #632]	; (240178b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
2401763e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24017640:	f003 0307 	and.w	r3, r3, #7
24017644:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
24017646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
24017648:	2b04      	cmp	r3, #4
2401764a:	f200 8087 	bhi.w	2401775c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
2401764e:	a201      	add	r2, pc, #4	; (adr r2, 24017654 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
24017650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
24017654:	24017669 	.word	0x24017669
24017658:	24017691 	.word	0x24017691
2401765c:	240176b9 	.word	0x240176b9
24017660:	24017755 	.word	0x24017755
24017664:	240176e1 	.word	0x240176e1
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
24017668:	4b93      	ldr	r3, [pc, #588]	; (240178b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
2401766a:	681b      	ldr	r3, [r3, #0]
2401766c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
24017670:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
24017674:	d108      	bne.n	24017688 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
24017676:	f107 0324 	add.w	r3, r7, #36	; 0x24
2401767a:	4618      	mov	r0, r3
2401767c:	f001 f826 	bl	240186cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
24017680:	6abb      	ldr	r3, [r7, #40]	; 0x28
24017682:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
24017684:	f000 bd45 	b.w	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
24017688:	2300      	movs	r3, #0
2401768a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2401768c:	f000 bd41 	b.w	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
24017690:	4b89      	ldr	r3, [pc, #548]	; (240178b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
24017692:	681b      	ldr	r3, [r3, #0]
24017694:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
24017698:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
2401769c:	d108      	bne.n	240176b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
2401769e:	f107 0318 	add.w	r3, r7, #24
240176a2:	4618      	mov	r0, r3
240176a4:	f000 fd6a 	bl	2401817c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
240176a8:	69bb      	ldr	r3, [r7, #24]
240176aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
240176ac:	f000 bd31 	b.w	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
240176b0:	2300      	movs	r3, #0
240176b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
240176b4:	f000 bd2d 	b.w	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
240176b8:	4b7f      	ldr	r3, [pc, #508]	; (240178b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
240176ba:	681b      	ldr	r3, [r3, #0]
240176bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
240176c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
240176c4:	d108      	bne.n	240176d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
240176c6:	f107 030c 	add.w	r3, r7, #12
240176ca:	4618      	mov	r0, r3
240176cc:	f000 feaa 	bl	24018424 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
240176d0:	68fb      	ldr	r3, [r7, #12]
240176d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
240176d4:	f000 bd1d 	b.w	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
240176d8:	2300      	movs	r3, #0
240176da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
240176dc:	f000 bd19 	b.w	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
240176e0:	4b75      	ldr	r3, [pc, #468]	; (240178b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
240176e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
240176e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
240176e8:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
240176ea:	4b73      	ldr	r3, [pc, #460]	; (240178b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
240176ec:	681b      	ldr	r3, [r3, #0]
240176ee:	f003 0304 	and.w	r3, r3, #4
240176f2:	2b04      	cmp	r3, #4
240176f4:	d10c      	bne.n	24017710 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
240176f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
240176f8:	2b00      	cmp	r3, #0
240176fa:	d109      	bne.n	24017710 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
240176fc:	4b6e      	ldr	r3, [pc, #440]	; (240178b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
240176fe:	681b      	ldr	r3, [r3, #0]
24017700:	08db      	lsrs	r3, r3, #3
24017702:	f003 0303 	and.w	r3, r3, #3
24017706:	4a6d      	ldr	r2, [pc, #436]	; (240178bc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
24017708:	fa22 f303 	lsr.w	r3, r2, r3
2401770c:	63fb      	str	r3, [r7, #60]	; 0x3c
2401770e:	e01f      	b.n	24017750 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
24017710:	4b69      	ldr	r3, [pc, #420]	; (240178b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
24017712:	681b      	ldr	r3, [r3, #0]
24017714:	f403 7380 	and.w	r3, r3, #256	; 0x100
24017718:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2401771c:	d106      	bne.n	2401772c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
2401771e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
24017720:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
24017724:	d102      	bne.n	2401772c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
24017726:	4b66      	ldr	r3, [pc, #408]	; (240178c0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
24017728:	63fb      	str	r3, [r7, #60]	; 0x3c
2401772a:	e011      	b.n	24017750 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
2401772c:	4b62      	ldr	r3, [pc, #392]	; (240178b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
2401772e:	681b      	ldr	r3, [r3, #0]
24017730:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
24017734:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
24017738:	d106      	bne.n	24017748 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
2401773a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2401773c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24017740:	d102      	bne.n	24017748 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
24017742:	4b60      	ldr	r3, [pc, #384]	; (240178c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
24017744:	63fb      	str	r3, [r7, #60]	; 0x3c
24017746:	e003      	b.n	24017750 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
24017748:	2300      	movs	r3, #0
2401774a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
2401774c:	f000 bce1 	b.w	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
24017750:	f000 bcdf 	b.w	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
24017754:	4b5c      	ldr	r3, [pc, #368]	; (240178c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
24017756:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
24017758:	f000 bcdb 	b.w	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
2401775c:	2300      	movs	r3, #0
2401775e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
24017760:	f000 bcd7 	b.w	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
24017764:	e9d7 2300 	ldrd	r2, r3, [r7]
24017768:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
2401776c:	430b      	orrs	r3, r1
2401776e:	f040 80ad 	bne.w	240178cc <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
24017772:	4b51      	ldr	r3, [pc, #324]	; (240178b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
24017774:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24017776:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
2401777a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
2401777c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2401777e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
24017782:	d056      	beq.n	24017832 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
24017784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
24017786:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2401778a:	f200 8090 	bhi.w	240178ae <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
2401778e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
24017790:	2bc0      	cmp	r3, #192	; 0xc0
24017792:	f000 8088 	beq.w	240178a6 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
24017796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
24017798:	2bc0      	cmp	r3, #192	; 0xc0
2401779a:	f200 8088 	bhi.w	240178ae <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
2401779e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
240177a0:	2b80      	cmp	r3, #128	; 0x80
240177a2:	d032      	beq.n	2401780a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
240177a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
240177a6:	2b80      	cmp	r3, #128	; 0x80
240177a8:	f200 8081 	bhi.w	240178ae <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
240177ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
240177ae:	2b00      	cmp	r3, #0
240177b0:	d003      	beq.n	240177ba <HAL_RCCEx_GetPeriphCLKFreq+0x196>
240177b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
240177b4:	2b40      	cmp	r3, #64	; 0x40
240177b6:	d014      	beq.n	240177e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
240177b8:	e079      	b.n	240178ae <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
240177ba:	4b3f      	ldr	r3, [pc, #252]	; (240178b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
240177bc:	681b      	ldr	r3, [r3, #0]
240177be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
240177c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
240177c6:	d108      	bne.n	240177da <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
240177c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
240177cc:	4618      	mov	r0, r3
240177ce:	f000 ff7d 	bl	240186cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
240177d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
240177d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
240177d6:	f000 bc9c 	b.w	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
240177da:	2300      	movs	r3, #0
240177dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
240177de:	f000 bc98 	b.w	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
240177e2:	4b35      	ldr	r3, [pc, #212]	; (240178b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
240177e4:	681b      	ldr	r3, [r3, #0]
240177e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
240177ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
240177ee:	d108      	bne.n	24017802 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
240177f0:	f107 0318 	add.w	r3, r7, #24
240177f4:	4618      	mov	r0, r3
240177f6:	f000 fcc1 	bl	2401817c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
240177fa:	69bb      	ldr	r3, [r7, #24]
240177fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
240177fe:	f000 bc88 	b.w	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
24017802:	2300      	movs	r3, #0
24017804:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
24017806:	f000 bc84 	b.w	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
2401780a:	4b2b      	ldr	r3, [pc, #172]	; (240178b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
2401780c:	681b      	ldr	r3, [r3, #0]
2401780e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
24017812:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24017816:	d108      	bne.n	2401782a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
24017818:	f107 030c 	add.w	r3, r7, #12
2401781c:	4618      	mov	r0, r3
2401781e:	f000 fe01 	bl	24018424 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
24017822:	68fb      	ldr	r3, [r7, #12]
24017824:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
24017826:	f000 bc74 	b.w	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
2401782a:	2300      	movs	r3, #0
2401782c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2401782e:	f000 bc70 	b.w	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
24017832:	4b21      	ldr	r3, [pc, #132]	; (240178b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
24017834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24017836:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
2401783a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
2401783c:	4b1e      	ldr	r3, [pc, #120]	; (240178b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
2401783e:	681b      	ldr	r3, [r3, #0]
24017840:	f003 0304 	and.w	r3, r3, #4
24017844:	2b04      	cmp	r3, #4
24017846:	d10c      	bne.n	24017862 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
24017848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2401784a:	2b00      	cmp	r3, #0
2401784c:	d109      	bne.n	24017862 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2401784e:	4b1a      	ldr	r3, [pc, #104]	; (240178b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
24017850:	681b      	ldr	r3, [r3, #0]
24017852:	08db      	lsrs	r3, r3, #3
24017854:	f003 0303 	and.w	r3, r3, #3
24017858:	4a18      	ldr	r2, [pc, #96]	; (240178bc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
2401785a:	fa22 f303 	lsr.w	r3, r2, r3
2401785e:	63fb      	str	r3, [r7, #60]	; 0x3c
24017860:	e01f      	b.n	240178a2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
24017862:	4b15      	ldr	r3, [pc, #84]	; (240178b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
24017864:	681b      	ldr	r3, [r3, #0]
24017866:	f403 7380 	and.w	r3, r3, #256	; 0x100
2401786a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2401786e:	d106      	bne.n	2401787e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
24017870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
24017872:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
24017876:	d102      	bne.n	2401787e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
24017878:	4b11      	ldr	r3, [pc, #68]	; (240178c0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
2401787a:	63fb      	str	r3, [r7, #60]	; 0x3c
2401787c:	e011      	b.n	240178a2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
2401787e:	4b0e      	ldr	r3, [pc, #56]	; (240178b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
24017880:	681b      	ldr	r3, [r3, #0]
24017882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
24017886:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
2401788a:	d106      	bne.n	2401789a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
2401788c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2401788e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24017892:	d102      	bne.n	2401789a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
24017894:	4b0b      	ldr	r3, [pc, #44]	; (240178c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
24017896:	63fb      	str	r3, [r7, #60]	; 0x3c
24017898:	e003      	b.n	240178a2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
2401789a:	2300      	movs	r3, #0
2401789c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
2401789e:	f000 bc38 	b.w	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
240178a2:	f000 bc36 	b.w	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
240178a6:	4b08      	ldr	r3, [pc, #32]	; (240178c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
240178a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
240178aa:	f000 bc32 	b.w	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
240178ae:	2300      	movs	r3, #0
240178b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
240178b2:	f000 bc2e 	b.w	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
240178b6:	bf00      	nop
240178b8:	58024400 	.word	0x58024400
240178bc:	03d09000 	.word	0x03d09000
240178c0:	003d0900 	.word	0x003d0900
240178c4:	017d7840 	.word	0x017d7840
240178c8:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
240178cc:	e9d7 2300 	ldrd	r2, r3, [r7]
240178d0:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
240178d4:	430b      	orrs	r3, r1
240178d6:	f040 809c 	bne.w	24017a12 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
240178da:	4b9e      	ldr	r3, [pc, #632]	; (24017b54 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
240178dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
240178de:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
240178e2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
240178e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
240178e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
240178ea:	d054      	beq.n	24017996 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
240178ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
240178ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
240178f2:	f200 808b 	bhi.w	24017a0c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
240178f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
240178f8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
240178fc:	f000 8083 	beq.w	24017a06 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
24017900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
24017902:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
24017906:	f200 8081 	bhi.w	24017a0c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
2401790a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2401790c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
24017910:	d02f      	beq.n	24017972 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
24017912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
24017914:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
24017918:	d878      	bhi.n	24017a0c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
2401791a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2401791c:	2b00      	cmp	r3, #0
2401791e:	d004      	beq.n	2401792a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
24017920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
24017922:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
24017926:	d012      	beq.n	2401794e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
24017928:	e070      	b.n	24017a0c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
2401792a:	4b8a      	ldr	r3, [pc, #552]	; (24017b54 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
2401792c:	681b      	ldr	r3, [r3, #0]
2401792e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
24017932:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
24017936:	d107      	bne.n	24017948 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
24017938:	f107 0324 	add.w	r3, r7, #36	; 0x24
2401793c:	4618      	mov	r0, r3
2401793e:	f000 fec5 	bl	240186cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
24017942:	6abb      	ldr	r3, [r7, #40]	; 0x28
24017944:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
24017946:	e3e4      	b.n	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
24017948:	2300      	movs	r3, #0
2401794a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2401794c:	e3e1      	b.n	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
2401794e:	4b81      	ldr	r3, [pc, #516]	; (24017b54 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
24017950:	681b      	ldr	r3, [r3, #0]
24017952:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
24017956:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
2401795a:	d107      	bne.n	2401796c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
2401795c:	f107 0318 	add.w	r3, r7, #24
24017960:	4618      	mov	r0, r3
24017962:	f000 fc0b 	bl	2401817c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
24017966:	69bb      	ldr	r3, [r7, #24]
24017968:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2401796a:	e3d2      	b.n	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
2401796c:	2300      	movs	r3, #0
2401796e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
24017970:	e3cf      	b.n	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
24017972:	4b78      	ldr	r3, [pc, #480]	; (24017b54 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
24017974:	681b      	ldr	r3, [r3, #0]
24017976:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
2401797a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2401797e:	d107      	bne.n	24017990 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
24017980:	f107 030c 	add.w	r3, r7, #12
24017984:	4618      	mov	r0, r3
24017986:	f000 fd4d 	bl	24018424 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
2401798a:	68fb      	ldr	r3, [r7, #12]
2401798c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2401798e:	e3c0      	b.n	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
24017990:	2300      	movs	r3, #0
24017992:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
24017994:	e3bd      	b.n	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
24017996:	4b6f      	ldr	r3, [pc, #444]	; (24017b54 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
24017998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2401799a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
2401799e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
240179a0:	4b6c      	ldr	r3, [pc, #432]	; (24017b54 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
240179a2:	681b      	ldr	r3, [r3, #0]
240179a4:	f003 0304 	and.w	r3, r3, #4
240179a8:	2b04      	cmp	r3, #4
240179aa:	d10c      	bne.n	240179c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
240179ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
240179ae:	2b00      	cmp	r3, #0
240179b0:	d109      	bne.n	240179c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
240179b2:	4b68      	ldr	r3, [pc, #416]	; (24017b54 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
240179b4:	681b      	ldr	r3, [r3, #0]
240179b6:	08db      	lsrs	r3, r3, #3
240179b8:	f003 0303 	and.w	r3, r3, #3
240179bc:	4a66      	ldr	r2, [pc, #408]	; (24017b58 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
240179be:	fa22 f303 	lsr.w	r3, r2, r3
240179c2:	63fb      	str	r3, [r7, #60]	; 0x3c
240179c4:	e01e      	b.n	24017a04 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
240179c6:	4b63      	ldr	r3, [pc, #396]	; (24017b54 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
240179c8:	681b      	ldr	r3, [r3, #0]
240179ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
240179ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
240179d2:	d106      	bne.n	240179e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
240179d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
240179d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
240179da:	d102      	bne.n	240179e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
240179dc:	4b5f      	ldr	r3, [pc, #380]	; (24017b5c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
240179de:	63fb      	str	r3, [r7, #60]	; 0x3c
240179e0:	e010      	b.n	24017a04 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
240179e2:	4b5c      	ldr	r3, [pc, #368]	; (24017b54 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
240179e4:	681b      	ldr	r3, [r3, #0]
240179e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
240179ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
240179ee:	d106      	bne.n	240179fe <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
240179f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
240179f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
240179f6:	d102      	bne.n	240179fe <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
240179f8:	4b59      	ldr	r3, [pc, #356]	; (24017b60 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
240179fa:	63fb      	str	r3, [r7, #60]	; 0x3c
240179fc:	e002      	b.n	24017a04 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
240179fe:	2300      	movs	r3, #0
24017a00:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
24017a02:	e386      	b.n	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
24017a04:	e385      	b.n	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
24017a06:	4b57      	ldr	r3, [pc, #348]	; (24017b64 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
24017a08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
24017a0a:	e382      	b.n	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
24017a0c:	2300      	movs	r3, #0
24017a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
24017a10:	e37f      	b.n	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
24017a12:	e9d7 2300 	ldrd	r2, r3, [r7]
24017a16:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
24017a1a:	430b      	orrs	r3, r1
24017a1c:	f040 80a7 	bne.w	24017b6e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
24017a20:	4b4c      	ldr	r3, [pc, #304]	; (24017b54 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
24017a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24017a24:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
24017a28:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
24017a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
24017a2c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
24017a30:	d055      	beq.n	24017ade <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
24017a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
24017a34:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
24017a38:	f200 8096 	bhi.w	24017b68 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
24017a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
24017a3e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
24017a42:	f000 8084 	beq.w	24017b4e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
24017a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
24017a48:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
24017a4c:	f200 808c 	bhi.w	24017b68 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
24017a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
24017a52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
24017a56:	d030      	beq.n	24017aba <HAL_RCCEx_GetPeriphCLKFreq+0x496>
24017a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
24017a5a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
24017a5e:	f200 8083 	bhi.w	24017b68 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
24017a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
24017a64:	2b00      	cmp	r3, #0
24017a66:	d004      	beq.n	24017a72 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
24017a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
24017a6a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
24017a6e:	d012      	beq.n	24017a96 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
24017a70:	e07a      	b.n	24017b68 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
24017a72:	4b38      	ldr	r3, [pc, #224]	; (24017b54 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
24017a74:	681b      	ldr	r3, [r3, #0]
24017a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
24017a7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
24017a7e:	d107      	bne.n	24017a90 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
24017a80:	f107 0324 	add.w	r3, r7, #36	; 0x24
24017a84:	4618      	mov	r0, r3
24017a86:	f000 fe21 	bl	240186cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
24017a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
24017a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
24017a8e:	e340      	b.n	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
24017a90:	2300      	movs	r3, #0
24017a92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
24017a94:	e33d      	b.n	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
24017a96:	4b2f      	ldr	r3, [pc, #188]	; (24017b54 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
24017a98:	681b      	ldr	r3, [r3, #0]
24017a9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
24017a9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
24017aa2:	d107      	bne.n	24017ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
24017aa4:	f107 0318 	add.w	r3, r7, #24
24017aa8:	4618      	mov	r0, r3
24017aaa:	f000 fb67 	bl	2401817c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
24017aae:	69bb      	ldr	r3, [r7, #24]
24017ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
24017ab2:	e32e      	b.n	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
24017ab4:	2300      	movs	r3, #0
24017ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
24017ab8:	e32b      	b.n	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
24017aba:	4b26      	ldr	r3, [pc, #152]	; (24017b54 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
24017abc:	681b      	ldr	r3, [r3, #0]
24017abe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
24017ac2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24017ac6:	d107      	bne.n	24017ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
24017ac8:	f107 030c 	add.w	r3, r7, #12
24017acc:	4618      	mov	r0, r3
24017ace:	f000 fca9 	bl	24018424 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
24017ad2:	68fb      	ldr	r3, [r7, #12]
24017ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
24017ad6:	e31c      	b.n	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
24017ad8:	2300      	movs	r3, #0
24017ada:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
24017adc:	e319      	b.n	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
24017ade:	4b1d      	ldr	r3, [pc, #116]	; (24017b54 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
24017ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24017ae2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
24017ae6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
24017ae8:	4b1a      	ldr	r3, [pc, #104]	; (24017b54 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
24017aea:	681b      	ldr	r3, [r3, #0]
24017aec:	f003 0304 	and.w	r3, r3, #4
24017af0:	2b04      	cmp	r3, #4
24017af2:	d10c      	bne.n	24017b0e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
24017af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
24017af6:	2b00      	cmp	r3, #0
24017af8:	d109      	bne.n	24017b0e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24017afa:	4b16      	ldr	r3, [pc, #88]	; (24017b54 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
24017afc:	681b      	ldr	r3, [r3, #0]
24017afe:	08db      	lsrs	r3, r3, #3
24017b00:	f003 0303 	and.w	r3, r3, #3
24017b04:	4a14      	ldr	r2, [pc, #80]	; (24017b58 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
24017b06:	fa22 f303 	lsr.w	r3, r2, r3
24017b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
24017b0c:	e01e      	b.n	24017b4c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
24017b0e:	4b11      	ldr	r3, [pc, #68]	; (24017b54 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
24017b10:	681b      	ldr	r3, [r3, #0]
24017b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
24017b16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
24017b1a:	d106      	bne.n	24017b2a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
24017b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
24017b1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
24017b22:	d102      	bne.n	24017b2a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
24017b24:	4b0d      	ldr	r3, [pc, #52]	; (24017b5c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
24017b26:	63fb      	str	r3, [r7, #60]	; 0x3c
24017b28:	e010      	b.n	24017b4c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
24017b2a:	4b0a      	ldr	r3, [pc, #40]	; (24017b54 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
24017b2c:	681b      	ldr	r3, [r3, #0]
24017b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
24017b32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
24017b36:	d106      	bne.n	24017b46 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
24017b38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
24017b3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24017b3e:	d102      	bne.n	24017b46 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
24017b40:	4b07      	ldr	r3, [pc, #28]	; (24017b60 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
24017b42:	63fb      	str	r3, [r7, #60]	; 0x3c
24017b44:	e002      	b.n	24017b4c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
24017b46:	2300      	movs	r3, #0
24017b48:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
24017b4a:	e2e2      	b.n	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
24017b4c:	e2e1      	b.n	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
24017b4e:	4b05      	ldr	r3, [pc, #20]	; (24017b64 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
24017b50:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
24017b52:	e2de      	b.n	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
24017b54:	58024400 	.word	0x58024400
24017b58:	03d09000 	.word	0x03d09000
24017b5c:	003d0900 	.word	0x003d0900
24017b60:	017d7840 	.word	0x017d7840
24017b64:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
24017b68:	2300      	movs	r3, #0
24017b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
24017b6c:	e2d1      	b.n	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
24017b6e:	e9d7 2300 	ldrd	r2, r3, [r7]
24017b72:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
24017b76:	430b      	orrs	r3, r1
24017b78:	f040 809c 	bne.w	24017cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
24017b7c:	4b93      	ldr	r3, [pc, #588]	; (24017dcc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
24017b7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24017b80:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
24017b84:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
24017b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24017b88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
24017b8c:	d054      	beq.n	24017c38 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
24017b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24017b90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
24017b94:	f200 808b 	bhi.w	24017cae <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
24017b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24017b9a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
24017b9e:	f000 8083 	beq.w	24017ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
24017ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24017ba4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
24017ba8:	f200 8081 	bhi.w	24017cae <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
24017bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24017bae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
24017bb2:	d02f      	beq.n	24017c14 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
24017bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24017bb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
24017bba:	d878      	bhi.n	24017cae <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
24017bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24017bbe:	2b00      	cmp	r3, #0
24017bc0:	d004      	beq.n	24017bcc <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
24017bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24017bc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
24017bc8:	d012      	beq.n	24017bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
24017bca:	e070      	b.n	24017cae <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
24017bcc:	4b7f      	ldr	r3, [pc, #508]	; (24017dcc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
24017bce:	681b      	ldr	r3, [r3, #0]
24017bd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
24017bd4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
24017bd8:	d107      	bne.n	24017bea <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
24017bda:	f107 0324 	add.w	r3, r7, #36	; 0x24
24017bde:	4618      	mov	r0, r3
24017be0:	f000 fd74 	bl	240186cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
24017be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
24017be6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
24017be8:	e293      	b.n	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
24017bea:	2300      	movs	r3, #0
24017bec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
24017bee:	e290      	b.n	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
24017bf0:	4b76      	ldr	r3, [pc, #472]	; (24017dcc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
24017bf2:	681b      	ldr	r3, [r3, #0]
24017bf4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
24017bf8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
24017bfc:	d107      	bne.n	24017c0e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
24017bfe:	f107 0318 	add.w	r3, r7, #24
24017c02:	4618      	mov	r0, r3
24017c04:	f000 faba 	bl	2401817c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
24017c08:	69bb      	ldr	r3, [r7, #24]
24017c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
24017c0c:	e281      	b.n	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
24017c0e:	2300      	movs	r3, #0
24017c10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
24017c12:	e27e      	b.n	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
24017c14:	4b6d      	ldr	r3, [pc, #436]	; (24017dcc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
24017c16:	681b      	ldr	r3, [r3, #0]
24017c18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
24017c1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24017c20:	d107      	bne.n	24017c32 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
24017c22:	f107 030c 	add.w	r3, r7, #12
24017c26:	4618      	mov	r0, r3
24017c28:	f000 fbfc 	bl	24018424 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
24017c2c:	68fb      	ldr	r3, [r7, #12]
24017c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
24017c30:	e26f      	b.n	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
24017c32:	2300      	movs	r3, #0
24017c34:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
24017c36:	e26c      	b.n	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
24017c38:	4b64      	ldr	r3, [pc, #400]	; (24017dcc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
24017c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24017c3c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
24017c40:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
24017c42:	4b62      	ldr	r3, [pc, #392]	; (24017dcc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
24017c44:	681b      	ldr	r3, [r3, #0]
24017c46:	f003 0304 	and.w	r3, r3, #4
24017c4a:	2b04      	cmp	r3, #4
24017c4c:	d10c      	bne.n	24017c68 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
24017c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
24017c50:	2b00      	cmp	r3, #0
24017c52:	d109      	bne.n	24017c68 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24017c54:	4b5d      	ldr	r3, [pc, #372]	; (24017dcc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
24017c56:	681b      	ldr	r3, [r3, #0]
24017c58:	08db      	lsrs	r3, r3, #3
24017c5a:	f003 0303 	and.w	r3, r3, #3
24017c5e:	4a5c      	ldr	r2, [pc, #368]	; (24017dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
24017c60:	fa22 f303 	lsr.w	r3, r2, r3
24017c64:	63fb      	str	r3, [r7, #60]	; 0x3c
24017c66:	e01e      	b.n	24017ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
24017c68:	4b58      	ldr	r3, [pc, #352]	; (24017dcc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
24017c6a:	681b      	ldr	r3, [r3, #0]
24017c6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
24017c70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
24017c74:	d106      	bne.n	24017c84 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
24017c76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
24017c78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
24017c7c:	d102      	bne.n	24017c84 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
24017c7e:	4b55      	ldr	r3, [pc, #340]	; (24017dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
24017c80:	63fb      	str	r3, [r7, #60]	; 0x3c
24017c82:	e010      	b.n	24017ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
24017c84:	4b51      	ldr	r3, [pc, #324]	; (24017dcc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
24017c86:	681b      	ldr	r3, [r3, #0]
24017c88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
24017c8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
24017c90:	d106      	bne.n	24017ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
24017c92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
24017c94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24017c98:	d102      	bne.n	24017ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
24017c9a:	4b4f      	ldr	r3, [pc, #316]	; (24017dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
24017c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
24017c9e:	e002      	b.n	24017ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
24017ca0:	2300      	movs	r3, #0
24017ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
24017ca4:	e235      	b.n	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
24017ca6:	e234      	b.n	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
24017ca8:	4b4c      	ldr	r3, [pc, #304]	; (24017ddc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
24017caa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
24017cac:	e231      	b.n	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
24017cae:	2300      	movs	r3, #0
24017cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
24017cb2:	e22e      	b.n	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
24017cb4:	e9d7 2300 	ldrd	r2, r3, [r7]
24017cb8:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
24017cbc:	430b      	orrs	r3, r1
24017cbe:	f040 808f 	bne.w	24017de0 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
24017cc2:	4b42      	ldr	r3, [pc, #264]	; (24017dcc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
24017cc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24017cc6:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
24017cca:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
24017ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24017cce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
24017cd2:	d06b      	beq.n	24017dac <HAL_RCCEx_GetPeriphCLKFreq+0x788>
24017cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24017cd6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
24017cda:	d874      	bhi.n	24017dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
24017cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24017cde:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
24017ce2:	d056      	beq.n	24017d92 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
24017ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24017ce6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
24017cea:	d86c      	bhi.n	24017dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
24017cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24017cee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
24017cf2:	d03b      	beq.n	24017d6c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
24017cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24017cf6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
24017cfa:	d864      	bhi.n	24017dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
24017cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24017cfe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
24017d02:	d021      	beq.n	24017d48 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
24017d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24017d06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
24017d0a:	d85c      	bhi.n	24017dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
24017d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24017d0e:	2b00      	cmp	r3, #0
24017d10:	d004      	beq.n	24017d1c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
24017d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24017d14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
24017d18:	d004      	beq.n	24017d24 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
24017d1a:	e054      	b.n	24017dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
24017d1c:	f7fd ff6e 	bl	24015bfc <HAL_RCC_GetPCLK1Freq>
24017d20:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
24017d22:	e1f6      	b.n	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
24017d24:	4b29      	ldr	r3, [pc, #164]	; (24017dcc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
24017d26:	681b      	ldr	r3, [r3, #0]
24017d28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
24017d2c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
24017d30:	d107      	bne.n	24017d42 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
24017d32:	f107 0318 	add.w	r3, r7, #24
24017d36:	4618      	mov	r0, r3
24017d38:	f000 fa20 	bl	2401817c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
24017d3c:	69fb      	ldr	r3, [r7, #28]
24017d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
24017d40:	e1e7      	b.n	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
24017d42:	2300      	movs	r3, #0
24017d44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
24017d46:	e1e4      	b.n	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
24017d48:	4b20      	ldr	r3, [pc, #128]	; (24017dcc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
24017d4a:	681b      	ldr	r3, [r3, #0]
24017d4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
24017d50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24017d54:	d107      	bne.n	24017d66 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
24017d56:	f107 030c 	add.w	r3, r7, #12
24017d5a:	4618      	mov	r0, r3
24017d5c:	f000 fb62 	bl	24018424 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
24017d60:	693b      	ldr	r3, [r7, #16]
24017d62:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
24017d64:	e1d5      	b.n	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
24017d66:	2300      	movs	r3, #0
24017d68:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
24017d6a:	e1d2      	b.n	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
24017d6c:	4b17      	ldr	r3, [pc, #92]	; (24017dcc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
24017d6e:	681b      	ldr	r3, [r3, #0]
24017d70:	f003 0304 	and.w	r3, r3, #4
24017d74:	2b04      	cmp	r3, #4
24017d76:	d109      	bne.n	24017d8c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24017d78:	4b14      	ldr	r3, [pc, #80]	; (24017dcc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
24017d7a:	681b      	ldr	r3, [r3, #0]
24017d7c:	08db      	lsrs	r3, r3, #3
24017d7e:	f003 0303 	and.w	r3, r3, #3
24017d82:	4a13      	ldr	r2, [pc, #76]	; (24017dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
24017d84:	fa22 f303 	lsr.w	r3, r2, r3
24017d88:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
24017d8a:	e1c2      	b.n	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
24017d8c:	2300      	movs	r3, #0
24017d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
24017d90:	e1bf      	b.n	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
24017d92:	4b0e      	ldr	r3, [pc, #56]	; (24017dcc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
24017d94:	681b      	ldr	r3, [r3, #0]
24017d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
24017d9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
24017d9e:	d102      	bne.n	24017da6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
24017da0:	4b0c      	ldr	r3, [pc, #48]	; (24017dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
24017da2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
24017da4:	e1b5      	b.n	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
24017da6:	2300      	movs	r3, #0
24017da8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
24017daa:	e1b2      	b.n	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
24017dac:	4b07      	ldr	r3, [pc, #28]	; (24017dcc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
24017dae:	681b      	ldr	r3, [r3, #0]
24017db0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
24017db4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
24017db8:	d102      	bne.n	24017dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
24017dba:	4b07      	ldr	r3, [pc, #28]	; (24017dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
24017dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
24017dbe:	e1a8      	b.n	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
24017dc0:	2300      	movs	r3, #0
24017dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
24017dc4:	e1a5      	b.n	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
24017dc6:	2300      	movs	r3, #0
24017dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
24017dca:	e1a2      	b.n	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
24017dcc:	58024400 	.word	0x58024400
24017dd0:	03d09000 	.word	0x03d09000
24017dd4:	003d0900 	.word	0x003d0900
24017dd8:	017d7840 	.word	0x017d7840
24017ddc:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
24017de0:	e9d7 2300 	ldrd	r2, r3, [r7]
24017de4:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
24017de8:	430b      	orrs	r3, r1
24017dea:	d173      	bne.n	24017ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
24017dec:	4b9c      	ldr	r3, [pc, #624]	; (24018060 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
24017dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24017df0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
24017df4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
24017df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24017df8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
24017dfc:	d02f      	beq.n	24017e5e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
24017dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24017e00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
24017e04:	d863      	bhi.n	24017ece <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
24017e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24017e08:	2b00      	cmp	r3, #0
24017e0a:	d004      	beq.n	24017e16 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
24017e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24017e0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
24017e12:	d012      	beq.n	24017e3a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
24017e14:	e05b      	b.n	24017ece <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
24017e16:	4b92      	ldr	r3, [pc, #584]	; (24018060 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
24017e18:	681b      	ldr	r3, [r3, #0]
24017e1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
24017e1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
24017e22:	d107      	bne.n	24017e34 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
24017e24:	f107 0318 	add.w	r3, r7, #24
24017e28:	4618      	mov	r0, r3
24017e2a:	f000 f9a7 	bl	2401817c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
24017e2e:	69bb      	ldr	r3, [r7, #24]
24017e30:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
24017e32:	e16e      	b.n	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
24017e34:	2300      	movs	r3, #0
24017e36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
24017e38:	e16b      	b.n	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
24017e3a:	4b89      	ldr	r3, [pc, #548]	; (24018060 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
24017e3c:	681b      	ldr	r3, [r3, #0]
24017e3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
24017e42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24017e46:	d107      	bne.n	24017e58 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
24017e48:	f107 030c 	add.w	r3, r7, #12
24017e4c:	4618      	mov	r0, r3
24017e4e:	f000 fae9 	bl	24018424 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
24017e52:	697b      	ldr	r3, [r7, #20]
24017e54:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
24017e56:	e15c      	b.n	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
24017e58:	2300      	movs	r3, #0
24017e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
24017e5c:	e159      	b.n	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
24017e5e:	4b80      	ldr	r3, [pc, #512]	; (24018060 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
24017e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24017e62:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
24017e66:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
24017e68:	4b7d      	ldr	r3, [pc, #500]	; (24018060 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
24017e6a:	681b      	ldr	r3, [r3, #0]
24017e6c:	f003 0304 	and.w	r3, r3, #4
24017e70:	2b04      	cmp	r3, #4
24017e72:	d10c      	bne.n	24017e8e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
24017e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
24017e76:	2b00      	cmp	r3, #0
24017e78:	d109      	bne.n	24017e8e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24017e7a:	4b79      	ldr	r3, [pc, #484]	; (24018060 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
24017e7c:	681b      	ldr	r3, [r3, #0]
24017e7e:	08db      	lsrs	r3, r3, #3
24017e80:	f003 0303 	and.w	r3, r3, #3
24017e84:	4a77      	ldr	r2, [pc, #476]	; (24018064 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
24017e86:	fa22 f303 	lsr.w	r3, r2, r3
24017e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
24017e8c:	e01e      	b.n	24017ecc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
24017e8e:	4b74      	ldr	r3, [pc, #464]	; (24018060 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
24017e90:	681b      	ldr	r3, [r3, #0]
24017e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
24017e96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
24017e9a:	d106      	bne.n	24017eaa <HAL_RCCEx_GetPeriphCLKFreq+0x886>
24017e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
24017e9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
24017ea2:	d102      	bne.n	24017eaa <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
24017ea4:	4b70      	ldr	r3, [pc, #448]	; (24018068 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
24017ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
24017ea8:	e010      	b.n	24017ecc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
24017eaa:	4b6d      	ldr	r3, [pc, #436]	; (24018060 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
24017eac:	681b      	ldr	r3, [r3, #0]
24017eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
24017eb2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
24017eb6:	d106      	bne.n	24017ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
24017eb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
24017eba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24017ebe:	d102      	bne.n	24017ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
24017ec0:	4b6a      	ldr	r3, [pc, #424]	; (2401806c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
24017ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
24017ec4:	e002      	b.n	24017ecc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
24017ec6:	2300      	movs	r3, #0
24017ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
24017eca:	e122      	b.n	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
24017ecc:	e121      	b.n	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
24017ece:	2300      	movs	r3, #0
24017ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
24017ed2:	e11e      	b.n	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
24017ed4:	e9d7 2300 	ldrd	r2, r3, [r7]
24017ed8:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
24017edc:	430b      	orrs	r3, r1
24017ede:	d133      	bne.n	24017f48 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
24017ee0:	4b5f      	ldr	r3, [pc, #380]	; (24018060 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
24017ee2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24017ee4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
24017ee8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
24017eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24017eec:	2b00      	cmp	r3, #0
24017eee:	d004      	beq.n	24017efa <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
24017ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24017ef2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
24017ef6:	d012      	beq.n	24017f1e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
24017ef8:	e023      	b.n	24017f42 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
24017efa:	4b59      	ldr	r3, [pc, #356]	; (24018060 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
24017efc:	681b      	ldr	r3, [r3, #0]
24017efe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
24017f02:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
24017f06:	d107      	bne.n	24017f18 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
24017f08:	f107 0324 	add.w	r3, r7, #36	; 0x24
24017f0c:	4618      	mov	r0, r3
24017f0e:	f000 fbdd 	bl	240186cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
24017f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
24017f14:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
24017f16:	e0fc      	b.n	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
24017f18:	2300      	movs	r3, #0
24017f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
24017f1c:	e0f9      	b.n	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
24017f1e:	4b50      	ldr	r3, [pc, #320]	; (24018060 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
24017f20:	681b      	ldr	r3, [r3, #0]
24017f22:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
24017f26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
24017f2a:	d107      	bne.n	24017f3c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
24017f2c:	f107 0318 	add.w	r3, r7, #24
24017f30:	4618      	mov	r0, r3
24017f32:	f000 f923 	bl	2401817c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
24017f36:	6a3b      	ldr	r3, [r7, #32]
24017f38:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
24017f3a:	e0ea      	b.n	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
24017f3c:	2300      	movs	r3, #0
24017f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
24017f40:	e0e7      	b.n	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
24017f42:	2300      	movs	r3, #0
24017f44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
24017f46:	e0e4      	b.n	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
24017f48:	e9d7 2300 	ldrd	r2, r3, [r7]
24017f4c:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
24017f50:	430b      	orrs	r3, r1
24017f52:	f040 808d 	bne.w	24018070 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
24017f56:	4b42      	ldr	r3, [pc, #264]	; (24018060 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
24017f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24017f5a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
24017f5e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
24017f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24017f62:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
24017f66:	d06b      	beq.n	24018040 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
24017f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24017f6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
24017f6e:	d874      	bhi.n	2401805a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
24017f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24017f72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
24017f76:	d056      	beq.n	24018026 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
24017f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24017f7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
24017f7e:	d86c      	bhi.n	2401805a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
24017f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24017f82:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
24017f86:	d03b      	beq.n	24018000 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
24017f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24017f8a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
24017f8e:	d864      	bhi.n	2401805a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
24017f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24017f92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24017f96:	d021      	beq.n	24017fdc <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
24017f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24017f9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24017f9e:	d85c      	bhi.n	2401805a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
24017fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24017fa2:	2b00      	cmp	r3, #0
24017fa4:	d004      	beq.n	24017fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
24017fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24017fa8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
24017fac:	d004      	beq.n	24017fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
24017fae:	e054      	b.n	2401805a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
24017fb0:	f000 f8ce 	bl	24018150 <HAL_RCCEx_GetD3PCLK1Freq>
24017fb4:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
24017fb6:	e0ac      	b.n	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
24017fb8:	4b29      	ldr	r3, [pc, #164]	; (24018060 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
24017fba:	681b      	ldr	r3, [r3, #0]
24017fbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
24017fc0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
24017fc4:	d107      	bne.n	24017fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
24017fc6:	f107 0318 	add.w	r3, r7, #24
24017fca:	4618      	mov	r0, r3
24017fcc:	f000 f8d6 	bl	2401817c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
24017fd0:	69fb      	ldr	r3, [r7, #28]
24017fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
24017fd4:	e09d      	b.n	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
24017fd6:	2300      	movs	r3, #0
24017fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
24017fda:	e09a      	b.n	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
24017fdc:	4b20      	ldr	r3, [pc, #128]	; (24018060 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
24017fde:	681b      	ldr	r3, [r3, #0]
24017fe0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
24017fe4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24017fe8:	d107      	bne.n	24017ffa <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
24017fea:	f107 030c 	add.w	r3, r7, #12
24017fee:	4618      	mov	r0, r3
24017ff0:	f000 fa18 	bl	24018424 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
24017ff4:	693b      	ldr	r3, [r7, #16]
24017ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
24017ff8:	e08b      	b.n	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
24017ffa:	2300      	movs	r3, #0
24017ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
24017ffe:	e088      	b.n	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
24018000:	4b17      	ldr	r3, [pc, #92]	; (24018060 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
24018002:	681b      	ldr	r3, [r3, #0]
24018004:	f003 0304 	and.w	r3, r3, #4
24018008:	2b04      	cmp	r3, #4
2401800a:	d109      	bne.n	24018020 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2401800c:	4b14      	ldr	r3, [pc, #80]	; (24018060 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
2401800e:	681b      	ldr	r3, [r3, #0]
24018010:	08db      	lsrs	r3, r3, #3
24018012:	f003 0303 	and.w	r3, r3, #3
24018016:	4a13      	ldr	r2, [pc, #76]	; (24018064 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
24018018:	fa22 f303 	lsr.w	r3, r2, r3
2401801c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2401801e:	e078      	b.n	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
24018020:	2300      	movs	r3, #0
24018022:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
24018024:	e075      	b.n	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
24018026:	4b0e      	ldr	r3, [pc, #56]	; (24018060 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
24018028:	681b      	ldr	r3, [r3, #0]
2401802a:	f403 7380 	and.w	r3, r3, #256	; 0x100
2401802e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
24018032:	d102      	bne.n	2401803a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
24018034:	4b0c      	ldr	r3, [pc, #48]	; (24018068 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
24018036:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
24018038:	e06b      	b.n	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
2401803a:	2300      	movs	r3, #0
2401803c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2401803e:	e068      	b.n	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
24018040:	4b07      	ldr	r3, [pc, #28]	; (24018060 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
24018042:	681b      	ldr	r3, [r3, #0]
24018044:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
24018048:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
2401804c:	d102      	bne.n	24018054 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
2401804e:	4b07      	ldr	r3, [pc, #28]	; (2401806c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
24018050:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
24018052:	e05e      	b.n	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
24018054:	2300      	movs	r3, #0
24018056:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
24018058:	e05b      	b.n	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
2401805a:	2300      	movs	r3, #0
2401805c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2401805e:	e058      	b.n	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
24018060:	58024400 	.word	0x58024400
24018064:	03d09000 	.word	0x03d09000
24018068:	003d0900 	.word	0x003d0900
2401806c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
24018070:	e9d7 2300 	ldrd	r2, r3, [r7]
24018074:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
24018078:	430b      	orrs	r3, r1
2401807a:	d148      	bne.n	2401810e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
2401807c:	4b27      	ldr	r3, [pc, #156]	; (2401811c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
2401807e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24018080:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
24018084:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
24018086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24018088:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2401808c:	d02a      	beq.n	240180e4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
2401808e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24018090:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24018094:	d838      	bhi.n	24018108 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
24018096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24018098:	2b00      	cmp	r3, #0
2401809a:	d004      	beq.n	240180a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
2401809c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2401809e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
240180a2:	d00d      	beq.n	240180c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
240180a4:	e030      	b.n	24018108 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
240180a6:	4b1d      	ldr	r3, [pc, #116]	; (2401811c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
240180a8:	681b      	ldr	r3, [r3, #0]
240180aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
240180ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
240180b2:	d102      	bne.n	240180ba <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
240180b4:	4b1a      	ldr	r3, [pc, #104]	; (24018120 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
240180b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
240180b8:	e02b      	b.n	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
240180ba:	2300      	movs	r3, #0
240180bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
240180be:	e028      	b.n	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
240180c0:	4b16      	ldr	r3, [pc, #88]	; (2401811c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
240180c2:	681b      	ldr	r3, [r3, #0]
240180c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
240180c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
240180cc:	d107      	bne.n	240180de <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
240180ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
240180d2:	4618      	mov	r0, r3
240180d4:	f000 fafa 	bl	240186cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
240180d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
240180da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
240180dc:	e019      	b.n	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
240180de:	2300      	movs	r3, #0
240180e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
240180e2:	e016      	b.n	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
240180e4:	4b0d      	ldr	r3, [pc, #52]	; (2401811c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
240180e6:	681b      	ldr	r3, [r3, #0]
240180e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
240180ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
240180f0:	d107      	bne.n	24018102 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
240180f2:	f107 0318 	add.w	r3, r7, #24
240180f6:	4618      	mov	r0, r3
240180f8:	f000 f840 	bl	2401817c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
240180fc:	69fb      	ldr	r3, [r7, #28]
240180fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
24018100:	e007      	b.n	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
24018102:	2300      	movs	r3, #0
24018104:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
24018106:	e004      	b.n	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
24018108:	2300      	movs	r3, #0
2401810a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2401810c:	e001      	b.n	24018112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
2401810e:	2300      	movs	r3, #0
24018110:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
24018112:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
24018114:	4618      	mov	r0, r3
24018116:	3740      	adds	r7, #64	; 0x40
24018118:	46bd      	mov	sp, r7
2401811a:	bd80      	pop	{r7, pc}
2401811c:	58024400 	.word	0x58024400
24018120:	017d7840 	.word	0x017d7840

24018124 <HAL_RCCEx_GetD1PCLK1Freq>:
  * @note   Each time D1PCLK1 changes, this function must be called to update the
  *         right D1PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D1PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD1PCLK1Freq(void)
{
24018124:	b580      	push	{r7, lr}
24018126:	af00      	add	r7, sp, #0
#if defined(RCC_D1CFGR_D1PPRE)
  /* Get HCLK source and Compute D1PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1PPRE) >> RCC_D1CFGR_D1PPRE_Pos] & 0x1FU));
24018128:	f7fd fd38 	bl	24015b9c <HAL_RCC_GetHCLKFreq>
2401812c:	4602      	mov	r2, r0
2401812e:	4b06      	ldr	r3, [pc, #24]	; (24018148 <HAL_RCCEx_GetD1PCLK1Freq+0x24>)
24018130:	699b      	ldr	r3, [r3, #24]
24018132:	091b      	lsrs	r3, r3, #4
24018134:	f003 0307 	and.w	r3, r3, #7
24018138:	4904      	ldr	r1, [pc, #16]	; (2401814c <HAL_RCCEx_GetD1PCLK1Freq+0x28>)
2401813a:	5ccb      	ldrb	r3, [r1, r3]
2401813c:	f003 031f 	and.w	r3, r3, #31
24018140:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D1PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE) >> RCC_CDCFGR1_CDPPRE_Pos] & 0x1FU));
#endif
}
24018144:	4618      	mov	r0, r3
24018146:	bd80      	pop	{r7, pc}
24018148:	58024400 	.word	0x58024400
2401814c:	24019ad0 	.word	0x24019ad0

24018150 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
24018150:	b580      	push	{r7, lr}
24018152:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
24018154:	f7fd fd22 	bl	24015b9c <HAL_RCC_GetHCLKFreq>
24018158:	4602      	mov	r2, r0
2401815a:	4b06      	ldr	r3, [pc, #24]	; (24018174 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
2401815c:	6a1b      	ldr	r3, [r3, #32]
2401815e:	091b      	lsrs	r3, r3, #4
24018160:	f003 0307 	and.w	r3, r3, #7
24018164:	4904      	ldr	r1, [pc, #16]	; (24018178 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
24018166:	5ccb      	ldrb	r3, [r1, r3]
24018168:	f003 031f 	and.w	r3, r3, #31
2401816c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
24018170:	4618      	mov	r0, r3
24018172:	bd80      	pop	{r7, pc}
24018174:	58024400 	.word	0x58024400
24018178:	24019ad0 	.word	0x24019ad0

2401817c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
2401817c:	b480      	push	{r7}
2401817e:	b089      	sub	sp, #36	; 0x24
24018180:	af00      	add	r7, sp, #0
24018182:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24018184:	4ba1      	ldr	r3, [pc, #644]	; (2401840c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
24018186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24018188:	f003 0303 	and.w	r3, r3, #3
2401818c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
2401818e:	4b9f      	ldr	r3, [pc, #636]	; (2401840c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
24018190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24018192:	0b1b      	lsrs	r3, r3, #12
24018194:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24018198:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
2401819a:	4b9c      	ldr	r3, [pc, #624]	; (2401840c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
2401819c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2401819e:	091b      	lsrs	r3, r3, #4
240181a0:	f003 0301 	and.w	r3, r3, #1
240181a4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
240181a6:	4b99      	ldr	r3, [pc, #612]	; (2401840c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
240181a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
240181aa:	08db      	lsrs	r3, r3, #3
240181ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
240181b0:	693a      	ldr	r2, [r7, #16]
240181b2:	fb02 f303 	mul.w	r3, r2, r3
240181b6:	ee07 3a90 	vmov	s15, r3
240181ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
240181be:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
240181c2:	697b      	ldr	r3, [r7, #20]
240181c4:	2b00      	cmp	r3, #0
240181c6:	f000 8111 	beq.w	240183ec <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
240181ca:	69bb      	ldr	r3, [r7, #24]
240181cc:	2b02      	cmp	r3, #2
240181ce:	f000 8083 	beq.w	240182d8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
240181d2:	69bb      	ldr	r3, [r7, #24]
240181d4:	2b02      	cmp	r3, #2
240181d6:	f200 80a1 	bhi.w	2401831c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
240181da:	69bb      	ldr	r3, [r7, #24]
240181dc:	2b00      	cmp	r3, #0
240181de:	d003      	beq.n	240181e8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
240181e0:	69bb      	ldr	r3, [r7, #24]
240181e2:	2b01      	cmp	r3, #1
240181e4:	d056      	beq.n	24018294 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
240181e6:	e099      	b.n	2401831c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
240181e8:	4b88      	ldr	r3, [pc, #544]	; (2401840c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
240181ea:	681b      	ldr	r3, [r3, #0]
240181ec:	f003 0320 	and.w	r3, r3, #32
240181f0:	2b00      	cmp	r3, #0
240181f2:	d02d      	beq.n	24018250 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
240181f4:	4b85      	ldr	r3, [pc, #532]	; (2401840c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
240181f6:	681b      	ldr	r3, [r3, #0]
240181f8:	08db      	lsrs	r3, r3, #3
240181fa:	f003 0303 	and.w	r3, r3, #3
240181fe:	4a84      	ldr	r2, [pc, #528]	; (24018410 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
24018200:	fa22 f303 	lsr.w	r3, r2, r3
24018204:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
24018206:	68bb      	ldr	r3, [r7, #8]
24018208:	ee07 3a90 	vmov	s15, r3
2401820c:	eef8 6a67 	vcvt.f32.u32	s13, s15
24018210:	697b      	ldr	r3, [r7, #20]
24018212:	ee07 3a90 	vmov	s15, r3
24018216:	eef8 7a67 	vcvt.f32.u32	s15, s15
2401821a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2401821e:	4b7b      	ldr	r3, [pc, #492]	; (2401840c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
24018220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24018222:	f3c3 0308 	ubfx	r3, r3, #0, #9
24018226:	ee07 3a90 	vmov	s15, r3
2401822a:	eef8 6a67 	vcvt.f32.u32	s13, s15
2401822e:	ed97 6a03 	vldr	s12, [r7, #12]
24018232:	eddf 5a78 	vldr	s11, [pc, #480]	; 24018414 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
24018236:	eec6 7a25 	vdiv.f32	s15, s12, s11
2401823a:	ee76 7aa7 	vadd.f32	s15, s13, s15
2401823e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24018242:	ee77 7aa6 	vadd.f32	s15, s15, s13
24018246:	ee67 7a27 	vmul.f32	s15, s14, s15
2401824a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
2401824e:	e087      	b.n	24018360 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
24018250:	697b      	ldr	r3, [r7, #20]
24018252:	ee07 3a90 	vmov	s15, r3
24018256:	eef8 7a67 	vcvt.f32.u32	s15, s15
2401825a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 24018418 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
2401825e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24018262:	4b6a      	ldr	r3, [pc, #424]	; (2401840c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
24018264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24018266:	f3c3 0308 	ubfx	r3, r3, #0, #9
2401826a:	ee07 3a90 	vmov	s15, r3
2401826e:	eef8 6a67 	vcvt.f32.u32	s13, s15
24018272:	ed97 6a03 	vldr	s12, [r7, #12]
24018276:	eddf 5a67 	vldr	s11, [pc, #412]	; 24018414 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
2401827a:	eec6 7a25 	vdiv.f32	s15, s12, s11
2401827e:	ee76 7aa7 	vadd.f32	s15, s13, s15
24018282:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24018286:	ee77 7aa6 	vadd.f32	s15, s15, s13
2401828a:	ee67 7a27 	vmul.f32	s15, s14, s15
2401828e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
24018292:	e065      	b.n	24018360 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
24018294:	697b      	ldr	r3, [r7, #20]
24018296:	ee07 3a90 	vmov	s15, r3
2401829a:	eef8 7a67 	vcvt.f32.u32	s15, s15
2401829e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 2401841c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
240182a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
240182a6:	4b59      	ldr	r3, [pc, #356]	; (2401840c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
240182a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
240182aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
240182ae:	ee07 3a90 	vmov	s15, r3
240182b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
240182b6:	ed97 6a03 	vldr	s12, [r7, #12]
240182ba:	eddf 5a56 	vldr	s11, [pc, #344]	; 24018414 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
240182be:	eec6 7a25 	vdiv.f32	s15, s12, s11
240182c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
240182c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
240182ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
240182ce:	ee67 7a27 	vmul.f32	s15, s14, s15
240182d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
240182d6:	e043      	b.n	24018360 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
240182d8:	697b      	ldr	r3, [r7, #20]
240182da:	ee07 3a90 	vmov	s15, r3
240182de:	eef8 7a67 	vcvt.f32.u32	s15, s15
240182e2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 24018420 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
240182e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
240182ea:	4b48      	ldr	r3, [pc, #288]	; (2401840c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
240182ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
240182ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
240182f2:	ee07 3a90 	vmov	s15, r3
240182f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
240182fa:	ed97 6a03 	vldr	s12, [r7, #12]
240182fe:	eddf 5a45 	vldr	s11, [pc, #276]	; 24018414 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
24018302:	eec6 7a25 	vdiv.f32	s15, s12, s11
24018306:	ee76 7aa7 	vadd.f32	s15, s13, s15
2401830a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2401830e:	ee77 7aa6 	vadd.f32	s15, s15, s13
24018312:	ee67 7a27 	vmul.f32	s15, s14, s15
24018316:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
2401831a:	e021      	b.n	24018360 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
2401831c:	697b      	ldr	r3, [r7, #20]
2401831e:	ee07 3a90 	vmov	s15, r3
24018322:	eef8 7a67 	vcvt.f32.u32	s15, s15
24018326:	eddf 6a3d 	vldr	s13, [pc, #244]	; 2401841c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
2401832a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2401832e:	4b37      	ldr	r3, [pc, #220]	; (2401840c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
24018330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24018332:	f3c3 0308 	ubfx	r3, r3, #0, #9
24018336:	ee07 3a90 	vmov	s15, r3
2401833a:	eef8 6a67 	vcvt.f32.u32	s13, s15
2401833e:	ed97 6a03 	vldr	s12, [r7, #12]
24018342:	eddf 5a34 	vldr	s11, [pc, #208]	; 24018414 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
24018346:	eec6 7a25 	vdiv.f32	s15, s12, s11
2401834a:	ee76 7aa7 	vadd.f32	s15, s13, s15
2401834e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24018352:	ee77 7aa6 	vadd.f32	s15, s15, s13
24018356:	ee67 7a27 	vmul.f32	s15, s14, s15
2401835a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
2401835e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
24018360:	4b2a      	ldr	r3, [pc, #168]	; (2401840c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
24018362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24018364:	0a5b      	lsrs	r3, r3, #9
24018366:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2401836a:	ee07 3a90 	vmov	s15, r3
2401836e:	eef8 7a67 	vcvt.f32.u32	s15, s15
24018372:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24018376:	ee37 7a87 	vadd.f32	s14, s15, s14
2401837a:	edd7 6a07 	vldr	s13, [r7, #28]
2401837e:	eec6 7a87 	vdiv.f32	s15, s13, s14
24018382:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24018386:	ee17 2a90 	vmov	r2, s15
2401838a:	687b      	ldr	r3, [r7, #4]
2401838c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
2401838e:	4b1f      	ldr	r3, [pc, #124]	; (2401840c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
24018390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24018392:	0c1b      	lsrs	r3, r3, #16
24018394:	f003 037f 	and.w	r3, r3, #127	; 0x7f
24018398:	ee07 3a90 	vmov	s15, r3
2401839c:	eef8 7a67 	vcvt.f32.u32	s15, s15
240183a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
240183a4:	ee37 7a87 	vadd.f32	s14, s15, s14
240183a8:	edd7 6a07 	vldr	s13, [r7, #28]
240183ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
240183b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
240183b4:	ee17 2a90 	vmov	r2, s15
240183b8:	687b      	ldr	r3, [r7, #4]
240183ba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
240183bc:	4b13      	ldr	r3, [pc, #76]	; (2401840c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
240183be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
240183c0:	0e1b      	lsrs	r3, r3, #24
240183c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
240183c6:	ee07 3a90 	vmov	s15, r3
240183ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
240183ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
240183d2:	ee37 7a87 	vadd.f32	s14, s15, s14
240183d6:	edd7 6a07 	vldr	s13, [r7, #28]
240183da:	eec6 7a87 	vdiv.f32	s15, s13, s14
240183de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
240183e2:	ee17 2a90 	vmov	r2, s15
240183e6:	687b      	ldr	r3, [r7, #4]
240183e8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
240183ea:	e008      	b.n	240183fe <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
240183ec:	687b      	ldr	r3, [r7, #4]
240183ee:	2200      	movs	r2, #0
240183f0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
240183f2:	687b      	ldr	r3, [r7, #4]
240183f4:	2200      	movs	r2, #0
240183f6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
240183f8:	687b      	ldr	r3, [r7, #4]
240183fa:	2200      	movs	r2, #0
240183fc:	609a      	str	r2, [r3, #8]
}
240183fe:	bf00      	nop
24018400:	3724      	adds	r7, #36	; 0x24
24018402:	46bd      	mov	sp, r7
24018404:	f85d 7b04 	ldr.w	r7, [sp], #4
24018408:	4770      	bx	lr
2401840a:	bf00      	nop
2401840c:	58024400 	.word	0x58024400
24018410:	03d09000 	.word	0x03d09000
24018414:	46000000 	.word	0x46000000
24018418:	4c742400 	.word	0x4c742400
2401841c:	4a742400 	.word	0x4a742400
24018420:	4bbebc20 	.word	0x4bbebc20

24018424 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
24018424:	b480      	push	{r7}
24018426:	b089      	sub	sp, #36	; 0x24
24018428:	af00      	add	r7, sp, #0
2401842a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
2401842c:	4ba1      	ldr	r3, [pc, #644]	; (240186b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
2401842e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24018430:	f003 0303 	and.w	r3, r3, #3
24018434:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
24018436:	4b9f      	ldr	r3, [pc, #636]	; (240186b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
24018438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2401843a:	0d1b      	lsrs	r3, r3, #20
2401843c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24018440:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
24018442:	4b9c      	ldr	r3, [pc, #624]	; (240186b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
24018444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24018446:	0a1b      	lsrs	r3, r3, #8
24018448:	f003 0301 	and.w	r3, r3, #1
2401844c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
2401844e:	4b99      	ldr	r3, [pc, #612]	; (240186b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
24018450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24018452:	08db      	lsrs	r3, r3, #3
24018454:	f3c3 030c 	ubfx	r3, r3, #0, #13
24018458:	693a      	ldr	r2, [r7, #16]
2401845a:	fb02 f303 	mul.w	r3, r2, r3
2401845e:	ee07 3a90 	vmov	s15, r3
24018462:	eef8 7a67 	vcvt.f32.u32	s15, s15
24018466:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
2401846a:	697b      	ldr	r3, [r7, #20]
2401846c:	2b00      	cmp	r3, #0
2401846e:	f000 8111 	beq.w	24018694 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
24018472:	69bb      	ldr	r3, [r7, #24]
24018474:	2b02      	cmp	r3, #2
24018476:	f000 8083 	beq.w	24018580 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
2401847a:	69bb      	ldr	r3, [r7, #24]
2401847c:	2b02      	cmp	r3, #2
2401847e:	f200 80a1 	bhi.w	240185c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
24018482:	69bb      	ldr	r3, [r7, #24]
24018484:	2b00      	cmp	r3, #0
24018486:	d003      	beq.n	24018490 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
24018488:	69bb      	ldr	r3, [r7, #24]
2401848a:	2b01      	cmp	r3, #1
2401848c:	d056      	beq.n	2401853c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
2401848e:	e099      	b.n	240185c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
24018490:	4b88      	ldr	r3, [pc, #544]	; (240186b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
24018492:	681b      	ldr	r3, [r3, #0]
24018494:	f003 0320 	and.w	r3, r3, #32
24018498:	2b00      	cmp	r3, #0
2401849a:	d02d      	beq.n	240184f8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2401849c:	4b85      	ldr	r3, [pc, #532]	; (240186b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
2401849e:	681b      	ldr	r3, [r3, #0]
240184a0:	08db      	lsrs	r3, r3, #3
240184a2:	f003 0303 	and.w	r3, r3, #3
240184a6:	4a84      	ldr	r2, [pc, #528]	; (240186b8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
240184a8:	fa22 f303 	lsr.w	r3, r2, r3
240184ac:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
240184ae:	68bb      	ldr	r3, [r7, #8]
240184b0:	ee07 3a90 	vmov	s15, r3
240184b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
240184b8:	697b      	ldr	r3, [r7, #20]
240184ba:	ee07 3a90 	vmov	s15, r3
240184be:	eef8 7a67 	vcvt.f32.u32	s15, s15
240184c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
240184c6:	4b7b      	ldr	r3, [pc, #492]	; (240186b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
240184c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
240184ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
240184ce:	ee07 3a90 	vmov	s15, r3
240184d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
240184d6:	ed97 6a03 	vldr	s12, [r7, #12]
240184da:	eddf 5a78 	vldr	s11, [pc, #480]	; 240186bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
240184de:	eec6 7a25 	vdiv.f32	s15, s12, s11
240184e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
240184e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
240184ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
240184ee:	ee67 7a27 	vmul.f32	s15, s14, s15
240184f2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
240184f6:	e087      	b.n	24018608 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
240184f8:	697b      	ldr	r3, [r7, #20]
240184fa:	ee07 3a90 	vmov	s15, r3
240184fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
24018502:	eddf 6a6f 	vldr	s13, [pc, #444]	; 240186c0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
24018506:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2401850a:	4b6a      	ldr	r3, [pc, #424]	; (240186b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
2401850c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2401850e:	f3c3 0308 	ubfx	r3, r3, #0, #9
24018512:	ee07 3a90 	vmov	s15, r3
24018516:	eef8 6a67 	vcvt.f32.u32	s13, s15
2401851a:	ed97 6a03 	vldr	s12, [r7, #12]
2401851e:	eddf 5a67 	vldr	s11, [pc, #412]	; 240186bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
24018522:	eec6 7a25 	vdiv.f32	s15, s12, s11
24018526:	ee76 7aa7 	vadd.f32	s15, s13, s15
2401852a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2401852e:	ee77 7aa6 	vadd.f32	s15, s15, s13
24018532:	ee67 7a27 	vmul.f32	s15, s14, s15
24018536:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
2401853a:	e065      	b.n	24018608 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
2401853c:	697b      	ldr	r3, [r7, #20]
2401853e:	ee07 3a90 	vmov	s15, r3
24018542:	eef8 7a67 	vcvt.f32.u32	s15, s15
24018546:	eddf 6a5f 	vldr	s13, [pc, #380]	; 240186c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
2401854a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2401854e:	4b59      	ldr	r3, [pc, #356]	; (240186b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
24018550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24018552:	f3c3 0308 	ubfx	r3, r3, #0, #9
24018556:	ee07 3a90 	vmov	s15, r3
2401855a:	eef8 6a67 	vcvt.f32.u32	s13, s15
2401855e:	ed97 6a03 	vldr	s12, [r7, #12]
24018562:	eddf 5a56 	vldr	s11, [pc, #344]	; 240186bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
24018566:	eec6 7a25 	vdiv.f32	s15, s12, s11
2401856a:	ee76 7aa7 	vadd.f32	s15, s13, s15
2401856e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24018572:	ee77 7aa6 	vadd.f32	s15, s15, s13
24018576:	ee67 7a27 	vmul.f32	s15, s14, s15
2401857a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
2401857e:	e043      	b.n	24018608 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
24018580:	697b      	ldr	r3, [r7, #20]
24018582:	ee07 3a90 	vmov	s15, r3
24018586:	eef8 7a67 	vcvt.f32.u32	s15, s15
2401858a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 240186c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
2401858e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24018592:	4b48      	ldr	r3, [pc, #288]	; (240186b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
24018594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24018596:	f3c3 0308 	ubfx	r3, r3, #0, #9
2401859a:	ee07 3a90 	vmov	s15, r3
2401859e:	eef8 6a67 	vcvt.f32.u32	s13, s15
240185a2:	ed97 6a03 	vldr	s12, [r7, #12]
240185a6:	eddf 5a45 	vldr	s11, [pc, #276]	; 240186bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
240185aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
240185ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
240185b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
240185b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
240185ba:	ee67 7a27 	vmul.f32	s15, s14, s15
240185be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
240185c2:	e021      	b.n	24018608 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
240185c4:	697b      	ldr	r3, [r7, #20]
240185c6:	ee07 3a90 	vmov	s15, r3
240185ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
240185ce:	eddf 6a3d 	vldr	s13, [pc, #244]	; 240186c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
240185d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
240185d6:	4b37      	ldr	r3, [pc, #220]	; (240186b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
240185d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
240185da:	f3c3 0308 	ubfx	r3, r3, #0, #9
240185de:	ee07 3a90 	vmov	s15, r3
240185e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
240185e6:	ed97 6a03 	vldr	s12, [r7, #12]
240185ea:	eddf 5a34 	vldr	s11, [pc, #208]	; 240186bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
240185ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
240185f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
240185f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
240185fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
240185fe:	ee67 7a27 	vmul.f32	s15, s14, s15
24018602:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
24018606:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
24018608:	4b2a      	ldr	r3, [pc, #168]	; (240186b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
2401860a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2401860c:	0a5b      	lsrs	r3, r3, #9
2401860e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
24018612:	ee07 3a90 	vmov	s15, r3
24018616:	eef8 7a67 	vcvt.f32.u32	s15, s15
2401861a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2401861e:	ee37 7a87 	vadd.f32	s14, s15, s14
24018622:	edd7 6a07 	vldr	s13, [r7, #28]
24018626:	eec6 7a87 	vdiv.f32	s15, s13, s14
2401862a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2401862e:	ee17 2a90 	vmov	r2, s15
24018632:	687b      	ldr	r3, [r7, #4]
24018634:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
24018636:	4b1f      	ldr	r3, [pc, #124]	; (240186b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
24018638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2401863a:	0c1b      	lsrs	r3, r3, #16
2401863c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
24018640:	ee07 3a90 	vmov	s15, r3
24018644:	eef8 7a67 	vcvt.f32.u32	s15, s15
24018648:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2401864c:	ee37 7a87 	vadd.f32	s14, s15, s14
24018650:	edd7 6a07 	vldr	s13, [r7, #28]
24018654:	eec6 7a87 	vdiv.f32	s15, s13, s14
24018658:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2401865c:	ee17 2a90 	vmov	r2, s15
24018660:	687b      	ldr	r3, [r7, #4]
24018662:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
24018664:	4b13      	ldr	r3, [pc, #76]	; (240186b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
24018666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24018668:	0e1b      	lsrs	r3, r3, #24
2401866a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2401866e:	ee07 3a90 	vmov	s15, r3
24018672:	eef8 7a67 	vcvt.f32.u32	s15, s15
24018676:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2401867a:	ee37 7a87 	vadd.f32	s14, s15, s14
2401867e:	edd7 6a07 	vldr	s13, [r7, #28]
24018682:	eec6 7a87 	vdiv.f32	s15, s13, s14
24018686:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2401868a:	ee17 2a90 	vmov	r2, s15
2401868e:	687b      	ldr	r3, [r7, #4]
24018690:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
24018692:	e008      	b.n	240186a6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
24018694:	687b      	ldr	r3, [r7, #4]
24018696:	2200      	movs	r2, #0
24018698:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
2401869a:	687b      	ldr	r3, [r7, #4]
2401869c:	2200      	movs	r2, #0
2401869e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
240186a0:	687b      	ldr	r3, [r7, #4]
240186a2:	2200      	movs	r2, #0
240186a4:	609a      	str	r2, [r3, #8]
}
240186a6:	bf00      	nop
240186a8:	3724      	adds	r7, #36	; 0x24
240186aa:	46bd      	mov	sp, r7
240186ac:	f85d 7b04 	ldr.w	r7, [sp], #4
240186b0:	4770      	bx	lr
240186b2:	bf00      	nop
240186b4:	58024400 	.word	0x58024400
240186b8:	03d09000 	.word	0x03d09000
240186bc:	46000000 	.word	0x46000000
240186c0:	4c742400 	.word	0x4c742400
240186c4:	4a742400 	.word	0x4a742400
240186c8:	4bbebc20 	.word	0x4bbebc20

240186cc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
240186cc:	b480      	push	{r7}
240186ce:	b089      	sub	sp, #36	; 0x24
240186d0:	af00      	add	r7, sp, #0
240186d2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
240186d4:	4ba0      	ldr	r3, [pc, #640]	; (24018958 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
240186d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
240186d8:	f003 0303 	and.w	r3, r3, #3
240186dc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
240186de:	4b9e      	ldr	r3, [pc, #632]	; (24018958 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
240186e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
240186e2:	091b      	lsrs	r3, r3, #4
240186e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
240186e8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
240186ea:	4b9b      	ldr	r3, [pc, #620]	; (24018958 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
240186ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
240186ee:	f003 0301 	and.w	r3, r3, #1
240186f2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
240186f4:	4b98      	ldr	r3, [pc, #608]	; (24018958 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
240186f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
240186f8:	08db      	lsrs	r3, r3, #3
240186fa:	f3c3 030c 	ubfx	r3, r3, #0, #13
240186fe:	693a      	ldr	r2, [r7, #16]
24018700:	fb02 f303 	mul.w	r3, r2, r3
24018704:	ee07 3a90 	vmov	s15, r3
24018708:	eef8 7a67 	vcvt.f32.u32	s15, s15
2401870c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
24018710:	697b      	ldr	r3, [r7, #20]
24018712:	2b00      	cmp	r3, #0
24018714:	f000 8111 	beq.w	2401893a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
24018718:	69bb      	ldr	r3, [r7, #24]
2401871a:	2b02      	cmp	r3, #2
2401871c:	f000 8083 	beq.w	24018826 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
24018720:	69bb      	ldr	r3, [r7, #24]
24018722:	2b02      	cmp	r3, #2
24018724:	f200 80a1 	bhi.w	2401886a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
24018728:	69bb      	ldr	r3, [r7, #24]
2401872a:	2b00      	cmp	r3, #0
2401872c:	d003      	beq.n	24018736 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
2401872e:	69bb      	ldr	r3, [r7, #24]
24018730:	2b01      	cmp	r3, #1
24018732:	d056      	beq.n	240187e2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
24018734:	e099      	b.n	2401886a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
24018736:	4b88      	ldr	r3, [pc, #544]	; (24018958 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
24018738:	681b      	ldr	r3, [r3, #0]
2401873a:	f003 0320 	and.w	r3, r3, #32
2401873e:	2b00      	cmp	r3, #0
24018740:	d02d      	beq.n	2401879e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24018742:	4b85      	ldr	r3, [pc, #532]	; (24018958 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
24018744:	681b      	ldr	r3, [r3, #0]
24018746:	08db      	lsrs	r3, r3, #3
24018748:	f003 0303 	and.w	r3, r3, #3
2401874c:	4a83      	ldr	r2, [pc, #524]	; (2401895c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
2401874e:	fa22 f303 	lsr.w	r3, r2, r3
24018752:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24018754:	68bb      	ldr	r3, [r7, #8]
24018756:	ee07 3a90 	vmov	s15, r3
2401875a:	eef8 6a67 	vcvt.f32.u32	s13, s15
2401875e:	697b      	ldr	r3, [r7, #20]
24018760:	ee07 3a90 	vmov	s15, r3
24018764:	eef8 7a67 	vcvt.f32.u32	s15, s15
24018768:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2401876c:	4b7a      	ldr	r3, [pc, #488]	; (24018958 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
2401876e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24018770:	f3c3 0308 	ubfx	r3, r3, #0, #9
24018774:	ee07 3a90 	vmov	s15, r3
24018778:	eef8 6a67 	vcvt.f32.u32	s13, s15
2401877c:	ed97 6a03 	vldr	s12, [r7, #12]
24018780:	eddf 5a77 	vldr	s11, [pc, #476]	; 24018960 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
24018784:	eec6 7a25 	vdiv.f32	s15, s12, s11
24018788:	ee76 7aa7 	vadd.f32	s15, s13, s15
2401878c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24018790:	ee77 7aa6 	vadd.f32	s15, s15, s13
24018794:	ee67 7a27 	vmul.f32	s15, s14, s15
24018798:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
2401879c:	e087      	b.n	240188ae <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2401879e:	697b      	ldr	r3, [r7, #20]
240187a0:	ee07 3a90 	vmov	s15, r3
240187a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
240187a8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 24018964 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
240187ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
240187b0:	4b69      	ldr	r3, [pc, #420]	; (24018958 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
240187b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
240187b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
240187b8:	ee07 3a90 	vmov	s15, r3
240187bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
240187c0:	ed97 6a03 	vldr	s12, [r7, #12]
240187c4:	eddf 5a66 	vldr	s11, [pc, #408]	; 24018960 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
240187c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
240187cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
240187d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
240187d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
240187d8:	ee67 7a27 	vmul.f32	s15, s14, s15
240187dc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
240187e0:	e065      	b.n	240188ae <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
240187e2:	697b      	ldr	r3, [r7, #20]
240187e4:	ee07 3a90 	vmov	s15, r3
240187e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
240187ec:	eddf 6a5e 	vldr	s13, [pc, #376]	; 24018968 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
240187f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
240187f4:	4b58      	ldr	r3, [pc, #352]	; (24018958 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
240187f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
240187f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
240187fc:	ee07 3a90 	vmov	s15, r3
24018800:	eef8 6a67 	vcvt.f32.u32	s13, s15
24018804:	ed97 6a03 	vldr	s12, [r7, #12]
24018808:	eddf 5a55 	vldr	s11, [pc, #340]	; 24018960 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
2401880c:	eec6 7a25 	vdiv.f32	s15, s12, s11
24018810:	ee76 7aa7 	vadd.f32	s15, s13, s15
24018814:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24018818:	ee77 7aa6 	vadd.f32	s15, s15, s13
2401881c:	ee67 7a27 	vmul.f32	s15, s14, s15
24018820:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
24018824:	e043      	b.n	240188ae <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24018826:	697b      	ldr	r3, [r7, #20]
24018828:	ee07 3a90 	vmov	s15, r3
2401882c:	eef8 7a67 	vcvt.f32.u32	s15, s15
24018830:	eddf 6a4e 	vldr	s13, [pc, #312]	; 2401896c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
24018834:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24018838:	4b47      	ldr	r3, [pc, #284]	; (24018958 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
2401883a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2401883c:	f3c3 0308 	ubfx	r3, r3, #0, #9
24018840:	ee07 3a90 	vmov	s15, r3
24018844:	eef8 6a67 	vcvt.f32.u32	s13, s15
24018848:	ed97 6a03 	vldr	s12, [r7, #12]
2401884c:	eddf 5a44 	vldr	s11, [pc, #272]	; 24018960 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
24018850:	eec6 7a25 	vdiv.f32	s15, s12, s11
24018854:	ee76 7aa7 	vadd.f32	s15, s13, s15
24018858:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2401885c:	ee77 7aa6 	vadd.f32	s15, s15, s13
24018860:	ee67 7a27 	vmul.f32	s15, s14, s15
24018864:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
24018868:	e021      	b.n	240188ae <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2401886a:	697b      	ldr	r3, [r7, #20]
2401886c:	ee07 3a90 	vmov	s15, r3
24018870:	eef8 7a67 	vcvt.f32.u32	s15, s15
24018874:	eddf 6a3b 	vldr	s13, [pc, #236]	; 24018964 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
24018878:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2401887c:	4b36      	ldr	r3, [pc, #216]	; (24018958 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
2401887e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24018880:	f3c3 0308 	ubfx	r3, r3, #0, #9
24018884:	ee07 3a90 	vmov	s15, r3
24018888:	eef8 6a67 	vcvt.f32.u32	s13, s15
2401888c:	ed97 6a03 	vldr	s12, [r7, #12]
24018890:	eddf 5a33 	vldr	s11, [pc, #204]	; 24018960 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
24018894:	eec6 7a25 	vdiv.f32	s15, s12, s11
24018898:	ee76 7aa7 	vadd.f32	s15, s13, s15
2401889c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
240188a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
240188a4:	ee67 7a27 	vmul.f32	s15, s14, s15
240188a8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
240188ac:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
240188ae:	4b2a      	ldr	r3, [pc, #168]	; (24018958 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
240188b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
240188b2:	0a5b      	lsrs	r3, r3, #9
240188b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
240188b8:	ee07 3a90 	vmov	s15, r3
240188bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
240188c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
240188c4:	ee37 7a87 	vadd.f32	s14, s15, s14
240188c8:	edd7 6a07 	vldr	s13, [r7, #28]
240188cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
240188d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
240188d4:	ee17 2a90 	vmov	r2, s15
240188d8:	687b      	ldr	r3, [r7, #4]
240188da:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
240188dc:	4b1e      	ldr	r3, [pc, #120]	; (24018958 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
240188de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
240188e0:	0c1b      	lsrs	r3, r3, #16
240188e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
240188e6:	ee07 3a90 	vmov	s15, r3
240188ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
240188ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
240188f2:	ee37 7a87 	vadd.f32	s14, s15, s14
240188f6:	edd7 6a07 	vldr	s13, [r7, #28]
240188fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
240188fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24018902:	ee17 2a90 	vmov	r2, s15
24018906:	687b      	ldr	r3, [r7, #4]
24018908:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
2401890a:	4b13      	ldr	r3, [pc, #76]	; (24018958 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
2401890c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2401890e:	0e1b      	lsrs	r3, r3, #24
24018910:	f003 037f 	and.w	r3, r3, #127	; 0x7f
24018914:	ee07 3a90 	vmov	s15, r3
24018918:	eef8 7a67 	vcvt.f32.u32	s15, s15
2401891c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24018920:	ee37 7a87 	vadd.f32	s14, s15, s14
24018924:	edd7 6a07 	vldr	s13, [r7, #28]
24018928:	eec6 7a87 	vdiv.f32	s15, s13, s14
2401892c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24018930:	ee17 2a90 	vmov	r2, s15
24018934:	687b      	ldr	r3, [r7, #4]
24018936:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
24018938:	e008      	b.n	2401894c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
2401893a:	687b      	ldr	r3, [r7, #4]
2401893c:	2200      	movs	r2, #0
2401893e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
24018940:	687b      	ldr	r3, [r7, #4]
24018942:	2200      	movs	r2, #0
24018944:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
24018946:	687b      	ldr	r3, [r7, #4]
24018948:	2200      	movs	r2, #0
2401894a:	609a      	str	r2, [r3, #8]
}
2401894c:	bf00      	nop
2401894e:	3724      	adds	r7, #36	; 0x24
24018950:	46bd      	mov	sp, r7
24018952:	f85d 7b04 	ldr.w	r7, [sp], #4
24018956:	4770      	bx	lr
24018958:	58024400 	.word	0x58024400
2401895c:	03d09000 	.word	0x03d09000
24018960:	46000000 	.word	0x46000000
24018964:	4c742400 	.word	0x4c742400
24018968:	4a742400 	.word	0x4a742400
2401896c:	4bbebc20 	.word	0x4bbebc20

24018970 <HAL_RCCEx_GetD1SysClockFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System current Core Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCCEx_GetD1SysClockFreq(void)
{
24018970:	b580      	push	{r7, lr}
24018972:	b082      	sub	sp, #8
24018974:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
24018976:	f7fc ff97 	bl	240158a8 <HAL_RCC_GetSysClockFreq>
2401897a:	4602      	mov	r2, r0
2401897c:	4b10      	ldr	r3, [pc, #64]	; (240189c0 <HAL_RCCEx_GetD1SysClockFreq+0x50>)
2401897e:	699b      	ldr	r3, [r3, #24]
24018980:	0a1b      	lsrs	r3, r3, #8
24018982:	f003 030f 	and.w	r3, r3, #15
24018986:	490f      	ldr	r1, [pc, #60]	; (240189c4 <HAL_RCCEx_GetD1SysClockFreq+0x54>)
24018988:	5ccb      	ldrb	r3, [r1, r3]
2401898a:	f003 031f 	and.w	r3, r3, #31
2401898e:	fa22 f303 	lsr.w	r3, r2, r3
24018992:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24018994:	4b0a      	ldr	r3, [pc, #40]	; (240189c0 <HAL_RCCEx_GetD1SysClockFreq+0x50>)
24018996:	699b      	ldr	r3, [r3, #24]
24018998:	f003 030f 	and.w	r3, r3, #15
2401899c:	4a09      	ldr	r2, [pc, #36]	; (240189c4 <HAL_RCCEx_GetD1SysClockFreq+0x54>)
2401899e:	5cd3      	ldrb	r3, [r2, r3]
240189a0:	f003 031f 	and.w	r3, r3, #31
240189a4:	687a      	ldr	r2, [r7, #4]
240189a6:	fa22 f303 	lsr.w	r3, r2, r3
240189aa:	4a07      	ldr	r2, [pc, #28]	; (240189c8 <HAL_RCCEx_GetD1SysClockFreq+0x58>)
240189ac:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
240189ae:	4a07      	ldr	r2, [pc, #28]	; (240189cc <HAL_RCCEx_GetD1SysClockFreq+0x5c>)
240189b0:	687b      	ldr	r3, [r7, #4]
240189b2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return common_system_clock;
240189b4:	687b      	ldr	r3, [r7, #4]
}
240189b6:	4618      	mov	r0, r3
240189b8:	3708      	adds	r7, #8
240189ba:	46bd      	mov	sp, r7
240189bc:	bd80      	pop	{r7, pc}
240189be:	bf00      	nop
240189c0:	58024400 	.word	0x58024400
240189c4:	24019ad0 	.word	0x24019ad0
240189c8:	240004b4 	.word	0x240004b4
240189cc:	240004b0 	.word	0x240004b0

240189d0 <HAL_RCCEx_EnableLSECSS>:
  *         with HAL_RCC_OscConfig() and the LSE oscillator clock is to be selected as RTC
  *         clock with HAL_RCCEx_PeriphCLKConfig().
  * @retval None
  */
void HAL_RCCEx_EnableLSECSS(void)
{
240189d0:	b480      	push	{r7}
240189d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
240189d4:	4b05      	ldr	r3, [pc, #20]	; (240189ec <HAL_RCCEx_EnableLSECSS+0x1c>)
240189d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
240189d8:	4a04      	ldr	r2, [pc, #16]	; (240189ec <HAL_RCCEx_EnableLSECSS+0x1c>)
240189da:	f043 0320 	orr.w	r3, r3, #32
240189de:	6713      	str	r3, [r2, #112]	; 0x70
}
240189e0:	bf00      	nop
240189e2:	46bd      	mov	sp, r7
240189e4:	f85d 7b04 	ldr.w	r7, [sp], #4
240189e8:	4770      	bx	lr
240189ea:	bf00      	nop
240189ec:	58024400 	.word	0x58024400

240189f0 <HAL_RCCEx_DisableLSECSS>:
  * @brief  Disables the LSE Clock Security System.
  * @note   LSE Clock Security System can only be disabled after a LSE failure detection.
  * @retval None
  */
void HAL_RCCEx_DisableLSECSS(void)
{
240189f0:	b480      	push	{r7}
240189f2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
240189f4:	4b08      	ldr	r3, [pc, #32]	; (24018a18 <HAL_RCCEx_DisableLSECSS+0x28>)
240189f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
240189f8:	4a07      	ldr	r2, [pc, #28]	; (24018a18 <HAL_RCCEx_DisableLSECSS+0x28>)
240189fa:	f023 0320 	bic.w	r3, r3, #32
240189fe:	6713      	str	r3, [r2, #112]	; 0x70
  /* Disable LSE CSS IT if any */
  __HAL_RCC_DISABLE_IT(RCC_IT_LSECSS);
24018a00:	4b05      	ldr	r3, [pc, #20]	; (24018a18 <HAL_RCCEx_DisableLSECSS+0x28>)
24018a02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24018a04:	4a04      	ldr	r2, [pc, #16]	; (24018a18 <HAL_RCCEx_DisableLSECSS+0x28>)
24018a06:	f423 7300 	bic.w	r3, r3, #512	; 0x200
24018a0a:	6613      	str	r3, [r2, #96]	; 0x60
}
24018a0c:	bf00      	nop
24018a0e:	46bd      	mov	sp, r7
24018a10:	f85d 7b04 	ldr.w	r7, [sp], #4
24018a14:	4770      	bx	lr
24018a16:	bf00      	nop
24018a18:	58024400 	.word	0x58024400

24018a1c <HAL_RCCEx_EnableLSECSS_IT>:
  * @brief  Enable the LSE Clock Security System Interrupt & corresponding EXTI line.
  * @note   LSE Clock Security System Interrupt is mapped on EXTI line 18
  * @retval None
  */
void HAL_RCCEx_EnableLSECSS_IT(void)
{
24018a1c:	b480      	push	{r7}
24018a1e:	af00      	add	r7, sp, #0
  /* Enable LSE CSS */
  SET_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
24018a20:	4b11      	ldr	r3, [pc, #68]	; (24018a68 <HAL_RCCEx_EnableLSECSS_IT+0x4c>)
24018a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24018a24:	4a10      	ldr	r2, [pc, #64]	; (24018a68 <HAL_RCCEx_EnableLSECSS_IT+0x4c>)
24018a26:	f043 0320 	orr.w	r3, r3, #32
24018a2a:	6713      	str	r3, [r2, #112]	; 0x70

  /* Enable LSE CSS IT */
  __HAL_RCC_ENABLE_IT(RCC_IT_LSECSS);
24018a2c:	4b0e      	ldr	r3, [pc, #56]	; (24018a68 <HAL_RCCEx_EnableLSECSS_IT+0x4c>)
24018a2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24018a30:	4a0d      	ldr	r2, [pc, #52]	; (24018a68 <HAL_RCCEx_EnableLSECSS_IT+0x4c>)
24018a32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
24018a36:	6613      	str	r3, [r2, #96]	; 0x60

  /* Enable IT on EXTI Line 18 */
#if defined(DUAL_CORE) && defined(CORE_CM4)
  __HAL_RCC_C2_LSECSS_EXTI_ENABLE_IT();
#else
  __HAL_RCC_LSECSS_EXTI_ENABLE_IT();
24018a38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24018a3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
24018a40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
24018a44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
24018a48:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* DUAL_CORE && CORE_CM4 */
  __HAL_RCC_LSECSS_EXTI_ENABLE_RISING_EDGE();
24018a4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24018a50:	681b      	ldr	r3, [r3, #0]
24018a52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
24018a56:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
24018a5a:	6013      	str	r3, [r2, #0]
}
24018a5c:	bf00      	nop
24018a5e:	46bd      	mov	sp, r7
24018a60:	f85d 7b04 	ldr.w	r7, [sp], #4
24018a64:	4770      	bx	lr
24018a66:	bf00      	nop
24018a68:	58024400 	.word	0x58024400

24018a6c <HAL_RCCEx_WakeUpStopCLKConfig>:
  * @note   This function shall not be called after the Clock Security System on HSE has been
  *         enabled.
  * @retval None
  */
void HAL_RCCEx_WakeUpStopCLKConfig(uint32_t WakeUpClk)
{
24018a6c:	b480      	push	{r7}
24018a6e:	b083      	sub	sp, #12
24018a70:	af00      	add	r7, sp, #0
24018a72:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_STOP_WAKEUPCLOCK(WakeUpClk));

  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(WakeUpClk);
24018a74:	4b06      	ldr	r3, [pc, #24]	; (24018a90 <HAL_RCCEx_WakeUpStopCLKConfig+0x24>)
24018a76:	691b      	ldr	r3, [r3, #16]
24018a78:	f023 0240 	bic.w	r2, r3, #64	; 0x40
24018a7c:	4904      	ldr	r1, [pc, #16]	; (24018a90 <HAL_RCCEx_WakeUpStopCLKConfig+0x24>)
24018a7e:	687b      	ldr	r3, [r7, #4]
24018a80:	4313      	orrs	r3, r2
24018a82:	610b      	str	r3, [r1, #16]
}
24018a84:	bf00      	nop
24018a86:	370c      	adds	r7, #12
24018a88:	46bd      	mov	sp, r7
24018a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
24018a8e:	4770      	bx	lr
24018a90:	58024400 	.word	0x58024400

24018a94 <HAL_RCCEx_KerWakeUpStopCLKConfig>:
  *            @arg RCC_STOP_KERWAKEUPCLOCK_CSI: CSI oscillator selection
  *            @arg RCC_STOP_KERWAKEUPCLOCK_HSI: HSI oscillator selection
  * @retval None
  */
void HAL_RCCEx_KerWakeUpStopCLKConfig(uint32_t WakeUpClk)
{
24018a94:	b480      	push	{r7}
24018a96:	b083      	sub	sp, #12
24018a98:	af00      	add	r7, sp, #0
24018a9a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_STOP_KERWAKEUPCLOCK(WakeUpClk));

  __HAL_RCC_KERWAKEUPSTOP_CLK_CONFIG(WakeUpClk);
24018a9c:	4b06      	ldr	r3, [pc, #24]	; (24018ab8 <HAL_RCCEx_KerWakeUpStopCLKConfig+0x24>)
24018a9e:	691b      	ldr	r3, [r3, #16]
24018aa0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
24018aa4:	4904      	ldr	r1, [pc, #16]	; (24018ab8 <HAL_RCCEx_KerWakeUpStopCLKConfig+0x24>)
24018aa6:	687b      	ldr	r3, [r7, #4]
24018aa8:	4313      	orrs	r3, r2
24018aaa:	610b      	str	r3, [r1, #16]
}
24018aac:	bf00      	nop
24018aae:	370c      	adds	r7, #12
24018ab0:	46bd      	mov	sp, r7
24018ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
24018ab6:	4770      	bx	lr
24018ab8:	58024400 	.word	0x58024400

24018abc <HAL_RCCEx_WWDGxSysResetConfig>:
  * @note   This bit can be set by software but is cleared by hardware during a system reset
  *
  * @retval None
  */
void HAL_RCCEx_WWDGxSysResetConfig(uint32_t RCC_WWDGx)
{
24018abc:	b480      	push	{r7}
24018abe:	b083      	sub	sp, #12
24018ac0:	af00      	add	r7, sp, #0
24018ac2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_SCOPE_WWDG(RCC_WWDGx));
  SET_BIT(RCC->GCR, RCC_WWDGx) ;
24018ac4:	4b06      	ldr	r3, [pc, #24]	; (24018ae0 <HAL_RCCEx_WWDGxSysResetConfig+0x24>)
24018ac6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
24018aca:	4905      	ldr	r1, [pc, #20]	; (24018ae0 <HAL_RCCEx_WWDGxSysResetConfig+0x24>)
24018acc:	687b      	ldr	r3, [r7, #4]
24018ace:	4313      	orrs	r3, r2
24018ad0:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
}
24018ad4:	bf00      	nop
24018ad6:	370c      	adds	r7, #12
24018ad8:	46bd      	mov	sp, r7
24018ada:	f85d 7b04 	ldr.w	r7, [sp], #4
24018ade:	4770      	bx	lr
24018ae0:	58024400 	.word	0x58024400

24018ae4 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
24018ae4:	b580      	push	{r7, lr}
24018ae6:	b084      	sub	sp, #16
24018ae8:	af00      	add	r7, sp, #0
24018aea:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
24018aec:	4b26      	ldr	r3, [pc, #152]	; (24018b88 <HAL_RCCEx_CRSConfig+0xa4>)
24018aee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
24018af2:	4a25      	ldr	r2, [pc, #148]	; (24018b88 <HAL_RCCEx_CRSConfig+0xa4>)
24018af4:	f043 0302 	orr.w	r3, r3, #2
24018af8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  __HAL_RCC_CRS_RELEASE_RESET();
24018afc:	4b22      	ldr	r3, [pc, #136]	; (24018b88 <HAL_RCCEx_CRSConfig+0xa4>)
24018afe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
24018b02:	4a21      	ldr	r2, [pc, #132]	; (24018b88 <HAL_RCCEx_CRSConfig+0xa4>)
24018b04:	f023 0302 	bic.w	r3, r3, #2
24018b08:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /* Set the SYNCDIV[2:0] bits according to Pre-scaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  if ((HAL_GetREVID() <= REV_ID_Y) && (pInit->Source == RCC_CRS_SYNC_SOURCE_USB2))
24018b0c:	f7ea fb64 	bl	240031d8 <HAL_GetREVID>
24018b10:	4603      	mov	r3, r0
24018b12:	f241 0203 	movw	r2, #4099	; 0x1003
24018b16:	4293      	cmp	r3, r2
24018b18:	d80b      	bhi.n	24018b32 <HAL_RCCEx_CRSConfig+0x4e>
24018b1a:	687b      	ldr	r3, [r7, #4]
24018b1c:	685b      	ldr	r3, [r3, #4]
24018b1e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
24018b22:	d106      	bne.n	24018b32 <HAL_RCCEx_CRSConfig+0x4e>
  {
    /* Use Rev.Y value of USB2 */
    value = (pInit->Prescaler | RCC_CRS_SYNC_SOURCE_PIN | pInit->Polarity);
24018b24:	687b      	ldr	r3, [r7, #4]
24018b26:	681a      	ldr	r2, [r3, #0]
24018b28:	687b      	ldr	r3, [r7, #4]
24018b2a:	689b      	ldr	r3, [r3, #8]
24018b2c:	4313      	orrs	r3, r2
24018b2e:	60fb      	str	r3, [r7, #12]
24018b30:	e008      	b.n	24018b44 <HAL_RCCEx_CRSConfig+0x60>
  }
  else
  {
    value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
24018b32:	687b      	ldr	r3, [r7, #4]
24018b34:	681a      	ldr	r2, [r3, #0]
24018b36:	687b      	ldr	r3, [r7, #4]
24018b38:	685b      	ldr	r3, [r3, #4]
24018b3a:	431a      	orrs	r2, r3
24018b3c:	687b      	ldr	r3, [r7, #4]
24018b3e:	689b      	ldr	r3, [r3, #8]
24018b40:	4313      	orrs	r3, r2
24018b42:	60fb      	str	r3, [r7, #12]
  }
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
24018b44:	687b      	ldr	r3, [r7, #4]
24018b46:	68db      	ldr	r3, [r3, #12]
24018b48:	68fa      	ldr	r2, [r7, #12]
24018b4a:	4313      	orrs	r3, r2
24018b4c:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
24018b4e:	687b      	ldr	r3, [r7, #4]
24018b50:	691b      	ldr	r3, [r3, #16]
24018b52:	041b      	lsls	r3, r3, #16
24018b54:	68fa      	ldr	r2, [r7, #12]
24018b56:	4313      	orrs	r3, r2
24018b58:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
24018b5a:	4a0c      	ldr	r2, [pc, #48]	; (24018b8c <HAL_RCCEx_CRSConfig+0xa8>)
24018b5c:	68fb      	ldr	r3, [r7, #12]
24018b5e:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
24018b60:	4b0a      	ldr	r3, [pc, #40]	; (24018b8c <HAL_RCCEx_CRSConfig+0xa8>)
24018b62:	681b      	ldr	r3, [r3, #0]
24018b64:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
24018b68:	687b      	ldr	r3, [r7, #4]
24018b6a:	695b      	ldr	r3, [r3, #20]
24018b6c:	021b      	lsls	r3, r3, #8
24018b6e:	4907      	ldr	r1, [pc, #28]	; (24018b8c <HAL_RCCEx_CRSConfig+0xa8>)
24018b70:	4313      	orrs	r3, r2
24018b72:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
24018b74:	4b05      	ldr	r3, [pc, #20]	; (24018b8c <HAL_RCCEx_CRSConfig+0xa8>)
24018b76:	681b      	ldr	r3, [r3, #0]
24018b78:	4a04      	ldr	r2, [pc, #16]	; (24018b8c <HAL_RCCEx_CRSConfig+0xa8>)
24018b7a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
24018b7e:	6013      	str	r3, [r2, #0]
}
24018b80:	bf00      	nop
24018b82:	3710      	adds	r7, #16
24018b84:	46bd      	mov	sp, r7
24018b86:	bd80      	pop	{r7, pc}
24018b88:	58024400 	.word	0x58024400
24018b8c:	40008400 	.word	0x40008400

24018b90 <HAL_RCCEx_CRSSoftwareSynchronizationGenerate>:
/**
  * @brief  Generate the software synchronization event
  * @retval None
  */
void HAL_RCCEx_CRSSoftwareSynchronizationGenerate(void)
{
24018b90:	b480      	push	{r7}
24018b92:	af00      	add	r7, sp, #0
  SET_BIT(CRS->CR, CRS_CR_SWSYNC);
24018b94:	4b05      	ldr	r3, [pc, #20]	; (24018bac <HAL_RCCEx_CRSSoftwareSynchronizationGenerate+0x1c>)
24018b96:	681b      	ldr	r3, [r3, #0]
24018b98:	4a04      	ldr	r2, [pc, #16]	; (24018bac <HAL_RCCEx_CRSSoftwareSynchronizationGenerate+0x1c>)
24018b9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
24018b9e:	6013      	str	r3, [r2, #0]
}
24018ba0:	bf00      	nop
24018ba2:	46bd      	mov	sp, r7
24018ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
24018ba8:	4770      	bx	lr
24018baa:	bf00      	nop
24018bac:	40008400 	.word	0x40008400

24018bb0 <HAL_RCCEx_CRSGetSynchronizationInfo>:
  * @brief  Return synchronization info
  * @param  pSynchroInfo Pointer on RCC_CRSSynchroInfoTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSGetSynchronizationInfo(RCC_CRSSynchroInfoTypeDef *pSynchroInfo)
{
24018bb0:	b480      	push	{r7}
24018bb2:	b083      	sub	sp, #12
24018bb4:	af00      	add	r7, sp, #0
24018bb6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(pSynchroInfo != (void *)NULL);

  /* Get the reload value */
  pSynchroInfo->ReloadValue = (uint32_t)(READ_BIT(CRS->CFGR, CRS_CFGR_RELOAD));
24018bb8:	4b0e      	ldr	r3, [pc, #56]	; (24018bf4 <HAL_RCCEx_CRSGetSynchronizationInfo+0x44>)
24018bba:	685b      	ldr	r3, [r3, #4]
24018bbc:	b29a      	uxth	r2, r3
24018bbe:	687b      	ldr	r3, [r7, #4]
24018bc0:	601a      	str	r2, [r3, #0]

  /* Get HSI48 oscillator smooth trimming */
  pSynchroInfo->HSI48CalibrationValue = (uint32_t)(READ_BIT(CRS->CR, CRS_CR_TRIM) >> CRS_CR_TRIM_Pos);
24018bc2:	4b0c      	ldr	r3, [pc, #48]	; (24018bf4 <HAL_RCCEx_CRSGetSynchronizationInfo+0x44>)
24018bc4:	681b      	ldr	r3, [r3, #0]
24018bc6:	0a1b      	lsrs	r3, r3, #8
24018bc8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
24018bcc:	687b      	ldr	r3, [r7, #4]
24018bce:	605a      	str	r2, [r3, #4]

  /* Get Frequency error capture */
  pSynchroInfo->FreqErrorCapture = (uint32_t)(READ_BIT(CRS->ISR, CRS_ISR_FECAP) >> CRS_ISR_FECAP_Pos);
24018bd0:	4b08      	ldr	r3, [pc, #32]	; (24018bf4 <HAL_RCCEx_CRSGetSynchronizationInfo+0x44>)
24018bd2:	689b      	ldr	r3, [r3, #8]
24018bd4:	0c1b      	lsrs	r3, r3, #16
24018bd6:	b29a      	uxth	r2, r3
24018bd8:	687b      	ldr	r3, [r7, #4]
24018bda:	609a      	str	r2, [r3, #8]

  /* Get Frequency error direction */
  pSynchroInfo->FreqErrorDirection = (uint32_t)(READ_BIT(CRS->ISR, CRS_ISR_FEDIR));
24018bdc:	4b05      	ldr	r3, [pc, #20]	; (24018bf4 <HAL_RCCEx_CRSGetSynchronizationInfo+0x44>)
24018bde:	689b      	ldr	r3, [r3, #8]
24018be0:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
24018be4:	687b      	ldr	r3, [r7, #4]
24018be6:	60da      	str	r2, [r3, #12]
}
24018be8:	bf00      	nop
24018bea:	370c      	adds	r7, #12
24018bec:	46bd      	mov	sp, r7
24018bee:	f85d 7b04 	ldr.w	r7, [sp], #4
24018bf2:	4770      	bx	lr
24018bf4:	40008400 	.word	0x40008400

24018bf8 <HAL_RCCEx_CRSWaitSynchronization>:
*            @arg @ref RCC_CRS_SYNCERR
*            @arg @ref RCC_CRS_SYNCMISS
*            @arg @ref RCC_CRS_TRIMOVF
*/
uint32_t HAL_RCCEx_CRSWaitSynchronization(uint32_t Timeout)
{
24018bf8:	b580      	push	{r7, lr}
24018bfa:	b084      	sub	sp, #16
24018bfc:	af00      	add	r7, sp, #0
24018bfe:	6078      	str	r0, [r7, #4]
  uint32_t crsstatus = RCC_CRS_NONE;
24018c00:	2300      	movs	r3, #0
24018c02:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Get time-out */
  tickstart = HAL_GetTick();
24018c04:	f7ea fa4e 	bl	240030a4 <HAL_GetTick>
24018c08:	60b8      	str	r0, [r7, #8]

  /* Wait for CRS flag or time-out detection */
  do
  {
    if (Timeout != HAL_MAX_DELAY)
24018c0a:	687b      	ldr	r3, [r7, #4]
24018c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
24018c10:	d00c      	beq.n	24018c2c <HAL_RCCEx_CRSWaitSynchronization+0x34>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
24018c12:	f7ea fa47 	bl	240030a4 <HAL_GetTick>
24018c16:	4602      	mov	r2, r0
24018c18:	68bb      	ldr	r3, [r7, #8]
24018c1a:	1ad3      	subs	r3, r2, r3
24018c1c:	687a      	ldr	r2, [r7, #4]
24018c1e:	429a      	cmp	r2, r3
24018c20:	d302      	bcc.n	24018c28 <HAL_RCCEx_CRSWaitSynchronization+0x30>
24018c22:	687b      	ldr	r3, [r7, #4]
24018c24:	2b00      	cmp	r3, #0
24018c26:	d101      	bne.n	24018c2c <HAL_RCCEx_CRSWaitSynchronization+0x34>
      {
        crsstatus = RCC_CRS_TIMEOUT;
24018c28:	2301      	movs	r3, #1
24018c2a:	60fb      	str	r3, [r7, #12]
      }
    }
    /* Check CRS SYNCOK flag  */
    if (__HAL_RCC_CRS_GET_FLAG(RCC_CRS_FLAG_SYNCOK))
24018c2c:	4b2a      	ldr	r3, [pc, #168]	; (24018cd8 <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
24018c2e:	689b      	ldr	r3, [r3, #8]
24018c30:	f003 0301 	and.w	r3, r3, #1
24018c34:	2b01      	cmp	r3, #1
24018c36:	d106      	bne.n	24018c46 <HAL_RCCEx_CRSWaitSynchronization+0x4e>
    {
      /* CRS SYNC event OK */
      crsstatus |= RCC_CRS_SYNCOK;
24018c38:	68fb      	ldr	r3, [r7, #12]
24018c3a:	f043 0302 	orr.w	r3, r3, #2
24018c3e:	60fb      	str	r3, [r7, #12]

      /* Clear CRS SYNC event OK bit */
      __HAL_RCC_CRS_CLEAR_FLAG(RCC_CRS_FLAG_SYNCOK);
24018c40:	4b25      	ldr	r3, [pc, #148]	; (24018cd8 <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
24018c42:	2201      	movs	r2, #1
24018c44:	60da      	str	r2, [r3, #12]
    }

    /* Check CRS SYNCWARN flag  */
    if (__HAL_RCC_CRS_GET_FLAG(RCC_CRS_FLAG_SYNCWARN))
24018c46:	4b24      	ldr	r3, [pc, #144]	; (24018cd8 <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
24018c48:	689b      	ldr	r3, [r3, #8]
24018c4a:	f003 0302 	and.w	r3, r3, #2
24018c4e:	2b02      	cmp	r3, #2
24018c50:	d106      	bne.n	24018c60 <HAL_RCCEx_CRSWaitSynchronization+0x68>
    {
      /* CRS SYNC warning */
      crsstatus |= RCC_CRS_SYNCWARN;
24018c52:	68fb      	ldr	r3, [r7, #12]
24018c54:	f043 0304 	orr.w	r3, r3, #4
24018c58:	60fb      	str	r3, [r7, #12]

      /* Clear CRS SYNCWARN bit */
      __HAL_RCC_CRS_CLEAR_FLAG(RCC_CRS_FLAG_SYNCWARN);
24018c5a:	4b1f      	ldr	r3, [pc, #124]	; (24018cd8 <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
24018c5c:	2202      	movs	r2, #2
24018c5e:	60da      	str	r2, [r3, #12]
    }

    /* Check CRS TRIM overflow flag  */
    if (__HAL_RCC_CRS_GET_FLAG(RCC_CRS_FLAG_TRIMOVF))
24018c60:	4b1d      	ldr	r3, [pc, #116]	; (24018cd8 <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
24018c62:	689b      	ldr	r3, [r3, #8]
24018c64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
24018c68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
24018c6c:	d106      	bne.n	24018c7c <HAL_RCCEx_CRSWaitSynchronization+0x84>
    {
      /* CRS SYNC Error */
      crsstatus |= RCC_CRS_TRIMOVF;
24018c6e:	68fb      	ldr	r3, [r7, #12]
24018c70:	f043 0320 	orr.w	r3, r3, #32
24018c74:	60fb      	str	r3, [r7, #12]

      /* Clear CRS Error bit */
      __HAL_RCC_CRS_CLEAR_FLAG(RCC_CRS_FLAG_TRIMOVF);
24018c76:	4b18      	ldr	r3, [pc, #96]	; (24018cd8 <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
24018c78:	2204      	movs	r2, #4
24018c7a:	60da      	str	r2, [r3, #12]
    }

    /* Check CRS Error flag  */
    if (__HAL_RCC_CRS_GET_FLAG(RCC_CRS_FLAG_SYNCERR))
24018c7c:	4b16      	ldr	r3, [pc, #88]	; (24018cd8 <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
24018c7e:	689b      	ldr	r3, [r3, #8]
24018c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
24018c84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
24018c88:	d106      	bne.n	24018c98 <HAL_RCCEx_CRSWaitSynchronization+0xa0>
    {
      /* CRS SYNC Error */
      crsstatus |= RCC_CRS_SYNCERR;
24018c8a:	68fb      	ldr	r3, [r7, #12]
24018c8c:	f043 0308 	orr.w	r3, r3, #8
24018c90:	60fb      	str	r3, [r7, #12]

      /* Clear CRS Error bit */
      __HAL_RCC_CRS_CLEAR_FLAG(RCC_CRS_FLAG_SYNCERR);
24018c92:	4b11      	ldr	r3, [pc, #68]	; (24018cd8 <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
24018c94:	2204      	movs	r2, #4
24018c96:	60da      	str	r2, [r3, #12]
    }

    /* Check CRS SYNC Missed flag  */
    if (__HAL_RCC_CRS_GET_FLAG(RCC_CRS_FLAG_SYNCMISS))
24018c98:	4b0f      	ldr	r3, [pc, #60]	; (24018cd8 <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
24018c9a:	689b      	ldr	r3, [r3, #8]
24018c9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
24018ca0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
24018ca4:	d106      	bne.n	24018cb4 <HAL_RCCEx_CRSWaitSynchronization+0xbc>
    {
      /* CRS SYNC Missed */
      crsstatus |= RCC_CRS_SYNCMISS;
24018ca6:	68fb      	ldr	r3, [r7, #12]
24018ca8:	f043 0310 	orr.w	r3, r3, #16
24018cac:	60fb      	str	r3, [r7, #12]

      /* Clear CRS SYNC Missed bit */
      __HAL_RCC_CRS_CLEAR_FLAG(RCC_CRS_FLAG_SYNCMISS);
24018cae:	4b0a      	ldr	r3, [pc, #40]	; (24018cd8 <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
24018cb0:	2204      	movs	r2, #4
24018cb2:	60da      	str	r2, [r3, #12]
    }

    /* Check CRS Expected SYNC flag  */
    if (__HAL_RCC_CRS_GET_FLAG(RCC_CRS_FLAG_ESYNC))
24018cb4:	4b08      	ldr	r3, [pc, #32]	; (24018cd8 <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
24018cb6:	689b      	ldr	r3, [r3, #8]
24018cb8:	f003 0308 	and.w	r3, r3, #8
24018cbc:	2b08      	cmp	r3, #8
24018cbe:	d102      	bne.n	24018cc6 <HAL_RCCEx_CRSWaitSynchronization+0xce>
    {
      /* frequency error counter reached a zero value */
      __HAL_RCC_CRS_CLEAR_FLAG(RCC_CRS_FLAG_ESYNC);
24018cc0:	4b05      	ldr	r3, [pc, #20]	; (24018cd8 <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
24018cc2:	2208      	movs	r2, #8
24018cc4:	60da      	str	r2, [r3, #12]
    }
  }
  while (RCC_CRS_NONE == crsstatus);
24018cc6:	68fb      	ldr	r3, [r7, #12]
24018cc8:	2b00      	cmp	r3, #0
24018cca:	d09e      	beq.n	24018c0a <HAL_RCCEx_CRSWaitSynchronization+0x12>

  return crsstatus;
24018ccc:	68fb      	ldr	r3, [r7, #12]
}
24018cce:	4618      	mov	r0, r3
24018cd0:	3710      	adds	r7, #16
24018cd2:	46bd      	mov	sp, r7
24018cd4:	bd80      	pop	{r7, pc}
24018cd6:	bf00      	nop
24018cd8:	40008400 	.word	0x40008400

24018cdc <HAL_RCCEx_CRS_IRQHandler>:
/**
  * @brief Handle the Clock Recovery System interrupt request.
  * @retval None
  */
void HAL_RCCEx_CRS_IRQHandler(void)
{
24018cdc:	b580      	push	{r7, lr}
24018cde:	b084      	sub	sp, #16
24018ce0:	af00      	add	r7, sp, #0
  uint32_t crserror = RCC_CRS_NONE;
24018ce2:	2300      	movs	r3, #0
24018ce4:	60fb      	str	r3, [r7, #12]
  /* Get current IT flags and IT sources values */
  uint32_t itflags = READ_REG(CRS->ISR);
24018ce6:	4b33      	ldr	r3, [pc, #204]	; (24018db4 <HAL_RCCEx_CRS_IRQHandler+0xd8>)
24018ce8:	689b      	ldr	r3, [r3, #8]
24018cea:	60bb      	str	r3, [r7, #8]
  uint32_t itsources = READ_REG(CRS->CR);
24018cec:	4b31      	ldr	r3, [pc, #196]	; (24018db4 <HAL_RCCEx_CRS_IRQHandler+0xd8>)
24018cee:	681b      	ldr	r3, [r3, #0]
24018cf0:	607b      	str	r3, [r7, #4]

  /* Check CRS SYNCOK flag  */
  if (((itflags & RCC_CRS_FLAG_SYNCOK) != 0U) && ((itsources & RCC_CRS_IT_SYNCOK) != 0U))
24018cf2:	68bb      	ldr	r3, [r7, #8]
24018cf4:	f003 0301 	and.w	r3, r3, #1
24018cf8:	2b00      	cmp	r3, #0
24018cfa:	d00a      	beq.n	24018d12 <HAL_RCCEx_CRS_IRQHandler+0x36>
24018cfc:	687b      	ldr	r3, [r7, #4]
24018cfe:	f003 0301 	and.w	r3, r3, #1
24018d02:	2b00      	cmp	r3, #0
24018d04:	d005      	beq.n	24018d12 <HAL_RCCEx_CRS_IRQHandler+0x36>
  {
    /* Clear CRS SYNC event OK flag */
    WRITE_REG(CRS->ICR, CRS_ICR_SYNCOKC);
24018d06:	4b2b      	ldr	r3, [pc, #172]	; (24018db4 <HAL_RCCEx_CRS_IRQHandler+0xd8>)
24018d08:	2201      	movs	r2, #1
24018d0a:	60da      	str	r2, [r3, #12]

    /* user callback */
    HAL_RCCEx_CRS_SyncOkCallback();
24018d0c:	f000 f854 	bl	24018db8 <HAL_RCCEx_CRS_SyncOkCallback>
24018d10:	e04b      	b.n	24018daa <HAL_RCCEx_CRS_IRQHandler+0xce>
  }
  /* Check CRS SYNCWARN flag  */
  else if (((itflags & RCC_CRS_FLAG_SYNCWARN) != 0U) && ((itsources & RCC_CRS_IT_SYNCWARN) != 0U))
24018d12:	68bb      	ldr	r3, [r7, #8]
24018d14:	f003 0302 	and.w	r3, r3, #2
24018d18:	2b00      	cmp	r3, #0
24018d1a:	d00a      	beq.n	24018d32 <HAL_RCCEx_CRS_IRQHandler+0x56>
24018d1c:	687b      	ldr	r3, [r7, #4]
24018d1e:	f003 0302 	and.w	r3, r3, #2
24018d22:	2b00      	cmp	r3, #0
24018d24:	d005      	beq.n	24018d32 <HAL_RCCEx_CRS_IRQHandler+0x56>
  {
    /* Clear CRS SYNCWARN flag */
    WRITE_REG(CRS->ICR, CRS_ICR_SYNCWARNC);
24018d26:	4b23      	ldr	r3, [pc, #140]	; (24018db4 <HAL_RCCEx_CRS_IRQHandler+0xd8>)
24018d28:	2202      	movs	r2, #2
24018d2a:	60da      	str	r2, [r3, #12]

    /* user callback */
    HAL_RCCEx_CRS_SyncWarnCallback();
24018d2c:	f000 f84b 	bl	24018dc6 <HAL_RCCEx_CRS_SyncWarnCallback>
24018d30:	e03b      	b.n	24018daa <HAL_RCCEx_CRS_IRQHandler+0xce>
  }
  /* Check CRS Expected SYNC flag  */
  else if (((itflags & RCC_CRS_FLAG_ESYNC) != 0U) && ((itsources & RCC_CRS_IT_ESYNC) != 0U))
24018d32:	68bb      	ldr	r3, [r7, #8]
24018d34:	f003 0308 	and.w	r3, r3, #8
24018d38:	2b00      	cmp	r3, #0
24018d3a:	d00a      	beq.n	24018d52 <HAL_RCCEx_CRS_IRQHandler+0x76>
24018d3c:	687b      	ldr	r3, [r7, #4]
24018d3e:	f003 0308 	and.w	r3, r3, #8
24018d42:	2b00      	cmp	r3, #0
24018d44:	d005      	beq.n	24018d52 <HAL_RCCEx_CRS_IRQHandler+0x76>
  {
    /* frequency error counter reached a zero value */
    WRITE_REG(CRS->ICR, CRS_ICR_ESYNCC);
24018d46:	4b1b      	ldr	r3, [pc, #108]	; (24018db4 <HAL_RCCEx_CRS_IRQHandler+0xd8>)
24018d48:	2208      	movs	r2, #8
24018d4a:	60da      	str	r2, [r3, #12]

    /* user callback */
    HAL_RCCEx_CRS_ExpectedSyncCallback();
24018d4c:	f000 f842 	bl	24018dd4 <HAL_RCCEx_CRS_ExpectedSyncCallback>
24018d50:	e02b      	b.n	24018daa <HAL_RCCEx_CRS_IRQHandler+0xce>
  }
  /* Check CRS Error flags  */
  else
  {
    if (((itflags & RCC_CRS_FLAG_ERR) != 0U) && ((itsources & RCC_CRS_IT_ERR) != 0U))
24018d52:	68bb      	ldr	r3, [r7, #8]
24018d54:	f003 0304 	and.w	r3, r3, #4
24018d58:	2b00      	cmp	r3, #0
24018d5a:	d026      	beq.n	24018daa <HAL_RCCEx_CRS_IRQHandler+0xce>
24018d5c:	687b      	ldr	r3, [r7, #4]
24018d5e:	f003 0304 	and.w	r3, r3, #4
24018d62:	2b00      	cmp	r3, #0
24018d64:	d021      	beq.n	24018daa <HAL_RCCEx_CRS_IRQHandler+0xce>
    {
      if ((itflags & RCC_CRS_FLAG_SYNCERR) != 0U)
24018d66:	68bb      	ldr	r3, [r7, #8]
24018d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
24018d6c:	2b00      	cmp	r3, #0
24018d6e:	d003      	beq.n	24018d78 <HAL_RCCEx_CRS_IRQHandler+0x9c>
      {
        crserror |= RCC_CRS_SYNCERR;
24018d70:	68fb      	ldr	r3, [r7, #12]
24018d72:	f043 0308 	orr.w	r3, r3, #8
24018d76:	60fb      	str	r3, [r7, #12]
      }
      if ((itflags & RCC_CRS_FLAG_SYNCMISS) != 0U)
24018d78:	68bb      	ldr	r3, [r7, #8]
24018d7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
24018d7e:	2b00      	cmp	r3, #0
24018d80:	d003      	beq.n	24018d8a <HAL_RCCEx_CRS_IRQHandler+0xae>
      {
        crserror |= RCC_CRS_SYNCMISS;
24018d82:	68fb      	ldr	r3, [r7, #12]
24018d84:	f043 0310 	orr.w	r3, r3, #16
24018d88:	60fb      	str	r3, [r7, #12]
      }
      if ((itflags & RCC_CRS_FLAG_TRIMOVF) != 0U)
24018d8a:	68bb      	ldr	r3, [r7, #8]
24018d8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
24018d90:	2b00      	cmp	r3, #0
24018d92:	d003      	beq.n	24018d9c <HAL_RCCEx_CRS_IRQHandler+0xc0>
      {
        crserror |= RCC_CRS_TRIMOVF;
24018d94:	68fb      	ldr	r3, [r7, #12]
24018d96:	f043 0320 	orr.w	r3, r3, #32
24018d9a:	60fb      	str	r3, [r7, #12]
      }

      /* Clear CRS Error flags */
      WRITE_REG(CRS->ICR, CRS_ICR_ERRC);
24018d9c:	4b05      	ldr	r3, [pc, #20]	; (24018db4 <HAL_RCCEx_CRS_IRQHandler+0xd8>)
24018d9e:	2204      	movs	r2, #4
24018da0:	60da      	str	r2, [r3, #12]

      /* user error callback */
      HAL_RCCEx_CRS_ErrorCallback(crserror);
24018da2:	68f8      	ldr	r0, [r7, #12]
24018da4:	f000 f81d 	bl	24018de2 <HAL_RCCEx_CRS_ErrorCallback>
    }
  }
}
24018da8:	e7ff      	b.n	24018daa <HAL_RCCEx_CRS_IRQHandler+0xce>
24018daa:	bf00      	nop
24018dac:	3710      	adds	r7, #16
24018dae:	46bd      	mov	sp, r7
24018db0:	bd80      	pop	{r7, pc}
24018db2:	bf00      	nop
24018db4:	40008400 	.word	0x40008400

24018db8 <HAL_RCCEx_CRS_SyncOkCallback>:
/**
  * @brief  RCCEx Clock Recovery System SYNCOK interrupt callback.
  * @retval none
  */
__weak void HAL_RCCEx_CRS_SyncOkCallback(void)
{
24018db8:	b480      	push	{r7}
24018dba:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the @ref HAL_RCCEx_CRS_SyncOkCallback should be implemented in the user file
   */
}
24018dbc:	bf00      	nop
24018dbe:	46bd      	mov	sp, r7
24018dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
24018dc4:	4770      	bx	lr

24018dc6 <HAL_RCCEx_CRS_SyncWarnCallback>:
/**
  * @brief  RCCEx Clock Recovery System SYNCWARN interrupt callback.
  * @retval none
  */
__weak void HAL_RCCEx_CRS_SyncWarnCallback(void)
{
24018dc6:	b480      	push	{r7}
24018dc8:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the @ref HAL_RCCEx_CRS_SyncWarnCallback should be implemented in the user file
   */
}
24018dca:	bf00      	nop
24018dcc:	46bd      	mov	sp, r7
24018dce:	f85d 7b04 	ldr.w	r7, [sp], #4
24018dd2:	4770      	bx	lr

24018dd4 <HAL_RCCEx_CRS_ExpectedSyncCallback>:
/**
  * @brief  RCCEx Clock Recovery System Expected SYNC interrupt callback.
  * @retval none
  */
__weak void HAL_RCCEx_CRS_ExpectedSyncCallback(void)
{
24018dd4:	b480      	push	{r7}
24018dd6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the @ref HAL_RCCEx_CRS_ExpectedSyncCallback should be implemented in the user file
   */
}
24018dd8:	bf00      	nop
24018dda:	46bd      	mov	sp, r7
24018ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
24018de0:	4770      	bx	lr

24018de2 <HAL_RCCEx_CRS_ErrorCallback>:
  *           @arg @ref RCC_CRS_SYNCMISS
  *           @arg @ref RCC_CRS_TRIMOVF
  * @retval none
  */
__weak void HAL_RCCEx_CRS_ErrorCallback(uint32_t Error)
{
24018de2:	b480      	push	{r7}
24018de4:	b083      	sub	sp, #12
24018de6:	af00      	add	r7, sp, #0
24018de8:	6078      	str	r0, [r7, #4]
  UNUSED(Error);

  /* NOTE : This function should not be modified, when the callback is needed,
            the @ref HAL_RCCEx_CRS_ErrorCallback should be implemented in the user file
   */
}
24018dea:	bf00      	nop
24018dec:	370c      	adds	r7, #12
24018dee:	46bd      	mov	sp, r7
24018df0:	f85d 7b04 	ldr.w	r7, [sp], #4
24018df4:	4770      	bx	lr
	...

24018df8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
24018df8:	b580      	push	{r7, lr}
24018dfa:	b084      	sub	sp, #16
24018dfc:	af00      	add	r7, sp, #0
24018dfe:	6078      	str	r0, [r7, #4]
24018e00:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
24018e02:	2300      	movs	r3, #0
24018e04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
24018e06:	4b53      	ldr	r3, [pc, #332]	; (24018f54 <RCCEx_PLL2_Config+0x15c>)
24018e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24018e0a:	f003 0303 	and.w	r3, r3, #3
24018e0e:	2b03      	cmp	r3, #3
24018e10:	d101      	bne.n	24018e16 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
24018e12:	2301      	movs	r3, #1
24018e14:	e099      	b.n	24018f4a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
24018e16:	4b4f      	ldr	r3, [pc, #316]	; (24018f54 <RCCEx_PLL2_Config+0x15c>)
24018e18:	681b      	ldr	r3, [r3, #0]
24018e1a:	4a4e      	ldr	r2, [pc, #312]	; (24018f54 <RCCEx_PLL2_Config+0x15c>)
24018e1c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
24018e20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
24018e22:	f7ea f93f 	bl	240030a4 <HAL_GetTick>
24018e26:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
24018e28:	e008      	b.n	24018e3c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
24018e2a:	f7ea f93b 	bl	240030a4 <HAL_GetTick>
24018e2e:	4602      	mov	r2, r0
24018e30:	68bb      	ldr	r3, [r7, #8]
24018e32:	1ad3      	subs	r3, r2, r3
24018e34:	2b02      	cmp	r3, #2
24018e36:	d901      	bls.n	24018e3c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
24018e38:	2303      	movs	r3, #3
24018e3a:	e086      	b.n	24018f4a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
24018e3c:	4b45      	ldr	r3, [pc, #276]	; (24018f54 <RCCEx_PLL2_Config+0x15c>)
24018e3e:	681b      	ldr	r3, [r3, #0]
24018e40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
24018e44:	2b00      	cmp	r3, #0
24018e46:	d1f0      	bne.n	24018e2a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
24018e48:	4b42      	ldr	r3, [pc, #264]	; (24018f54 <RCCEx_PLL2_Config+0x15c>)
24018e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24018e4c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
24018e50:	687b      	ldr	r3, [r7, #4]
24018e52:	681b      	ldr	r3, [r3, #0]
24018e54:	031b      	lsls	r3, r3, #12
24018e56:	493f      	ldr	r1, [pc, #252]	; (24018f54 <RCCEx_PLL2_Config+0x15c>)
24018e58:	4313      	orrs	r3, r2
24018e5a:	628b      	str	r3, [r1, #40]	; 0x28
24018e5c:	687b      	ldr	r3, [r7, #4]
24018e5e:	685b      	ldr	r3, [r3, #4]
24018e60:	3b01      	subs	r3, #1
24018e62:	f3c3 0208 	ubfx	r2, r3, #0, #9
24018e66:	687b      	ldr	r3, [r7, #4]
24018e68:	689b      	ldr	r3, [r3, #8]
24018e6a:	3b01      	subs	r3, #1
24018e6c:	025b      	lsls	r3, r3, #9
24018e6e:	b29b      	uxth	r3, r3
24018e70:	431a      	orrs	r2, r3
24018e72:	687b      	ldr	r3, [r7, #4]
24018e74:	68db      	ldr	r3, [r3, #12]
24018e76:	3b01      	subs	r3, #1
24018e78:	041b      	lsls	r3, r3, #16
24018e7a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
24018e7e:	431a      	orrs	r2, r3
24018e80:	687b      	ldr	r3, [r7, #4]
24018e82:	691b      	ldr	r3, [r3, #16]
24018e84:	3b01      	subs	r3, #1
24018e86:	061b      	lsls	r3, r3, #24
24018e88:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
24018e8c:	4931      	ldr	r1, [pc, #196]	; (24018f54 <RCCEx_PLL2_Config+0x15c>)
24018e8e:	4313      	orrs	r3, r2
24018e90:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
24018e92:	4b30      	ldr	r3, [pc, #192]	; (24018f54 <RCCEx_PLL2_Config+0x15c>)
24018e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24018e96:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
24018e9a:	687b      	ldr	r3, [r7, #4]
24018e9c:	695b      	ldr	r3, [r3, #20]
24018e9e:	492d      	ldr	r1, [pc, #180]	; (24018f54 <RCCEx_PLL2_Config+0x15c>)
24018ea0:	4313      	orrs	r3, r2
24018ea2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
24018ea4:	4b2b      	ldr	r3, [pc, #172]	; (24018f54 <RCCEx_PLL2_Config+0x15c>)
24018ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24018ea8:	f023 0220 	bic.w	r2, r3, #32
24018eac:	687b      	ldr	r3, [r7, #4]
24018eae:	699b      	ldr	r3, [r3, #24]
24018eb0:	4928      	ldr	r1, [pc, #160]	; (24018f54 <RCCEx_PLL2_Config+0x15c>)
24018eb2:	4313      	orrs	r3, r2
24018eb4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
24018eb6:	4b27      	ldr	r3, [pc, #156]	; (24018f54 <RCCEx_PLL2_Config+0x15c>)
24018eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24018eba:	4a26      	ldr	r2, [pc, #152]	; (24018f54 <RCCEx_PLL2_Config+0x15c>)
24018ebc:	f023 0310 	bic.w	r3, r3, #16
24018ec0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
24018ec2:	4b24      	ldr	r3, [pc, #144]	; (24018f54 <RCCEx_PLL2_Config+0x15c>)
24018ec4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
24018ec6:	4b24      	ldr	r3, [pc, #144]	; (24018f58 <RCCEx_PLL2_Config+0x160>)
24018ec8:	4013      	ands	r3, r2
24018eca:	687a      	ldr	r2, [r7, #4]
24018ecc:	69d2      	ldr	r2, [r2, #28]
24018ece:	00d2      	lsls	r2, r2, #3
24018ed0:	4920      	ldr	r1, [pc, #128]	; (24018f54 <RCCEx_PLL2_Config+0x15c>)
24018ed2:	4313      	orrs	r3, r2
24018ed4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
24018ed6:	4b1f      	ldr	r3, [pc, #124]	; (24018f54 <RCCEx_PLL2_Config+0x15c>)
24018ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24018eda:	4a1e      	ldr	r2, [pc, #120]	; (24018f54 <RCCEx_PLL2_Config+0x15c>)
24018edc:	f043 0310 	orr.w	r3, r3, #16
24018ee0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
24018ee2:	683b      	ldr	r3, [r7, #0]
24018ee4:	2b00      	cmp	r3, #0
24018ee6:	d106      	bne.n	24018ef6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
24018ee8:	4b1a      	ldr	r3, [pc, #104]	; (24018f54 <RCCEx_PLL2_Config+0x15c>)
24018eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24018eec:	4a19      	ldr	r2, [pc, #100]	; (24018f54 <RCCEx_PLL2_Config+0x15c>)
24018eee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
24018ef2:	62d3      	str	r3, [r2, #44]	; 0x2c
24018ef4:	e00f      	b.n	24018f16 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
24018ef6:	683b      	ldr	r3, [r7, #0]
24018ef8:	2b01      	cmp	r3, #1
24018efa:	d106      	bne.n	24018f0a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
24018efc:	4b15      	ldr	r3, [pc, #84]	; (24018f54 <RCCEx_PLL2_Config+0x15c>)
24018efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24018f00:	4a14      	ldr	r2, [pc, #80]	; (24018f54 <RCCEx_PLL2_Config+0x15c>)
24018f02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
24018f06:	62d3      	str	r3, [r2, #44]	; 0x2c
24018f08:	e005      	b.n	24018f16 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
24018f0a:	4b12      	ldr	r3, [pc, #72]	; (24018f54 <RCCEx_PLL2_Config+0x15c>)
24018f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24018f0e:	4a11      	ldr	r2, [pc, #68]	; (24018f54 <RCCEx_PLL2_Config+0x15c>)
24018f10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
24018f14:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
24018f16:	4b0f      	ldr	r3, [pc, #60]	; (24018f54 <RCCEx_PLL2_Config+0x15c>)
24018f18:	681b      	ldr	r3, [r3, #0]
24018f1a:	4a0e      	ldr	r2, [pc, #56]	; (24018f54 <RCCEx_PLL2_Config+0x15c>)
24018f1c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
24018f20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
24018f22:	f7ea f8bf 	bl	240030a4 <HAL_GetTick>
24018f26:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
24018f28:	e008      	b.n	24018f3c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
24018f2a:	f7ea f8bb 	bl	240030a4 <HAL_GetTick>
24018f2e:	4602      	mov	r2, r0
24018f30:	68bb      	ldr	r3, [r7, #8]
24018f32:	1ad3      	subs	r3, r2, r3
24018f34:	2b02      	cmp	r3, #2
24018f36:	d901      	bls.n	24018f3c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
24018f38:	2303      	movs	r3, #3
24018f3a:	e006      	b.n	24018f4a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
24018f3c:	4b05      	ldr	r3, [pc, #20]	; (24018f54 <RCCEx_PLL2_Config+0x15c>)
24018f3e:	681b      	ldr	r3, [r3, #0]
24018f40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
24018f44:	2b00      	cmp	r3, #0
24018f46:	d0f0      	beq.n	24018f2a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
24018f48:	7bfb      	ldrb	r3, [r7, #15]
}
24018f4a:	4618      	mov	r0, r3
24018f4c:	3710      	adds	r7, #16
24018f4e:	46bd      	mov	sp, r7
24018f50:	bd80      	pop	{r7, pc}
24018f52:	bf00      	nop
24018f54:	58024400 	.word	0x58024400
24018f58:	ffff0007 	.word	0xffff0007

24018f5c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
24018f5c:	b580      	push	{r7, lr}
24018f5e:	b084      	sub	sp, #16
24018f60:	af00      	add	r7, sp, #0
24018f62:	6078      	str	r0, [r7, #4]
24018f64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
24018f66:	2300      	movs	r3, #0
24018f68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
24018f6a:	4b53      	ldr	r3, [pc, #332]	; (240190b8 <RCCEx_PLL3_Config+0x15c>)
24018f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24018f6e:	f003 0303 	and.w	r3, r3, #3
24018f72:	2b03      	cmp	r3, #3
24018f74:	d101      	bne.n	24018f7a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
24018f76:	2301      	movs	r3, #1
24018f78:	e099      	b.n	240190ae <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
24018f7a:	4b4f      	ldr	r3, [pc, #316]	; (240190b8 <RCCEx_PLL3_Config+0x15c>)
24018f7c:	681b      	ldr	r3, [r3, #0]
24018f7e:	4a4e      	ldr	r2, [pc, #312]	; (240190b8 <RCCEx_PLL3_Config+0x15c>)
24018f80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
24018f84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
24018f86:	f7ea f88d 	bl	240030a4 <HAL_GetTick>
24018f8a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
24018f8c:	e008      	b.n	24018fa0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
24018f8e:	f7ea f889 	bl	240030a4 <HAL_GetTick>
24018f92:	4602      	mov	r2, r0
24018f94:	68bb      	ldr	r3, [r7, #8]
24018f96:	1ad3      	subs	r3, r2, r3
24018f98:	2b02      	cmp	r3, #2
24018f9a:	d901      	bls.n	24018fa0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
24018f9c:	2303      	movs	r3, #3
24018f9e:	e086      	b.n	240190ae <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
24018fa0:	4b45      	ldr	r3, [pc, #276]	; (240190b8 <RCCEx_PLL3_Config+0x15c>)
24018fa2:	681b      	ldr	r3, [r3, #0]
24018fa4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
24018fa8:	2b00      	cmp	r3, #0
24018faa:	d1f0      	bne.n	24018f8e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
24018fac:	4b42      	ldr	r3, [pc, #264]	; (240190b8 <RCCEx_PLL3_Config+0x15c>)
24018fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24018fb0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
24018fb4:	687b      	ldr	r3, [r7, #4]
24018fb6:	681b      	ldr	r3, [r3, #0]
24018fb8:	051b      	lsls	r3, r3, #20
24018fba:	493f      	ldr	r1, [pc, #252]	; (240190b8 <RCCEx_PLL3_Config+0x15c>)
24018fbc:	4313      	orrs	r3, r2
24018fbe:	628b      	str	r3, [r1, #40]	; 0x28
24018fc0:	687b      	ldr	r3, [r7, #4]
24018fc2:	685b      	ldr	r3, [r3, #4]
24018fc4:	3b01      	subs	r3, #1
24018fc6:	f3c3 0208 	ubfx	r2, r3, #0, #9
24018fca:	687b      	ldr	r3, [r7, #4]
24018fcc:	689b      	ldr	r3, [r3, #8]
24018fce:	3b01      	subs	r3, #1
24018fd0:	025b      	lsls	r3, r3, #9
24018fd2:	b29b      	uxth	r3, r3
24018fd4:	431a      	orrs	r2, r3
24018fd6:	687b      	ldr	r3, [r7, #4]
24018fd8:	68db      	ldr	r3, [r3, #12]
24018fda:	3b01      	subs	r3, #1
24018fdc:	041b      	lsls	r3, r3, #16
24018fde:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
24018fe2:	431a      	orrs	r2, r3
24018fe4:	687b      	ldr	r3, [r7, #4]
24018fe6:	691b      	ldr	r3, [r3, #16]
24018fe8:	3b01      	subs	r3, #1
24018fea:	061b      	lsls	r3, r3, #24
24018fec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
24018ff0:	4931      	ldr	r1, [pc, #196]	; (240190b8 <RCCEx_PLL3_Config+0x15c>)
24018ff2:	4313      	orrs	r3, r2
24018ff4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
24018ff6:	4b30      	ldr	r3, [pc, #192]	; (240190b8 <RCCEx_PLL3_Config+0x15c>)
24018ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24018ffa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
24018ffe:	687b      	ldr	r3, [r7, #4]
24019000:	695b      	ldr	r3, [r3, #20]
24019002:	492d      	ldr	r1, [pc, #180]	; (240190b8 <RCCEx_PLL3_Config+0x15c>)
24019004:	4313      	orrs	r3, r2
24019006:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
24019008:	4b2b      	ldr	r3, [pc, #172]	; (240190b8 <RCCEx_PLL3_Config+0x15c>)
2401900a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2401900c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
24019010:	687b      	ldr	r3, [r7, #4]
24019012:	699b      	ldr	r3, [r3, #24]
24019014:	4928      	ldr	r1, [pc, #160]	; (240190b8 <RCCEx_PLL3_Config+0x15c>)
24019016:	4313      	orrs	r3, r2
24019018:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
2401901a:	4b27      	ldr	r3, [pc, #156]	; (240190b8 <RCCEx_PLL3_Config+0x15c>)
2401901c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2401901e:	4a26      	ldr	r2, [pc, #152]	; (240190b8 <RCCEx_PLL3_Config+0x15c>)
24019020:	f423 7380 	bic.w	r3, r3, #256	; 0x100
24019024:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
24019026:	4b24      	ldr	r3, [pc, #144]	; (240190b8 <RCCEx_PLL3_Config+0x15c>)
24019028:	6c5a      	ldr	r2, [r3, #68]	; 0x44
2401902a:	4b24      	ldr	r3, [pc, #144]	; (240190bc <RCCEx_PLL3_Config+0x160>)
2401902c:	4013      	ands	r3, r2
2401902e:	687a      	ldr	r2, [r7, #4]
24019030:	69d2      	ldr	r2, [r2, #28]
24019032:	00d2      	lsls	r2, r2, #3
24019034:	4920      	ldr	r1, [pc, #128]	; (240190b8 <RCCEx_PLL3_Config+0x15c>)
24019036:	4313      	orrs	r3, r2
24019038:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
2401903a:	4b1f      	ldr	r3, [pc, #124]	; (240190b8 <RCCEx_PLL3_Config+0x15c>)
2401903c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2401903e:	4a1e      	ldr	r2, [pc, #120]	; (240190b8 <RCCEx_PLL3_Config+0x15c>)
24019040:	f443 7380 	orr.w	r3, r3, #256	; 0x100
24019044:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
24019046:	683b      	ldr	r3, [r7, #0]
24019048:	2b00      	cmp	r3, #0
2401904a:	d106      	bne.n	2401905a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
2401904c:	4b1a      	ldr	r3, [pc, #104]	; (240190b8 <RCCEx_PLL3_Config+0x15c>)
2401904e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24019050:	4a19      	ldr	r2, [pc, #100]	; (240190b8 <RCCEx_PLL3_Config+0x15c>)
24019052:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
24019056:	62d3      	str	r3, [r2, #44]	; 0x2c
24019058:	e00f      	b.n	2401907a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
2401905a:	683b      	ldr	r3, [r7, #0]
2401905c:	2b01      	cmp	r3, #1
2401905e:	d106      	bne.n	2401906e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
24019060:	4b15      	ldr	r3, [pc, #84]	; (240190b8 <RCCEx_PLL3_Config+0x15c>)
24019062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24019064:	4a14      	ldr	r2, [pc, #80]	; (240190b8 <RCCEx_PLL3_Config+0x15c>)
24019066:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
2401906a:	62d3      	str	r3, [r2, #44]	; 0x2c
2401906c:	e005      	b.n	2401907a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
2401906e:	4b12      	ldr	r3, [pc, #72]	; (240190b8 <RCCEx_PLL3_Config+0x15c>)
24019070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24019072:	4a11      	ldr	r2, [pc, #68]	; (240190b8 <RCCEx_PLL3_Config+0x15c>)
24019074:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
24019078:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
2401907a:	4b0f      	ldr	r3, [pc, #60]	; (240190b8 <RCCEx_PLL3_Config+0x15c>)
2401907c:	681b      	ldr	r3, [r3, #0]
2401907e:	4a0e      	ldr	r2, [pc, #56]	; (240190b8 <RCCEx_PLL3_Config+0x15c>)
24019080:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
24019084:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
24019086:	f7ea f80d 	bl	240030a4 <HAL_GetTick>
2401908a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
2401908c:	e008      	b.n	240190a0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
2401908e:	f7ea f809 	bl	240030a4 <HAL_GetTick>
24019092:	4602      	mov	r2, r0
24019094:	68bb      	ldr	r3, [r7, #8]
24019096:	1ad3      	subs	r3, r2, r3
24019098:	2b02      	cmp	r3, #2
2401909a:	d901      	bls.n	240190a0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
2401909c:	2303      	movs	r3, #3
2401909e:	e006      	b.n	240190ae <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
240190a0:	4b05      	ldr	r3, [pc, #20]	; (240190b8 <RCCEx_PLL3_Config+0x15c>)
240190a2:	681b      	ldr	r3, [r3, #0]
240190a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
240190a8:	2b00      	cmp	r3, #0
240190aa:	d0f0      	beq.n	2401908e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
240190ac:	7bfb      	ldrb	r3, [r7, #15]
}
240190ae:	4618      	mov	r0, r3
240190b0:	3710      	adds	r7, #16
240190b2:	46bd      	mov	sp, r7
240190b4:	bd80      	pop	{r7, pc}
240190b6:	bf00      	nop
240190b8:	58024400 	.word	0x58024400
240190bc:	ffff0007 	.word	0xffff0007

240190c0 <HAL_RCCEx_LSECSS_IRQHandler>:
/**
  * @brief Handle the RCC LSE Clock Security System interrupt request.
  * @retval None
  */
void HAL_RCCEx_LSECSS_IRQHandler(void)
{
240190c0:	b580      	push	{r7, lr}
240190c2:	af00      	add	r7, sp, #0
  /* Check RCC LSE CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_LSECSS))
240190c4:	4b07      	ldr	r3, [pc, #28]	; (240190e4 <HAL_RCCEx_LSECSS_IRQHandler+0x24>)
240190c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
240190c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
240190cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
240190d0:	d105      	bne.n	240190de <HAL_RCCEx_LSECSS_IRQHandler+0x1e>
  {

    /* Clear RCC LSE CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_LSECSS);
240190d2:	4b04      	ldr	r3, [pc, #16]	; (240190e4 <HAL_RCCEx_LSECSS_IRQHandler+0x24>)
240190d4:	f44f 7200 	mov.w	r2, #512	; 0x200
240190d8:	669a      	str	r2, [r3, #104]	; 0x68

    /* RCC LSE Clock Security System interrupt user callback */
    HAL_RCCEx_LSECSS_Callback();
240190da:	f000 f805 	bl	240190e8 <HAL_RCCEx_LSECSS_Callback>

  }
}
240190de:	bf00      	nop
240190e0:	bd80      	pop	{r7, pc}
240190e2:	bf00      	nop
240190e4:	58024400 	.word	0x58024400

240190e8 <HAL_RCCEx_LSECSS_Callback>:
/**
  * @brief  RCCEx LSE Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCCEx_LSECSS_Callback(void)
{
240190e8:	b480      	push	{r7}
240190ea:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the @ref HAL_RCCEx_LSECSS_Callback should be implemented in the user file
  */
}
240190ec:	bf00      	nop
240190ee:	46bd      	mov	sp, r7
240190f0:	f85d 7b04 	ldr.w	r7, [sp], #4
240190f4:	4770      	bx	lr
	...

240190f8 <exit>:
240190f8:	b508      	push	{r3, lr}
240190fa:	4b06      	ldr	r3, [pc, #24]	; (24019114 <exit+0x1c>)
240190fc:	4604      	mov	r4, r0
240190fe:	b113      	cbz	r3, 24019106 <exit+0xe>
24019100:	2100      	movs	r1, #0
24019102:	f3af 8000 	nop.w
24019106:	4b04      	ldr	r3, [pc, #16]	; (24019118 <exit+0x20>)
24019108:	681b      	ldr	r3, [r3, #0]
2401910a:	b103      	cbz	r3, 2401910e <exit+0x16>
2401910c:	4798      	blx	r3
2401910e:	4620      	mov	r0, r4
24019110:	f7e9 fb89 	bl	24002826 <_exit>
24019114:	00000000 	.word	0x00000000
24019118:	240016e8 	.word	0x240016e8

2401911c <std>:
2401911c:	2300      	movs	r3, #0
2401911e:	b510      	push	{r4, lr}
24019120:	4604      	mov	r4, r0
24019122:	e9c0 3300 	strd	r3, r3, [r0]
24019126:	e9c0 3304 	strd	r3, r3, [r0, #16]
2401912a:	6083      	str	r3, [r0, #8]
2401912c:	8181      	strh	r1, [r0, #12]
2401912e:	6643      	str	r3, [r0, #100]	; 0x64
24019130:	81c2      	strh	r2, [r0, #14]
24019132:	6183      	str	r3, [r0, #24]
24019134:	4619      	mov	r1, r3
24019136:	2208      	movs	r2, #8
24019138:	305c      	adds	r0, #92	; 0x5c
2401913a:	f000 f98e 	bl	2401945a <memset>
2401913e:	4b0d      	ldr	r3, [pc, #52]	; (24019174 <std+0x58>)
24019140:	6263      	str	r3, [r4, #36]	; 0x24
24019142:	4b0d      	ldr	r3, [pc, #52]	; (24019178 <std+0x5c>)
24019144:	62a3      	str	r3, [r4, #40]	; 0x28
24019146:	4b0d      	ldr	r3, [pc, #52]	; (2401917c <std+0x60>)
24019148:	62e3      	str	r3, [r4, #44]	; 0x2c
2401914a:	4b0d      	ldr	r3, [pc, #52]	; (24019180 <std+0x64>)
2401914c:	6323      	str	r3, [r4, #48]	; 0x30
2401914e:	4b0d      	ldr	r3, [pc, #52]	; (24019184 <std+0x68>)
24019150:	6224      	str	r4, [r4, #32]
24019152:	429c      	cmp	r4, r3
24019154:	d006      	beq.n	24019164 <std+0x48>
24019156:	f103 0268 	add.w	r2, r3, #104	; 0x68
2401915a:	4294      	cmp	r4, r2
2401915c:	d002      	beq.n	24019164 <std+0x48>
2401915e:	33d0      	adds	r3, #208	; 0xd0
24019160:	429c      	cmp	r4, r3
24019162:	d105      	bne.n	24019170 <std+0x54>
24019164:	f104 0058 	add.w	r0, r4, #88	; 0x58
24019168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
2401916c:	f000 ba45 	b.w	240195fa <__retarget_lock_init_recursive>
24019170:	bd10      	pop	{r4, pc}
24019172:	bf00      	nop
24019174:	240193b1 	.word	0x240193b1
24019178:	240193d7 	.word	0x240193d7
2401917c:	2401940f 	.word	0x2401940f
24019180:	24019433 	.word	0x24019433
24019184:	240015b0 	.word	0x240015b0

24019188 <stdio_exit_handler>:
24019188:	4a02      	ldr	r2, [pc, #8]	; (24019194 <stdio_exit_handler+0xc>)
2401918a:	4903      	ldr	r1, [pc, #12]	; (24019198 <stdio_exit_handler+0x10>)
2401918c:	4803      	ldr	r0, [pc, #12]	; (2401919c <stdio_exit_handler+0x14>)
2401918e:	f000 b8f1 	b.w	24019374 <_fwalk_sglue>
24019192:	bf00      	nop
24019194:	240004c0 	.word	0x240004c0
24019198:	2401990d 	.word	0x2401990d
2401919c:	240004cc 	.word	0x240004cc

240191a0 <cleanup_stdio>:
240191a0:	6841      	ldr	r1, [r0, #4]
240191a2:	4b0c      	ldr	r3, [pc, #48]	; (240191d4 <cleanup_stdio+0x34>)
240191a4:	4299      	cmp	r1, r3
240191a6:	b510      	push	{r4, lr}
240191a8:	4604      	mov	r4, r0
240191aa:	d001      	beq.n	240191b0 <cleanup_stdio+0x10>
240191ac:	f000 fbae 	bl	2401990c <_fflush_r>
240191b0:	68a1      	ldr	r1, [r4, #8]
240191b2:	4b09      	ldr	r3, [pc, #36]	; (240191d8 <cleanup_stdio+0x38>)
240191b4:	4299      	cmp	r1, r3
240191b6:	d002      	beq.n	240191be <cleanup_stdio+0x1e>
240191b8:	4620      	mov	r0, r4
240191ba:	f000 fba7 	bl	2401990c <_fflush_r>
240191be:	68e1      	ldr	r1, [r4, #12]
240191c0:	4b06      	ldr	r3, [pc, #24]	; (240191dc <cleanup_stdio+0x3c>)
240191c2:	4299      	cmp	r1, r3
240191c4:	d004      	beq.n	240191d0 <cleanup_stdio+0x30>
240191c6:	4620      	mov	r0, r4
240191c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
240191cc:	f000 bb9e 	b.w	2401990c <_fflush_r>
240191d0:	bd10      	pop	{r4, pc}
240191d2:	bf00      	nop
240191d4:	240015b0 	.word	0x240015b0
240191d8:	24001618 	.word	0x24001618
240191dc:	24001680 	.word	0x24001680

240191e0 <__fp_lock>:
240191e0:	b508      	push	{r3, lr}
240191e2:	6e4b      	ldr	r3, [r1, #100]	; 0x64
240191e4:	07da      	lsls	r2, r3, #31
240191e6:	d405      	bmi.n	240191f4 <__fp_lock+0x14>
240191e8:	898b      	ldrh	r3, [r1, #12]
240191ea:	059b      	lsls	r3, r3, #22
240191ec:	d402      	bmi.n	240191f4 <__fp_lock+0x14>
240191ee:	6d88      	ldr	r0, [r1, #88]	; 0x58
240191f0:	f000 fa07 	bl	24019602 <__retarget_lock_acquire_recursive>
240191f4:	2000      	movs	r0, #0
240191f6:	bd08      	pop	{r3, pc}

240191f8 <__fp_unlock>:
240191f8:	b508      	push	{r3, lr}
240191fa:	6e4b      	ldr	r3, [r1, #100]	; 0x64
240191fc:	07da      	lsls	r2, r3, #31
240191fe:	d405      	bmi.n	2401920c <__fp_unlock+0x14>
24019200:	898b      	ldrh	r3, [r1, #12]
24019202:	059b      	lsls	r3, r3, #22
24019204:	d402      	bmi.n	2401920c <__fp_unlock+0x14>
24019206:	6d88      	ldr	r0, [r1, #88]	; 0x58
24019208:	f000 fa01 	bl	2401960e <__retarget_lock_release_recursive>
2401920c:	2000      	movs	r0, #0
2401920e:	bd08      	pop	{r3, pc}

24019210 <global_stdio_init.part.0>:
24019210:	b510      	push	{r4, lr}
24019212:	4b0b      	ldr	r3, [pc, #44]	; (24019240 <global_stdio_init.part.0+0x30>)
24019214:	4c0b      	ldr	r4, [pc, #44]	; (24019244 <global_stdio_init.part.0+0x34>)
24019216:	4a0c      	ldr	r2, [pc, #48]	; (24019248 <global_stdio_init.part.0+0x38>)
24019218:	601a      	str	r2, [r3, #0]
2401921a:	4620      	mov	r0, r4
2401921c:	2200      	movs	r2, #0
2401921e:	2104      	movs	r1, #4
24019220:	f7ff ff7c 	bl	2401911c <std>
24019224:	f104 0068 	add.w	r0, r4, #104	; 0x68
24019228:	2201      	movs	r2, #1
2401922a:	2109      	movs	r1, #9
2401922c:	f7ff ff76 	bl	2401911c <std>
24019230:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
24019234:	2202      	movs	r2, #2
24019236:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
2401923a:	2112      	movs	r1, #18
2401923c:	f7ff bf6e 	b.w	2401911c <std>
24019240:	240016e8 	.word	0x240016e8
24019244:	240015b0 	.word	0x240015b0
24019248:	24019189 	.word	0x24019189

2401924c <__sfp_lock_acquire>:
2401924c:	4801      	ldr	r0, [pc, #4]	; (24019254 <__sfp_lock_acquire+0x8>)
2401924e:	f000 b9d8 	b.w	24019602 <__retarget_lock_acquire_recursive>
24019252:	bf00      	nop
24019254:	240016f6 	.word	0x240016f6

24019258 <__sfp_lock_release>:
24019258:	4801      	ldr	r0, [pc, #4]	; (24019260 <__sfp_lock_release+0x8>)
2401925a:	f000 b9d8 	b.w	2401960e <__retarget_lock_release_recursive>
2401925e:	bf00      	nop
24019260:	240016f6 	.word	0x240016f6

24019264 <__sfp>:
24019264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
24019268:	4607      	mov	r7, r0
2401926a:	f7ff ffef 	bl	2401924c <__sfp_lock_acquire>
2401926e:	4b24      	ldr	r3, [pc, #144]	; (24019300 <__sfp+0x9c>)
24019270:	681b      	ldr	r3, [r3, #0]
24019272:	b90b      	cbnz	r3, 24019278 <__sfp+0x14>
24019274:	f7ff ffcc 	bl	24019210 <global_stdio_init.part.0>
24019278:	4e22      	ldr	r6, [pc, #136]	; (24019304 <__sfp+0xa0>)
2401927a:	f04f 0804 	mov.w	r8, #4
2401927e:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
24019282:	3b01      	subs	r3, #1
24019284:	d50f      	bpl.n	240192a6 <__sfp+0x42>
24019286:	6835      	ldr	r5, [r6, #0]
24019288:	2d00      	cmp	r5, #0
2401928a:	d137      	bne.n	240192fc <__sfp+0x98>
2401928c:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
24019290:	4638      	mov	r0, r7
24019292:	f000 fa29 	bl	240196e8 <_malloc_r>
24019296:	4604      	mov	r4, r0
24019298:	bb30      	cbnz	r0, 240192e8 <__sfp+0x84>
2401929a:	6030      	str	r0, [r6, #0]
2401929c:	f7ff ffdc 	bl	24019258 <__sfp_lock_release>
240192a0:	230c      	movs	r3, #12
240192a2:	603b      	str	r3, [r7, #0]
240192a4:	e01b      	b.n	240192de <__sfp+0x7a>
240192a6:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
240192aa:	b9dd      	cbnz	r5, 240192e4 <__sfp+0x80>
240192ac:	4b16      	ldr	r3, [pc, #88]	; (24019308 <__sfp+0xa4>)
240192ae:	60e3      	str	r3, [r4, #12]
240192b0:	f104 0058 	add.w	r0, r4, #88	; 0x58
240192b4:	6665      	str	r5, [r4, #100]	; 0x64
240192b6:	f000 f9a0 	bl	240195fa <__retarget_lock_init_recursive>
240192ba:	f7ff ffcd 	bl	24019258 <__sfp_lock_release>
240192be:	e9c4 5501 	strd	r5, r5, [r4, #4]
240192c2:	e9c4 5504 	strd	r5, r5, [r4, #16]
240192c6:	6025      	str	r5, [r4, #0]
240192c8:	61a5      	str	r5, [r4, #24]
240192ca:	2208      	movs	r2, #8
240192cc:	4629      	mov	r1, r5
240192ce:	f104 005c 	add.w	r0, r4, #92	; 0x5c
240192d2:	f000 f8c2 	bl	2401945a <memset>
240192d6:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
240192da:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
240192de:	4620      	mov	r0, r4
240192e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
240192e4:	3468      	adds	r4, #104	; 0x68
240192e6:	e7cc      	b.n	24019282 <__sfp+0x1e>
240192e8:	e9c0 5800 	strd	r5, r8, [r0]
240192ec:	300c      	adds	r0, #12
240192ee:	60a0      	str	r0, [r4, #8]
240192f0:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
240192f4:	4629      	mov	r1, r5
240192f6:	f000 f8b0 	bl	2401945a <memset>
240192fa:	6034      	str	r4, [r6, #0]
240192fc:	6836      	ldr	r6, [r6, #0]
240192fe:	e7be      	b.n	2401927e <__sfp+0x1a>
24019300:	240016e8 	.word	0x240016e8
24019304:	240004c0 	.word	0x240004c0
24019308:	ffff0001 	.word	0xffff0001

2401930c <__sinit>:
2401930c:	b510      	push	{r4, lr}
2401930e:	4604      	mov	r4, r0
24019310:	f7ff ff9c 	bl	2401924c <__sfp_lock_acquire>
24019314:	6a23      	ldr	r3, [r4, #32]
24019316:	b11b      	cbz	r3, 24019320 <__sinit+0x14>
24019318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
2401931c:	f7ff bf9c 	b.w	24019258 <__sfp_lock_release>
24019320:	4b04      	ldr	r3, [pc, #16]	; (24019334 <__sinit+0x28>)
24019322:	6223      	str	r3, [r4, #32]
24019324:	4b04      	ldr	r3, [pc, #16]	; (24019338 <__sinit+0x2c>)
24019326:	681b      	ldr	r3, [r3, #0]
24019328:	2b00      	cmp	r3, #0
2401932a:	d1f5      	bne.n	24019318 <__sinit+0xc>
2401932c:	f7ff ff70 	bl	24019210 <global_stdio_init.part.0>
24019330:	e7f2      	b.n	24019318 <__sinit+0xc>
24019332:	bf00      	nop
24019334:	240191a1 	.word	0x240191a1
24019338:	240016e8 	.word	0x240016e8

2401933c <__fp_lock_all>:
2401933c:	b508      	push	{r3, lr}
2401933e:	f7ff ff85 	bl	2401924c <__sfp_lock_acquire>
24019342:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
24019346:	4a02      	ldr	r2, [pc, #8]	; (24019350 <__fp_lock_all+0x14>)
24019348:	4902      	ldr	r1, [pc, #8]	; (24019354 <__fp_lock_all+0x18>)
2401934a:	2000      	movs	r0, #0
2401934c:	f000 b812 	b.w	24019374 <_fwalk_sglue>
24019350:	240004c0 	.word	0x240004c0
24019354:	240191e1 	.word	0x240191e1

24019358 <__fp_unlock_all>:
24019358:	b508      	push	{r3, lr}
2401935a:	4a04      	ldr	r2, [pc, #16]	; (2401936c <__fp_unlock_all+0x14>)
2401935c:	4904      	ldr	r1, [pc, #16]	; (24019370 <__fp_unlock_all+0x18>)
2401935e:	2000      	movs	r0, #0
24019360:	f000 f808 	bl	24019374 <_fwalk_sglue>
24019364:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
24019368:	f7ff bf76 	b.w	24019258 <__sfp_lock_release>
2401936c:	240004c0 	.word	0x240004c0
24019370:	240191f9 	.word	0x240191f9

24019374 <_fwalk_sglue>:
24019374:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
24019378:	4607      	mov	r7, r0
2401937a:	4688      	mov	r8, r1
2401937c:	4614      	mov	r4, r2
2401937e:	2600      	movs	r6, #0
24019380:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
24019384:	f1b9 0901 	subs.w	r9, r9, #1
24019388:	d505      	bpl.n	24019396 <_fwalk_sglue+0x22>
2401938a:	6824      	ldr	r4, [r4, #0]
2401938c:	2c00      	cmp	r4, #0
2401938e:	d1f7      	bne.n	24019380 <_fwalk_sglue+0xc>
24019390:	4630      	mov	r0, r6
24019392:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
24019396:	89ab      	ldrh	r3, [r5, #12]
24019398:	2b01      	cmp	r3, #1
2401939a:	d907      	bls.n	240193ac <_fwalk_sglue+0x38>
2401939c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
240193a0:	3301      	adds	r3, #1
240193a2:	d003      	beq.n	240193ac <_fwalk_sglue+0x38>
240193a4:	4629      	mov	r1, r5
240193a6:	4638      	mov	r0, r7
240193a8:	47c0      	blx	r8
240193aa:	4306      	orrs	r6, r0
240193ac:	3568      	adds	r5, #104	; 0x68
240193ae:	e7e9      	b.n	24019384 <_fwalk_sglue+0x10>

240193b0 <__sread>:
240193b0:	b510      	push	{r4, lr}
240193b2:	460c      	mov	r4, r1
240193b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
240193b8:	f000 f8d0 	bl	2401955c <_read_r>
240193bc:	2800      	cmp	r0, #0
240193be:	bfab      	itete	ge
240193c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
240193c2:	89a3      	ldrhlt	r3, [r4, #12]
240193c4:	181b      	addge	r3, r3, r0
240193c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
240193ca:	bfac      	ite	ge
240193cc:	6563      	strge	r3, [r4, #84]	; 0x54
240193ce:	81a3      	strhlt	r3, [r4, #12]
240193d0:	bd10      	pop	{r4, pc}

240193d2 <__seofread>:
240193d2:	2000      	movs	r0, #0
240193d4:	4770      	bx	lr

240193d6 <__swrite>:
240193d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
240193da:	461f      	mov	r7, r3
240193dc:	898b      	ldrh	r3, [r1, #12]
240193de:	05db      	lsls	r3, r3, #23
240193e0:	4605      	mov	r5, r0
240193e2:	460c      	mov	r4, r1
240193e4:	4616      	mov	r6, r2
240193e6:	d505      	bpl.n	240193f4 <__swrite+0x1e>
240193e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
240193ec:	2302      	movs	r3, #2
240193ee:	2200      	movs	r2, #0
240193f0:	f000 f8a2 	bl	24019538 <_lseek_r>
240193f4:	89a3      	ldrh	r3, [r4, #12]
240193f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
240193fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
240193fe:	81a3      	strh	r3, [r4, #12]
24019400:	4632      	mov	r2, r6
24019402:	463b      	mov	r3, r7
24019404:	4628      	mov	r0, r5
24019406:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
2401940a:	f000 b8b9 	b.w	24019580 <_write_r>

2401940e <__sseek>:
2401940e:	b510      	push	{r4, lr}
24019410:	460c      	mov	r4, r1
24019412:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
24019416:	f000 f88f 	bl	24019538 <_lseek_r>
2401941a:	1c43      	adds	r3, r0, #1
2401941c:	89a3      	ldrh	r3, [r4, #12]
2401941e:	bf15      	itete	ne
24019420:	6560      	strne	r0, [r4, #84]	; 0x54
24019422:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
24019426:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
2401942a:	81a3      	strheq	r3, [r4, #12]
2401942c:	bf18      	it	ne
2401942e:	81a3      	strhne	r3, [r4, #12]
24019430:	bd10      	pop	{r4, pc}

24019432 <__sclose>:
24019432:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
24019436:	f000 b819 	b.w	2401946c <_close_r>

2401943a <memcmp>:
2401943a:	b510      	push	{r4, lr}
2401943c:	3901      	subs	r1, #1
2401943e:	4402      	add	r2, r0
24019440:	4290      	cmp	r0, r2
24019442:	d101      	bne.n	24019448 <memcmp+0xe>
24019444:	2000      	movs	r0, #0
24019446:	e005      	b.n	24019454 <memcmp+0x1a>
24019448:	7803      	ldrb	r3, [r0, #0]
2401944a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
2401944e:	42a3      	cmp	r3, r4
24019450:	d001      	beq.n	24019456 <memcmp+0x1c>
24019452:	1b18      	subs	r0, r3, r4
24019454:	bd10      	pop	{r4, pc}
24019456:	3001      	adds	r0, #1
24019458:	e7f2      	b.n	24019440 <memcmp+0x6>

2401945a <memset>:
2401945a:	4402      	add	r2, r0
2401945c:	4603      	mov	r3, r0
2401945e:	4293      	cmp	r3, r2
24019460:	d100      	bne.n	24019464 <memset+0xa>
24019462:	4770      	bx	lr
24019464:	f803 1b01 	strb.w	r1, [r3], #1
24019468:	e7f9      	b.n	2401945e <memset+0x4>
	...

2401946c <_close_r>:
2401946c:	b538      	push	{r3, r4, r5, lr}
2401946e:	4d06      	ldr	r5, [pc, #24]	; (24019488 <_close_r+0x1c>)
24019470:	2300      	movs	r3, #0
24019472:	4604      	mov	r4, r0
24019474:	4608      	mov	r0, r1
24019476:	602b      	str	r3, [r5, #0]
24019478:	f7e9 fa18 	bl	240028ac <_close>
2401947c:	1c43      	adds	r3, r0, #1
2401947e:	d102      	bne.n	24019486 <_close_r+0x1a>
24019480:	682b      	ldr	r3, [r5, #0]
24019482:	b103      	cbz	r3, 24019486 <_close_r+0x1a>
24019484:	6023      	str	r3, [r4, #0]
24019486:	bd38      	pop	{r3, r4, r5, pc}
24019488:	240016ec 	.word	0x240016ec

2401948c <_reclaim_reent>:
2401948c:	4b29      	ldr	r3, [pc, #164]	; (24019534 <_reclaim_reent+0xa8>)
2401948e:	681b      	ldr	r3, [r3, #0]
24019490:	4283      	cmp	r3, r0
24019492:	b570      	push	{r4, r5, r6, lr}
24019494:	4604      	mov	r4, r0
24019496:	d04b      	beq.n	24019530 <_reclaim_reent+0xa4>
24019498:	69c3      	ldr	r3, [r0, #28]
2401949a:	b143      	cbz	r3, 240194ae <_reclaim_reent+0x22>
2401949c:	68db      	ldr	r3, [r3, #12]
2401949e:	2b00      	cmp	r3, #0
240194a0:	d144      	bne.n	2401952c <_reclaim_reent+0xa0>
240194a2:	69e3      	ldr	r3, [r4, #28]
240194a4:	6819      	ldr	r1, [r3, #0]
240194a6:	b111      	cbz	r1, 240194ae <_reclaim_reent+0x22>
240194a8:	4620      	mov	r0, r4
240194aa:	f000 f8b1 	bl	24019610 <_free_r>
240194ae:	6961      	ldr	r1, [r4, #20]
240194b0:	b111      	cbz	r1, 240194b8 <_reclaim_reent+0x2c>
240194b2:	4620      	mov	r0, r4
240194b4:	f000 f8ac 	bl	24019610 <_free_r>
240194b8:	69e1      	ldr	r1, [r4, #28]
240194ba:	b111      	cbz	r1, 240194c2 <_reclaim_reent+0x36>
240194bc:	4620      	mov	r0, r4
240194be:	f000 f8a7 	bl	24019610 <_free_r>
240194c2:	6b21      	ldr	r1, [r4, #48]	; 0x30
240194c4:	b111      	cbz	r1, 240194cc <_reclaim_reent+0x40>
240194c6:	4620      	mov	r0, r4
240194c8:	f000 f8a2 	bl	24019610 <_free_r>
240194cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
240194ce:	b111      	cbz	r1, 240194d6 <_reclaim_reent+0x4a>
240194d0:	4620      	mov	r0, r4
240194d2:	f000 f89d 	bl	24019610 <_free_r>
240194d6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
240194d8:	b111      	cbz	r1, 240194e0 <_reclaim_reent+0x54>
240194da:	4620      	mov	r0, r4
240194dc:	f000 f898 	bl	24019610 <_free_r>
240194e0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
240194e2:	b111      	cbz	r1, 240194ea <_reclaim_reent+0x5e>
240194e4:	4620      	mov	r0, r4
240194e6:	f000 f893 	bl	24019610 <_free_r>
240194ea:	6c61      	ldr	r1, [r4, #68]	; 0x44
240194ec:	b111      	cbz	r1, 240194f4 <_reclaim_reent+0x68>
240194ee:	4620      	mov	r0, r4
240194f0:	f000 f88e 	bl	24019610 <_free_r>
240194f4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
240194f6:	b111      	cbz	r1, 240194fe <_reclaim_reent+0x72>
240194f8:	4620      	mov	r0, r4
240194fa:	f000 f889 	bl	24019610 <_free_r>
240194fe:	6a23      	ldr	r3, [r4, #32]
24019500:	b1b3      	cbz	r3, 24019530 <_reclaim_reent+0xa4>
24019502:	4620      	mov	r0, r4
24019504:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
24019508:	4718      	bx	r3
2401950a:	5949      	ldr	r1, [r1, r5]
2401950c:	b941      	cbnz	r1, 24019520 <_reclaim_reent+0x94>
2401950e:	3504      	adds	r5, #4
24019510:	69e3      	ldr	r3, [r4, #28]
24019512:	2d80      	cmp	r5, #128	; 0x80
24019514:	68d9      	ldr	r1, [r3, #12]
24019516:	d1f8      	bne.n	2401950a <_reclaim_reent+0x7e>
24019518:	4620      	mov	r0, r4
2401951a:	f000 f879 	bl	24019610 <_free_r>
2401951e:	e7c0      	b.n	240194a2 <_reclaim_reent+0x16>
24019520:	680e      	ldr	r6, [r1, #0]
24019522:	4620      	mov	r0, r4
24019524:	f000 f874 	bl	24019610 <_free_r>
24019528:	4631      	mov	r1, r6
2401952a:	e7ef      	b.n	2401950c <_reclaim_reent+0x80>
2401952c:	2500      	movs	r5, #0
2401952e:	e7ef      	b.n	24019510 <_reclaim_reent+0x84>
24019530:	bd70      	pop	{r4, r5, r6, pc}
24019532:	bf00      	nop
24019534:	24000518 	.word	0x24000518

24019538 <_lseek_r>:
24019538:	b538      	push	{r3, r4, r5, lr}
2401953a:	4d07      	ldr	r5, [pc, #28]	; (24019558 <_lseek_r+0x20>)
2401953c:	4604      	mov	r4, r0
2401953e:	4608      	mov	r0, r1
24019540:	4611      	mov	r1, r2
24019542:	2200      	movs	r2, #0
24019544:	602a      	str	r2, [r5, #0]
24019546:	461a      	mov	r2, r3
24019548:	f7e9 f9d7 	bl	240028fa <_lseek>
2401954c:	1c43      	adds	r3, r0, #1
2401954e:	d102      	bne.n	24019556 <_lseek_r+0x1e>
24019550:	682b      	ldr	r3, [r5, #0]
24019552:	b103      	cbz	r3, 24019556 <_lseek_r+0x1e>
24019554:	6023      	str	r3, [r4, #0]
24019556:	bd38      	pop	{r3, r4, r5, pc}
24019558:	240016ec 	.word	0x240016ec

2401955c <_read_r>:
2401955c:	b538      	push	{r3, r4, r5, lr}
2401955e:	4d07      	ldr	r5, [pc, #28]	; (2401957c <_read_r+0x20>)
24019560:	4604      	mov	r4, r0
24019562:	4608      	mov	r0, r1
24019564:	4611      	mov	r1, r2
24019566:	2200      	movs	r2, #0
24019568:	602a      	str	r2, [r5, #0]
2401956a:	461a      	mov	r2, r3
2401956c:	f7e9 f965 	bl	2400283a <_read>
24019570:	1c43      	adds	r3, r0, #1
24019572:	d102      	bne.n	2401957a <_read_r+0x1e>
24019574:	682b      	ldr	r3, [r5, #0]
24019576:	b103      	cbz	r3, 2401957a <_read_r+0x1e>
24019578:	6023      	str	r3, [r4, #0]
2401957a:	bd38      	pop	{r3, r4, r5, pc}
2401957c:	240016ec 	.word	0x240016ec

24019580 <_write_r>:
24019580:	b538      	push	{r3, r4, r5, lr}
24019582:	4d07      	ldr	r5, [pc, #28]	; (240195a0 <_write_r+0x20>)
24019584:	4604      	mov	r4, r0
24019586:	4608      	mov	r0, r1
24019588:	4611      	mov	r1, r2
2401958a:	2200      	movs	r2, #0
2401958c:	602a      	str	r2, [r5, #0]
2401958e:	461a      	mov	r2, r3
24019590:	f7e9 f970 	bl	24002874 <_write>
24019594:	1c43      	adds	r3, r0, #1
24019596:	d102      	bne.n	2401959e <_write_r+0x1e>
24019598:	682b      	ldr	r3, [r5, #0]
2401959a:	b103      	cbz	r3, 2401959e <_write_r+0x1e>
2401959c:	6023      	str	r3, [r4, #0]
2401959e:	bd38      	pop	{r3, r4, r5, pc}
240195a0:	240016ec 	.word	0x240016ec

240195a4 <__errno>:
240195a4:	4b01      	ldr	r3, [pc, #4]	; (240195ac <__errno+0x8>)
240195a6:	6818      	ldr	r0, [r3, #0]
240195a8:	4770      	bx	lr
240195aa:	bf00      	nop
240195ac:	24000518 	.word	0x24000518

240195b0 <__libc_init_array>:
240195b0:	b570      	push	{r4, r5, r6, lr}
240195b2:	4d0d      	ldr	r5, [pc, #52]	; (240195e8 <__libc_init_array+0x38>)
240195b4:	4c0d      	ldr	r4, [pc, #52]	; (240195ec <__libc_init_array+0x3c>)
240195b6:	1b64      	subs	r4, r4, r5
240195b8:	10a4      	asrs	r4, r4, #2
240195ba:	2600      	movs	r6, #0
240195bc:	42a6      	cmp	r6, r4
240195be:	d109      	bne.n	240195d4 <__libc_init_array+0x24>
240195c0:	4d0b      	ldr	r5, [pc, #44]	; (240195f0 <__libc_init_array+0x40>)
240195c2:	4c0c      	ldr	r4, [pc, #48]	; (240195f4 <__libc_init_array+0x44>)
240195c4:	f000 f9f0 	bl	240199a8 <_init>
240195c8:	1b64      	subs	r4, r4, r5
240195ca:	10a4      	asrs	r4, r4, #2
240195cc:	2600      	movs	r6, #0
240195ce:	42a6      	cmp	r6, r4
240195d0:	d105      	bne.n	240195de <__libc_init_array+0x2e>
240195d2:	bd70      	pop	{r4, r5, r6, pc}
240195d4:	f855 3b04 	ldr.w	r3, [r5], #4
240195d8:	4798      	blx	r3
240195da:	3601      	adds	r6, #1
240195dc:	e7ee      	b.n	240195bc <__libc_init_array+0xc>
240195de:	f855 3b04 	ldr.w	r3, [r5], #4
240195e2:	4798      	blx	r3
240195e4:	3601      	adds	r6, #1
240195e6:	e7f2      	b.n	240195ce <__libc_init_array+0x1e>
240195e8:	240004a0 	.word	0x240004a0
240195ec:	240004a0 	.word	0x240004a0
240195f0:	240004a0 	.word	0x240004a0
240195f4:	240004a4 	.word	0x240004a4

240195f8 <__retarget_lock_init>:
240195f8:	4770      	bx	lr

240195fa <__retarget_lock_init_recursive>:
240195fa:	4770      	bx	lr

240195fc <__retarget_lock_close>:
240195fc:	4770      	bx	lr

240195fe <__retarget_lock_close_recursive>:
240195fe:	4770      	bx	lr

24019600 <__retarget_lock_acquire>:
24019600:	4770      	bx	lr

24019602 <__retarget_lock_acquire_recursive>:
24019602:	4770      	bx	lr

24019604 <__retarget_lock_try_acquire>:
24019604:	2001      	movs	r0, #1
24019606:	4770      	bx	lr

24019608 <__retarget_lock_try_acquire_recursive>:
24019608:	2001      	movs	r0, #1
2401960a:	4770      	bx	lr

2401960c <__retarget_lock_release>:
2401960c:	4770      	bx	lr

2401960e <__retarget_lock_release_recursive>:
2401960e:	4770      	bx	lr

24019610 <_free_r>:
24019610:	b537      	push	{r0, r1, r2, r4, r5, lr}
24019612:	2900      	cmp	r1, #0
24019614:	d044      	beq.n	240196a0 <_free_r+0x90>
24019616:	f851 3c04 	ldr.w	r3, [r1, #-4]
2401961a:	9001      	str	r0, [sp, #4]
2401961c:	2b00      	cmp	r3, #0
2401961e:	f1a1 0404 	sub.w	r4, r1, #4
24019622:	bfb8      	it	lt
24019624:	18e4      	addlt	r4, r4, r3
24019626:	f000 f8df 	bl	240197e8 <__malloc_lock>
2401962a:	4a1e      	ldr	r2, [pc, #120]	; (240196a4 <_free_r+0x94>)
2401962c:	9801      	ldr	r0, [sp, #4]
2401962e:	6813      	ldr	r3, [r2, #0]
24019630:	b933      	cbnz	r3, 24019640 <_free_r+0x30>
24019632:	6063      	str	r3, [r4, #4]
24019634:	6014      	str	r4, [r2, #0]
24019636:	b003      	add	sp, #12
24019638:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
2401963c:	f000 b8da 	b.w	240197f4 <__malloc_unlock>
24019640:	42a3      	cmp	r3, r4
24019642:	d908      	bls.n	24019656 <_free_r+0x46>
24019644:	6825      	ldr	r5, [r4, #0]
24019646:	1961      	adds	r1, r4, r5
24019648:	428b      	cmp	r3, r1
2401964a:	bf01      	itttt	eq
2401964c:	6819      	ldreq	r1, [r3, #0]
2401964e:	685b      	ldreq	r3, [r3, #4]
24019650:	1949      	addeq	r1, r1, r5
24019652:	6021      	streq	r1, [r4, #0]
24019654:	e7ed      	b.n	24019632 <_free_r+0x22>
24019656:	461a      	mov	r2, r3
24019658:	685b      	ldr	r3, [r3, #4]
2401965a:	b10b      	cbz	r3, 24019660 <_free_r+0x50>
2401965c:	42a3      	cmp	r3, r4
2401965e:	d9fa      	bls.n	24019656 <_free_r+0x46>
24019660:	6811      	ldr	r1, [r2, #0]
24019662:	1855      	adds	r5, r2, r1
24019664:	42a5      	cmp	r5, r4
24019666:	d10b      	bne.n	24019680 <_free_r+0x70>
24019668:	6824      	ldr	r4, [r4, #0]
2401966a:	4421      	add	r1, r4
2401966c:	1854      	adds	r4, r2, r1
2401966e:	42a3      	cmp	r3, r4
24019670:	6011      	str	r1, [r2, #0]
24019672:	d1e0      	bne.n	24019636 <_free_r+0x26>
24019674:	681c      	ldr	r4, [r3, #0]
24019676:	685b      	ldr	r3, [r3, #4]
24019678:	6053      	str	r3, [r2, #4]
2401967a:	440c      	add	r4, r1
2401967c:	6014      	str	r4, [r2, #0]
2401967e:	e7da      	b.n	24019636 <_free_r+0x26>
24019680:	d902      	bls.n	24019688 <_free_r+0x78>
24019682:	230c      	movs	r3, #12
24019684:	6003      	str	r3, [r0, #0]
24019686:	e7d6      	b.n	24019636 <_free_r+0x26>
24019688:	6825      	ldr	r5, [r4, #0]
2401968a:	1961      	adds	r1, r4, r5
2401968c:	428b      	cmp	r3, r1
2401968e:	bf04      	itt	eq
24019690:	6819      	ldreq	r1, [r3, #0]
24019692:	685b      	ldreq	r3, [r3, #4]
24019694:	6063      	str	r3, [r4, #4]
24019696:	bf04      	itt	eq
24019698:	1949      	addeq	r1, r1, r5
2401969a:	6021      	streq	r1, [r4, #0]
2401969c:	6054      	str	r4, [r2, #4]
2401969e:	e7ca      	b.n	24019636 <_free_r+0x26>
240196a0:	b003      	add	sp, #12
240196a2:	bd30      	pop	{r4, r5, pc}
240196a4:	240016f8 	.word	0x240016f8

240196a8 <sbrk_aligned>:
240196a8:	b570      	push	{r4, r5, r6, lr}
240196aa:	4e0e      	ldr	r6, [pc, #56]	; (240196e4 <sbrk_aligned+0x3c>)
240196ac:	460c      	mov	r4, r1
240196ae:	6831      	ldr	r1, [r6, #0]
240196b0:	4605      	mov	r5, r0
240196b2:	b911      	cbnz	r1, 240196ba <sbrk_aligned+0x12>
240196b4:	f000 f966 	bl	24019984 <_sbrk_r>
240196b8:	6030      	str	r0, [r6, #0]
240196ba:	4621      	mov	r1, r4
240196bc:	4628      	mov	r0, r5
240196be:	f000 f961 	bl	24019984 <_sbrk_r>
240196c2:	1c43      	adds	r3, r0, #1
240196c4:	d00a      	beq.n	240196dc <sbrk_aligned+0x34>
240196c6:	1cc4      	adds	r4, r0, #3
240196c8:	f024 0403 	bic.w	r4, r4, #3
240196cc:	42a0      	cmp	r0, r4
240196ce:	d007      	beq.n	240196e0 <sbrk_aligned+0x38>
240196d0:	1a21      	subs	r1, r4, r0
240196d2:	4628      	mov	r0, r5
240196d4:	f000 f956 	bl	24019984 <_sbrk_r>
240196d8:	3001      	adds	r0, #1
240196da:	d101      	bne.n	240196e0 <sbrk_aligned+0x38>
240196dc:	f04f 34ff 	mov.w	r4, #4294967295
240196e0:	4620      	mov	r0, r4
240196e2:	bd70      	pop	{r4, r5, r6, pc}
240196e4:	240016fc 	.word	0x240016fc

240196e8 <_malloc_r>:
240196e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
240196ec:	1ccd      	adds	r5, r1, #3
240196ee:	f025 0503 	bic.w	r5, r5, #3
240196f2:	3508      	adds	r5, #8
240196f4:	2d0c      	cmp	r5, #12
240196f6:	bf38      	it	cc
240196f8:	250c      	movcc	r5, #12
240196fa:	2d00      	cmp	r5, #0
240196fc:	4607      	mov	r7, r0
240196fe:	db01      	blt.n	24019704 <_malloc_r+0x1c>
24019700:	42a9      	cmp	r1, r5
24019702:	d905      	bls.n	24019710 <_malloc_r+0x28>
24019704:	230c      	movs	r3, #12
24019706:	603b      	str	r3, [r7, #0]
24019708:	2600      	movs	r6, #0
2401970a:	4630      	mov	r0, r6
2401970c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
24019710:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 240197e4 <_malloc_r+0xfc>
24019714:	f000 f868 	bl	240197e8 <__malloc_lock>
24019718:	f8d8 3000 	ldr.w	r3, [r8]
2401971c:	461c      	mov	r4, r3
2401971e:	bb5c      	cbnz	r4, 24019778 <_malloc_r+0x90>
24019720:	4629      	mov	r1, r5
24019722:	4638      	mov	r0, r7
24019724:	f7ff ffc0 	bl	240196a8 <sbrk_aligned>
24019728:	1c43      	adds	r3, r0, #1
2401972a:	4604      	mov	r4, r0
2401972c:	d155      	bne.n	240197da <_malloc_r+0xf2>
2401972e:	f8d8 4000 	ldr.w	r4, [r8]
24019732:	4626      	mov	r6, r4
24019734:	2e00      	cmp	r6, #0
24019736:	d145      	bne.n	240197c4 <_malloc_r+0xdc>
24019738:	2c00      	cmp	r4, #0
2401973a:	d048      	beq.n	240197ce <_malloc_r+0xe6>
2401973c:	6823      	ldr	r3, [r4, #0]
2401973e:	4631      	mov	r1, r6
24019740:	4638      	mov	r0, r7
24019742:	eb04 0903 	add.w	r9, r4, r3
24019746:	f000 f91d 	bl	24019984 <_sbrk_r>
2401974a:	4581      	cmp	r9, r0
2401974c:	d13f      	bne.n	240197ce <_malloc_r+0xe6>
2401974e:	6821      	ldr	r1, [r4, #0]
24019750:	1a6d      	subs	r5, r5, r1
24019752:	4629      	mov	r1, r5
24019754:	4638      	mov	r0, r7
24019756:	f7ff ffa7 	bl	240196a8 <sbrk_aligned>
2401975a:	3001      	adds	r0, #1
2401975c:	d037      	beq.n	240197ce <_malloc_r+0xe6>
2401975e:	6823      	ldr	r3, [r4, #0]
24019760:	442b      	add	r3, r5
24019762:	6023      	str	r3, [r4, #0]
24019764:	f8d8 3000 	ldr.w	r3, [r8]
24019768:	2b00      	cmp	r3, #0
2401976a:	d038      	beq.n	240197de <_malloc_r+0xf6>
2401976c:	685a      	ldr	r2, [r3, #4]
2401976e:	42a2      	cmp	r2, r4
24019770:	d12b      	bne.n	240197ca <_malloc_r+0xe2>
24019772:	2200      	movs	r2, #0
24019774:	605a      	str	r2, [r3, #4]
24019776:	e00f      	b.n	24019798 <_malloc_r+0xb0>
24019778:	6822      	ldr	r2, [r4, #0]
2401977a:	1b52      	subs	r2, r2, r5
2401977c:	d41f      	bmi.n	240197be <_malloc_r+0xd6>
2401977e:	2a0b      	cmp	r2, #11
24019780:	d917      	bls.n	240197b2 <_malloc_r+0xca>
24019782:	1961      	adds	r1, r4, r5
24019784:	42a3      	cmp	r3, r4
24019786:	6025      	str	r5, [r4, #0]
24019788:	bf18      	it	ne
2401978a:	6059      	strne	r1, [r3, #4]
2401978c:	6863      	ldr	r3, [r4, #4]
2401978e:	bf08      	it	eq
24019790:	f8c8 1000 	streq.w	r1, [r8]
24019794:	5162      	str	r2, [r4, r5]
24019796:	604b      	str	r3, [r1, #4]
24019798:	4638      	mov	r0, r7
2401979a:	f104 060b 	add.w	r6, r4, #11
2401979e:	f000 f829 	bl	240197f4 <__malloc_unlock>
240197a2:	f026 0607 	bic.w	r6, r6, #7
240197a6:	1d23      	adds	r3, r4, #4
240197a8:	1af2      	subs	r2, r6, r3
240197aa:	d0ae      	beq.n	2401970a <_malloc_r+0x22>
240197ac:	1b9b      	subs	r3, r3, r6
240197ae:	50a3      	str	r3, [r4, r2]
240197b0:	e7ab      	b.n	2401970a <_malloc_r+0x22>
240197b2:	42a3      	cmp	r3, r4
240197b4:	6862      	ldr	r2, [r4, #4]
240197b6:	d1dd      	bne.n	24019774 <_malloc_r+0x8c>
240197b8:	f8c8 2000 	str.w	r2, [r8]
240197bc:	e7ec      	b.n	24019798 <_malloc_r+0xb0>
240197be:	4623      	mov	r3, r4
240197c0:	6864      	ldr	r4, [r4, #4]
240197c2:	e7ac      	b.n	2401971e <_malloc_r+0x36>
240197c4:	4634      	mov	r4, r6
240197c6:	6876      	ldr	r6, [r6, #4]
240197c8:	e7b4      	b.n	24019734 <_malloc_r+0x4c>
240197ca:	4613      	mov	r3, r2
240197cc:	e7cc      	b.n	24019768 <_malloc_r+0x80>
240197ce:	230c      	movs	r3, #12
240197d0:	603b      	str	r3, [r7, #0]
240197d2:	4638      	mov	r0, r7
240197d4:	f000 f80e 	bl	240197f4 <__malloc_unlock>
240197d8:	e797      	b.n	2401970a <_malloc_r+0x22>
240197da:	6025      	str	r5, [r4, #0]
240197dc:	e7dc      	b.n	24019798 <_malloc_r+0xb0>
240197de:	605b      	str	r3, [r3, #4]
240197e0:	deff      	udf	#255	; 0xff
240197e2:	bf00      	nop
240197e4:	240016f8 	.word	0x240016f8

240197e8 <__malloc_lock>:
240197e8:	4801      	ldr	r0, [pc, #4]	; (240197f0 <__malloc_lock+0x8>)
240197ea:	f7ff bf0a 	b.w	24019602 <__retarget_lock_acquire_recursive>
240197ee:	bf00      	nop
240197f0:	240016f5 	.word	0x240016f5

240197f4 <__malloc_unlock>:
240197f4:	4801      	ldr	r0, [pc, #4]	; (240197fc <__malloc_unlock+0x8>)
240197f6:	f7ff bf0a 	b.w	2401960e <__retarget_lock_release_recursive>
240197fa:	bf00      	nop
240197fc:	240016f5 	.word	0x240016f5

24019800 <__sflush_r>:
24019800:	898a      	ldrh	r2, [r1, #12]
24019802:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
24019806:	4605      	mov	r5, r0
24019808:	0710      	lsls	r0, r2, #28
2401980a:	460c      	mov	r4, r1
2401980c:	d458      	bmi.n	240198c0 <__sflush_r+0xc0>
2401980e:	684b      	ldr	r3, [r1, #4]
24019810:	2b00      	cmp	r3, #0
24019812:	dc05      	bgt.n	24019820 <__sflush_r+0x20>
24019814:	6c0b      	ldr	r3, [r1, #64]	; 0x40
24019816:	2b00      	cmp	r3, #0
24019818:	dc02      	bgt.n	24019820 <__sflush_r+0x20>
2401981a:	2000      	movs	r0, #0
2401981c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
24019820:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
24019822:	2e00      	cmp	r6, #0
24019824:	d0f9      	beq.n	2401981a <__sflush_r+0x1a>
24019826:	2300      	movs	r3, #0
24019828:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
2401982c:	682f      	ldr	r7, [r5, #0]
2401982e:	6a21      	ldr	r1, [r4, #32]
24019830:	602b      	str	r3, [r5, #0]
24019832:	d032      	beq.n	2401989a <__sflush_r+0x9a>
24019834:	6d60      	ldr	r0, [r4, #84]	; 0x54
24019836:	89a3      	ldrh	r3, [r4, #12]
24019838:	075a      	lsls	r2, r3, #29
2401983a:	d505      	bpl.n	24019848 <__sflush_r+0x48>
2401983c:	6863      	ldr	r3, [r4, #4]
2401983e:	1ac0      	subs	r0, r0, r3
24019840:	6b63      	ldr	r3, [r4, #52]	; 0x34
24019842:	b10b      	cbz	r3, 24019848 <__sflush_r+0x48>
24019844:	6c23      	ldr	r3, [r4, #64]	; 0x40
24019846:	1ac0      	subs	r0, r0, r3
24019848:	2300      	movs	r3, #0
2401984a:	4602      	mov	r2, r0
2401984c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
2401984e:	6a21      	ldr	r1, [r4, #32]
24019850:	4628      	mov	r0, r5
24019852:	47b0      	blx	r6
24019854:	1c43      	adds	r3, r0, #1
24019856:	89a3      	ldrh	r3, [r4, #12]
24019858:	d106      	bne.n	24019868 <__sflush_r+0x68>
2401985a:	6829      	ldr	r1, [r5, #0]
2401985c:	291d      	cmp	r1, #29
2401985e:	d82b      	bhi.n	240198b8 <__sflush_r+0xb8>
24019860:	4a29      	ldr	r2, [pc, #164]	; (24019908 <__sflush_r+0x108>)
24019862:	410a      	asrs	r2, r1
24019864:	07d6      	lsls	r6, r2, #31
24019866:	d427      	bmi.n	240198b8 <__sflush_r+0xb8>
24019868:	2200      	movs	r2, #0
2401986a:	6062      	str	r2, [r4, #4]
2401986c:	04d9      	lsls	r1, r3, #19
2401986e:	6922      	ldr	r2, [r4, #16]
24019870:	6022      	str	r2, [r4, #0]
24019872:	d504      	bpl.n	2401987e <__sflush_r+0x7e>
24019874:	1c42      	adds	r2, r0, #1
24019876:	d101      	bne.n	2401987c <__sflush_r+0x7c>
24019878:	682b      	ldr	r3, [r5, #0]
2401987a:	b903      	cbnz	r3, 2401987e <__sflush_r+0x7e>
2401987c:	6560      	str	r0, [r4, #84]	; 0x54
2401987e:	6b61      	ldr	r1, [r4, #52]	; 0x34
24019880:	602f      	str	r7, [r5, #0]
24019882:	2900      	cmp	r1, #0
24019884:	d0c9      	beq.n	2401981a <__sflush_r+0x1a>
24019886:	f104 0344 	add.w	r3, r4, #68	; 0x44
2401988a:	4299      	cmp	r1, r3
2401988c:	d002      	beq.n	24019894 <__sflush_r+0x94>
2401988e:	4628      	mov	r0, r5
24019890:	f7ff febe 	bl	24019610 <_free_r>
24019894:	2000      	movs	r0, #0
24019896:	6360      	str	r0, [r4, #52]	; 0x34
24019898:	e7c0      	b.n	2401981c <__sflush_r+0x1c>
2401989a:	2301      	movs	r3, #1
2401989c:	4628      	mov	r0, r5
2401989e:	47b0      	blx	r6
240198a0:	1c41      	adds	r1, r0, #1
240198a2:	d1c8      	bne.n	24019836 <__sflush_r+0x36>
240198a4:	682b      	ldr	r3, [r5, #0]
240198a6:	2b00      	cmp	r3, #0
240198a8:	d0c5      	beq.n	24019836 <__sflush_r+0x36>
240198aa:	2b1d      	cmp	r3, #29
240198ac:	d001      	beq.n	240198b2 <__sflush_r+0xb2>
240198ae:	2b16      	cmp	r3, #22
240198b0:	d101      	bne.n	240198b6 <__sflush_r+0xb6>
240198b2:	602f      	str	r7, [r5, #0]
240198b4:	e7b1      	b.n	2401981a <__sflush_r+0x1a>
240198b6:	89a3      	ldrh	r3, [r4, #12]
240198b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
240198bc:	81a3      	strh	r3, [r4, #12]
240198be:	e7ad      	b.n	2401981c <__sflush_r+0x1c>
240198c0:	690f      	ldr	r7, [r1, #16]
240198c2:	2f00      	cmp	r7, #0
240198c4:	d0a9      	beq.n	2401981a <__sflush_r+0x1a>
240198c6:	0793      	lsls	r3, r2, #30
240198c8:	680e      	ldr	r6, [r1, #0]
240198ca:	bf08      	it	eq
240198cc:	694b      	ldreq	r3, [r1, #20]
240198ce:	600f      	str	r7, [r1, #0]
240198d0:	bf18      	it	ne
240198d2:	2300      	movne	r3, #0
240198d4:	eba6 0807 	sub.w	r8, r6, r7
240198d8:	608b      	str	r3, [r1, #8]
240198da:	f1b8 0f00 	cmp.w	r8, #0
240198de:	dd9c      	ble.n	2401981a <__sflush_r+0x1a>
240198e0:	6a21      	ldr	r1, [r4, #32]
240198e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
240198e4:	4643      	mov	r3, r8
240198e6:	463a      	mov	r2, r7
240198e8:	4628      	mov	r0, r5
240198ea:	47b0      	blx	r6
240198ec:	2800      	cmp	r0, #0
240198ee:	dc06      	bgt.n	240198fe <__sflush_r+0xfe>
240198f0:	89a3      	ldrh	r3, [r4, #12]
240198f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
240198f6:	81a3      	strh	r3, [r4, #12]
240198f8:	f04f 30ff 	mov.w	r0, #4294967295
240198fc:	e78e      	b.n	2401981c <__sflush_r+0x1c>
240198fe:	4407      	add	r7, r0
24019900:	eba8 0800 	sub.w	r8, r8, r0
24019904:	e7e9      	b.n	240198da <__sflush_r+0xda>
24019906:	bf00      	nop
24019908:	dfbffffe 	.word	0xdfbffffe

2401990c <_fflush_r>:
2401990c:	b538      	push	{r3, r4, r5, lr}
2401990e:	690b      	ldr	r3, [r1, #16]
24019910:	4605      	mov	r5, r0
24019912:	460c      	mov	r4, r1
24019914:	b913      	cbnz	r3, 2401991c <_fflush_r+0x10>
24019916:	2500      	movs	r5, #0
24019918:	4628      	mov	r0, r5
2401991a:	bd38      	pop	{r3, r4, r5, pc}
2401991c:	b118      	cbz	r0, 24019926 <_fflush_r+0x1a>
2401991e:	6a03      	ldr	r3, [r0, #32]
24019920:	b90b      	cbnz	r3, 24019926 <_fflush_r+0x1a>
24019922:	f7ff fcf3 	bl	2401930c <__sinit>
24019926:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
2401992a:	2b00      	cmp	r3, #0
2401992c:	d0f3      	beq.n	24019916 <_fflush_r+0xa>
2401992e:	6e62      	ldr	r2, [r4, #100]	; 0x64
24019930:	07d0      	lsls	r0, r2, #31
24019932:	d404      	bmi.n	2401993e <_fflush_r+0x32>
24019934:	0599      	lsls	r1, r3, #22
24019936:	d402      	bmi.n	2401993e <_fflush_r+0x32>
24019938:	6da0      	ldr	r0, [r4, #88]	; 0x58
2401993a:	f7ff fe62 	bl	24019602 <__retarget_lock_acquire_recursive>
2401993e:	4628      	mov	r0, r5
24019940:	4621      	mov	r1, r4
24019942:	f7ff ff5d 	bl	24019800 <__sflush_r>
24019946:	6e63      	ldr	r3, [r4, #100]	; 0x64
24019948:	07da      	lsls	r2, r3, #31
2401994a:	4605      	mov	r5, r0
2401994c:	d4e4      	bmi.n	24019918 <_fflush_r+0xc>
2401994e:	89a3      	ldrh	r3, [r4, #12]
24019950:	059b      	lsls	r3, r3, #22
24019952:	d4e1      	bmi.n	24019918 <_fflush_r+0xc>
24019954:	6da0      	ldr	r0, [r4, #88]	; 0x58
24019956:	f7ff fe5a 	bl	2401960e <__retarget_lock_release_recursive>
2401995a:	e7dd      	b.n	24019918 <_fflush_r+0xc>

2401995c <fflush>:
2401995c:	4601      	mov	r1, r0
2401995e:	b920      	cbnz	r0, 2401996a <fflush+0xe>
24019960:	4a04      	ldr	r2, [pc, #16]	; (24019974 <fflush+0x18>)
24019962:	4905      	ldr	r1, [pc, #20]	; (24019978 <fflush+0x1c>)
24019964:	4805      	ldr	r0, [pc, #20]	; (2401997c <fflush+0x20>)
24019966:	f7ff bd05 	b.w	24019374 <_fwalk_sglue>
2401996a:	4b05      	ldr	r3, [pc, #20]	; (24019980 <fflush+0x24>)
2401996c:	6818      	ldr	r0, [r3, #0]
2401996e:	f7ff bfcd 	b.w	2401990c <_fflush_r>
24019972:	bf00      	nop
24019974:	240004c0 	.word	0x240004c0
24019978:	2401990d 	.word	0x2401990d
2401997c:	240004cc 	.word	0x240004cc
24019980:	24000518 	.word	0x24000518

24019984 <_sbrk_r>:
24019984:	b538      	push	{r3, r4, r5, lr}
24019986:	4d06      	ldr	r5, [pc, #24]	; (240199a0 <_sbrk_r+0x1c>)
24019988:	2300      	movs	r3, #0
2401998a:	4604      	mov	r4, r0
2401998c:	4608      	mov	r0, r1
2401998e:	602b      	str	r3, [r5, #0]
24019990:	f7e9 f834 	bl	240029fc <_sbrk>
24019994:	1c43      	adds	r3, r0, #1
24019996:	d102      	bne.n	2401999e <_sbrk_r+0x1a>
24019998:	682b      	ldr	r3, [r5, #0]
2401999a:	b103      	cbz	r3, 2401999e <_sbrk_r+0x1a>
2401999c:	6023      	str	r3, [r4, #0]
2401999e:	bd38      	pop	{r3, r4, r5, pc}
240199a0:	240016ec 	.word	0x240016ec

240199a4 <__EH_FRAME_BEGIN__>:
240199a4:	00000000                                ....

240199a8 <_init>:
240199a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
240199aa:	bf00      	nop
240199ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
240199ae:	bc08      	pop	{r3}
240199b0:	469e      	mov	lr, r3
240199b2:	4770      	bx	lr

240199b4 <_fini>:
240199b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
240199b6:	bf00      	nop
240199b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
240199ba:	bc08      	pop	{r3}
240199bc:	469e      	mov	lr, r3
240199be:	4770      	bx	lr
